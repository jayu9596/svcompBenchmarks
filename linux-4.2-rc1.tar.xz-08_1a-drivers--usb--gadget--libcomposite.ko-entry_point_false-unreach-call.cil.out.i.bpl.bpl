var $M.0: [ref]i8;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]i24;

var $M.28: [ref]i8;

var $M.29: i32;

var $M.33: [ref]i8;

var $M.34: [ref]i16;

var $M.35: [ref]ref;

var $M.36: [ref]i16;

var $M.37: [ref]i8;

var $M.38: [ref]i8;

var $M.39: [ref]i16;

var $M.40: [ref]ref;

var $M.41: [ref]i8;

var $M.42: ref;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: ref;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: ref;

var $M.53: ref;

var $M.54: ref;

var $M.55: ref;

var $M.56: ref;

var $M.57: ref;

var $M.58: ref;

var $M.59: ref;

var $M.60: ref;

var $M.61: ref;

var $M.62: ref;

var $M.63: ref;

var $M.64: ref;

var $M.65: ref;

var $M.66: ref;

var $M.67: ref;

var $M.68: ref;

var $M.69: ref;

var $M.70: ref;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: ref;

var $M.76: ref;

var $M.77: ref;

var $M.78: ref;

var $M.79: ref;

var $M.80: ref;

var $M.81: ref;

var $M.82: ref;

var $M.83: ref;

var $M.84: ref;

var $M.85: ref;

var $M.86: ref;

var $M.87: ref;

var $M.88: ref;

var $M.89: ref;

var $M.90: ref;

var $M.91: ref;

var $M.92: ref;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.104: i32;

var $M.105: i32;

var $M.106: i32;

var $M.107: i32;

var $M.108: i32;

var $M.109: i32;

var $M.110: i32;

var $M.111: i32;

var $M.112: i32;

var $M.113: i32;

var $M.114: i32;

var $M.115: i32;

var $M.116: i32;

var $M.117: i32;

var $M.118: i32;

var $M.119: i32;

var $M.120: i32;

var $M.121: i32;

var $M.122: i32;

var $M.123: i32;

var $M.124: i32;

var $M.125: i32;

var $M.126: i32;

var $M.127: i32;

var $M.128: i32;

var $M.129: i32;

var $M.130: i32;

var $M.131: i32;

var $M.132: i32;

var $M.136: [ref]i8;

var $M.137: [ref]i8;

var $M.138: [ref]i8;

var $M.139: [ref]i8;

var $M.140: [ref]i8;

var $M.141: [ref]i8;

var $M.142: [ref]i8;

var $M.143: [ref]i8;

var $M.144: [ref]i8;

var $M.145: [ref]i8;

var $M.146: [ref]i8;

var $M.147: [ref]i8;

var $M.148: [ref]i8;

var $M.149: [ref]i8;

var $M.150: [ref]i8;

var $M.151: [ref]i8;

var $M.152: [ref]i8;

var $M.153: [ref]i8;

var $M.154: [ref]i8;

var $M.155: [ref]i8;

var $M.156: [ref]i8;

var $M.157: [ref]i8;

var $M.158: [ref]i8;

var $M.159: [ref]i8;

var $M.160: [ref]i8;

var $M.161: [ref]i8;

var $M.162: [ref]i8;

var $M.163: [ref]i8;

var $M.164: [ref]i8;

var $M.165: [ref]i8;

var $M.166: [ref]i8;

var $M.167: [ref]i8;

var $M.168: [ref]i8;

var $M.169: [ref]i8;

var $M.170: [ref]i8;

var $M.237: [ref]i8;

var $M.238: [ref]i8;

var $M.239: [ref]i8;

var $M.240: [ref]i8;

var $M.241: [ref]i8;

var $M.242: [ref]i8;

var $M.243: [ref]i8;

var $M.244: [ref]i8;

var $M.245: [ref]i8;

var $M.246: [ref]i8;

var $M.247: [ref]i8;

var $M.248: [ref]i8;

var $M.249: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 792668);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_usb_gadget_get_string: ref;

axiom __ksymtab_usb_gadget_get_string == $sub.ref(0, 2068);

const {:count 22} __kstrtab_usb_gadget_get_string: ref;

axiom __kstrtab_usb_gadget_get_string == $sub.ref(0, 3114);

const {:count 13} __kstrtab_alloc_ep_req: ref;

axiom __kstrtab_alloc_ep_req == $sub.ref(0, 4151);

const gadget_config_name_strings_ops: ref;

axiom gadget_config_name_strings_ops == $sub.ref(0, 5215);

const gadget_config_name_strings_type: ref;

axiom gadget_config_name_strings_type == $sub.ref(0, 6271);

const gadget_usb_cfg_bmAttributes: ref;

axiom gadget_usb_cfg_bmAttributes == $sub.ref(0, 7335);

const gadget_usb_cfg_MaxPower: ref;

axiom gadget_usb_cfg_MaxPower == $sub.ref(0, 8399);

const {:count 3} gadget_config_attrs: ref;

axiom gadget_config_attrs == $sub.ref(0, 9447);

const gadget_config_item_ops: ref;

axiom gadget_config_item_ops == $sub.ref(0, 10511);

const gadget_config_type: ref;

axiom gadget_config_type == $sub.ref(0, 11567);

const ext_prop_data: ref;

axiom ext_prop_data == $sub.ref(0, 12631);

const ext_prop_type: ref;

axiom ext_prop_type == $sub.ref(0, 13695);

const {:count 3} ext_prop_attrs: ref;

axiom ext_prop_attrs == $sub.ref(0, 14743);

const ext_prop_ops: ref;

axiom ext_prop_ops == $sub.ref(0, 15807);

const gadgets_ops: ref;

axiom gadgets_ops == $sub.ref(0, 16871);

const gadgets_type: ref;

axiom gadgets_type == $sub.ref(0, 17927);

const gadget_subsys: ref;

axiom gadget_subsys == $sub.ref(0, 19223);

const gadget_strings_serialnumber: ref;

axiom gadget_strings_serialnumber == $sub.ref(0, 20287);

const gadget_strings_product: ref;

axiom gadget_strings_product == $sub.ref(0, 21351);

const gadget_strings_manufacturer: ref;

axiom gadget_strings_manufacturer == $sub.ref(0, 22415);

const {:count 4} gadget_strings_langid_attrs: ref;

axiom gadget_strings_langid_attrs == $sub.ref(0, 23471);

const gadget_strings_langid_item_ops: ref;

axiom gadget_strings_langid_item_ops == $sub.ref(0, 24535);

const gadget_strings_langid_type: ref;

axiom gadget_strings_langid_type == $sub.ref(0, 25591);

const gadget_config_name_configuration: ref;

axiom gadget_config_name_configuration == $sub.ref(0, 26655);

const {:count 2} gadget_config_name_langid_attrs: ref;

axiom gadget_config_name_langid_attrs == $sub.ref(0, 27695);

const gadget_config_name_langid_item_ops: ref;

axiom gadget_config_name_langid_item_ops == $sub.ref(0, 28759);

const gadget_config_name_langid_type: ref;

axiom gadget_config_name_langid_type == $sub.ref(0, 29815);

const gadget_cdev_desc_UDC: ref;

axiom gadget_cdev_desc_UDC == $sub.ref(0, 30879);

const gadget_cdev_desc_bcdUSB: ref;

axiom gadget_cdev_desc_bcdUSB == $sub.ref(0, 31943);

const gadget_cdev_desc_bcdDevice: ref;

axiom gadget_cdev_desc_bcdDevice == $sub.ref(0, 33007);

const gadget_cdev_desc_idProduct: ref;

axiom gadget_cdev_desc_idProduct == $sub.ref(0, 34071);

const gadget_cdev_desc_idVendor: ref;

axiom gadget_cdev_desc_idVendor == $sub.ref(0, 35135);

const gadget_cdev_desc_bMaxPacketSize0: ref;

axiom gadget_cdev_desc_bMaxPacketSize0 == $sub.ref(0, 36199);

const gadget_cdev_desc_bDeviceProtocol: ref;

axiom gadget_cdev_desc_bDeviceProtocol == $sub.ref(0, 37263);

const gadget_cdev_desc_bDeviceSubClass: ref;

axiom gadget_cdev_desc_bDeviceSubClass == $sub.ref(0, 38327);

const gadget_cdev_desc_bDeviceClass: ref;

axiom gadget_cdev_desc_bDeviceClass == $sub.ref(0, 39391);

const {:count 10} gadget_root_attrs: ref;

axiom gadget_root_attrs == $sub.ref(0, 40495);

const gadget_root_item_ops: ref;

axiom gadget_root_item_ops == $sub.ref(0, 41559);

const gadget_root_type: ref;

axiom gadget_root_type == $sub.ref(0, 42615);

const configfs_driver_template: ref;

axiom configfs_driver_template == $sub.ref(0, 43831);

const os_desc_qw_sign: ref;

axiom os_desc_qw_sign == $sub.ref(0, 44895);

const os_desc_b_vendor_code: ref;

axiom os_desc_b_vendor_code == $sub.ref(0, 45959);

const os_desc_use: ref;

axiom os_desc_use == $sub.ref(0, 47023);

const {:count 4} os_desc_attrs: ref;

axiom os_desc_attrs == $sub.ref(0, 48079);

const os_desc_ops: ref;

axiom os_desc_ops == $sub.ref(0, 49143);

const os_desc_type: ref;

axiom os_desc_type == $sub.ref(0, 50199);

const gadget_strings_strings_ops: ref;

axiom gadget_strings_strings_ops == $sub.ref(0, 51263);

const gadget_strings_strings_type: ref;

axiom gadget_strings_strings_type == $sub.ref(0, 52319);

const config_desc_ops: ref;

axiom config_desc_ops == $sub.ref(0, 53383);

const config_desc_type: ref;

axiom config_desc_type == $sub.ref(0, 54439);

const functions_ops: ref;

axiom functions_ops == $sub.ref(0, 55503);

const functions_type: ref;

axiom functions_type == $sub.ref(0, 56559);

const {:count 23} __kstrtab_unregister_gadget_item: ref;

axiom __kstrtab_unregister_gadget_item == $sub.ref(0, 57606);

const {:count 31} __kstrtab_usb_os_desc_prepare_interf_dir: ref;

axiom __kstrtab_usb_os_desc_prepare_interf_dir == $sub.ref(0, 58661);

const interf_grp_attr_sub_compatible_id: ref;

axiom interf_grp_attr_sub_compatible_id == $sub.ref(0, 59725);

const interf_grp_attr_compatible_id: ref;

axiom interf_grp_attr_compatible_id == $sub.ref(0, 60789);

const {:count 3} interf_grp_attrs: ref;

axiom interf_grp_attrs == $sub.ref(0, 61837);

const interf_grp_ops: ref;

axiom interf_grp_ops == $sub.ref(0, 62901);

const interf_item_ops: ref;

axiom interf_item_ops == $sub.ref(0, 63965);

const {:count 24} __kstrtab_usb_function_unregister: ref;

axiom __kstrtab_usb_function_unregister == $sub.ref(0, 65013);

const {:count 22} __kstrtab_usb_function_register: ref;

axiom __kstrtab_usb_function_register == $sub.ref(0, 66059);

const func_list: ref;

axiom func_list == $sub.ref(0, 67099);

const func_lock: ref;

axiom func_lock == $sub.ref(0, 68283);

const {:count 17} __kstrtab_usb_put_function: ref;

axiom __kstrtab_usb_put_function == $sub.ref(0, 69324);

const {:count 26} __kstrtab_usb_put_function_instance: ref;

axiom __kstrtab_usb_put_function_instance == $sub.ref(0, 70374);

const {:count 17} __kstrtab_usb_get_function: ref;

axiom __kstrtab_usb_get_function == $sub.ref(0, 71415);

const {:count 26} __kstrtab_usb_get_function_instance: ref;

axiom __kstrtab_usb_get_function_instance == $sub.ref(0, 72465);

const {:count 32} __kstrtab_usb_composite_overwrite_options: ref;

axiom __kstrtab_usb_composite_overwrite_options == $sub.ref(0, 73521);

const {:count 29} __kstrtab_usb_composite_setup_continue: ref;

axiom __kstrtab_usb_composite_setup_continue == $sub.ref(0, 74574);

const {:count 25} __kstrtab_usb_composite_unregister: ref;

axiom __kstrtab_usb_composite_unregister == $sub.ref(0, 75623);

const {:count 20} __kstrtab_usb_composite_probe: ref;

axiom __kstrtab_usb_composite_probe == $sub.ref(0, 76667);

const composite_driver_template: ref;

axiom composite_driver_template == $sub.ref(0, 77883);

const dev_attr_suspended: ref;

axiom dev_attr_suspended == $sub.ref(0, 78955);

const {:count 17} __kstrtab_usb_string_ids_n: ref;

axiom __kstrtab_usb_string_ids_n == $sub.ref(0, 79996);

const {:count 20} __kstrtab_usb_gstrings_attach: ref;

axiom __kstrtab_usb_gstrings_attach == $sub.ref(0, 81040);

const {:count 19} __kstrtab_usb_string_ids_tab: ref;

axiom __kstrtab_usb_string_ids_tab == $sub.ref(0, 82083);

const {:count 14} __kstrtab_usb_string_id: ref;

axiom __kstrtab_usb_string_id == $sub.ref(0, 83121);

const {:count 15} __kstrtab_usb_add_config: ref;

axiom __kstrtab_usb_add_config == $sub.ref(0, 84160);

const {:count 20} __kstrtab_usb_add_config_only: ref;

axiom __kstrtab_usb_add_config_only == $sub.ref(0, 85204);

const {:count 17} __kstrtab_usb_interface_id: ref;

axiom __kstrtab_usb_interface_id == $sub.ref(0, 86245);

const {:count 22} __kstrtab_usb_function_activate: ref;

axiom __kstrtab_usb_function_activate == $sub.ref(0, 87291);

const {:count 24} __kstrtab_usb_function_deactivate: ref;

axiom __kstrtab_usb_function_deactivate == $sub.ref(0, 88339);

const {:count 20} __kstrtab_usb_remove_function: ref;

axiom __kstrtab_usb_remove_function == $sub.ref(0, 89383);

const {:count 17} __kstrtab_usb_add_function: ref;

axiom __kstrtab_usb_add_function == $sub.ref(0, 90424);

const {:count 19} __kstrtab_config_ep_by_speed: ref;

axiom __kstrtab_config_ep_by_speed == $sub.ref(0, 91467);

const {:count 24} __kstrtab_usb_ep_autoconfig_reset: ref;

axiom __kstrtab_usb_ep_autoconfig_reset == $sub.ref(0, 92515);

const {:count 18} __kstrtab_usb_ep_autoconfig: ref;

axiom __kstrtab_usb_ep_autoconfig == $sub.ref(0, 93557);

const {:count 21} __kstrtab_usb_ep_autoconfig_ss: ref;

axiom __kstrtab_usb_ep_autoconfig_ss == $sub.ref(0, 94602);

const {:count 25} __kstrtab_usb_free_all_descriptors: ref;

axiom __kstrtab_usb_free_all_descriptors == $sub.ref(0, 95651);

const {:count 23} __kstrtab_usb_assign_descriptors: ref;

axiom __kstrtab_usb_assign_descriptors == $sub.ref(0, 96698);

const {:count 21} __kstrtab_usb_copy_descriptors: ref;

axiom __kstrtab_usb_copy_descriptors == $sub.ref(0, 97743);

const {:count 22} __kstrtab_usb_gadget_config_buf: ref;

axiom __kstrtab_usb_gadget_config_buf == $sub.ref(0, 98789);

const {:count 23} __kstrtab_usb_descriptor_fillbuf: ref;

axiom __kstrtab_usb_descriptor_fillbuf == $sub.ref(0, 99836);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 100864);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 101892);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 102920);

const gadgets_ops_group0: ref;

axiom gadgets_ops_group0 == $sub.ref(0, 103952);

const ldv_state_variable_35: ref;

axiom ldv_state_variable_35 == $sub.ref(0, 104980);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 106008);

const os_desc_use_group0: ref;

axiom os_desc_use_group0 == $sub.ref(0, 107040);

const gadget_cdev_desc_bcdUSB_group0: ref;

axiom gadget_cdev_desc_bcdUSB_group0 == $sub.ref(0, 108072);

const ext_prop_type_group0: ref;

axiom ext_prop_type_group0 == $sub.ref(0, 109104);

const gadget_config_item_ops_group2: ref;

axiom gadget_config_item_ops_group2 == $sub.ref(0, 110136);

const ldv_state_variable_31: ref;

axiom ldv_state_variable_31 == $sub.ref(0, 111164);

const ldv_state_variable_34: ref;

axiom ldv_state_variable_34 == $sub.ref(0, 112192);

const ldv_state_variable_32: ref;

axiom ldv_state_variable_32 == $sub.ref(0, 113220);

const gadget_root_item_ops_group1: ref;

axiom gadget_root_item_ops_group1 == $sub.ref(0, 114252);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 115280);

const interf_item_ops_group1: ref;

axiom interf_item_ops_group1 == $sub.ref(0, 116312);

const ext_prop_ops_group1: ref;

axiom ext_prop_ops_group1 == $sub.ref(0, 117344);

const gadget_config_name_langid_item_ops_group0: ref;

axiom gadget_config_name_langid_item_ops_group0 == $sub.ref(0, 118376);

const gadget_config_item_ops_group1: ref;

axiom gadget_config_item_ops_group1 == $sub.ref(0, 119408);

const interf_grp_ops_group0: ref;

axiom interf_grp_ops_group0 == $sub.ref(0, 120440);

const gadget_config_name_configuration_group0: ref;

axiom gadget_config_name_configuration_group0 == $sub.ref(0, 121472);

const ldv_state_variable_18: ref;

axiom ldv_state_variable_18 == $sub.ref(0, 122500);

const os_desc_b_vendor_code_group0: ref;

axiom os_desc_b_vendor_code_group0 == $sub.ref(0, 123532);

const gadget_root_item_ops_group0: ref;

axiom gadget_root_item_ops_group0 == $sub.ref(0, 124564);

const gadget_cdev_desc_bMaxPacketSize0_group0: ref;

axiom gadget_cdev_desc_bMaxPacketSize0_group0 == $sub.ref(0, 125596);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 126624);

const ext_prop_data_group0: ref;

axiom ext_prop_data_group0 == $sub.ref(0, 127656);

const ext_prop_ops_group0: ref;

axiom ext_prop_ops_group0 == $sub.ref(0, 128688);

const os_desc_ops_group1: ref;

axiom os_desc_ops_group1 == $sub.ref(0, 129720);

const ldv_state_variable_28: ref;

axiom ldv_state_variable_28 == $sub.ref(0, 130748);

const os_desc_ops_group2: ref;

axiom os_desc_ops_group2 == $sub.ref(0, 131780);

const ldv_state_variable_26: ref;

axiom ldv_state_variable_26 == $sub.ref(0, 132808);

const ldv_state_variable_25: ref;

axiom ldv_state_variable_25 == $sub.ref(0, 133836);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 134864);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 135892);

const gadget_cdev_desc_bcdDevice_group0: ref;

axiom gadget_cdev_desc_bcdDevice_group0 == $sub.ref(0, 136924);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 137952);

const gadget_strings_strings_ops_group0: ref;

axiom gadget_strings_strings_ops_group0 == $sub.ref(0, 138984);

const gadget_config_item_ops_group0: ref;

axiom gadget_config_item_ops_group0 == $sub.ref(0, 140016);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 141044);

const gadget_config_name_strings_ops_group0: ref;

axiom gadget_config_name_strings_ops_group0 == $sub.ref(0, 142076);

const gadget_strings_langid_item_ops_group0: ref;

axiom gadget_strings_langid_item_ops_group0 == $sub.ref(0, 143108);

const config_desc_ops_group0: ref;

axiom config_desc_ops_group0 == $sub.ref(0, 144140);

const gadget_usb_cfg_bmAttributes_group0: ref;

axiom gadget_usb_cfg_bmAttributes_group0 == $sub.ref(0, 145172);

const ldv_state_variable_23: ref;

axiom ldv_state_variable_23 == $sub.ref(0, 146200);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 147228);

const gadget_cdev_desc_bDeviceClass_group0: ref;

axiom gadget_cdev_desc_bDeviceClass_group0 == $sub.ref(0, 148260);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 149288);

const os_desc_ops_group0: ref;

axiom os_desc_ops_group0 == $sub.ref(0, 150320);

const gadget_cdev_desc_bDeviceSubClass_group0: ref;

axiom gadget_cdev_desc_bDeviceSubClass_group0 == $sub.ref(0, 151352);

const interf_grp_attr_compatible_id_group0: ref;

axiom interf_grp_attr_compatible_id_group0 == $sub.ref(0, 152384);

const ldv_state_variable_24: ref;

axiom ldv_state_variable_24 == $sub.ref(0, 153412);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 154440);

const ldv_state_variable_27: ref;

axiom ldv_state_variable_27 == $sub.ref(0, 155468);

const ldv_state_variable_19: ref;

axiom ldv_state_variable_19 == $sub.ref(0, 156496);

const gadget_cdev_desc_idProduct_group0: ref;

axiom gadget_cdev_desc_idProduct_group0 == $sub.ref(0, 157528);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 158556);

const gadget_strings_langid_item_ops_group1: ref;

axiom gadget_strings_langid_item_ops_group1 == $sub.ref(0, 159588);

const ldv_state_variable_29: ref;

axiom ldv_state_variable_29 == $sub.ref(0, 160616);

const gadget_strings_serialnumber_group0: ref;

axiom gadget_strings_serialnumber_group0 == $sub.ref(0, 161648);

const gadget_strings_product_group0: ref;

axiom gadget_strings_product_group0 == $sub.ref(0, 162680);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 163708);

const ldv_state_variable_22: ref;

axiom ldv_state_variable_22 == $sub.ref(0, 164736);

const gadget_strings_manufacturer_group0: ref;

axiom gadget_strings_manufacturer_group0 == $sub.ref(0, 165768);

const os_desc_qw_sign_group0: ref;

axiom os_desc_qw_sign_group0 == $sub.ref(0, 166800);

const interf_item_ops_group0: ref;

axiom interf_item_ops_group0 == $sub.ref(0, 167832);

const gadget_usb_cfg_MaxPower_group0: ref;

axiom gadget_usb_cfg_MaxPower_group0 == $sub.ref(0, 168864);

const gadget_cdev_desc_UDC_group0: ref;

axiom gadget_cdev_desc_UDC_group0 == $sub.ref(0, 169896);

const interf_grp_attr_sub_compatible_id_group0: ref;

axiom interf_grp_attr_sub_compatible_id_group0 == $sub.ref(0, 170928);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 171956);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 172984);

const gadget_cdev_desc_bDeviceProtocol_group0: ref;

axiom gadget_cdev_desc_bDeviceProtocol_group0 == $sub.ref(0, 174016);

const functions_ops_group0: ref;

axiom functions_ops_group0 == $sub.ref(0, 175048);

const ldv_state_variable_33: ref;

axiom ldv_state_variable_33 == $sub.ref(0, 176076);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 177104);

const ldv_state_variable_21: ref;

axiom ldv_state_variable_21 == $sub.ref(0, 178132);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 179160);

const ldv_state_variable_30: ref;

axiom ldv_state_variable_30 == $sub.ref(0, 180188);

const gadget_cdev_desc_idVendor_group0: ref;

axiom gadget_cdev_desc_idVendor_group0 == $sub.ref(0, 181220);

const ldv_state_variable_20: ref;

axiom ldv_state_variable_20 == $sub.ref(0, 182248);

const configfs_driver_template_group0: ref;

axiom configfs_driver_template_group0 == $sub.ref(0, 183280);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 184308);

const gadget_config_name_langid_item_ops_group1: ref;

axiom gadget_config_name_langid_item_ops_group1 == $sub.ref(0, 185340);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 186368);

const ldv_state_variable_36: ref;

axiom ldv_state_variable_36 == $sub.ref(0, 187396);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 188424);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 189452);

const ldv_state_variable_38: ref;

axiom ldv_state_variable_38 == $sub.ref(0, 190480);

const composite_driver_template_group0: ref;

axiom composite_driver_template_group0 == $sub.ref(0, 191512);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 192540);

const ldv_state_variable_37: ref;

axiom ldv_state_variable_37 == $sub.ref(0, 193568);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 194596);

const __ksymtab_alloc_ep_req: ref;

axiom __ksymtab_alloc_ep_req == $sub.ref(0, 195636);

const __ksymtab_unregister_gadget_item: ref;

axiom __ksymtab_unregister_gadget_item == $sub.ref(0, 196676);

const __ksymtab_usb_os_desc_prepare_interf_dir: ref;

axiom __ksymtab_usb_os_desc_prepare_interf_dir == $sub.ref(0, 197716);

const __ksymtab_usb_function_unregister: ref;

axiom __ksymtab_usb_function_unregister == $sub.ref(0, 198756);

const __ksymtab_usb_function_register: ref;

axiom __ksymtab_usb_function_register == $sub.ref(0, 199796);

const __ksymtab_usb_put_function: ref;

axiom __ksymtab_usb_put_function == $sub.ref(0, 200836);

const __ksymtab_usb_put_function_instance: ref;

axiom __ksymtab_usb_put_function_instance == $sub.ref(0, 201876);

const __ksymtab_usb_get_function: ref;

axiom __ksymtab_usb_get_function == $sub.ref(0, 202916);

const __ksymtab_usb_get_function_instance: ref;

axiom __ksymtab_usb_get_function_instance == $sub.ref(0, 203956);

const __ksymtab_usb_composite_overwrite_options: ref;

axiom __ksymtab_usb_composite_overwrite_options == $sub.ref(0, 204996);

const __ksymtab_usb_composite_setup_continue: ref;

axiom __ksymtab_usb_composite_setup_continue == $sub.ref(0, 206036);

const __ksymtab_usb_composite_unregister: ref;

axiom __ksymtab_usb_composite_unregister == $sub.ref(0, 207076);

const __ksymtab_usb_composite_probe: ref;

axiom __ksymtab_usb_composite_probe == $sub.ref(0, 208116);

const __ksymtab_usb_string_ids_n: ref;

axiom __ksymtab_usb_string_ids_n == $sub.ref(0, 209156);

const __ksymtab_usb_gstrings_attach: ref;

axiom __ksymtab_usb_gstrings_attach == $sub.ref(0, 210196);

const __ksymtab_usb_string_ids_tab: ref;

axiom __ksymtab_usb_string_ids_tab == $sub.ref(0, 211236);

const __ksymtab_usb_string_id: ref;

axiom __ksymtab_usb_string_id == $sub.ref(0, 212276);

const __ksymtab_usb_add_config: ref;

axiom __ksymtab_usb_add_config == $sub.ref(0, 213316);

const __ksymtab_usb_add_config_only: ref;

axiom __ksymtab_usb_add_config_only == $sub.ref(0, 214356);

const __ksymtab_usb_interface_id: ref;

axiom __ksymtab_usb_interface_id == $sub.ref(0, 215396);

const __ksymtab_usb_function_activate: ref;

axiom __ksymtab_usb_function_activate == $sub.ref(0, 216436);

const __ksymtab_usb_function_deactivate: ref;

axiom __ksymtab_usb_function_deactivate == $sub.ref(0, 217476);

const __ksymtab_usb_remove_function: ref;

axiom __ksymtab_usb_remove_function == $sub.ref(0, 218516);

const __ksymtab_usb_add_function: ref;

axiom __ksymtab_usb_add_function == $sub.ref(0, 219556);

const __ksymtab_config_ep_by_speed: ref;

axiom __ksymtab_config_ep_by_speed == $sub.ref(0, 220596);

const __ksymtab_usb_ep_autoconfig_reset: ref;

axiom __ksymtab_usb_ep_autoconfig_reset == $sub.ref(0, 221636);

const __ksymtab_usb_ep_autoconfig: ref;

axiom __ksymtab_usb_ep_autoconfig == $sub.ref(0, 222676);

const __ksymtab_usb_ep_autoconfig_ss: ref;

axiom __ksymtab_usb_ep_autoconfig_ss == $sub.ref(0, 223716);

const __ksymtab_usb_free_all_descriptors: ref;

axiom __ksymtab_usb_free_all_descriptors == $sub.ref(0, 224756);

const __ksymtab_usb_assign_descriptors: ref;

axiom __ksymtab_usb_assign_descriptors == $sub.ref(0, 225796);

const __ksymtab_usb_copy_descriptors: ref;

axiom __ksymtab_usb_copy_descriptors == $sub.ref(0, 226836);

const __ksymtab_usb_gadget_config_buf: ref;

axiom __ksymtab_usb_gadget_config_buf == $sub.ref(0, 227876);

const __ksymtab_usb_descriptor_fillbuf: ref;

axiom __ksymtab_usb_descriptor_fillbuf == $sub.ref(0, 228916);

const .str: ref;

axiom .str == $sub.ref(0, 229948);

const {:count 5} .str.1: ref;

axiom .str.1 == $sub.ref(0, 230977);

const {:count 5} .str.2: ref;

axiom .str.2 == $sub.ref(0, 232006);

const {:count 3} .str.4: ref;

axiom .str.4 == $sub.ref(0, 233033);

const {:count 4} .str.5: ref;

axiom .str.5 == $sub.ref(0, 234061);

const {:count 7} .str.3: ref;

axiom .str.3 == $sub.ref(0, 235092);

const {:count 9} .str.6: ref;

axiom .str.6 == $sub.ref(0, 236125);

const {:count 9} .str.7: ref;

axiom .str.7 == $sub.ref(0, 237158);

const {:count 9} .str.8: ref;

axiom .str.8 == $sub.ref(0, 238191);

const {:count 11} .str.48: ref;

axiom .str.48 == $sub.ref(0, 239226);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 25} .str.9: ref;

axiom .str.9 == $sub.ref(0, 240275);

const {:count 13} .str.10: ref;

axiom .str.10 == $sub.ref(0, 241312);

const {:count 17} .str.11: ref;

axiom .str.11 == $sub.ref(0, 242353);

const {:count 209} .str.12: ref;

axiom .str.12 == $sub.ref(0, 243586);

const {:count 34} .str.13: ref;

axiom .str.13 == $sub.ref(0, 244644);

const {:count 23} .str.14: ref;

axiom .str.14 == $sub.ref(0, 245691);

const {:count 15} .str.15: ref;

axiom .str.15 == $sub.ref(0, 246730);

const {:count 27} .str.16: ref;

axiom .str.16 == $sub.ref(0, 247781);

const {:count 25} .str.17: ref;

axiom .str.17 == $sub.ref(0, 248830);

const {:count 25} .str.18: ref;

axiom .str.18 == $sub.ref(0, 249879);

const {:count 6} .str.19: ref;

axiom .str.19 == $sub.ref(0, 250909);

const {:count 10} .str.20: ref;

axiom .str.20 == $sub.ref(0, 251943);

const .str.21: ref;

axiom .str.21 == $sub.ref(0, 252968);

const {:count 7} .str.22: ref;

axiom .str.22 == $sub.ref(0, 253999);

const {:count 6} .str.23: ref;

axiom .str.23 == $sub.ref(0, 255029);

const {:count 24} .str.24: ref;

axiom .str.24 == $sub.ref(0, 256077);

const {:count 29} .str.25: ref;

axiom .str.25 == $sub.ref(0, 257130);

const {:count 10} .str.40: ref;

axiom .str.40 == $sub.ref(0, 258164);

const {:count 29} .str.41: ref;

axiom .str.41 == $sub.ref(0, 259217);

const {:count 4} .str.42: ref;

axiom .str.42 == $sub.ref(0, 260245);

const {:count 21} .str.43: ref;

axiom .str.43 == $sub.ref(0, 261290);

const {:count 31} .str.44: ref;

axiom .str.44 == $sub.ref(0, 262345);

const {:count 17} .str.33: ref;

axiom .str.33 == $sub.ref(0, 263386);

const {:count 25} .str.53: ref;

axiom .str.53 == $sub.ref(0, 264435);

const {:count 30} .str.54: ref;

axiom .str.54 == $sub.ref(0, 265489);

const {:count 20} .str.55: ref;

axiom .str.55 == $sub.ref(0, 266533);

const {:count 14} .str.62: ref;

axiom .str.62 == $sub.ref(0, 267571);

const init_uts_ns: ref;

axiom init_uts_ns == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 11} .str.45: ref;

axiom .str.45 == $sub.ref(0, 268606);

const {:count 8} .str.46: ref;

axiom .str.46 == $sub.ref(0, 269638);

const {:count 13} .str.47: ref;

axiom .str.47 == $sub.ref(0, 270675);

const {:count 10} .str.60: ref;

axiom .str.60 == $sub.ref(0, 271709);

const {:count 4} .str.63: ref;

axiom .str.63 == $sub.ref(0, 272737);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 17} .str.38: ref;

axiom .str.38 == $sub.ref(0, 273778);

const {:count 8} .str.39: ref;

axiom .str.39 == $sub.ref(0, 274810);

const {:count 18} .str.36: ref;

axiom .str.36 == $sub.ref(0, 275852);

const {:count 9} .str.37: ref;

axiom .str.37 == $sub.ref(0, 276885);

const {:count 13} .str.49: ref;

axiom .str.49 == $sub.ref(0, 277922);

const {:count 14} .str.50: ref;

axiom .str.50 == $sub.ref(0, 278960);

const {:count 16} .str.26: ref;

axiom .str.26 == $sub.ref(0, 280000);

const {:count 15} .str.27: ref;

axiom .str.27 == $sub.ref(0, 281039);

const {:count 21} .str.28: ref;

axiom .str.28 == $sub.ref(0, 282084);

const {:count 14} .str.29: ref;

axiom .str.29 == $sub.ref(0, 283122);

const {:count 48} .str.30: ref;

axiom .str.30 == $sub.ref(0, 284194);

const {:count 25} .str.31: ref;

axiom .str.31 == $sub.ref(0, 285243);

const {:count 34} .str.32: ref;

axiom .str.32 == $sub.ref(0, 286301);

const {:count 47} .str.34: ref;

axiom .str.34 == $sub.ref(0, 287372);

const {:count 51} .str.35: ref;

axiom .str.35 == $sub.ref(0, 288447);

const {:count 13} .str.57: ref;

axiom .str.57 == $sub.ref(0, 289484);

const {:count 19} .str.56: ref;

axiom .str.56 == $sub.ref(0, 290527);

const {:count 11} .str.58: ref;

axiom .str.58 == $sub.ref(0, 291562);

const {:count 35} .str.59: ref;

axiom .str.59 == $sub.ref(0, 292621);

const {:count 14} .str.51: ref;

axiom .str.51 == $sub.ref(0, 293659);

const {:count 23} .str.52: ref;

axiom .str.52 == $sub.ref(0, 294706);

const {:count 22} .str.64: ref;

axiom .str.64 == $sub.ref(0, 295752);

const {:count 43} .str.65: ref;

axiom .str.65 == $sub.ref(0, 296819);

const {:count 10} .str.66: ref;

axiom .str.66 == $sub.ref(0, 297853);

const {:count 20} .str.67: ref;

axiom .str.67 == $sub.ref(0, 298897);

const {:count 10} .str.68: ref;

axiom .str.68 == $sub.ref(0, 299931);

const {:count 14} .str.69: ref;

axiom .str.69 == $sub.ref(0, 300969);

const {:count 18} .str.70: ref;

axiom .str.70 == $sub.ref(0, 302011);

const {:count 3} .str.103: ref;

axiom .str.103 == $sub.ref(0, 303038);

const {:count 38} .str.104: ref;

axiom .str.104 == $sub.ref(0, 304100);

const {:count 49} .str.107: ref;

axiom .str.107 == $sub.ref(0, 305173);

const {:count 8} .str.79: ref;

axiom .str.79 == $sub.ref(0, 306205);

const {:count 208} .str.73: ref;

axiom .str.73 == $sub.ref(0, 307437);

const {:count 4} .str.81: ref;

axiom .str.81 == $sub.ref(0, 308465);

const {:count 3} .str.102: ref;

axiom .str.102 == $sub.ref(0, 309492);

const {:count 14} .str.82: ref;

axiom .str.82 == $sub.ref(0, 310530);

const {:count 8} .str.83: ref;

axiom .str.83 == $sub.ref(0, 311562);

const {:count 16} .str.84: ref;

axiom .str.84 == $sub.ref(0, 312602);

const {:count 41} .str.75: ref;

axiom .str.75 == $sub.ref(0, 313667);

const {:count 50} .str.76: ref;

axiom .str.76 == $sub.ref(0, 314741);

const {:count 13} .str.86: ref;

axiom .str.86 == $sub.ref(0, 315778);

const {:count 8} .str.71: ref;

axiom .str.71 == $sub.ref(0, 316810);

const {:count 16} .str.87: ref;

axiom .str.87 == $sub.ref(0, 317850);

const {:count 16} .str.88: ref;

axiom .str.88 == $sub.ref(0, 318890);

const {:count 16} .str.89: ref;

axiom .str.89 == $sub.ref(0, 319930);

const {:count 9} .str.90: ref;

axiom .str.90 == $sub.ref(0, 320963);

const {:count 8} .str.72: ref;

axiom .str.72 == $sub.ref(0, 321995);

const {:count 10} .str.91: ref;

axiom .str.91 == $sub.ref(0, 323029);

const {:count 10} .str.92: ref;

axiom .str.92 == $sub.ref(0, 324063);

const {:count 7} .str.93: ref;

axiom .str.93 == $sub.ref(0, 325094);

const {:count 4} .str.94: ref;

axiom .str.94 == $sub.ref(0, 326122);

const {:count 14} .str.96: ref;

axiom .str.96 == $sub.ref(0, 327160);

const {:count 13} .str.97: ref;

axiom .str.97 == $sub.ref(0, 328197);

const {:count 8} .str.98: ref;

axiom .str.98 == $sub.ref(0, 329229);

const {:count 13} .str.99: ref;

axiom .str.99 == $sub.ref(0, 330266);

const {:count 33} .str.100: ref;

axiom .str.100 == $sub.ref(0, 331323);

const {:count 23} .str.101: ref;

axiom .str.101 == $sub.ref(0, 332370);

const {:count 10} .str.77: ref;

axiom .str.77 == $sub.ref(0, 333404);

const {:count 8} .str.78: ref;

axiom .str.78 == $sub.ref(0, 334436);

const {:count 10} .str.80: ref;

axiom .str.80 == $sub.ref(0, 335470);

const {:count 5} .str.105: ref;

axiom .str.105 == $sub.ref(0, 336499);

const {:count 5} .str.106: ref;

axiom .str.106 == $sub.ref(0, 337528);

const {:count 37} .str.74: ref;

axiom .str.74 == $sub.ref(0, 338589);

const {:count 9} .str.108: ref;

axiom .str.108 == $sub.ref(0, 339622);

const {:count 4} .str.95: ref;

axiom .str.95 == $sub.ref(0, 340650);

const {:count 13} .str.109: ref;

axiom .str.109 == $sub.ref(0, 341687);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 342719);

const {:count 3} .str.1.177: ref;

axiom .str.1.177 == $sub.ref(0, 343746);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 344784);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 345812);

const usb_gadget_get_string: ref;

axiom usb_gadget_get_string == $sub.ref(0, 346844);

procedure usb_gadget_get_string($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_gadget_get_string($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p21: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p31: ref;
  var $p20: ref;
  var $p27: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "usb_gadget_get_string:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p20 := $p17;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p27 := $p20;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p27);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i38 == 1);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $i45 := strlen($p44);
    call {:si_unique_call 2} {:cexpr "tmp"} boogie_si_record_i64($i45);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i46 := $ult.i64(126, $i45);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i46 == 1);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    call {:si_unique_call 3} {:cexpr "len"} boogie_si_record_i32($i48);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p2);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(2, 2));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i53 := utf8s_to_utf16s($p50, $i48, 1, $p52, 126);
    call {:si_unique_call 5} {:cexpr "len"} boogie_si_record_i32($i53);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i53, 1);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i57, 2);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i59);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 3);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p2);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i15 := $i62;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb28:
    assume $i54 == 1;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i47 := 126;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb20;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p21 := $p17;
    goto $bb8;

  $bb8:
    call $p22, $i23, $i24, $i25, $p26, $p28, $i29, $i30, $p21, $p32, $p33, $i34, $i35, $p36, $p31 := usb_gadget_get_string_loop_$bb8($i1, $p22, $i23, $i24, $i25, $p26, $p28, $i29, $i30, $p21, $p32, $p33, $i34, $i35, $p36, $p31);
    goto $bb8_last;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p36 := $p21;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p20 := $p36;
    goto $bb7;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, $i1);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p26 := $p21;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p21, $mul.ref(1, 16));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p31 := $p28;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p20 := $p31;
    goto $bb7;

  $bb14:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p21 := $p28;
    goto $bb14_dummy;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p27 := $p26;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 4);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 3);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i16.i8($i6);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i11, 8);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i15 := 4;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_30;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 347876);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const strlen: ref;

axiom strlen == $sub.ref(0, 348908);

procedure strlen($p0: ref) returns ($r: i64);



const utf8s_to_utf16s: ref;

axiom utf8s_to_utf16s == $sub.ref(0, 349940);

procedure utf8s_to_utf16s($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation utf8s_to_utf16s($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6} {:cexpr "utf8s_to_utf16s:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 7} {:cexpr "utf8s_to_utf16s:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 8} {:cexpr "utf8s_to_utf16s:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 1} true;
    call {:si_unique_call 9} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 10} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_descriptor_fillbuf: ref;

axiom usb_descriptor_fillbuf == $sub.ref(0, 350972);

procedure usb_descriptor_fillbuf($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_descriptor_fillbuf($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p28: ref;
  var $p9: ref;
  var $i29: i64;
  var $i30: i32;
  var $i31: i64;
  var $i32: i32;
  var $i33: i32;
  var $i5: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} {:cexpr "usb_descriptor_fillbuf:arg:buflen"} boogie_si_record_i32($i1);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p2);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p9 := $p0;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p9);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i30, $i32);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i5 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p10, $i11, $p12 := $p0, $i1, $p2;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $i16, $i17, $p18, $p19, $i20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p10, $i11, $p12, $p28, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2 := usb_descriptor_fillbuf_loop_$bb8($p13, $p14, $i15, $i16, $i17, $p18, $p19, $i20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p10, $i11, $p12, $p28, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2);
    goto $bb8_last;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 12} {:cexpr "len"} boogie_si_record_i32($i16);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, $i11);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p12);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i16);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 13} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p10, $p19, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i11, $i16);
    call {:si_unique_call 14} {:cexpr "buflen"} boogie_si_record_i32($i21);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i16);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p10, $mul.ref($i22, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p12, $mul.ref(1, 8));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p28 := $p23;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p9 := $p28;
    goto $bb7;

  $bb13:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p10, $i11, $p12 := $p23, $i21, $p24;
    goto $bb13_dummy;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_111;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 352004);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const usb_gadget_config_buf: ref;

axiom usb_gadget_config_buf == $sub.ref(0, 353036);

procedure usb_gadget_config_buf($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);



const usb_copy_descriptors: ref;

axiom usb_copy_descriptors == $sub.ref(0, 354068);

procedure usb_copy_descriptors($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_copy_descriptors($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i19: i32;
  var $i20: i32;
  var $i4: i32;
  var $i5: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p59: ref;
  var $p38: ref;
  var $p28: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $p0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i4, $i5 := 0, 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i4, 1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i21, 8);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, $i5);
    call {:si_unique_call 17} {:cexpr "bytes"} boogie_si_record_i32($i23);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p25 := kmalloc($i24, 208);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i4, 1);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i33 := $mul.i64($i32, 8);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p25, $mul.ref($i33, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p0);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p38 := $p25;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p28 := $p25;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p39, $p40, $p41 := $p0, $p25, $p34;
    goto $bb16;

  $bb16:
    call $p42, $p43, $p44, $p45, $i46, $i47, $p49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $p39, $p40, $p41, $p59, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5 := usb_copy_descriptors_loop_$bb16($p42, $p43, $p44, $p45, $i46, $i47, $p49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $p39, $p40, $p41, $p59, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5);
    goto $bb16_last;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p39);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p39);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 19} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p41, $p43, $i47, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p41);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p40, $mul.ref(1, 8));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p39);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i64($i52);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p41, $mul.ref($i53, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p39, $mul.ref(1, 8));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p59 := $p49;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p38 := $p59;
    goto $bb15;

  $bb18:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $p39, $p40, $p41 := $p55, $p49, $p54;
    goto $bb18_dummy;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p28 := $0.ref;
    goto $bb11;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p6, $i7, $i8 := $p0, 0, 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $i13, $p14, $i15, $p16, $i17, $i18, $p6, $i7, $i8, $i19, $i20 := usb_copy_descriptors_loop_$bb4($p9, $p10, $i11, $i12, $i13, $p14, $i15, $p16, $i17, $i18, $p6, $i7, $i8, $i19, $i20);
    goto $bb4_last;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p6);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i7);
    call {:si_unique_call 15} {:cexpr "bytes"} boogie_si_record_i32($i13);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p6, $mul.ref(1, 8));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i8, 1);
    call {:si_unique_call 16} {:cexpr "n_desc"} boogie_si_record_i32($i15);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p14);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i15, $i13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i4, $i5 := $i19, $i20;
    goto $bb3;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $p6, $i7, $i8 := $p14, $i13, $i15;
    goto $bb6_dummy;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_148;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 355100);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 21} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 356132);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 24} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p2 := ldv_malloc($i0);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 357164);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 26} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 27} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 28} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 29} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p4 := malloc($i0);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 1} true;
    call {:si_unique_call 31} __VERIFIER_assume($i7);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 358196);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 32} $r := $malloc($i0);
    return;
}



const usb_assign_descriptors: ref;

axiom usb_assign_descriptors == $sub.ref(0, 359228);

procedure usb_assign_descriptors($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const gadget_is_dualspeed: ref;

axiom gadget_is_dualspeed == $sub.ref(0, 360260);

procedure gadget_is_dualspeed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gadget_is_dualspeed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(124, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 2);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const gadget_is_superspeed: ref;

axiom gadget_is_superspeed == $sub.ref(0, 361292);

procedure gadget_is_superspeed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gadget_is_superspeed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(124, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 4);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usb_free_all_descriptors: ref;

axiom usb_free_all_descriptors == $sub.ref(0, 362324);

procedure usb_free_all_descriptors($p0: ref);
  free requires assertsPassed;



implementation usb_free_all_descriptors($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(16, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} usb_free_descriptors($p2);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} usb_free_descriptors($p4);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(32, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} usb_free_descriptors($p6);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_descriptors: ref;

axiom usb_free_descriptors == $sub.ref(0, 363356);

procedure usb_free_descriptors($p0: ref);
  free requires assertsPassed;



implementation usb_free_descriptors($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} kfree($p1);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 364388);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} free_($p0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 365420);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 38} $free($p0);
    return;
}



const usb_ep_autoconfig_ss: ref;

axiom usb_ep_autoconfig_ss == $sub.ref(0, 366452);

procedure usb_ep_autoconfig_ss($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);



const strcmp: ref;

axiom strcmp == $sub.ref(0, 367484);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const find_ep: ref;

axiom find_ep == $sub.ref(0, 368516);

procedure find_ep($p0: ref, $p1: ref) returns ($r: ref);



const ep_matches: ref;

axiom ep_matches == $sub.ref(0, 369548);

procedure ep_matches($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 370580);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);



const usb_endpoint_num: ref;

axiom usb_endpoint_num == $sub.ref(0, 371612);

procedure usb_endpoint_num($p0: ref) returns ($r: i32);



const snprintf: ref;

axiom snprintf == $sub.ref(0, 372644);

procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: ref) returns ($r: i32);



const usb_endpoint_type: ref;

axiom usb_endpoint_type == $sub.ref(0, 373676);

procedure usb_endpoint_type($p0: ref) returns ($r: i32);



const strrchr: ref;

axiom strrchr == $sub.ref(0, 374708);

procedure strrchr($p0: ref, $i1: i32) returns ($r: ref);



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 375740);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 376772);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);



const simple_strtoul: ref;

axiom simple_strtoul == $sub.ref(0, 377804);

procedure simple_strtoul($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const usb_ep_autoconfig: ref;

axiom usb_ep_autoconfig == $sub.ref(0, 378836);

procedure usb_ep_autoconfig($p0: ref, $p1: ref) returns ($r: ref);



const usb_ep_autoconfig_reset: ref;

axiom usb_ep_autoconfig_reset == $sub.ref(0, 379868);

procedure usb_ep_autoconfig_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_ep_autoconfig_reset($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p11: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 24), 64));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 24), 64)), $mul.ref(24, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(104, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1572, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1568, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p11 := $p5;
    goto $bb4;

  $bb4:
    call $p12, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p11 := usb_ep_autoconfig_reset_loop_$bb4($i9, $p12, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p11);
    goto $bb4_last;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($sub.ref(0, 24), 64));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 24), 64)), $mul.ref(24, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $i9);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p17;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_277;
}



const config_ep_by_speed: ref;

axiom config_ep_by_speed == $sub.ref(0, 380900);

procedure config_ep_by_speed($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const get_gadget_data: ref;

axiom get_gadget_data == $sub.ref(0, 381932);

procedure get_gadget_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_gadget_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const next_ep_desc: ref;

axiom next_ep_desc == $sub.ref(0, 382964);

procedure next_ep_desc($p0: ref) returns ($r: ref);



const dev_err: ref;

axiom dev_err == $sub.ref(0, 383996);

procedure dev_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref);



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 385028);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_add_function: ref;

axiom usb_add_function == $sub.ref(0, 386060);

procedure usb_add_function($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation usb_add_function($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i8;
  var $i64: i8;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i8;
  var $i77: i8;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i8;
  var $i89: i8;
  var $i90: i8;
  var $i37: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i24;
  var $i99: i24;
  var $i100: i24;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p4, .str.10);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, .str.11);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p6, .str.12);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p7, .str.13);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.27, $p9);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 204);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p9, $i12);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p13, 1);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.28, $p14);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 43} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(96, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i32 == 1);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(112, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(40, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} list_add_tail($p39, $p40);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(89, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(89, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(89, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i37 := $i51;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i37, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb35:
    assume $i91 == 1;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p92, .str.10);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p93, .str.11);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p94, .str.12);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p95, .str.14);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i98 := $load.i24($M.27, $p97);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i99 := $and.i24($i98, $sub.i24(0, 262144));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i100 := $or.i24($i99, 237);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p97, $i100);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p101, 1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.28, $p102);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i64($i103);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i105 := $and.i64($i104, 1);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i106 := ldv__builtin_expect($i105, 0);
    call {:si_unique_call 50} {:cexpr "tmp___0"} boogie_si_record_i64($i106);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i107 == 1;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p3, $p112, .str.14, $p114, $p1, $i37);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(32, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb31;

  $bb32:
    assume $i86 == 1;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(89, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i89 := $and.i8($i88, $sub.i8(0, 2));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i90 := $or.i8($i89, 1);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i90);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb23:
    assume $i69 == 1;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(24, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb25;

  $bb26:
    assume $i73 == 1;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(89, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i76 := $and.i8($i75, $sub.i8(0, 3));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i77 := $or.i8($i76, 2);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i77);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(16, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb19;

  $bb20:
    assume $i60 == 1;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(89, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i63 := $and.i8($i62, $sub.i8(0, 5));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i64 := $or.i8($i63, 4);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i64);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    call {:si_unique_call 46} $i47 := devirtbounce($p46, $p0, $p1);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 47} {:cexpr "value"} boogie_si_record_i32($i47);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i51 := $i47;
    goto $bb16;

  $bb13:
    assume $i48 == 1;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} list_del($p49);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(40, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb5;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref.ref($p2, $p24, .str.13, $p26, $p1, $p28, $p0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 387092);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 53} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 388124);

procedure __dynamic_dev_dbg.ref.ref.ref.i32.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref, p.5: ref);



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.i32.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: ref, p.7: ref);



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32)
{

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref)
{

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 389156);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} __list_add($p0, $p3, $p1);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 390188);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 391220);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    return;
}



const usb_remove_function: ref;

axiom usb_remove_function == $sub.ref(0, 392252);

procedure usb_remove_function($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation usb_remove_function($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(112, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} bitmap_zero($p9, 32);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} list_del($p10);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(72, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(72, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 58} devirtbounce.2($p16, $p0, $p1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 200)), $mul.ref(112, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    call {:si_unique_call 55} devirtbounce.1($p7, $p1);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const bitmap_zero: ref;

axiom bitmap_zero == $sub.ref(0, 393284);

procedure bitmap_zero($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bitmap_zero($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} {:cexpr "bitmap_zero:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 63);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($i3, 64);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 8);
    call {:si_unique_call 60} {:cexpr "len"} boogie_si_record_i32($i6);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i6);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 61} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p7, 0, $i8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 394316);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const usb_function_deactivate: ref;

axiom usb_function_deactivate == $sub.ref(0, 395348);

procedure usb_function_deactivate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_function_deactivate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(40, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p6 := spinlock_check($p5);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 64} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(136, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} spin_unlock_irqrestore($p20, $i7);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(136, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(136, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i13 := usb_gadget_disconnect($p12);
    call {:si_unique_call 66} {:cexpr "status"} boogie_si_record_i32($i13);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 396380);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 397412);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 68} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 69} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_gadget_disconnect: ref;

axiom usb_gadget_disconnect == $sub.ref(0, 398444);

procedure usb_gadget_disconnect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_gadget_disconnect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(88, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(88, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 70} $i12 := devirtbounce.3($p11, $p0, 0);
    call {:si_unique_call 71} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 399476);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 400508);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    return;
}



const usb_function_activate: ref;

axiom usb_function_activate == $sub.ref(0, 401540);

procedure usb_function_activate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_function_activate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i22: i32;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(40, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p6 := spinlock_check($p5);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 77} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(136, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 78} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 80} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 83} {:cexpr "tmp___1"} boogie_si_record_i64($i20);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(136, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(136, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(136, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i22 := $i33;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} spin_unlock_irqrestore($p34, $i7);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i32 := usb_gadget_connect($p31);
    call {:si_unique_call 86} {:cexpr "status"} boogie_si_record_i32($i32);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb9;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} warn_slowpath_null(.str.12, 309);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 402572);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_connect: ref;

axiom usb_gadget_connect == $sub.ref(0, 403604);

procedure usb_gadget_connect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_gadget_connect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(88, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(88, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 88} $i12 := devirtbounce.3($p11, $p0, 1);
    call {:si_unique_call 89} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;
}



const usb_interface_id: ref;

axiom usb_interface_id == $sub.ref(0, 404636);

procedure usb_interface_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_interface_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(88, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    call {:si_unique_call 90} {:cexpr "id"} boogie_si_record_i32($i4);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, 15);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i6, 8));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i4);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(88, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i14 := $i4;
    goto $bb3;
}



const usb_add_config_only: ref;

axiom usb_add_config_only == $sub.ref(0, 405668);

procedure usb_add_config_only($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_add_config_only($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p17: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i6: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(56, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} list_add_tail($p34, $p35);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} INIT_LIST_HEAD($p36);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(88, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(96, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 93} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p39, 0, 128, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p17 := $p11;
    goto $bb8;

  $bb8:
    call $p18, $i19, $i20, $p21, $i22, $i23, $i24, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p17 := usb_add_config_only_loop_$bb8($p1, $i15, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p17);
    goto $bb8_last;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i20, $i23);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p28, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $i15);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p29;
    goto $bb13_dummy;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_705;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 406700);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    return;
}



const usb_add_config: ref;

axiom usb_add_config == $sub.ref(0, 407732);

procedure usb_add_config($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const list_empty: ref;

axiom list_empty == $sub.ref(0, 408764);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_string_id: ref;

axiom usb_string_id == $sub.ref(0, 409796);

procedure usb_string_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_string_id($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i4 := $ule.i32($i3, 253);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const usb_string_ids_tab: ref;

axiom usb_string_ids_tab == $sub.ref(0, 410828);

procedure usb_string_ids_tab($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_string_ids_tab($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i10: i32;
  var $p11: ref;
  var $i26: i32;
  var $i9: i32;
  var $i27: i8;
  var $p28: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    call {:si_unique_call 94} {:cexpr "next"} boogie_si_record_i32($i4);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i9);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i27);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i10, $p11 := $i4, $p1;
    goto $bb4;

  $bb4:
    call $i12, $i13, $i14, $i15, $i16, $i18, $i19, $p20, $p21, $p22, $p23, $i24, $i25, $i10, $p11, $i26 := usb_string_ids_tab_loop_$bb4($i12, $i13, $i14, $i15, $i16, $i18, $i19, $p20, $p21, $p22, $p23, $i24, $i25, $i10, $p11, $i26);
    goto $bb4_last;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i10, 253);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 96} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i10, 1);
    call {:si_unique_call 97} {:cexpr "next"} boogie_si_record_i32($i18);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p11, $mul.ref(1, 16));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i26 := $i18;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i9 := $i26;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i10, $p11 := $i18, $p21;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 19);
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_785;
}



const usb_gstrings_attach: ref;

axiom usb_gstrings_attach == $sub.ref(0, 411860);

procedure usb_gstrings_attach($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_gstrings_attach($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i7: i32;
  var $i8: i32;
  var $i16: i32;
  var $i6: i32;
  var $i17: i1;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $p49: ref;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i56: i32;
  var $i57: i1;
  var $i36: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} {:cexpr "usb_gstrings_attach:arg:n_strings"} boogie_si_record_i32($i2);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p1);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i6, 0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p21 := copy_gadget_strings($p1, $i6, $i2);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i23 := IS_ERR($p22);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 104} {:cexpr "tmp___1"} boogie_si_record_i8($i24);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $p29 := get_containers_gs($p21);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i33 := usb_string_ids_tab($p0, $p32);
    call {:si_unique_call 108} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i35 := $ult.i32(1, $i6);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} list_add_tail($p58, $p59);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p29);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p20 := $p62;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $r := $p20;
    return;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb23;

  $bb23:
    call $p37, $p38, $p39, $i40, $p41, $p42, $p43, $p44, $i45, $p49, $i50, $p51, $p52, $p53, $i54, $i55, $i46, $p47, $p48, $i56, $i57, $i36 := usb_gstrings_attach_loop_$bb23($i2, $i6, $p29, $p37, $p38, $p39, $i40, $p41, $p42, $p43, $p44, $i45, $p49, $i50, $p51, $p52, $p53, $i54, $i55, $i46, $p47, $p48, $i56, $i57, $i36);
    goto $bb23_last;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p29);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i36);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p29, $mul.ref($i40, 8));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i45 := $ult.i32(0, $i2);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i36, 1);
    call {:si_unique_call 112} {:cexpr "i"} boogie_si_record_i32($i56);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i57 := $ult.i32($i56, $i6);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i57 == 1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb33:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i56;
    goto $bb33_dummy;

  $bb25:
    assume $i45 == 1;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i46, $p47, $p48 := 0, $p44, $p39;
    goto $bb28;

  $bb28:
    call $p49, $i50, $p51, $p52, $p53, $i54, $i55, $i46, $p47, $p48 := usb_gstrings_attach_loop_$bb28($i2, $p49, $i50, $p51, $p52, $p53, $i54, $i55, $i46, $p47, $p48);
    goto $bb28_last;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p47, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i50);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p47, $mul.ref(1, 16));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p48, $mul.ref(1, 16));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i46, 1);
    call {:si_unique_call 111} {:cexpr "n"} boogie_si_record_i32($i54);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32($i54, $i2);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i55 == 1);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i46, $p47, $p48 := $i54, $p52, $p53;
    goto $bb30_dummy;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p21);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} kfree($p63);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i33);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p65 := ERR_PTR($i64);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p20 := $p65;
    goto $bb11;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p21);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $p27 := ERR_CAST($p26);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p20 := $p27;
    goto $bb11;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p18 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p20 := $p18;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i7, $i8 := 0, 0;
    goto $bb4;

  $bb4:
    call $i9, $i10, $i11, $p12, $p13, $i14, $i15, $i7, $i8, $i16 := usb_gstrings_attach_loop_$bb4($p1, $i9, $i10, $i11, $p12, $p13, $i14, $i15, $i7, $i8, $i16);
    goto $bb4_last;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    call {:si_unique_call 99} {:cexpr "n_gstrings"} boogie_si_record_i32($i9);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i7, 1);
    call {:si_unique_call 100} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref($i11, 8));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i16 := $i9;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i6 := $i16;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i7, $i8 := $i10, $i9;
    goto $bb6_dummy;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_884;

  $bb33_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_870;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_820;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 412892);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const copy_gadget_strings: ref;

axiom copy_gadget_strings == $sub.ref(0, 413924);

procedure copy_gadget_strings($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation copy_gadget_strings($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i1;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i16;
  var $p43: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p69: ref;
  var $p52: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p29: ref;
  var $i30: i32;
  var $i75: i32;
  var $i28: i32;
  var $i76: i64;
  var $p77: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} {:cexpr "copy_gadget_strings:arg:n_gstrings"} boogie_si_record_i32($i1);
    call {:si_unique_call 117} {:cexpr "copy_gadget_strings:arg:n_strings"} boogie_si_record_i32($i2);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i1, 1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i3, 8);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 16);
    call {:si_unique_call 118} {:cexpr "mem"} boogie_si_record_i32($i5);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i1, 16);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i5);
    call {:si_unique_call 119} {:cexpr "mem"} boogie_si_record_i32($i7);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i2, 1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i8, $i1);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, 16);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $i7);
    call {:si_unique_call 120} {:cexpr "mem"} boogie_si_record_i32($i11);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $p13 := kmalloc($i12, 208);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p20 := get_containers_gs($p14);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i1, 1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i25 := $mul.i64($i24, 8);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p22, $mul.ref($i25, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i27 := $ult.i32(0, $i1);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i28 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i28);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p20, $mul.ref($i76, 8));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $0.ref);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p19 := $p13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p29, $i30 := $p26, 0;
    goto $bb8;

  $bb8:
    call $i32, $p33, $i34, $p35, $p36, $p37, $i38, $p39, $p40, $p41, $i42, $p43, $p45, $i46, $p47, $p48, $p49, $p50, $i51, $p56, $p57, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $p53, $p54, $i55, $p69, $p52, $p70, $p71, $p72, $i73, $i74, $p29, $i30, $i75 := copy_gadget_strings_loop_$bb8($p0, $i1, $i2, $p20, $i32, $p33, $i34, $p35, $p36, $p37, $i38, $p39, $p40, $p41, $i42, $p43, $p45, $i46, $p47, $p48, $p49, $p50, $i51, $p56, $p57, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $p53, $p54, $i55, $p69, $p52, $p70, $p71, $p72, $i73, $i74, $p29, $i30, $i75);
    goto $bb8_last;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i30);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p20, $mul.ref($i32, 8));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p29);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i30);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p20, $mul.ref($i34, 8));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p29, $mul.ref(16, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i30);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p0, $mul.ref($i38, 8));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i42);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p37);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i30);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p0, $mul.ref($i46, 8));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i51 := $ult.i32(0, $i2);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p52 := $p37;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p52);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $0.ref);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p52, $mul.ref(16, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i30, 1);
    call {:si_unique_call 125} {:cexpr "n_gs"} boogie_si_record_i32($i73);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i74 := $ult.i32($i73, $i1);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i75 := $i73;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i28 := $i75;
    goto $bb7;

  $bb21:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $p29, $i30 := $p72, $i73;
    goto $bb21_dummy;

  $bb10:
    assume $i51 == 1;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p53, $p54, $i55 := $p50, $p37, 0;
    goto $bb13;

  $bb13:
    call $p56, $p57, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $p53, $p54, $i55, $p69 := copy_gadget_strings_loop_$bb13($i2, $p56, $p57, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $p53, $p54, $i55, $p69);
    goto $bb13_last;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p54);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p54, $mul.ref(16, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p53, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i61 == 1);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p56, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, .str.21);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p53, $mul.ref(1, 16));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i55, 1);
    call {:si_unique_call 124} {:cexpr "n_s"} boogie_si_record_i32($i67);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i68 := $ult.i32($i67, $i2);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p69 := $p57;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p52 := $p69;
    goto $bb12;

  $bb18:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $p53, $p54, $i55 := $p66, $p57, $i67;
    goto $bb18_dummy;

  $bb15:
    assume $i61 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p53, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p56, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p63);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p17 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p19 := $p17;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_974;

  $bb21_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_945;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 414956);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i1 := ldv_is_err($p0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 127} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ERR_CAST: ref;

axiom ERR_CAST == $sub.ref(0, 415988);

procedure ERR_CAST($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_CAST($p0: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const get_containers_gs: ref;

axiom get_containers_gs == $sub.ref(0, 417020);

procedure get_containers_gs($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_containers_gs($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 418052);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 419084);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_string_ids_n: ref;

axiom usb_string_ids_n == $sub.ref(0, 420116);

procedure usb_string_ids_n($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_string_ids_n($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i6: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i22: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} {:cexpr "usb_string_ids_n:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    call {:si_unique_call 130} {:cexpr "next"} boogie_si_record_i32($i4);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i1, 254);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i4, $i1);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 254);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i6);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 132} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i1);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i16, $i18);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i20);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i4, 1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const usb_composite_probe: ref;

axiom usb_composite_probe == $sub.ref(0, 421148);

procedure usb_composite_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_composite_probe($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i11: i32;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(32, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 133} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p18, composite_driver_template, 192, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p21);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(72, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p24);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i30 := usb_gadget_probe_driver($p19);
    call {:si_unique_call 135} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i11 := $i30;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, .str.40);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const usb_gadget_probe_driver: ref;

axiom usb_gadget_probe_driver == $sub.ref(0, 422180);

procedure usb_gadget_probe_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_gadget_probe_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_composite_unregister: ref;

axiom usb_composite_unregister == $sub.ref(0, 423212);

procedure usb_composite_unregister($p0: ref);
  free requires assertsPassed;



implementation usb_composite_unregister($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} vslice_dummy_var_56 := usb_gadget_unregister_driver($p1);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_unregister_driver: ref;

axiom usb_gadget_unregister_driver == $sub.ref(0, 424244);

procedure usb_gadget_unregister_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_gadget_unregister_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_composite_setup_continue: ref;

axiom usb_composite_setup_continue == $sub.ref(0, 425276);

procedure usb_composite_setup_continue($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr;



implementation usb_composite_setup_continue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i24;
  var $i81: i24;
  var $i82: i24;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var vslice_dummy_var_57: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p6, .str.10);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p7, .str.41);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p8, .str.12);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p9, .str.42);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.27, $p11);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 2212);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p11, $i14);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p15, 1);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.28, $p16);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 145} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p26 := spinlock_check($p25);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i27 := _raw_spin_lock_irqsave($p26);
    call {:si_unique_call 149} {:cexpr "flags"} boogie_si_record_i64($i27);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i44, 1);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} spin_unlock_irqrestore($p98, $i27);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i49 == 1;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p50, .str.10);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p51, .str.41);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p52, .str.12);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p53, .str.44);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.27, $p55);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 2219);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p55, $i58);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p59, 1);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.28, $p60);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 157} {:cexpr "tmp___2"} boogie_si_record_i64($i64);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $p0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i72 := composite_ep0_queue($p0, $p5, 32);
    call {:si_unique_call 160} {:cexpr "value"} boogie_si_record_i32($i72);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i73 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p74, .str.10);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p75, .str.41);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p76, .str.12);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p77, .str.33);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i80 := $load.i24($M.27, $p79);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i81 := $and.i24($i80, $sub.i24(0, 262144));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i82 := $or.i24($i81, 2224);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p79, $i82);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p83, 1);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.28, $p84);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i64($i85);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i87 := $and.i64($i86, 1);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 162} {:cexpr "tmp___3"} boogie_si_record_i64($i88);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} composite_setup_complete($p97, $p5);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i89 == 1;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p92, .str.33, $i72);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb12:
    assume $i65 == 1;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p68, .str.44, .str.41);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 150} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i33);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 152} {:cexpr "tmp___1"} boogie_si_record_i64($i37);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i33, 0);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} vslice_dummy_var_57 := ldv__builtin_expect($i41, 0);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i38 == 1;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} warn_slowpath_fmt.ref.i32.ref.ref(.str.12, 2216, .str.43, .str.41);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p24, .str.42, .str.41);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 426308);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    return;
}



const composite_ep0_queue: ref;

axiom composite_ep0_queue == $sub.ref(0, 427340);

procedure composite_ep0_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation composite_ep0_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i8;
  var $i26: i8;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var vslice_dummy_var_58: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} {:cexpr "composite_ep0_queue:arg:gfp_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i7 := usb_ep_queue($p6, $p1, $i2);
    call {:si_unique_call 169} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p1);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i20, $i21);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32(1, 0);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 171} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32(1, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_58 := ldv__builtin_expect($i34, 0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} warn_slowpath_fmt.ref.i32.ref.ref(.str.12, 1288, .str.55, $p1);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(216, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i25 := $and.i8($i24, $sub.i8(0, 3));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i26 := $or.i8($i25, 2);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i26);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(216, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, $sub.i8(0, 2));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i17 := $or.i8($i16, 1);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i17);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const composite_setup_complete: ref;

axiom composite_setup_complete == $sub.ref(0, 428372);

procedure composite_setup_complete($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr;



implementation composite_setup_complete($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i8;
  var $i62: i1;
  var $i63: i32;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $i67: i1;
  var $i68: i32;
  var $i69: i64;
  var vslice_dummy_var_59: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i7, $i9);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i48, $i49);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p45, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p1);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i56, $i57);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i58 == 1);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32(1, 0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 179} {:cexpr "tmp___0"} boogie_si_record_i64($i65);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32(1, 0);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} vslice_dummy_var_59 := ldv__builtin_expect($i69, 0);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i66 == 1;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} warn_slowpath_fmt.ref.i32.ref.ref(.str.12, 1273, .str.55, $p1);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i58 == 1;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p45, $mul.ref(0, 224)), $mul.ref(216, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i61 := $and.i8($i60, $sub.i8(0, 3));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i61);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p45, $mul.ref(0, 224)), $mul.ref(216, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i53 := $and.i8($i52, $sub.i8(0, 2));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i53);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p11, .str.10);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p12, .str.53);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p13, .str.12);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p14, .str.54);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.27, $p16);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 1254);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p16, $i19);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p20, 1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.28, $p21);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 176} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p2, $p32, .str.54, $i34, $i36, $i38);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const usb_ep_queue: ref;

axiom usb_ep_queue == $sub.ref(0, 429404);

procedure usb_ep_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_ep_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} {:cexpr "usb_ep_queue:arg:gfp_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 183} $i7 := devirtbounce.5($p6, $p0, $p1, $i2);
    call {:si_unique_call 184} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const usb_composite_overwrite_options: ref;

axiom usb_composite_overwrite_options == $sub.ref(0, 430436);

procedure usb_composite_overwrite_options($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_composite_overwrite_options($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p72: ref;
  var $i73: i8;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i55 := strlen($p54);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i64($i55);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i70 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p9, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(15, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i73);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p9, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p76);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(14, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i58);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $p62 := composite_default_mfr($p61);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(128, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p62);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(128, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p65);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(14, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i48);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p51);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p9, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(16, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $i37);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p40);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(12, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, $i29);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(10, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i22);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(8, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i15);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const composite_default_mfr: ref;

axiom composite_default_mfr == $sub.ref(0, 431468);

procedure composite_default_mfr($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation composite_default_mfr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p15: ref;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p1 := init_utsname();
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p2 := init_utsname();
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 390)), $mul.ref(0, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 390)), $mul.ref(130, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(136, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i9 := snprintf.ref.i64.ref.ref.ref.ref($0.ref, 0, .str.62, $p4, $p6, $p8);
    call {:si_unique_call 191} {:cexpr "len"} boogie_si_record_i32($i9);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    call {:si_unique_call 192} {:cexpr "len"} boogie_si_record_i32($i10);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p12 := kmalloc($i11, 208);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p16 := init_utsname();
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $p17 := init_utsname();
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i10);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref(0, 390)), $mul.ref(0, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 390)), $mul.ref(130, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(136, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} vslice_dummy_var_60 := snprintf.ref.i64.ref.ref.ref.ref($p12, $i18, .str.62, $p20, $p22, $p24);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p15 := $p12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb3;
}



const init_utsname: ref;

axiom init_utsname == $sub.ref(0, 432500);

procedure init_utsname() returns ($r: ref);
  free requires assertsPassed;



implementation init_utsname() returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $r := $add.ref($add.ref(init_uts_ns, $mul.ref(0, 432)), $mul.ref(4, 1));
    return;
}



const usb_get_function_instance: ref;

axiom usb_get_function_instance == $sub.ref(0, 433532);

procedure usb_get_function_instance($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, assertsPassed;



implementation usb_get_function_instance($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $p18: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p1 := try_get_usb_function_instance($p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i3 := IS_ERR($p2);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i10 := PTR_ERR($p9);
    call {:si_unique_call 201} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 202} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, $sub.i32(0, 2));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i13 := __request_module.i1.ref.ref(1, .str.45, $p0);
    call {:si_unique_call 204} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p18 := try_get_usb_function_instance($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p8 := $p18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i13);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $p16 := ERR_PTR($i15);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p8 := $p16;
    goto $bb6;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p8 := $p1;
    goto $bb6;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p8 := $p1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const try_get_usb_function_instance: ref;

axiom try_get_usb_function_instance == $sub.ref(0, 434564);

procedure try_get_usb_function_instance($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, assertsPassed;



implementation try_get_usb_function_instance($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p9: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p1 := ERR_PTR($sub.i64(0, 2));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} mutex_lock_nested(func_lock, 0);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, func_list);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 16), 48));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 16), 48)), $mul.ref(16, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, $p2i.ref.i64(func_list));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p24 := $p1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} mutex_unlock(func_lock);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $r := $p24;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p9 := $p5;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $i13, $p14, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $p9 := try_get_usb_function_instance_loop_$bb4($p0, $p10, $p11, $i12, $i13, $p14, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $p9);
    goto $bb4_last;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i12 := strcmp($p0, $p11);
    call {:si_unique_call 210} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p14 := $p9;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i17 := ldv_try_module_get_21($p16);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 212} {:cexpr "tmp___2"} boogie_si_record_i8($i18);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 215} $p27 := devirtbounce.6($p26);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i29 := IS_ERR($p28);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 217} {:cexpr "tmp___4"} boogie_si_record_i8($i30);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p27, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p14);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p24 := $p27;
    goto $bb15;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} ldv_module_put_22($p33);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p22 := ERR_PTR($sub.i64(0, 16));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p24 := $p22;
    goto $bb15;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb12;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref($sub.ref(0, 16), 48));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p38, $mul.ref($sub.ref(0, 16), 48)), $mul.ref(16, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, $p2i.ref.i64(func_list));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p9 := $p39;
    goto $bb20_dummy;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 435596);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 220} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 436628);

procedure __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 221} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 222} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 223} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 437660);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 438692);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    return;
}



const ldv_try_module_get_21: ref;

axiom ldv_try_module_get_21 == $sub.ref(0, 439724);

procedure ldv_try_module_get_21($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.29;



implementation ldv_try_module_get_21($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 226} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_22: ref;

axiom ldv_module_put_22 == $sub.ref(0, 440756);

procedure ldv_module_put_22($p0: ref);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_module_put_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} ldv_module_put($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 441788);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 442820);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i3 := $M.29;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.29;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $M.29 := $i6;
    call {:si_unique_call 229} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} ldv_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 443852);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 230} __VERIFIER_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 444884);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i3 := ldv_undef_int();
    call {:si_unique_call 232} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i5 := $M.29;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.29 := $i6;
    call {:si_unique_call 233} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 445916);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 1} true;
    call {:si_unique_call 234} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 235} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 236} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const usb_get_function: ref;

axiom usb_get_function == $sub.ref(0, 446948);

procedure usb_get_function($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, assertsPassed, $CurrAddr;



implementation usb_get_function($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 237} $p5 := devirtbounce.7($p4, $p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i7 := IS_ERR($p6);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 239} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const usb_put_function_instance: ref;

axiom usb_put_function_instance == $sub.ref(0, 447980);

procedure usb_put_function_instance($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation usb_put_function_instance($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 240} devirtbounce.8($p8, $p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} ldv_module_put_23($p6);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_module_put_23: ref;

axiom ldv_module_put_23 == $sub.ref(0, 449012);

procedure ldv_module_put_23($p0: ref);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_module_put_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} ldv_module_put($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const usb_put_function: ref;

axiom usb_put_function == $sub.ref(0, 450044);

procedure usb_put_function($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation usb_put_function($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(80, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 243} devirtbounce.1($p4, $p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_function_register: ref;

axiom usb_function_register == $sub.ref(0, 451076);

procedure usb_function_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_function_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p7: ref;
  var $p23: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} mutex_lock_nested(func_lock, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, func_list);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 16), 48));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 48)), $mul.ref(16, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, $p2i.ref.i64(func_list));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} list_add_tail($p23, func_list);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} mutex_unlock(func_lock);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb4;

  $bb4:
    call $p8, $p9, $p10, $p11, $i12, $i13, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $p7 := usb_function_register_loop_$bb4($p0, $p8, $p9, $p10, $p11, $i12, $i13, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $p7);
    goto $bb4_last;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i12 := strcmp($p9, $p11);
    call {:si_unique_call 246} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 16), 48));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 16), 48)), $mul.ref(16, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, $p2i.ref.i64(func_list));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p19;
    goto $bb10_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 17);
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1766;
}



const usb_function_unregister: ref;

axiom usb_function_unregister == $sub.ref(0, 452108);

procedure usb_function_unregister($p0: ref);
  free requires assertsPassed;



implementation usb_function_unregister($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} mutex_lock_nested(func_lock, 0);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} list_del($p1);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} mutex_unlock(func_lock);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    return;
}



const usb_os_desc_prepare_interf_dir: ref;

axiom usb_os_desc_prepare_interf_dir == $sub.ref(0, 453140);

procedure usb_os_desc_prepare_interf_dir($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 454172);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 253} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const config_group_init_type_name: ref;

axiom config_group_init_type_name == $sub.ref(0, 455204);

procedure config_group_init_type_name($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation config_group_init_type_name($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    return;
}



const config_item_set_name: ref;

axiom config_item_set_name == $sub.ref(0, 456236);

procedure config_item_set_name.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation config_item_set_name.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 1} true;
    call {:si_unique_call 255} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 256} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure config_item_set_name.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const unregister_gadget_item: ref;

axiom unregister_gadget_item == $sub.ref(0, 457268);

procedure unregister_gadget_item($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation unregister_gadget_item($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $p1 := to_gadget_info($p0);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} vslice_dummy_var_61 := unregister_gadget($p1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    return;
}



const to_gadget_info: ref;

axiom to_gadget_info == $sub.ref(0, 458300);

procedure to_gadget_info($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_gadget_info($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p1 := to_config_group($p0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const unregister_gadget: ref;

axiom unregister_gadget == $sub.ref(0, 459332);

procedure unregister_gadget($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation unregister_gadget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(816, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(72, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i8 := usb_gadget_unregister_driver($p7);
    call {:si_unique_call 261} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(816, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} kfree($p11);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(816, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const to_config_group: ref;

axiom to_config_group == $sub.ref(0, 460364);

procedure to_config_group($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_config_group($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const alloc_ep_req: ref;

axiom alloc_ep_req == $sub.ref(0, 461396);

procedure alloc_ep_req($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);



const usb_ep_alloc_request: ref;

axiom usb_ep_alloc_request == $sub.ref(0, 462428);

procedure usb_ep_alloc_request($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ep_alloc_request($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} {:cexpr "usb_ep_alloc_request:arg:gfp_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    call {:si_unique_call 264} $p6 := devirtbounce.9($p5, $p0, $i1);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const usb_ep_free_request: ref;

axiom usb_ep_free_request == $sub.ref(0, 463460);

procedure usb_ep_free_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $M.29, $CurrAddr, assertsPassed;



implementation usb_ep_free_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    call {:si_unique_call 265} devirtbounce.10($p5, $p0, $p1);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const suspended_show: ref;

axiom suspended_show == $sub.ref(0, 464492);

procedure suspended_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation suspended_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i8;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p3 := dev_to_usb_gadget($p0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p4 := get_gadget_data($p3);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 224)), $mul.ref(56, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i8($i7, 1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i9 := $and.i8($i8, 1);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i11 := sprintf.ref.ref.i32($p2, .str.63, $i10);
    call {:si_unique_call 269} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const dev_to_usb_gadget: ref;

axiom dev_to_usb_gadget == $sub.ref(0, 465524);

procedure dev_to_usb_gadget($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_to_usb_gadget($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 144), 1584));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 466556);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const composite_bind: ref;

axiom composite_bind == $sub.ref(0, 467588);

procedure composite_bind($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed;



implementation composite_bind($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i20: i32;
  var $i8: i32;
  var vslice_dummy_var_62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p3 := to_cdriver($p1);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p4 := kzalloc(224, 208);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vslice_dummy_var_62 := spinlock_check($p9);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 224)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} __raw_spin_lock_init($p13, .str.64, $p2);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} set_gadget_data($p0, $p15);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} INIT_LIST_HEAD($p16);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 224)), $mul.ref(96, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} INIT_LIST_HEAD($p17);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i18 := composite_dev_prepare($p3, $p5);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 279} {:cexpr "status"} boogie_si_record_i32($i18);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(32, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 281} $i23 := devirtbounce.11($p22, $p5);
    call {:si_unique_call 282} {:cexpr "status"} boogie_si_record_i32($i23);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p5);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(56, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 224)), $mul.ref(58, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} update_unchanged_dev_desc($p34, $p36);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p3);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(28, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} _dev_info.ref.ref.ref($p52, .str.66, $p54);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(16, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb20;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} dev_warn.ref.ref($p49, .str.65);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i32 := composite_os_desc_req_prepare($p5, $p31);
    call {:si_unique_call 284} {:cexpr "status"} boogie_si_record_i32($i32);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i20 := $i32;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} __composite_unbind($p0, 0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i8 := $i20;
    goto $bb3;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb7;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb7;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const composite_unbind: ref;

axiom composite_unbind == $sub.ref(0, 468620);

procedure composite_unbind($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation composite_unbind($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} __composite_unbind($p0, 1);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const composite_setup: ref;

axiom composite_setup == $sub.ref(0, 469652);

procedure composite_setup($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr, $M.29, assertsPassed;



implementation composite_setup($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i8;
  var $p17: ref;
  var $i18: i16;
  var $p19: ref;
  var $i20: i16;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i32;
  var $i68: i8;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i16;
  var $i77: i8;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i96: i32;
  var $i95: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i16;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i125: i32;
  var $i124: i32;
  var $i126: i32;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i16;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $i135: i16;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i141: i32;
  var $i140: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i16;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i152: i32;
  var $i151: i32;
  var $i153: i32;
  var $i102: i32;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $i163: i8;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i24;
  var $i173: i24;
  var $i174: i24;
  var $p175: ref;
  var $p176: ref;
  var $i177: i8;
  var $i178: i64;
  var $i179: i64;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i24;
  var $i197: i24;
  var $i198: i24;
  var $p199: ref;
  var $p200: ref;
  var $i201: i8;
  var $i202: i64;
  var $i203: i64;
  var $i204: i64;
  var $i205: i1;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i24;
  var $i216: i24;
  var $i217: i24;
  var $p218: ref;
  var $p219: ref;
  var $i220: i8;
  var $i221: i64;
  var $i222: i64;
  var $i223: i64;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i32;
  var $i230: i32;
  var $p231: ref;
  var $p232: ref;
  var $i233: i8;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $p237: ref;
  var $i238: i64;
  var $i239: i1;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i8;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i253: i32;
  var $i252: i32;
  var $p254: ref;
  var $i255: i8;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $p259: ref;
  var $i260: i64;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i64;
  var $p266: ref;
  var $p267: ref;
  var $p269: ref;
  var $p270: ref;
  var $i271: i64;
  var $i272: i1;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $p276: ref;
  var $i277: i64;
  var $i278: i1;
  var $p279: ref;
  var $p280: ref;
  var $i281: i32;
  var $i282: i32;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i24;
  var $i292: i24;
  var $i293: i24;
  var $p294: ref;
  var $p295: ref;
  var $i296: i8;
  var $i297: i64;
  var $i298: i64;
  var $i299: i64;
  var $i300: i1;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $i304: i32;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $i308: i32;
  var $i309: i32;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $i317: i24;
  var $i318: i24;
  var $i319: i24;
  var $p320: ref;
  var $p321: ref;
  var $i322: i8;
  var $i323: i64;
  var $i324: i64;
  var $i325: i64;
  var $i326: i1;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $i331: i32;
  var $p332: ref;
  var $i333: i8;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $p337: ref;
  var $i338: i64;
  var $i339: i1;
  var $i340: i32;
  var $i341: i1;
  var $i342: i32;
  var $i343: i64;
  var $p344: ref;
  var $p345: ref;
  var $p347: ref;
  var $p348: ref;
  var $i349: i64;
  var $i350: i1;
  var $p351: ref;
  var $p352: ref;
  var $i353: i64;
  var $i354: i1;
  var $p355: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i32;
  var $i359: i32;
  var $i360: i1;
  var $i361: i8;
  var $p362: ref;
  var $p363: ref;
  var $i364: i32;
  var $i365: i32;
  var $i366: i1;
  var $i367: i32;
  var $i369: i32;
  var $i368: i32;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $i373: i8;
  var $i374: i32;
  var $i375: i1;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $i380: i64;
  var $i381: i1;
  var $i382: i32;
  var $i383: i1;
  var $i384: i32;
  var $i385: i64;
  var $p386: ref;
  var $p387: ref;
  var $p389: ref;
  var $p390: ref;
  var $i391: i64;
  var $i392: i1;
  var $p393: ref;
  var $p394: ref;
  var $i395: i64;
  var $i396: i1;
  var $p397: ref;
  var $p398: ref;
  var $i399: i32;
  var $i400: i32;
  var $i401: i1;
  var $i402: i16;
  var $i403: i32;
  var $i404: i16;
  var $p405: ref;
  var $p406: ref;
  var $i407: i32;
  var $i408: i1;
  var $p409: ref;
  var $i410: i8;
  var $i411: i32;
  var $i412: i1;
  var $i413: i32;
  var $i414: i1;
  var $p415: ref;
  var $p416: ref;
  var $i417: i64;
  var $i418: i1;
  var $i419: i32;
  var $i420: i1;
  var $i422: i32;
  var $i423: i64;
  var $p424: ref;
  var $p425: ref;
  var $p427: ref;
  var $p428: ref;
  var $i429: i64;
  var $i430: i1;
  var $p431: ref;
  var $p432: ref;
  var $i433: i64;
  var $i434: i1;
  var $p435: ref;
  var $p436: ref;
  var $i437: i32;
  var $i438: i32;
  var $i439: i8;
  var $i440: i32;
  var $i441: i8;
  var $i442: i32;
  var $i443: i32;
  var $i444: i1;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $i448: i32;
  var $i421: i32;
  var $p449: ref;
  var $p450: ref;
  var $i451: i8;
  var $i452: i32;
  var $i453: i1;
  var $p454: ref;
  var $p455: ref;
  var $i456: i64;
  var $i457: i1;
  var $p458: ref;
  var $i459: i8;
  var $i460: i32;
  var $i461: i32;
  var $i462: i1;
  var $p463: ref;
  var $i464: i8;
  var $i465: i32;
  var $p466: ref;
  var $i467: i8;
  var $i468: i32;
  var $i469: i1;
  var $p470: ref;
  var $p471: ref;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $p478: ref;
  var $i479: i64;
  var $p480: ref;
  var $p481: ref;
  var $i482: i8;
  var $i483: i32;
  var $i484: i32;
  var $i485: i1;
  var $i486: i1;
  var $i487: i1;
  var $i488: i32;
  var $i489: i1;
  var $i490: i32;
  var $i491: i32;
  var $i492: i1;
  var $i494: i8;
  var $p495: ref;
  var $i496: i32;
  var $i497: i1;
  var $i498: i32;
  var $i499: i8;
  var $p500: ref;
  var $i501: i32;
  var $i502: i32;
  var $i503: i32;
  var $i505: i32;
  var $i506: i8;
  var $p507: ref;
  var $i508: i32;
  var $i509: i32;
  var $p510: ref;
  var $i511: i32;
  var $i504: i32;
  var $i512: i32;
  var $i513: i1;
  var $i514: i32;
  var $i515: i32;
  var $i516: i1;
  var $i517: i32;
  var $i518: i32;
  var $i519: i8;
  var $p520: ref;
  var $i521: i32;
  var $i522: i1;
  var $i523: i32;
  var $i524: i16;
  var $i525: i32;
  var $i526: i16;
  var $p527: ref;
  var $i528: i32;
  var $i529: i32;
  var $i531: i32;
  var $i532: i16;
  var $i533: i32;
  var $i534: i16;
  var $p535: ref;
  var $i536: i32;
  var $p537: ref;
  var $i538: i32;
  var $i539: i1;
  var $i541: i32;
  var $i530: i32;
  var $i493: i32;
  var $p542: ref;
  var $p544: ref;
  var $i545: i32;
  var $i546: i1;
  var $i547: i32;
  var $i548: i8;
  var $p549: ref;
  var $i550: i8;
  var $i551: i8;
  var $i552: i8;
  var $i553: i8;
  var $i554: i8;
  var $i555: i32;
  var $i556: i1;
  var $p557: ref;
  var $p558: ref;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $i563: i24;
  var $i564: i24;
  var $i565: i24;
  var $p566: ref;
  var $p567: ref;
  var $i568: i8;
  var $i569: i64;
  var $i570: i64;
  var $i571: i64;
  var $i572: i1;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $p580: ref;
  var $p581: ref;
  var $p582: ref;
  var $p583: ref;
  var $p584: ref;
  var $i585: i24;
  var $i586: i24;
  var $i587: i24;
  var $p588: ref;
  var $p589: ref;
  var $i590: i8;
  var $i591: i64;
  var $i592: i64;
  var $i593: i64;
  var $i594: i1;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $i599: i8;
  var $i600: i32;
  var $p601: ref;
  var $i602: i8;
  var $i603: i32;
  var $i604: i32;
  var $i605: i32;
  var $i606: i32;
  var $p607: ref;
  var $p608: ref;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $i615: i64;
  var $p616: ref;
  var $p617: ref;
  var $p618: ref;
  var $i619: i64;
  var $i620: i1;
  var $p622: ref;
  var $p623: ref;
  var $i624: i64;
  var $i625: i1;
  var $p626: ref;
  var $p627: ref;
  var $i628: i1;
  var $i629: i8;
  var $i630: i1;
  var $p631: ref;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $p638: ref;
  var $i639: i64;
  var $p640: ref;
  var $p641: ref;
  var $i642: i64;
  var $i643: i1;
  var $p621: ref;
  var $p644: ref;
  var $i645: i8;
  var $i646: i32;
  var $i647: i32;
  var $i648: i1;
  var $i649: i1;
  var $i650: i1;
  var $p651: ref;
  var $p652: ref;
  var $i653: i64;
  var $i654: i1;
  var $i655: i32;
  var $i656: i1;
  var $i658: i32;
  var $i659: i64;
  var $p660: ref;
  var $p661: ref;
  var $p663: ref;
  var $p664: ref;
  var $i665: i32;
  var $i666: i32;
  var $i667: i32;
  var $i668: i8;
  var $i669: i32;
  var $i670: i8;
  var $i671: i32;
  var $i672: i32;
  var $i673: i32;
  var $i674: i8;
  var $p675: ref;
  var $p676: ref;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $p682: ref;
  var $i683: i64;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $i687: i64;
  var $i688: i1;
  var $i691: i64;
  var $p692: ref;
  var $p693: ref;
  var $i694: i32;
  var $i695: i1;
  var $p696: ref;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $p703: ref;
  var $i704: i64;
  var $p705: ref;
  var $p706: ref;
  var $i707: i64;
  var $i708: i1;
  var $p690: ref;
  var $p709: ref;
  var $p689: ref;
  var $p697: ref;
  var $p710: ref;
  var $i711: i64;
  var $p712: ref;
  var $p713: ref;
  var $p714: ref;
  var $i715: i64;
  var $i716: i1;
  var $p717: ref;
  var $p657: ref;
  var $p632: ref;
  var $i718: i64;
  var $i719: i1;
  var $p720: ref;
  var $p721: ref;
  var $i722: i64;
  var $i723: i1;
  var $p724: ref;
  var $p725: ref;
  var $i726: i32;
  var $p728: ref;
  var $p729: ref;
  var $i730: i64;
  var $i731: i1;
  var $p733: ref;
  var $p734: ref;
  var $i735: i64;
  var $i736: i1;
  var $p737: ref;
  var $p738: ref;
  var $i739: i32;
  var $p740: ref;
  var $i741: i32;
  var $i742: i1;
  var $p744: ref;
  var $p745: ref;
  var $p746: ref;
  var $p747: ref;
  var $p748: ref;
  var $p749: ref;
  var $i750: i64;
  var $i751: i1;
  var $p752: ref;
  var $p753: ref;
  var $i754: i32;
  var $i755: i32;
  var $i727: i32;
  var $i154: i32;
  var $i756: i1;
  var $i757: i1;
  var $p758: ref;
  var $p760: ref;
  var $i761: i32;
  var $i762: i1;
  var $i763: i32;
  var $i764: i8;
  var $p765: ref;
  var $i766: i8;
  var $i767: i8;
  var $i768: i8;
  var $i769: i8;
  var $i770: i8;
  var $i771: i32;
  var $i772: i1;
  var $p773: ref;
  var $p774: ref;
  var $p775: ref;
  var $p776: ref;
  var $p777: ref;
  var $p778: ref;
  var $i779: i24;
  var $i780: i24;
  var $i781: i24;
  var $p782: ref;
  var $p783: ref;
  var $i784: i8;
  var $i785: i64;
  var $i786: i64;
  var $i787: i64;
  var $i788: i1;
  var $p789: ref;
  var $p790: ref;
  var $p791: ref;
  var $p792: ref;
  var $p793: ref;
  var $p794: ref;
  var $i796: i1;
  var $i797: i32;
  var $i798: i1;
  var $i799: i64;
  var $i800: i1;
  var $i801: i32;
  var $i802: i1;
  var $i803: i32;
  var $i804: i64;
  var $i805: i64;
  var $i806: i1;
  var $i807: i1;
  var $i808: i32;
  var $i809: i64;
  var $i795: i32;
  var $i732: i32;
  var $i540: i32;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_63: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p10 := get_gadget_data($p0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    call {:si_unique_call 298} {:cexpr "w_index"} boogie_si_record_i16($i15);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i16.i8($i15);
    call {:si_unique_call 299} {:cexpr "intf"} boogie_si_record_i8($i16);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    call {:si_unique_call 300} {:cexpr "w_value"} boogie_si_record_i16($i18);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    call {:si_unique_call 301} {:cexpr "w_length"} boogie_si_record_i16($i20);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(42, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, $sub.i8(0, 3));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i23);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p10);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, composite_setup_complete);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p10);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 96);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i39, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i39, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p449 := $bitcast.ref.ref($p11);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($p449, $mul.ref(56, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i451 := $load.i8($M.0, $p450);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i452 := $zext.i8.i32($i451);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i453 := $ne.i32($i452, 0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume !($i453 == 1);
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p579, .str.10);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p580, .str.26);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p581, .str.12);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p582, .str.34);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p584 := $bitcast.ref.ref($p583);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i585 := $load.i24($M.27, $p584);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i586 := $and.i24($i585, $sub.i24(0, 262144));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i587 := $or.i24($i586, 1751);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p584, $i587);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p588, 1);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i590 := $load.i8($M.28, $p589);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i591 := $zext.i8.i64($i590);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i592 := $and.i64($i591, 1);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i593 := ldv__builtin_expect($i592, 0);
    call {:si_unique_call 398} {:cexpr "tmp___16"} boogie_si_record_i64($i593);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i594 := $ne.i64($i593, 0);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i594 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p608 := $load.ref($M.0, $p607);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($add.ref($p608, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p611 := $load.ref($M.0, $p610);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p612 := $bitcast.ref.ref($p611);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($p612, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p612, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i615 := $p2i.ref.i64($p614);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p617 := $load.ref($M.0, $p616);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p617, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i619 := $p2i.ref.i64($p618);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i620 := $ne.i64($i615, $i619);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i620} true;
    goto $bb278, $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    assume !($i620 == 1);
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i645 := $load.i8($M.0, $p644);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i646 := $zext.i8.i32($i645);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i647 := $and.i32($i646, 31);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $i648 := $slt.i32($i647, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i648} true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i648 == 1);
    assume {:verifier.code 0} true;
    $i649 := $eq.i32($i647, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    assume !($i649 == 1);
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $p657 := $0.ref;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p632 := $p657;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i718 := $p2i.ref.i64($p632);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i719 := $ne.i64($i718, 0);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i719} true;
    goto $bb324, $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    assume !($i719 == 1);
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p729 := $load.ref($M.0, $p728);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i730 := $p2i.ref.i64($p729);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i731 := $eq.i64($i730, 0);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i731} true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p729, $mul.ref(0, 224)), $mul.ref(32, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p734 := $load.ref($M.0, $p733);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i735 := $p2i.ref.i64($p734);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i736 := $ne.i64($i735, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i736} true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i736 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p729, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i741 := list_is_singular($p740);
    call {:si_unique_call 410} {:cexpr "tmp___19"} boogie_si_record_i32($i741);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i742 := $eq.i32($i741, 0);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i742} true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i742 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($add.ref($p729, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p745 := $load.ref($M.0, $p744);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p746 := $bitcast.ref.ref($p745);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($p746, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($add.ref($p746, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(120, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p749 := $load.ref($M.0, $p748);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i750 := $p2i.ref.i64($p749);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i751 := $ne.i64($i750, 0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i751 == 1);
    assume {:verifier.code 0} true;
    $i755 := $sub.i32(0, 95);
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i727 := $i755;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i732 := $i727;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i540 := $i732;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $r := $i540;
    return;

  $bb340:
    assume $i751 == 1;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($p746, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(120, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p753 := $load.ref($M.0, $p752);
    call {:si_unique_call 411} $i754 := devirtbounce.17($p753, $p747, $p1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 412} {:cexpr "value"} boogie_si_record_i32($i754);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i755 := $i754;
    goto $bb342;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb337:
    assume $i742 == 1;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i732 := $sub.i32(0, 95);
    goto $bb332;

  $bb334:
    assume $i736 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($p729, $mul.ref(0, 224)), $mul.ref(32, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p738 := $load.ref($M.0, $p737);
    call {:si_unique_call 407} $i739 := devirtbounce.18($p738, $p729, $p1);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 408} {:cexpr "value"} boogie_si_record_i32($i739);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i732 := $i739;
    goto $bb332;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb330:
    assume $i731 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i732 := $sub.i32(0, 95);
    goto $bb332;

  $bb324:
    assume $i719 == 1;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($p632, $mul.ref(0, 200)), $mul.ref(120, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p721 := $load.ref($M.0, $p720);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i722 := $p2i.ref.i64($p721);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i723 := $ne.i64($i722, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i723} true;
    goto $bb327, $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    assume !($i723 == 1);
    goto $bb326;

  $bb327:
    assume $i723 == 1;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p632, $mul.ref(0, 200)), $mul.ref(120, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p725 := $load.ref($M.0, $p724);
    call {:si_unique_call 405} $i726 := devirtbounce.17($p725, $p632, $p1);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 406} {:cexpr "value"} boogie_si_record_i32($i726);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i727 := $i726;
    goto $bb329;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb296:
    assume $i649 == 1;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i665 := $zext.i16.i32($i15);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i666 := $and.i32($i665, 128);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i667 := $ashr.i32($i666, 3);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i668 := $trunc.i32.i8($i667);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i669 := $sext.i8.i32($i668);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i670 := $trunc.i16.i8($i15);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i671 := $sext.i8.i32($i670);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i672 := $and.i32($i671, 15);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i673 := $or.i32($i669, $i672);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i674 := $trunc.i32.i8($i673);
    call {:si_unique_call 402} {:cexpr "endp"} boogie_si_record_i8($i674);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p676 := $load.ref($M.0, $p675);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($add.ref($p676, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p679 := $load.ref($M.0, $p678);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p680 := $bitcast.ref.ref($p679);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($p680, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p680, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i683 := $p2i.ref.i64($p682);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p685 := $load.ref($M.0, $p684);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p685, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i687 := $p2i.ref.i64($p686);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i688 := $ne.i64($i683, $i687);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p689 := $p681;
    assume {:branchcond $i688} true;
    goto $bb308, $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    assume !($i688 == 1);
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p697 := $p689;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p697, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i711 := $p2i.ref.i64($p710);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p713 := $load.ref($M.0, $p712);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($p713, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i715 := $p2i.ref.i64($p714);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i716 := $eq.i64($i711, $i715);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i716} true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i716 == 1);
    assume {:verifier.code 0} true;
    $p717 := $p697;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p657 := $p717;
    goto $bb306;

  $bb320:
    assume $i716 == 1;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p717 := $0.ref;
    goto $bb322;

  $bb308:
    assume $i688 == 1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p690 := $p681;
    goto $bb311;

  $bb311:
    call $i691, $p692, $p693, $i694, $i695, $p696, $p699, $p700, $p701, $p702, $p703, $i704, $p705, $p706, $i707, $i708, $p690, $p709 := composite_setup_loop_$bb311($i674, $p684, $i691, $p692, $p693, $i694, $i695, $p696, $p699, $p700, $p701, $p702, $p703, $i704, $p705, $p706, $i707, $i708, $p690, $p709);
    goto $bb311_last;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $i691 := $zext.i8.i64($i674);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($p690, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p693 := $bitcast.ref.ref($p692);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i694 := variable_test_bit($i691, $p693);
    call {:si_unique_call 404} {:cexpr "tmp___18"} boogie_si_record_i32($i694);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i695 := $ne.i32($i694, 0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p696 := $p690;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i695 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($add.ref($p690, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p700 := $load.ref($M.0, $p699);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p701 := $bitcast.ref.ref($p700);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($p701, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($p701, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i704 := $p2i.ref.i64($p703);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p705 := $load.ref($M.0, $p684);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p705, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i707 := $p2i.ref.i64($p706);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i708 := $ne.i64($i704, $i707);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p709 := $p702;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i708 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p689 := $p709;
    goto $bb310;

  $bb317:
    assume $i708 == 1;
    assume {:verifier.code 0} true;
    $p690 := $p702;
    goto $bb317_dummy;

  $bb313:
    assume $i695 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p697 := $p696;
    goto $bb315;

  $bb294:
    assume $i648 == 1;
    assume {:verifier.code 0} true;
    $i650 := $eq.i32($i647, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i650} true;
    goto $bb299, $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    assume !($i650 == 1);
    goto $bb298;

  $bb299:
    assume $i650 == 1;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p652 := $load.ref($M.0, $p651);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i653 := $p2i.ref.i64($p652);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i654 := $eq.i64($i653, 0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb303;

  $bb303:
    assume !($i654 == 1);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i655 := $zext.i8.i32($i16);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i656 := $ugt.i32($i655, 15);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i656 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $i658 := $zext.i8.i32($i16);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i659 := $sext.i32.i64($i658);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p661 := $load.ref($M.0, $p660);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($add.ref($p661, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i659, 8));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p664 := $load.ref($M.0, $p663);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p657 := $p664;
    goto $bb306;

  $bb304:
    assume {:verifier.code 0} true;
    assume $i656 == 1;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p657 := $0.ref;
    goto $bb306;

  $bb301:
    assume {:verifier.code 0} true;
    assume $i654 == 1;
    goto $bb302;

  $bb278:
    assume $i620 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p621 := $p613;
    goto $bb281;

  $bb281:
    call $p622, $p623, $i624, $i625, $p626, $p627, $i628, $i629, $i630, $p631, $p634, $p635, $p636, $p637, $p638, $i639, $p640, $p641, $i642, $i643, $p621 := composite_setup_loop_$bb281($p1, $p616, $p622, $p623, $i624, $i625, $p626, $p627, $i628, $i629, $i630, $p631, $p634, $p635, $p636, $p637, $p638, $i639, $p640, $p641, $i642, $i643, $p621);
    goto $bb281_last;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p621, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p623 := $load.ref($M.0, $p622);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i624 := $p2i.ref.i64($p623);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i625 := $ne.i64($i624, 0);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i625 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($add.ref($p621, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p635 := $load.ref($M.0, $p634);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p636 := $bitcast.ref.ref($p635);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($p636, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($p636, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i639 := $p2i.ref.i64($p638);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p640 := $load.ref($M.0, $p616);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p640, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i642 := $p2i.ref.i64($p641);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i643 := $ne.i64($i639, $i642);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i643 == 1);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb290:
    assume $i643 == 1;
    assume {:verifier.code 0} true;
    $p621 := $p637;
    goto $bb290_dummy;

  $bb283:
    assume $i625 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p621, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p627 := $load.ref($M.0, $p626);
    call {:si_unique_call 400} $i628 := devirtbounce.16($p627, $p621, $p1);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i629 := $zext.i1.i8($i628);
    call {:si_unique_call 401} {:cexpr "tmp___17"} boogie_si_record_i8($i629);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i630 := $trunc.i8.i1($i629);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p631 := $p621;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb285:
    assume $i630 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p632 := $p631;
    goto $bb287;

  $bb275:
    assume $i594 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p596 := $load.ref($M.0, $p595);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p596, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i599 := $load.i8($M.0, $p598);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i600 := $zext.i8.i32($i599);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i602 := $load.i8($M.0, $p601);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i603 := $zext.i8.i32($i602);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i604 := $zext.i16.i32($i18);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i605 := $zext.i16.i32($i15);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i606 := $zext.i16.i32($i20);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32($p8, $p597, .str.34, $i600, $i603, $i604, $i605, $i606);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb227:
    assume $i453 == 1;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p455 := $load.ref($M.0, $p454);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i456 := $p2i.ref.i64($p455);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i457 := $ne.i64($i456, 0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i457} true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i457 == 1);
    goto $bb229;

  $bb230:
    assume $i457 == 1;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i459 := $load.i8($M.0, $p458);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i460 := $zext.i8.i32($i459);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i461 := $and.i32($i460, 64);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i462 := $ne.i32($i461, 0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i462 == 1);
    goto $bb229;

  $bb232:
    assume $i462 == 1;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i464 := $load.i8($M.0, $p463);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i465 := $zext.i8.i32($i464);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(46, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i467 := $load.i8($M.0, $p466);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i468 := $zext.i8.i32($i467);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i469 := $eq.i32($i465, $i468);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume !($i469 == 1);
    goto $bb229;

  $bb234:
    assume $i469 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p471 := $load.ref($M.0, $p470);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p471, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p473, $p10);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p471, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p474, composite_setup_complete);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p471, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p476 := $load.ref($M.0, $p475);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.0, $p477);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i479 := $zext.i16.i64($i20);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 360} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p476, 0, $i479, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($p476, $mul.ref(5, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p480, 1);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i482 := $load.i8($M.0, $p481);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i483 := $zext.i8.i32($i482);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i484 := $and.i32($i483, 31);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i485 := $slt.i32($i484, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i484, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i486} true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i486 == 1);
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $i493 := $sub.i32(0, 95);
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p471, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p542, $i493);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($p471, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p544, $p10);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i545 := $zext.i16.i32($i20);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i546 := $sgt.i32($i545, $i493);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i547 := $zext.i1.i32($i546);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i548 := $trunc.i32.i8($i547);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p471, $mul.ref(0, 88)), $mul.ref(42, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i550 := $load.i8($M.0, $p549);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i551 := $and.i8($i548, 1);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i552 := $shl.i8($i551, 1);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i553 := $and.i8($i550, $sub.i8(0, 3));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i554 := $or.i8($i553, $i552);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p549, $i554);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i555 := composite_ep0_queue($p11, $p471, 32);
    call {:si_unique_call 362} {:cexpr "value"} boogie_si_record_i32($i555);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i556 := $slt.i32($i555, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i556} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $i540 := $i555;
    goto $bb265;

  $bb268:
    assume $i556 == 1;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p557, .str.10);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p558, .str.26);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p559, .str.12);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p560, .str.33);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p562 := $bitcast.ref.ref($p561);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i563 := $load.i24($M.27, $p562);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i564 := $and.i24($i563, $sub.i24(0, 262144));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i565 := $or.i24($i564, 1741);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p562, $i565);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p566, 1);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i568 := $load.i8($M.28, $p567);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i569 := $zext.i8.i64($i568);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i570 := $and.i64($i569, 1);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i571 := ldv__builtin_expect($i570, 0);
    call {:si_unique_call 394} {:cexpr "tmp___15"} boogie_si_record_i64($i571);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i572 := $ne.i64($i571, 0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i572 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p471, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p576, 0);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p578 := $load.ref($M.0, $p577);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} composite_setup_complete($p578, $p471);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb270:
    assume $i572 == 1;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p574 := $load.ref($M.0, $p573);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p574, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} __dynamic_dev_dbg.ref.ref.ref.i32($p7, $p575, .str.33, $i555);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb239:
    assume $i486 == 1;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i512 := $zext.i16.i32($i15);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i513 := $ne.i32($i512, 5);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb256;

  $bb256:
    assume !($i513 == 1);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i514 := $zext.i16.i32($i18);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i515 := $ashr.i32($i514, 8);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i516 := $ne.i32($i515, 0);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i517 := $zext.i16.i32($i18);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i518 := $and.i32($i517, 255);
    call {:si_unique_call 376} {:cexpr "interface"} boogie_si_record_i32($i518);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i519 := $trunc.i16.i8($i15);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($p476, $mul.ref(6, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p520, $i519);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i521 := $zext.i16.i32($i20);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i522 := $eq.i32($i521, 10);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i522} true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i522 == 1);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i531 := count_ext_prop($p478, $i518);
    call {:si_unique_call 385} {:cexpr "count"} boogie_si_record_i32($i531);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i532 := $trunc.i32.i16($i531);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i533 := $zext.i16.i32($i532);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i534 := $trunc.i32.i16($i533);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($p476, $mul.ref(8, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} put_unaligned_le16($i534, $p535);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i536 := len_ext_prop($p478, $i518);
    call {:si_unique_call 388} {:cexpr "count"} boogie_si_record_i32($i536);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} put_unaligned_le32($i536, $p476);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($p476, $mul.ref(10, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i538 := fill_ext_prop($p478, $i518, $p537);
    call {:si_unique_call 391} {:cexpr "value"} boogie_si_record_i32($i538);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i539 := $slt.i32($i538, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i539} true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $i541 := $zext.i16.i32($i20);
    call {:si_unique_call 392} {:cexpr "value"} boogie_si_record_i32($i541);
    assume {:verifier.code 0} true;
    $i530 := $i541;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i493 := $i530;
    goto $bb249;

  $bb263:
    assume $i539 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i540 := $i538;
    goto $bb265;

  $bb260:
    assume $i522 == 1;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i523 := count_ext_prop($p478, $i518);
    call {:si_unique_call 378} {:cexpr "count"} boogie_si_record_i32($i523);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i524 := $trunc.i32.i16($i523);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i525 := $zext.i16.i32($i524);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i526 := $trunc.i32.i16($i525);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($p476, $mul.ref(8, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} put_unaligned_le16($i526, $p527);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i528 := len_ext_prop($p478, $i518);
    call {:si_unique_call 381} {:cexpr "count"} boogie_si_record_i32($i528);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} put_unaligned_le32($i528, $p476);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i529 := $zext.i16.i32($i20);
    call {:si_unique_call 383} {:cexpr "value"} boogie_si_record_i32($i529);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i530 := $i529;
    goto $bb262;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i516 == 1;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $i493 := $sub.i32(0, 95);
    goto $bb249;

  $bb254:
    assume {:verifier.code 0} true;
    assume $i513 == 1;
    goto $bb255;

  $bb237:
    assume $i485 == 1;
    assume {:verifier.code 0} true;
    $i487 := $eq.i32($i484, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i487} true;
    goto $bb242, $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    assume !($i487 == 1);
    goto $bb241;

  $bb242:
    assume $i487 == 1;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i488 := $zext.i16.i32($i15);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i489 := $ne.i32($i488, 4);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb246;

  $bb246:
    assume !($i489 == 1);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i490 := $zext.i16.i32($i18);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i491 := $ashr.i32($i490, 8);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i492 := $ne.i32($i491, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i492} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i494 := $trunc.i16.i8($i15);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($p476, $mul.ref(6, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p495, $i494);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i496 := $zext.i16.i32($i20);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i496, 16);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i497 == 1);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i505 := count_ext_compat($p478);
    call {:si_unique_call 370} {:cexpr "count"} boogie_si_record_i32($i505);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i506 := $trunc.i32.i8($i505);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($p476, $mul.ref(8, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p507, $i506);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i508 := $mul.i32($i505, 24);
    call {:si_unique_call 371} {:cexpr "count"} boogie_si_record_i32($i508);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i509 := $add.i32($i508, 16);
    call {:si_unique_call 372} {:cexpr "count"} boogie_si_record_i32($i509);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} put_unaligned_le32($i509, $p476);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($p476, $mul.ref(16, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} fill_ext_compat($p478, $p510);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i511 := $zext.i16.i32($i20);
    call {:si_unique_call 375} {:cexpr "value"} boogie_si_record_i32($i511);
    assume {:verifier.code 0} true;
    $i504 := $i511;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i493 := $i504;
    goto $bb249;

  $bb251:
    assume $i497 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i498 := count_ext_compat($p478);
    call {:si_unique_call 364} {:cexpr "count"} boogie_si_record_i32($i498);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i499 := $trunc.i32.i8($i498);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($p476, $mul.ref(8, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p500, $i499);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i501 := $mul.i32($i498, 24);
    call {:si_unique_call 365} {:cexpr "count"} boogie_si_record_i32($i501);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i502 := $add.i32($i501, 16);
    call {:si_unique_call 366} {:cexpr "count"} boogie_si_record_i32($i502);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} put_unaligned_le32($i502, $p476);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i503 := $zext.i16.i32($i20);
    call {:si_unique_call 368} {:cexpr "value"} boogie_si_record_i32($i503);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i504 := $i503;
    goto $bb253;

  $bb247:
    assume {:verifier.code 0} true;
    assume $i492 == 1;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $i493 := $sub.i32(0, 95);
    goto $bb249;

  $bb244:
    assume {:verifier.code 0} true;
    assume $i489 == 1;
    goto $bb245;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.0, $p254);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i32($i255);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 1);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p259);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i261 := $eq.i64($i260, 0);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb134, $bb136;

  $bb136:
    assume !($i261 == 1);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i32($i16);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i263 := $ugt.i32($i262, 15);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i32($i16);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i265 := $sext.i32.i64($i264);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p267, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i265, 8));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i271 := $p2i.ref.i64($p270);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i272 := $eq.i64($i271, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i273 := $zext.i16.i32($i18);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume !($i274 == 1);
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p270, $mul.ref(0, 200)), $mul.ref(96, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i281 := $zext.i16.i32($i15);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i282 := $zext.i16.i32($i18);
    call {:si_unique_call 343} $i283 := devirtbounce.12($p280, $p270, $i281, $i282);
    call {:si_unique_call 344} {:cexpr "value"} boogie_si_record_i32($i283);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 32767);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i154 := $i283;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i756 := $sge.i32($i154, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    assume !($i756 == 1);
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $i796 := $eq.i32($i154, 32767);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i796} true;
    goto $bb355, $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    assume !($i796 == 1);
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $i795 := $i154;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i732 := $i795;
    goto $bb332;

  $bb355:
    assume $i796 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i797 := $zext.i16.i32($i20);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i798 := $ne.i32($i797, 0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i798} true;
    goto $bb358, $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    assume !($i798 == 1);
    goto $bb357;

  $bb358:
    assume $i798 == 1;
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i799 := $p2i.ref.i64($p11);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i800 := $ne.i64($i799, 0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i801 := $zext.i1.i32($i800);
    call {:si_unique_call 419} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i801);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i802 := $ne.i32($i801, 0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i803 := $zext.i1.i32($i802);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i804 := $sext.i32.i64($i803);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i805 := ldv__builtin_expect($i804, 0);
    call {:si_unique_call 421} {:cexpr "tmp___21"} boogie_si_record_i64($i805);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i806 := $ne.i64($i805, 0);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i806} true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i806 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $i807 := $ne.i32($i801, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i808 := $zext.i1.i32($i807);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i809 := $sext.i32.i64($i808);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_63 := ldv__builtin_expect($i809, 0);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb360:
    assume $i806 == 1;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} warn_slowpath_fmt.ref.i32.ref.ref(.str.12, 1824, .str.35, .str.26);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb343:
    assume $i756 == 1;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i757 := $ne.i32($i154, 32767);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i757} true;
    goto $bb346, $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    assume !($i757 == 1);
    goto $bb345;

  $bb346:
    assume $i757 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p758, $i154);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p760, $p10);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i761 := $zext.i16.i32($i20);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i762 := $sgt.i32($i761, $i154);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i763 := $zext.i1.i32($i762);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i764 := $trunc.i32.i8($i763);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(42, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i766 := $load.i8($M.0, $p765);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i767 := $and.i8($i764, 1);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i768 := $shl.i8($i767, 1);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i769 := $and.i8($i766, $sub.i8(0, 3));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i770 := $or.i8($i769, $i768);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p765, $i770);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i771 := composite_ep0_queue($p11, $p13, 32);
    call {:si_unique_call 414} {:cexpr "value"} boogie_si_record_i32($i771);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i772 := $slt.i32($i771, 0);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i772} true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i772 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $i795 := $i771;
    goto $bb354;

  $bb348:
    assume $i772 == 1;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p773, .str.10);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p774, .str.26);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p775, .str.12);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p776, .str.33);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p778 := $bitcast.ref.ref($p777);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i779 := $load.i24($M.27, $p778);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i780 := $and.i24($i779, $sub.i24(0, 262144));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i781 := $or.i24($i780, 1817);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p778, $i781);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p782, 1);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i784 := $load.i8($M.28, $p783);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i785 := $zext.i8.i64($i784);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i786 := $and.i64($i785, 1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i787 := ldv__builtin_expect($i786, 0);
    call {:si_unique_call 416} {:cexpr "tmp___20"} boogie_si_record_i64($i787);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i788 := $ne.i64($i787, 0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i788 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p792, 0);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p794 := $load.ref($M.0, $p793);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} composite_setup_complete($p794, $p13);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb350:
    assume $i788 == 1;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p790 := $load.ref($M.0, $p789);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p790, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p791, .str.33, $i771);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb149:
    assume $i284 == 1;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p285, .str.10);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p286, .str.26);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p287, .str.12);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p288, .str.30);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p290 := $bitcast.ref.ref($p289);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i291 := $load.i24($M.27, $p290);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i292 := $and.i24($i291, $sub.i24(0, 262144));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i293 := $or.i24($i292, 1583);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p290, $i293);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p294, 1);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i296 := $load.i8($M.28, $p295);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i64($i296);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i298 := $and.i64($i297, 1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i299 := ldv__builtin_expect($i298, 0);
    call {:si_unique_call 346} {:cexpr "tmp___9"} boogie_si_record_i64($i299);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i300 := $ne.i64($i299, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.0, $p307);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i309 := $add.i32($i308, 1);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p310, $i309);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p311, .str.10);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p312, .str.26);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p313, .str.12);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p314, .str.31);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p316 := $bitcast.ref.ref($p315);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i317 := $load.i24($M.27, $p316);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i318 := $and.i24($i317, $sub.i24(0, 262144));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i319 := $or.i24($i318, 1586);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p316, $i319);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p320, 1);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i322 := $load.i8($M.28, $p321);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i323 := $zext.i8.i64($i322);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i324 := $and.i64($i323, 1);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i325 := ldv__builtin_expect($i324, 0);
    call {:si_unique_call 349} {:cexpr "tmp___10"} boogie_si_record_i64($i325);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i326 := $ne.i64($i325, 0);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb154:
    assume $i326 == 1;
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.0, $p327);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p328, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.0, $p330);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p329, .str.31, $i331);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb151:
    assume $i300 == 1;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p301);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p302, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i304 := $zext.i8.i32($i16);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p270, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.0, $p305);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p5, $p303, .str.30, .str.26, $i304, $p306);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb143:
    assume $i274 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p270, $mul.ref(0, 200)), $mul.ref(96, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p276 := $load.ref($M.0, $p275);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i277 := $p2i.ref.i64($p276);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i278 := $eq.i64($i277, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb146, $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    assume !($i278 == 1);
    goto $bb145;

  $bb146:
    assume $i278 == 1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i154 := $sub.i32(0, 95);
    goto $bb100;

  $bb140:
    assume $i272 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i154 := $sub.i32(0, 95);
    goto $bb100;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i154 := $sub.i32(0, 95);
    goto $bb100;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i261 == 1;
    goto $bb135;

  $bb131:
    assume $i257 == 1;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i333 := $load.i8($M.0, $p332);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i334 := $zext.i8.i32($i333);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 129);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.0, $p336);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i338 := $p2i.ref.i64($p337);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i339 := $eq.i64($i338, 0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb163;

  $bb163:
    assume !($i339 == 1);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i16);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i341 := $ugt.i32($i340, 15);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i342 := $zext.i8.i32($i16);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i343 := $sext.i32.i64($i342);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p345 := $load.ref($M.0, $p344);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($add.ref($p345, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i343, 8));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.0, $p347);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i349 := $p2i.ref.i64($p348);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i350 := $eq.i64($i349, 0);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p348, $mul.ref(0, 200)), $mul.ref(104, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i353 := $p2i.ref.i64($p352);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i354 := $ne.i64($i353, 0);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    $i359 := 0;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i360 := $slt.i32($i359, 0);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i361 := $trunc.i32.i8($i359);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.0, $p362);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p363, $i361);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i364 := $zext.i16.i32($i20);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i365 := $zext.i16.i32(1);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i366 := $slt.i32($i364, $i365);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i366 == 1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i369 := $zext.i16.i32(1);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i368 := $i369;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i154 := $i368;
    goto $bb100;

  $bb176:
    assume $i366 == 1;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i367 := $zext.i16.i32($i20);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i368 := $i367;
    goto $bb178;

  $bb173:
    assume $i360 == 1;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i154 := $i359;
    goto $bb100;

  $bb170:
    assume $i354 == 1;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p348, $mul.ref(0, 200)), $mul.ref(104, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.0, $p355);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i357 := $zext.i16.i32($i15);
    call {:si_unique_call 351} $i358 := devirtbounce.13($p356, $p348, $i357);
    call {:si_unique_call 352} {:cexpr "tmp___11"} boogie_si_record_i32($i358);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i359 := $i358;
    goto $bb172;

  $bb167:
    assume $i350 == 1;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i154 := $sub.i32(0, 95);
    goto $bb100;

  $bb164:
    assume {:verifier.code 0} true;
    assume $i341 == 1;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i154 := $sub.i32(0, 95);
    goto $bb100;

  $bb161:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb162;

  $bb158:
    assume $i335 == 1;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i39, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i159 := gadget_is_otg($p0);
    call {:si_unique_call 329} {:cexpr "tmp___8"} boogie_si_record_i32($i159);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} spin_lock($p228);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i32($i18);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i230 := set_config($p11, $p1, $i229);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 341} {:cexpr "value"} boogie_si_record_i32($i230);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} spin_unlock($p231);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i154 := $i230;
    goto $bb100;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i160 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p161, $mul.ref(1568, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.0, $p162);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i163);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i165 == 1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p0);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p185, $mul.ref(1568, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.0, $p186);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i189 == 1);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p209, .str.10);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p210, .str.26);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p211, .str.12);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p212, .str.29);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p213);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i215 := $load.i24($M.27, $p214);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i216 := $and.i24($i215, $sub.i24(0, 262144));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i217 := $or.i24($i216, 1550);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p214, $i217);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p218, 1);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.28, $p219);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i64($i220);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i222 := $and.i64($i221, 1);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i223 := ldv__builtin_expect($i222, 0);
    call {:si_unique_call 336} {:cexpr "tmp___7"} boogie_si_record_i64($i223);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i224 := $ne.i64($i223, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb118:
    assume $i224 == 1;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p226, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} __dynamic_dev_dbg.ref.ref.ref($p4, $p227, .str.29);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb112:
    assume $i189 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p190, .str.10);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p191, .str.26);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p192, .str.12);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p193, .str.28);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i196 := $load.i24($M.27, $p195);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i197 := $and.i24($i196, $sub.i24(0, 262144));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i198 := $or.i24($i197, 1548);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p195, $i198);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p199, 1);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.28, $p200);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i64($i201);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i203 := $and.i64($i202, 1);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i204 := ldv__builtin_expect($i203, 0);
    call {:si_unique_call 334} {:cexpr "tmp___6"} boogie_si_record_i64($i204);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i205 := $ne.i64($i204, 0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb114:
    assume $i205 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p207, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} __dynamic_dev_dbg.ref.ref.ref($p3, $p208, .str.28);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb106:
    assume $i165 == 1;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p166, .str.10);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p167, .str.26);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p168, .str.12);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p169, .str.27);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i172 := $load.i24($M.27, $p171);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i173 := $and.i24($i172, $sub.i24(0, 262144));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i174 := $or.i24($i173, 1546);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p171, $i174);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p175, 1);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.28, $p176);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i64($i177);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i179 := $and.i64($i178, 1);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i180 := ldv__builtin_expect($i179, 0);
    call {:si_unique_call 331} {:cexpr "tmp___5"} boogie_si_record_i64($i180);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb108:
    assume $i181 == 1;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p183, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} __dynamic_dev_dbg.ref.ref.ref($p2, $p184, .str.27);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb101:
    assume $i158 == 1;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.0, $p232);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i235 := $ne.i32($i234, 128);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i238 := $p2i.ref.i64($p237);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i239 := $ne.i64($i238, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i239 == 1);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p247, 0);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i248 := $zext.i16.i32($i20);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i249 := $zext.i16.i32(1);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i250 := $slt.i32($i248, $i249);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i250 == 1);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i253 := $zext.i16.i32(1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i252 := $i253;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i154 := $i252;
    goto $bb100;

  $bb128:
    assume $i250 == 1;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i251 := $zext.i16.i32($i20);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i252 := $i251;
    goto $bb130;

  $bb125:
    assume $i239 == 1;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p241, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.0, $p242);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p245, $i243);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i235 == 1;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i39, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i39, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i39, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb14;

  $bb21:
    assume $i47 == 1;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 128);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i18);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i57 := $ashr.i32($i56, 8);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i57, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i57, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i57, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32(0, 95);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i154 := $i102;
    goto $bb100;

  $bb42:
    assume $i61 == 1;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i143 := gadget_is_superspeed($p0);
    call {:si_unique_call 309} {:cexpr "tmp___4"} boogie_si_record_i32($i143);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i153 := $sub.i32(0, 95);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i102 := $i153;
    goto $bb65;

  $bb93:
    assume $i144 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i145 := bos_desc($p11);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 326} {:cexpr "value"} boogie_si_record_i32($i145);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i16($i145);
    call {:si_unique_call 327} {:cexpr "_min2___2"} boogie_si_record_i16($i146);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i20);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i148 := $zext.i16.i32($i146);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i147, $i148);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i149 == 1);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i146);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i151 := $i152;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i153 := $i151;
    goto $bb98;

  $bb95:
    assume $i149 == 1;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i20);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i151 := $i150;
    goto $bb97;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i57, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb44;

  $bb45:
    assume $i62 == 1;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i111 := gadget_is_dualspeed($p0);
    call {:si_unique_call 311} {:cexpr "tmp___3"} boogie_si_record_i32($i111);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb75, $bb77;

  $bb77:
    assume !($i112 == 1);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i115 := $ugt.i32($i114, 4);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i18);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i117 := config_desc($p11, $i116);
    call {:si_unique_call 313} {:cexpr "value"} boogie_si_record_i32($i117);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i118 := $sge.i32($i117, 0);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i126 := $i117;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i102 := $i126;
    goto $bb65;

  $bb81:
    assume $i118 == 1;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i117);
    call {:si_unique_call 323} {:cexpr "_min2___0"} boogie_si_record_i16($i119);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i20);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i119);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i120, $i121);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i122 == 1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i119);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i124 := $i125;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i126 := $i124;
    goto $bb86;

  $bb83:
    assume $i122 == 1;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i20);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i124 := $i123;
    goto $bb85;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32(0, 95);
    goto $bb65;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb76;

  $bb38:
    assume $i59 == 1;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i103 := gadget_is_dualspeed($p0);
    call {:si_unique_call 307} {:cexpr "tmp___2"} boogie_si_record_i32($i103);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 0);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i104 == 1);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i107 := $ugt.i32($i106, 4);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} device_qual($p11);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i20);
    call {:si_unique_call 322} {:cexpr "__min1"} boogie_si_record_i32($i108);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i108, 10);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i109 == 1);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i110 := 10;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i102 := $i110;
    goto $bb65;

  $bb72:
    assume $i109 == 1;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i110 := $i108;
    goto $bb74;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32(0, 95);
    goto $bb65;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb67;

  $bb36:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i57, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i57, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb51;

  $bb51:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i57, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb44;

  $bb52:
    assume $i65 == 1;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i15);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i16($i129);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i131 := $zext.i16.i32($i18);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 255);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i133 := get_string($p11, $p128, $i130, $i132);
    call {:si_unique_call 315} {:cexpr "value"} boogie_si_record_i32($i133);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i134 := $sge.i32($i133, 0);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i142 := $i133;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i102 := $i142;
    goto $bb65;

  $bb87:
    assume $i134 == 1;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i133);
    call {:si_unique_call 324} {:cexpr "_min2___1"} boogie_si_record_i16($i135);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i20);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i135);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i136, $i137);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i138 == 1);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i135);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i140 := $i141;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i142 := $i140;
    goto $bb92;

  $bb89:
    assume $i138 == 1;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i20);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i140 := $i139;
    goto $bb91;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb50;

  $bb47:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i57, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb44;

  $bb54:
    assume $i66 == 1;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i67 := count_configs($p11, 1);
    call {:si_unique_call 317} {:cexpr "tmp___0"} boogie_si_record_i32($i67);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(17, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, $i68);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i16.i8($i76);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(7, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, $i77);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i80 := gadget_is_superspeed($p0);
    call {:si_unique_call 319} {:cexpr "tmp___1"} boogie_si_record_i32($i80);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i20);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32(18);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i91, $i92);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i93 == 1);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32(18);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i95 := $i96;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(58, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i95);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 320} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p98, $p100, $i101, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i102 := $i95;
    goto $bb65;

  $bb62:
    assume $i93 == 1;
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i20);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb64;

  $bb56:
    assume $i81 == 1;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i84 := $ugt.i32($i83, 4);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i84 == 1);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(2, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, 528);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i84 == 1;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(2, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, 768);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(7, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 9);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb32:
    assume $i55 == 1;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i39, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb23, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb14;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i407 := gadget_is_superspeed($p0);
    call {:si_unique_call 303} {:cexpr "tmp___14"} boogie_si_record_i32($i407);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i407, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i410 := $load.i8($M.0, $p409);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i411 := $zext.i8.i32($i410);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i412 := $ne.i32($i411, 1);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i413 := $zext.i16.i32($i18);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i414 := $eq.i32($i413, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i414} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i421 := $sub.i32(0, 95);
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i154 := $i421;
    goto $bb100;

  $bb207:
    assume $i414 == 1;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $p415);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i417 := $p2i.ref.i64($p416);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i418 := $eq.i64($i417, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb211;

  $bb211:
    assume !($i418 == 1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i419 := $zext.i8.i32($i16);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i420 := $ugt.i32($i419, 15);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i420} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $i422 := $zext.i8.i32($i16);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i423 := $sext.i32.i64($i422);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p425 := $load.ref($M.0, $p424);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($add.ref($p425, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i423, 8));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.0, $p427);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i429 := $p2i.ref.i64($p428);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i430 := $eq.i64($i429, 0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i430} true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p428, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.0, $p431);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i433 := $p2i.ref.i64($p432);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i434 := $ne.i64($i433, 0);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i434} true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    $i443 := 0;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i444 := $slt.i32($i443, 0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i444} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    $i448 := $i443;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i421 := $i448;
    goto $bb214;

  $bb222:
    assume $i444 == 1;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p446 := $load.ref($M.0, $p445);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p446, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} dev_err.ref.ref.i32($p447, .str.32, $i443);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i448 := 0;
    goto $bb224;

  $bb219:
    assume $i434 == 1;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p428, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p436 := $load.ref($M.0, $p435);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i437 := $zext.i16.i32($i15);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i438 := $ashr.i32($i437, 8);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i439 := $trunc.i32.i8($i438);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i440 := $zext.i8.i32($i439);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i441 := $trunc.i32.i8($i440);
    call {:si_unique_call 357} $i442 := devirtbounce.15($p436, $p428, $i441);
    call {:si_unique_call 358} {:cexpr "value"} boogie_si_record_i32($i442);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i443 := $i442;
    goto $bb221;

  $bb216:
    assume $i430 == 1;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i421 := $sub.i32(0, 95);
    goto $bb214;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i420 == 1;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i421 := $sub.i32(0, 95);
    goto $bb214;

  $bb209:
    assume {:verifier.code 0} true;
    assume $i418 == 1;
    goto $bb210;

  $bb203:
    assume $i412 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb200:
    assume $i408 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb14;

  $bb28:
    assume $i50 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb26:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb14;

  $bb30:
    assume $i51 == 1;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i370 := gadget_is_superspeed($p0);
    call {:si_unique_call 305} {:cexpr "tmp___12"} boogie_si_record_i32($i370);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 0);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i373 := $load.i8($M.0, $p372);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i374 := $zext.i8.i32($i373);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i374, 129);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.0, $p376);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} put_unaligned_le16(0, $p377);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.0, $p378);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p379);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i381 := $eq.i64($i380, 0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb187;

  $bb187:
    assume !($i381 == 1);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i382 := $zext.i8.i32($i16);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i383 := $ugt.i32($i382, 15);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $i384 := $zext.i8.i32($i16);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i385 := $sext.i32.i64($i384);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p11, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p387, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i385, 8));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p390 := $load.ref($M.0, $p389);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i391 := $p2i.ref.i64($p390);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i392 := $eq.i64($i391, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p390, $mul.ref(0, 200)), $mul.ref(152, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.0, $p393);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i395 := $p2i.ref.i64($p394);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i396 := $ne.i64($i395, 0);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    $i400 := 0;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i401 := $slt.i32($i400, 0);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i402 := $trunc.i32.i16($i400);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i403 := $zext.i16.i32($i402);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i404 := $trunc.i32.i16($i403);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.0, $p405);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} put_unaligned_le16($i404, $p406);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i154 := 2;
    goto $bb100;

  $bb197:
    assume $i401 == 1;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i154 := 2;
    goto $bb100;

  $bb194:
    assume $i396 == 1;
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p390, $mul.ref(0, 200)), $mul.ref(152, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p398 := $load.ref($M.0, $p397);
    call {:si_unique_call 354} $i399 := devirtbounce.14($p398, $p390);
    call {:si_unique_call 355} {:cexpr "tmp___13"} boogie_si_record_i32($i399);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i400 := $i399;
    goto $bb196;

  $bb191:
    assume $i392 == 1;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i154 := 2;
    goto $bb100;

  $bb188:
    assume {:verifier.code 0} true;
    assume $i383 == 1;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i154 := 2;
    goto $bb100;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i381 == 1;
    goto $bb186;

  $bb182:
    assume $i375 == 1;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb179:
    assume $i371 == 1;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i36 == 1;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb317_dummy:
    assume false;
    return;

  $bb311_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2934;

  $bb290_dummy:
    assume false;
    return;

  $bb281_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2852;
}



const composite_disconnect: ref;

axiom composite_disconnect == $sub.ref(0, 470684);

procedure composite_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $M.29, $CurrAddr, assertsPassed;



implementation composite_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p1 := get_gadget_data($p0);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p4 := spinlock_check($p3);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 427} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} spin_unlock_irqrestore($p20, $i5);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 429} devirtbounce.19($p19, $p2);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} reset_config($p2);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const composite_suspend: ref;

axiom composite_suspend == $sub.ref(0, 471716);

procedure composite_suspend($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation composite_suspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p41: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i8;
  var $i72: i8;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p2 := get_gadget_data($p0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p4, .str.10);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, .str.36);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p6, .str.12);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p7, .str.37);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.27, $p9);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 2086);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p9, $i12);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p13, 1);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.28, $p14);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 434} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(56, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i71 := $and.i8($i70, $sub.i8(0, 3));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i72 := $or.i8($i71, 2);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i72);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_64 := usb_gadget_vbus_draw($p0, 2);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i64 == 1;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    call {:si_unique_call 437} devirtbounce.19($p68, $p3);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p32, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i35, $i39);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i40 == 1;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p41 := $p33;
    goto $bb9;

  $bb9:
    call $p42, $p43, $i44, $i45, $p46, $p47, $p49, $p50, $p51, $p52, $p53, $i54, $p55, $p56, $i57, $i58, $p41 := composite_suspend_loop_$bb9($p36, $p42, $p43, $i44, $i45, $p46, $p47, $p49, $p50, $p51, $p52, $p53, $i54, $p55, $p56, $i57, $i58, $p41);
    goto $bb9_last;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p51, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p36);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i54, $i57);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $p41 := $p52;
    goto $bb14_dummy;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p41, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    call {:si_unique_call 436} devirtbounce.1($p47, $p41);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} __dynamic_dev_dbg.ref.ref.ref($p1, $p22, .str.37);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3188;
}



const composite_resume: ref;

axiom composite_resume == $sub.ref(0, 472748);

procedure composite_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation composite_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p51: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $p78: ref;
  var $i79: i8;
  var $i80: i8;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p2 := get_gadget_data($p0);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p4, .str.10);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, .str.38);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p6, .str.12);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p7, .str.39);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.27, $p9);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 2110);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p9, $i12);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p13, 1);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.28, $p14);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 442} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(56, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i80 := $and.i8($i79, $sub.i8(0, 3));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $i80);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i45, $i49);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 224)), $mul.ref(44, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    call {:si_unique_call 446} {:cexpr "maxpower"} boogie_si_record_i16($i72);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i76 := 2;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vslice_dummy_var_65 := usb_gadget_vbus_draw($p0, $i76);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i72);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb22;

  $bb9:
    assume $i50 == 1;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p51 := $p43;
    goto $bb12;

  $bb12:
    call $p52, $p53, $i54, $i55, $p56, $p57, $p59, $p60, $p61, $p62, $p63, $i64, $p65, $p66, $i67, $i68, $p51 := composite_resume_loop_$bb12($p46, $p52, $p53, $i54, $i55, $p56, $p57, $p59, $p60, $p61, $p62, $p63, $i64, $p65, $p66, $i67, $i68, $p51);
    goto $bb12_last;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p61, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p46);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i64, $i67);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i68 == 1);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb17:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $p51 := $p62;
    goto $bb17_dummy;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p51, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    call {:si_unique_call 445} devirtbounce.1($p57, $p51);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    call {:si_unique_call 444} devirtbounce.19($p32, $p3);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} __dynamic_dev_dbg.ref.ref.ref($p1, $p22, .str.39);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3299;
}



const usb_gadget_vbus_draw: ref;

axiom usb_gadget_vbus_draw == $sub.ref(0, 473780);

procedure usb_gadget_vbus_draw($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_gadget_vbus_draw($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} {:cexpr "usb_gadget_vbus_draw:arg:mA"} boogie_si_record_i32($i1);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(88, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(88, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 449} $i13 := devirtbounce.3($p12, $p0, $i1);
    call {:si_unique_call 450} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 95);
    goto $bb3;
}



const reset_config: ref;

axiom reset_config == $sub.ref(0, 474812);

procedure reset_config($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation reset_config($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p35: ref;
  var $p55: ref;
  var $p56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p2, .str.10);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, .str.49);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p4, .str.12);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p5, .str.50);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.27, $p7);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 619);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p7, $i10);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p11, 1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.28, $p12);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 453} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p26, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i29, $i33);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $0.ref);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p35 := $p27;
    goto $bb7;

  $bb7:
    call $p36, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p45, $p46, $p47, $p48, $p49, $i50, $p51, $p52, $i53, $i54, $p35 := reset_config_loop_$bb7($p30, $p36, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p45, $p46, $p47, $p48, $p49, $i50, $p51, $p52, $i53, $i54, $p35);
    goto $bb7_last;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 200)), $mul.ref(112, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p35, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} bitmap_zero($p43, 32);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p47, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p30);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i50, $i53);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i54 == 1);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $p35 := $p48;
    goto $bb12_dummy;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p35, $mul.ref(0, 200)), $mul.ref(112, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    call {:si_unique_call 455} devirtbounce.1($p41, $p35);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} __dynamic_dev_dbg.ref.ref.ref($p1, $p20, .str.50);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3406;
}



const count_configs: ref;

axiom count_configs == $sub.ref(0, 475844);

procedure count_configs($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation count_configs($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i39: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i31: i32;
  var $p32: ref;
  var $i60: i32;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} {:cexpr "count_configs:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i4 := gadget_is_dualspeed($p3);
    call {:si_unique_call 459} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i18, $i19 := 0, 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i26, $i28);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i30 := 0;
    assume {:branchcond $i29} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i31, $p32 := 0, $p24;
    goto $bb16;

  $bb16:
    call $i33, $p34, $p35, $i36, $i37, $i38, $i40, $p41, $p42, $i43, $i44, $i45, $p46, $p47, $i48, $i49, $i50, $i51, $i39, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $i31, $p32, $i60 := count_configs_loop_$bb16($i18, $i19, $i28, $i33, $p34, $p35, $i36, $i37, $i38, $i40, $p41, $p42, $i43, $i44, $i45, $p46, $p47, $i48, $i49, $i50, $i51, $i39, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $i31, $p32, $i60);
    goto $bb16_last;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i19, 0);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i18, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i40 == 1);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p32);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(89, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i31, 1);
    call {:si_unique_call 461} {:cexpr "count"} boogie_si_record_i32($i51);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i39 := $i51;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p55, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, $i28);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i60 := $i39;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i30 := $i60;
    goto $bb15;

  $bb34:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i31, $p32 := $i39, $p56;
    goto $bb34_dummy;

  $bb31:
    assume $i50 == 1;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i39 := $i31;
    goto $bb22;

  $bb25:
    assume $i40 == 1;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p32);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(89, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i45 == 1;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i39 := $i31;
    goto $bb22;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p32);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(89, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i39 := $i31;
    goto $bb22;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 3);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 5);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 6);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i9;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i17, $i13;
    goto $bb12;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i9, 0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 460} {:cexpr "hs"} boogie_si_record_i32($i16);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb11;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb8;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb5;

  $bb34_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3480;
}



const device_qual: ref;

axiom device_qual == $sub.ref(0, 476876);

procedure device_qual($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation device_qual($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i16;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;
  var $p21: ref;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i8;
  var $p31: ref;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $p35: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 10);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 6);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(2, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i10);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(4, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(5, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(5, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(58, 1)), $mul.ref(6, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i16.i8($i29);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(7, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i32 := count_configs($p0, 6);
    call {:si_unique_call 463} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i33);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(9, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    return;
}



const config_desc: ref;

axiom config_desc == $sub.ref(0, 477908);

procedure config_desc($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation config_desc($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i11: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i75: i32;
  var $p35: ref;
  var $i36: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p45: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p38: ref;
  var $i74: i32;

  $bb0#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} {:cexpr "config_desc:arg:w_value"} boogie_si_record_i32($i1);
    goto corral_source_split_3569#12;

  corral_source_split_3569#12:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3570#12;

  corral_source_split_3570#12:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3571#12;

  corral_source_split_3571#12:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i1, 8);
    goto corral_source_split_3572#12;

  corral_source_split_3572#12:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 465} {:cexpr "type"} boogie_si_record_i8($i5);
    goto corral_source_split_3573#12;

  corral_source_split_3573#12:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_3574#12;

  corral_source_split_3574#12:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3575#12;

  corral_source_split_3575#12:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 5);
    goto corral_source_split_3576#12;

  corral_source_split_3576#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1#12, $bb2#12;

  $bb2#12:
    assume !($i8 == 1);
    goto corral_source_split_3582#12;

  corral_source_split_3582#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i12 := gadget_is_dualspeed($p3);
    call {:si_unique_call 468} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_3583#12;

  corral_source_split_3583#12:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3584#12;

  corral_source_split_3584#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4#12, $bb5#12;

  $bb5#12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb15#12;

  $bb4#12:
    assume $i13 == 1;
    goto corral_source_split_3594#12;

  corral_source_split_3594#12:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_3595#12;

  corral_source_split_3595#12:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3596#12;

  corral_source_split_3596#12:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_3597#12;

  corral_source_split_3597#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6#12, $bb7#12;

  $bb7#12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8#12;

  $bb6#12:
    assume $i16 == 1;
    goto corral_source_split_3599#12;

  corral_source_split_3599#12:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb8#12;

  $bb8#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3601#12;

  corral_source_split_3601#12:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i5);
    goto corral_source_split_3602#12;

  corral_source_split_3602#12:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 7);
    goto corral_source_split_3603#12;

  corral_source_split_3603#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9#12, $bb10#12;

  $bb10#12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i17;
    goto $bb11#12;

  $bb9#12:
    assume $i19 == 1;
    goto corral_source_split_3605#12;

  corral_source_split_3605#12:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 0);
    goto corral_source_split_3606#12;

  corral_source_split_3606#12:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 470} {:cexpr "hs"} boogie_si_record_i32($i21);
    goto corral_source_split_3607#12;

  corral_source_split_3607#12:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb11#12;

  $bb11#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3609#12;

  corral_source_split_3609#12:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3610#12;

  corral_source_split_3610#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb12#12, $bb13#12;

  $bb13#12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb14#12;

  $bb12#12:
    assume $i23 == 1;
    goto corral_source_split_3612#12;

  corral_source_split_3612#12:
    assume {:verifier.code 0} true;
    $i24 := 3;
    goto $bb14#12;

  $bb14#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3614#12;

  corral_source_split_3614#12:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb15#12;

  $bb15#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i11 := $i25;
    goto $bb3#12;

  $bb1#12:
    assume $i8 == 1;
    goto corral_source_split_3578#12;

  corral_source_split_3578#12:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_3579#12;

  corral_source_split_3579#12:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 466} {:cexpr "speed"} boogie_si_record_i32($i10);
    goto corral_source_split_3580#12;

  corral_source_split_3580#12:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3#12;

  $bb3#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3586#12;

  corral_source_split_3586#12:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i1, 255);
    call {:si_unique_call 469} {:cexpr "w_value"} boogie_si_record_i32($i26);
    goto corral_source_split_3587#12;

  corral_source_split_3587#12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3588#12;

  corral_source_split_3588#12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3589#12;

  corral_source_split_3589#12:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3590#12;

  corral_source_split_3590#12:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3591#12;

  corral_source_split_3591#12:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3592#12;

  corral_source_split_3592#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16#12, $bb17#12;

  $bb17#12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19#12;

  $bb19#12:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p27, $i26;
    goto $bb20#12;

  $bb16#12:
    assume $i31 == 1;
    goto corral_source_split_3616#12;

  corral_source_split_3616#12:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p27, $p29, $i26;
    goto $bb18#12;

  $bb18#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#12;

  $bb25#12:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#12, $bb27#12;

  $bb27#12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#12, $bb29#12;

  $bb29#12:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#12;

  $bb28#12:
    assume $i49 == 1;
    goto corral_source_split_3640#12;

  corral_source_split_3640#12:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#12;

  corral_source_split_3641#12:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#12;

  corral_source_split_3642#12:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#12;

  corral_source_split_3643#12:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#12;

  corral_source_split_3644#12:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#12;

  corral_source_split_3645#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#12, $bb34#12;

  $bb34#12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#12;

  $bb35#12:
    assume {:verifier.code 0} true;
    goto $bb36#12;

  $bb33#12:
    assume $i55 == 1;
    goto corral_source_split_3654#12;

  corral_source_split_3654#12:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#12;

  $bb26#12:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#12, $bb32#12;

  $bb32#12:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#12;

  $bb30#12:
    assume {:verifier.code 0} true;
    goto $bb40#12;

  $bb40#12:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#12;

  corral_source_split_3660#12:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#12;

  corral_source_split_3661#12:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#12;

  corral_source_split_3662#12:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#12;

  corral_source_split_3663#12:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#12;

  corral_source_split_3664#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#12, $bb42#12;

  $bb42#12:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#12;

  $bb43#12:
    assume {:verifier.code 0} true;
    goto $bb44#12;

  $bb44#12:
    assume {:verifier.code 0} true;
    goto $bb36#12;

  $bb41#12:
    assume $i65 == 1;
    goto corral_source_split_3666#12;

  corral_source_split_3666#12:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#12;

  $bb31#12:
    assume $i50 == 1;
    goto corral_source_split_3647#12;

  corral_source_split_3647#12:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#12;

  corral_source_split_3648#12:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#12;

  corral_source_split_3649#12:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#12;

  corral_source_split_3650#12:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#12;

  corral_source_split_3651#12:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#12;

  corral_source_split_3652#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#12, $bb38#12;

  $bb38#12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#12;

  $bb39#12:
    assume {:verifier.code 0} true;
    goto $bb36#12;

  $bb36#12:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#12;

  corral_source_split_3656#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#12;

  $bb46#12:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#12;

  $bb48#12:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#12;

  corral_source_split_3679#12:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#12;

  $bb37#12:
    assume $i60 == 1;
    goto corral_source_split_3658#12;

  corral_source_split_3658#12:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#12;

  $bb20#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#12;

  corral_source_split_3618#12:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#12;

  corral_source_split_3619#12:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#12;

  corral_source_split_3620#12:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#12;

  corral_source_split_3621#12:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#12;

  corral_source_split_3622#12:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#12;

  corral_source_split_3623#12:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#12;

  corral_source_split_3624#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#12, $bb50#12;

  $bb49#12:
    assume $i81 == 1;
    goto corral_source_split_3681#12;

  corral_source_split_3681#12:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#12;

  $bb52#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#12;

  corral_source_split_3683#12:
    assume {:verifier.code 0} true;
    goto $bb21#12;

  $bb21#12:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#12;

  corral_source_split_3626#12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#12;

  corral_source_split_3627#12:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#12;

  corral_source_split_3628#12:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#12;

  corral_source_split_3629#12:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#12;

  corral_source_split_3630#12:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#12;

  corral_source_split_3631#12:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#12;

  corral_source_split_3632#12:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#12, $bb23#12;

  $bb23#12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#12;

  $bb24#12:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#11;

  $bb18#11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#11;

  $bb25#11:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#11, $bb27#11;

  $bb27#11:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#11, $bb29#11;

  $bb29#11:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#11;

  $bb28#11:
    assume $i49 == 1;
    goto corral_source_split_3640#11;

  corral_source_split_3640#11:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#11;

  corral_source_split_3641#11:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#11;

  corral_source_split_3642#11:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#11;

  corral_source_split_3643#11:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#11;

  corral_source_split_3644#11:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#11;

  corral_source_split_3645#11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#11, $bb34#11;

  $bb34#11:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#11;

  $bb35#11:
    assume {:verifier.code 0} true;
    goto $bb36#11;

  $bb33#11:
    assume $i55 == 1;
    goto corral_source_split_3654#11;

  corral_source_split_3654#11:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#11;

  $bb26#11:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#11, $bb32#11;

  $bb32#11:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#11;

  $bb30#11:
    assume {:verifier.code 0} true;
    goto $bb40#11;

  $bb40#11:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#11;

  corral_source_split_3660#11:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#11;

  corral_source_split_3661#11:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#11;

  corral_source_split_3662#11:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#11;

  corral_source_split_3663#11:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#11;

  corral_source_split_3664#11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#11, $bb42#11;

  $bb42#11:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#11;

  $bb43#11:
    assume {:verifier.code 0} true;
    goto $bb44#11;

  $bb44#11:
    assume {:verifier.code 0} true;
    goto $bb36#11;

  $bb41#11:
    assume $i65 == 1;
    goto corral_source_split_3666#11;

  corral_source_split_3666#11:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#11;

  $bb31#11:
    assume $i50 == 1;
    goto corral_source_split_3647#11;

  corral_source_split_3647#11:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#11;

  corral_source_split_3648#11:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#11;

  corral_source_split_3649#11:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#11;

  corral_source_split_3650#11:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#11;

  corral_source_split_3651#11:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#11;

  corral_source_split_3652#11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#11, $bb38#11;

  $bb38#11:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#11;

  $bb39#11:
    assume {:verifier.code 0} true;
    goto $bb36#11;

  $bb36#11:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#11;

  corral_source_split_3656#11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#11;

  $bb46#11:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#11;

  $bb48#11:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#11;

  corral_source_split_3679#11:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#11;

  $bb37#11:
    assume $i60 == 1;
    goto corral_source_split_3658#11;

  corral_source_split_3658#11:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#11;

  $bb20#11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#11;

  corral_source_split_3618#11:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#11;

  corral_source_split_3619#11:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#11;

  corral_source_split_3620#11:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#11;

  corral_source_split_3621#11:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#11;

  corral_source_split_3622#11:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#11;

  corral_source_split_3623#11:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#11;

  corral_source_split_3624#11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#11, $bb50#12;

  $bb49#11:
    assume $i81 == 1;
    goto corral_source_split_3681#11;

  corral_source_split_3681#11:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#11;

  $bb22#12:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#12;

  corral_source_split_3634#12:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#12;

  corral_source_split_3635#12:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#12;

  corral_source_split_3636#12:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#12;

  corral_source_split_3637#12:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#12;

  corral_source_split_3638#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#12, $bb54#12;

  $bb53#12:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#11;

  $bb52#11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#11;

  corral_source_split_3683#11:
    assume {:verifier.code 0} true;
    goto $bb21#11;

  $bb21#11:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#11;

  corral_source_split_3626#11:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#11;

  corral_source_split_3627#11:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#11;

  corral_source_split_3628#11:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#11;

  corral_source_split_3629#11:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#11;

  corral_source_split_3630#11:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#11;

  corral_source_split_3631#11:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#11;

  corral_source_split_3632#11:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#11, $bb23#11;

  $bb23#11:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#11;

  $bb24#11:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#10;

  $bb18#10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#10;

  $bb25#10:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#10, $bb27#10;

  $bb27#10:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#10, $bb29#10;

  $bb29#10:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#10;

  $bb28#10:
    assume $i49 == 1;
    goto corral_source_split_3640#10;

  corral_source_split_3640#10:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#10;

  corral_source_split_3641#10:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#10;

  corral_source_split_3642#10:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#10;

  corral_source_split_3643#10:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#10;

  corral_source_split_3644#10:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#10;

  corral_source_split_3645#10:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#10, $bb34#10;

  $bb34#10:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#10;

  $bb35#10:
    assume {:verifier.code 0} true;
    goto $bb36#10;

  $bb33#10:
    assume $i55 == 1;
    goto corral_source_split_3654#10;

  corral_source_split_3654#10:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#10;

  $bb26#10:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#10, $bb32#10;

  $bb32#10:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#10;

  $bb30#10:
    assume {:verifier.code 0} true;
    goto $bb40#10;

  $bb40#10:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#10;

  corral_source_split_3660#10:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#10;

  corral_source_split_3661#10:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#10;

  corral_source_split_3662#10:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#10;

  corral_source_split_3663#10:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#10;

  corral_source_split_3664#10:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#10, $bb42#10;

  $bb42#10:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#10;

  $bb43#10:
    assume {:verifier.code 0} true;
    goto $bb44#10;

  $bb44#10:
    assume {:verifier.code 0} true;
    goto $bb36#10;

  $bb41#10:
    assume $i65 == 1;
    goto corral_source_split_3666#10;

  corral_source_split_3666#10:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#10;

  $bb31#10:
    assume $i50 == 1;
    goto corral_source_split_3647#10;

  corral_source_split_3647#10:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#10;

  corral_source_split_3648#10:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#10;

  corral_source_split_3649#10:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#10;

  corral_source_split_3650#10:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#10;

  corral_source_split_3651#10:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#10;

  corral_source_split_3652#10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#10, $bb38#10;

  $bb38#10:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#10;

  $bb39#10:
    assume {:verifier.code 0} true;
    goto $bb36#10;

  $bb36#10:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#10;

  corral_source_split_3656#10:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#10;

  $bb46#10:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#10;

  $bb48#10:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#10;

  corral_source_split_3679#10:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#10;

  $bb37#10:
    assume $i60 == 1;
    goto corral_source_split_3658#10;

  corral_source_split_3658#10:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#10;

  $bb20#10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#10;

  corral_source_split_3618#10:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#10;

  corral_source_split_3619#10:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#10;

  corral_source_split_3620#10:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#10;

  corral_source_split_3621#10:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#10;

  corral_source_split_3622#10:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#10;

  corral_source_split_3623#10:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#10;

  corral_source_split_3624#10:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#10, $bb50#12;

  $bb49#10:
    assume $i81 == 1;
    goto corral_source_split_3681#10;

  corral_source_split_3681#10:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#10;

  $bb22#11:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#11;

  corral_source_split_3634#11:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#11;

  corral_source_split_3635#11:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#11;

  corral_source_split_3636#11:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#11;

  corral_source_split_3637#11:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#11;

  corral_source_split_3638#11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#11, $bb54#12;

  $bb53#11:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#10;

  $bb52#10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#10;

  corral_source_split_3683#10:
    assume {:verifier.code 0} true;
    goto $bb21#10;

  $bb21#10:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#10;

  corral_source_split_3626#10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#10;

  corral_source_split_3627#10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#10;

  corral_source_split_3628#10:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#10;

  corral_source_split_3629#10:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#10;

  corral_source_split_3630#10:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#10;

  corral_source_split_3631#10:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#10;

  corral_source_split_3632#10:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#10, $bb23#10;

  $bb23#10:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#10;

  $bb24#10:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#9;

  $bb18#9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#9;

  $bb25#9:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#9, $bb27#9;

  $bb27#9:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#9, $bb29#9;

  $bb29#9:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#9;

  $bb28#9:
    assume $i49 == 1;
    goto corral_source_split_3640#9;

  corral_source_split_3640#9:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#9;

  corral_source_split_3641#9:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#9;

  corral_source_split_3642#9:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#9;

  corral_source_split_3643#9:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#9;

  corral_source_split_3644#9:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#9;

  corral_source_split_3645#9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#9, $bb34#9;

  $bb34#9:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#9;

  $bb35#9:
    assume {:verifier.code 0} true;
    goto $bb36#9;

  $bb33#9:
    assume $i55 == 1;
    goto corral_source_split_3654#9;

  corral_source_split_3654#9:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#9;

  $bb26#9:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#9, $bb32#9;

  $bb32#9:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#9;

  $bb30#9:
    assume {:verifier.code 0} true;
    goto $bb40#9;

  $bb40#9:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#9;

  corral_source_split_3660#9:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#9;

  corral_source_split_3661#9:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#9;

  corral_source_split_3662#9:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#9;

  corral_source_split_3663#9:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#9;

  corral_source_split_3664#9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#9, $bb42#9;

  $bb42#9:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#9;

  $bb43#9:
    assume {:verifier.code 0} true;
    goto $bb44#9;

  $bb44#9:
    assume {:verifier.code 0} true;
    goto $bb36#9;

  $bb41#9:
    assume $i65 == 1;
    goto corral_source_split_3666#9;

  corral_source_split_3666#9:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#9;

  $bb31#9:
    assume $i50 == 1;
    goto corral_source_split_3647#9;

  corral_source_split_3647#9:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#9;

  corral_source_split_3648#9:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#9;

  corral_source_split_3649#9:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#9;

  corral_source_split_3650#9:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#9;

  corral_source_split_3651#9:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#9;

  corral_source_split_3652#9:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#9, $bb38#9;

  $bb38#9:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#9;

  $bb39#9:
    assume {:verifier.code 0} true;
    goto $bb36#9;

  $bb36#9:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#9;

  corral_source_split_3656#9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#9;

  $bb46#9:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#9;

  $bb48#9:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#9;

  corral_source_split_3679#9:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#9;

  $bb37#9:
    assume $i60 == 1;
    goto corral_source_split_3658#9;

  corral_source_split_3658#9:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#9;

  $bb20#9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#9;

  corral_source_split_3618#9:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#9;

  corral_source_split_3619#9:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#9;

  corral_source_split_3620#9:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#9;

  corral_source_split_3621#9:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#9;

  corral_source_split_3622#9:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#9;

  corral_source_split_3623#9:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#9;

  corral_source_split_3624#9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#9, $bb50#12;

  $bb49#9:
    assume $i81 == 1;
    goto corral_source_split_3681#9;

  corral_source_split_3681#9:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#9;

  $bb22#10:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#10;

  corral_source_split_3634#10:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#10;

  corral_source_split_3635#10:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#10;

  corral_source_split_3636#10:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#10;

  corral_source_split_3637#10:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#10;

  corral_source_split_3638#10:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#10, $bb54#12;

  $bb53#10:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#9;

  $bb52#9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#9;

  corral_source_split_3683#9:
    assume {:verifier.code 0} true;
    goto $bb21#9;

  $bb21#9:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#9;

  corral_source_split_3626#9:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#9;

  corral_source_split_3627#9:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#9;

  corral_source_split_3628#9:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#9;

  corral_source_split_3629#9:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#9;

  corral_source_split_3630#9:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#9;

  corral_source_split_3631#9:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#9;

  corral_source_split_3632#9:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#9, $bb23#9;

  $bb23#9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#9;

  $bb24#9:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#8;

  $bb18#8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#8;

  $bb25#8:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#8, $bb27#8;

  $bb27#8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#8, $bb29#8;

  $bb29#8:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#8;

  $bb28#8:
    assume $i49 == 1;
    goto corral_source_split_3640#8;

  corral_source_split_3640#8:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#8;

  corral_source_split_3641#8:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#8;

  corral_source_split_3642#8:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#8;

  corral_source_split_3643#8:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#8;

  corral_source_split_3644#8:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#8;

  corral_source_split_3645#8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#8, $bb34#8;

  $bb34#8:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#8;

  $bb35#8:
    assume {:verifier.code 0} true;
    goto $bb36#8;

  $bb33#8:
    assume $i55 == 1;
    goto corral_source_split_3654#8;

  corral_source_split_3654#8:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#8;

  $bb26#8:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#8, $bb32#8;

  $bb32#8:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#8;

  $bb30#8:
    assume {:verifier.code 0} true;
    goto $bb40#8;

  $bb40#8:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#8;

  corral_source_split_3660#8:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#8;

  corral_source_split_3661#8:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#8;

  corral_source_split_3662#8:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#8;

  corral_source_split_3663#8:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#8;

  corral_source_split_3664#8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#8, $bb42#8;

  $bb42#8:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#8;

  $bb43#8:
    assume {:verifier.code 0} true;
    goto $bb44#8;

  $bb44#8:
    assume {:verifier.code 0} true;
    goto $bb36#8;

  $bb41#8:
    assume $i65 == 1;
    goto corral_source_split_3666#8;

  corral_source_split_3666#8:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#8;

  $bb31#8:
    assume $i50 == 1;
    goto corral_source_split_3647#8;

  corral_source_split_3647#8:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#8;

  corral_source_split_3648#8:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#8;

  corral_source_split_3649#8:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#8;

  corral_source_split_3650#8:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#8;

  corral_source_split_3651#8:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#8;

  corral_source_split_3652#8:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#8, $bb38#8;

  $bb38#8:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#8;

  $bb39#8:
    assume {:verifier.code 0} true;
    goto $bb36#8;

  $bb36#8:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#8;

  corral_source_split_3656#8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#8;

  $bb46#8:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#8;

  $bb48#8:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#8;

  corral_source_split_3679#8:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#8;

  $bb37#8:
    assume $i60 == 1;
    goto corral_source_split_3658#8;

  corral_source_split_3658#8:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#8;

  $bb20#8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#8;

  corral_source_split_3618#8:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#8;

  corral_source_split_3619#8:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#8;

  corral_source_split_3620#8:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#8;

  corral_source_split_3621#8:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#8;

  corral_source_split_3622#8:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#8;

  corral_source_split_3623#8:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#8;

  corral_source_split_3624#8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#8, $bb50#12;

  $bb49#8:
    assume $i81 == 1;
    goto corral_source_split_3681#8;

  corral_source_split_3681#8:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#8;

  $bb22#9:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#9;

  corral_source_split_3634#9:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#9;

  corral_source_split_3635#9:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#9;

  corral_source_split_3636#9:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#9;

  corral_source_split_3637#9:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#9;

  corral_source_split_3638#9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#9, $bb54#12;

  $bb53#9:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#8;

  $bb52#8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#8;

  corral_source_split_3683#8:
    assume {:verifier.code 0} true;
    goto $bb21#8;

  $bb21#8:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#8;

  corral_source_split_3626#8:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#8;

  corral_source_split_3627#8:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#8;

  corral_source_split_3628#8:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#8;

  corral_source_split_3629#8:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#8;

  corral_source_split_3630#8:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#8;

  corral_source_split_3631#8:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#8;

  corral_source_split_3632#8:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#8, $bb23#8;

  $bb23#8:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#8;

  $bb24#8:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#7;

  $bb18#7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#7;

  $bb25#7:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#7, $bb27#7;

  $bb27#7:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#7, $bb29#7;

  $bb29#7:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#7;

  $bb28#7:
    assume $i49 == 1;
    goto corral_source_split_3640#7;

  corral_source_split_3640#7:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#7;

  corral_source_split_3641#7:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#7;

  corral_source_split_3642#7:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#7;

  corral_source_split_3643#7:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#7;

  corral_source_split_3644#7:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#7;

  corral_source_split_3645#7:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#7, $bb34#7;

  $bb34#7:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#7;

  $bb35#7:
    assume {:verifier.code 0} true;
    goto $bb36#7;

  $bb33#7:
    assume $i55 == 1;
    goto corral_source_split_3654#7;

  corral_source_split_3654#7:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#7;

  $bb26#7:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#7, $bb32#7;

  $bb32#7:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#7;

  $bb30#7:
    assume {:verifier.code 0} true;
    goto $bb40#7;

  $bb40#7:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#7;

  corral_source_split_3660#7:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#7;

  corral_source_split_3661#7:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#7;

  corral_source_split_3662#7:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#7;

  corral_source_split_3663#7:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#7;

  corral_source_split_3664#7:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#7, $bb42#7;

  $bb42#7:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#7;

  $bb43#7:
    assume {:verifier.code 0} true;
    goto $bb44#7;

  $bb44#7:
    assume {:verifier.code 0} true;
    goto $bb36#7;

  $bb41#7:
    assume $i65 == 1;
    goto corral_source_split_3666#7;

  corral_source_split_3666#7:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#7;

  $bb31#7:
    assume $i50 == 1;
    goto corral_source_split_3647#7;

  corral_source_split_3647#7:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#7;

  corral_source_split_3648#7:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#7;

  corral_source_split_3649#7:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#7;

  corral_source_split_3650#7:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#7;

  corral_source_split_3651#7:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#7;

  corral_source_split_3652#7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#7, $bb38#7;

  $bb38#7:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#7;

  $bb39#7:
    assume {:verifier.code 0} true;
    goto $bb36#7;

  $bb36#7:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#7;

  corral_source_split_3656#7:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#7;

  $bb46#7:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#7;

  $bb48#7:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#7;

  corral_source_split_3679#7:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#7;

  $bb37#7:
    assume $i60 == 1;
    goto corral_source_split_3658#7;

  corral_source_split_3658#7:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#7;

  $bb20#7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#7;

  corral_source_split_3618#7:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#7;

  corral_source_split_3619#7:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#7;

  corral_source_split_3620#7:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#7;

  corral_source_split_3621#7:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#7;

  corral_source_split_3622#7:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#7;

  corral_source_split_3623#7:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#7;

  corral_source_split_3624#7:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#7, $bb50#12;

  $bb49#7:
    assume $i81 == 1;
    goto corral_source_split_3681#7;

  corral_source_split_3681#7:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#7;

  $bb22#8:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#8;

  corral_source_split_3634#8:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#8;

  corral_source_split_3635#8:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#8;

  corral_source_split_3636#8:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#8;

  corral_source_split_3637#8:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#8;

  corral_source_split_3638#8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#8, $bb54#12;

  $bb53#8:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#7;

  $bb52#7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#7;

  corral_source_split_3683#7:
    assume {:verifier.code 0} true;
    goto $bb21#7;

  $bb21#7:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#7;

  corral_source_split_3626#7:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#7;

  corral_source_split_3627#7:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#7;

  corral_source_split_3628#7:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#7;

  corral_source_split_3629#7:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#7;

  corral_source_split_3630#7:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#7;

  corral_source_split_3631#7:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#7;

  corral_source_split_3632#7:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#7, $bb23#7;

  $bb23#7:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#7;

  $bb24#7:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#6;

  $bb18#6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#6;

  $bb25#6:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#6, $bb27#6;

  $bb27#6:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#6, $bb29#6;

  $bb29#6:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#6;

  $bb28#6:
    assume $i49 == 1;
    goto corral_source_split_3640#6;

  corral_source_split_3640#6:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#6;

  corral_source_split_3641#6:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#6;

  corral_source_split_3642#6:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#6;

  corral_source_split_3643#6:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#6;

  corral_source_split_3644#6:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#6;

  corral_source_split_3645#6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#6, $bb34#6;

  $bb34#6:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#6;

  $bb35#6:
    assume {:verifier.code 0} true;
    goto $bb36#6;

  $bb33#6:
    assume $i55 == 1;
    goto corral_source_split_3654#6;

  corral_source_split_3654#6:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#6;

  $bb26#6:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#6, $bb32#6;

  $bb32#6:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#6;

  $bb30#6:
    assume {:verifier.code 0} true;
    goto $bb40#6;

  $bb40#6:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#6;

  corral_source_split_3660#6:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#6;

  corral_source_split_3661#6:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#6;

  corral_source_split_3662#6:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#6;

  corral_source_split_3663#6:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#6;

  corral_source_split_3664#6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#6, $bb42#6;

  $bb42#6:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#6;

  $bb43#6:
    assume {:verifier.code 0} true;
    goto $bb44#6;

  $bb44#6:
    assume {:verifier.code 0} true;
    goto $bb36#6;

  $bb41#6:
    assume $i65 == 1;
    goto corral_source_split_3666#6;

  corral_source_split_3666#6:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#6;

  $bb31#6:
    assume $i50 == 1;
    goto corral_source_split_3647#6;

  corral_source_split_3647#6:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#6;

  corral_source_split_3648#6:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#6;

  corral_source_split_3649#6:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#6;

  corral_source_split_3650#6:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#6;

  corral_source_split_3651#6:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#6;

  corral_source_split_3652#6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#6, $bb38#6;

  $bb38#6:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#6;

  $bb39#6:
    assume {:verifier.code 0} true;
    goto $bb36#6;

  $bb36#6:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#6;

  corral_source_split_3656#6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#6;

  $bb46#6:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#6;

  $bb48#6:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#6;

  corral_source_split_3679#6:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#6;

  $bb37#6:
    assume $i60 == 1;
    goto corral_source_split_3658#6;

  corral_source_split_3658#6:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#6;

  $bb20#6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#6;

  corral_source_split_3618#6:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#6;

  corral_source_split_3619#6:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#6;

  corral_source_split_3620#6:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#6;

  corral_source_split_3621#6:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#6;

  corral_source_split_3622#6:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#6;

  corral_source_split_3623#6:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#6;

  corral_source_split_3624#6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#6, $bb50#12;

  $bb49#6:
    assume $i81 == 1;
    goto corral_source_split_3681#6;

  corral_source_split_3681#6:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#6;

  $bb22#7:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#7;

  corral_source_split_3634#7:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#7;

  corral_source_split_3635#7:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#7;

  corral_source_split_3636#7:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#7;

  corral_source_split_3637#7:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#7;

  corral_source_split_3638#7:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#7, $bb54#12;

  $bb53#7:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#6;

  $bb52#6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#6;

  corral_source_split_3683#6:
    assume {:verifier.code 0} true;
    goto $bb21#6;

  $bb21#6:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#6;

  corral_source_split_3626#6:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#6;

  corral_source_split_3627#6:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#6;

  corral_source_split_3628#6:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#6;

  corral_source_split_3629#6:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#6;

  corral_source_split_3630#6:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#6;

  corral_source_split_3631#6:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#6;

  corral_source_split_3632#6:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#6, $bb23#6;

  $bb23#6:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#6;

  $bb24#6:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#5;

  $bb18#5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#5;

  $bb25#5:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#5, $bb27#5;

  $bb27#5:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#5, $bb29#5;

  $bb29#5:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#5;

  $bb28#5:
    assume $i49 == 1;
    goto corral_source_split_3640#5;

  corral_source_split_3640#5:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#5;

  corral_source_split_3641#5:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#5;

  corral_source_split_3642#5:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#5;

  corral_source_split_3643#5:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#5;

  corral_source_split_3644#5:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#5;

  corral_source_split_3645#5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#5, $bb34#5;

  $bb34#5:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#5;

  $bb35#5:
    assume {:verifier.code 0} true;
    goto $bb36#5;

  $bb33#5:
    assume $i55 == 1;
    goto corral_source_split_3654#5;

  corral_source_split_3654#5:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#5;

  $bb26#5:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#5, $bb32#5;

  $bb32#5:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#5;

  $bb30#5:
    assume {:verifier.code 0} true;
    goto $bb40#5;

  $bb40#5:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#5;

  corral_source_split_3660#5:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#5;

  corral_source_split_3661#5:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#5;

  corral_source_split_3662#5:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#5;

  corral_source_split_3663#5:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#5;

  corral_source_split_3664#5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#5, $bb42#5;

  $bb42#5:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#5;

  $bb43#5:
    assume {:verifier.code 0} true;
    goto $bb44#5;

  $bb44#5:
    assume {:verifier.code 0} true;
    goto $bb36#5;

  $bb41#5:
    assume $i65 == 1;
    goto corral_source_split_3666#5;

  corral_source_split_3666#5:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#5;

  $bb31#5:
    assume $i50 == 1;
    goto corral_source_split_3647#5;

  corral_source_split_3647#5:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#5;

  corral_source_split_3648#5:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#5;

  corral_source_split_3649#5:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#5;

  corral_source_split_3650#5:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#5;

  corral_source_split_3651#5:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#5;

  corral_source_split_3652#5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#5, $bb38#5;

  $bb38#5:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#5;

  $bb39#5:
    assume {:verifier.code 0} true;
    goto $bb36#5;

  $bb36#5:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#5;

  corral_source_split_3656#5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#5;

  $bb46#5:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#5;

  $bb48#5:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#5;

  corral_source_split_3679#5:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#5;

  $bb37#5:
    assume $i60 == 1;
    goto corral_source_split_3658#5;

  corral_source_split_3658#5:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#5;

  $bb20#5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#5;

  corral_source_split_3618#5:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#5;

  corral_source_split_3619#5:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#5;

  corral_source_split_3620#5:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#5;

  corral_source_split_3621#5:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#5;

  corral_source_split_3622#5:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#5;

  corral_source_split_3623#5:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#5;

  corral_source_split_3624#5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#5, $bb50#12;

  $bb49#5:
    assume $i81 == 1;
    goto corral_source_split_3681#5;

  corral_source_split_3681#5:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#5;

  $bb22#6:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#6;

  corral_source_split_3634#6:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#6;

  corral_source_split_3635#6:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#6;

  corral_source_split_3636#6:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#6;

  corral_source_split_3637#6:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#6;

  corral_source_split_3638#6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#6, $bb54#12;

  $bb53#6:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#5;

  $bb52#5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#5;

  corral_source_split_3683#5:
    assume {:verifier.code 0} true;
    goto $bb21#5;

  $bb21#5:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#5;

  corral_source_split_3626#5:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#5;

  corral_source_split_3627#5:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#5;

  corral_source_split_3628#5:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#5;

  corral_source_split_3629#5:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#5;

  corral_source_split_3630#5:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#5;

  corral_source_split_3631#5:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#5;

  corral_source_split_3632#5:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#5, $bb23#5;

  $bb23#5:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#5;

  $bb24#5:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#4;

  $bb18#4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#4;

  $bb25#4:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#4, $bb27#4;

  $bb27#4:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#4, $bb29#4;

  $bb29#4:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#4;

  $bb28#4:
    assume $i49 == 1;
    goto corral_source_split_3640#4;

  corral_source_split_3640#4:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#4;

  corral_source_split_3641#4:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#4;

  corral_source_split_3642#4:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#4;

  corral_source_split_3643#4:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#4;

  corral_source_split_3644#4:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#4;

  corral_source_split_3645#4:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#4, $bb34#4;

  $bb34#4:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#4;

  $bb35#4:
    assume {:verifier.code 0} true;
    goto $bb36#4;

  $bb33#4:
    assume $i55 == 1;
    goto corral_source_split_3654#4;

  corral_source_split_3654#4:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#4;

  $bb26#4:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#4, $bb32#4;

  $bb32#4:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#4;

  $bb30#4:
    assume {:verifier.code 0} true;
    goto $bb40#4;

  $bb40#4:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#4;

  corral_source_split_3660#4:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#4;

  corral_source_split_3661#4:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#4;

  corral_source_split_3662#4:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#4;

  corral_source_split_3663#4:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#4;

  corral_source_split_3664#4:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#4, $bb42#4;

  $bb42#4:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#4;

  $bb43#4:
    assume {:verifier.code 0} true;
    goto $bb44#4;

  $bb44#4:
    assume {:verifier.code 0} true;
    goto $bb36#4;

  $bb41#4:
    assume $i65 == 1;
    goto corral_source_split_3666#4;

  corral_source_split_3666#4:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#4;

  $bb31#4:
    assume $i50 == 1;
    goto corral_source_split_3647#4;

  corral_source_split_3647#4:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#4;

  corral_source_split_3648#4:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#4;

  corral_source_split_3649#4:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#4;

  corral_source_split_3650#4:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#4;

  corral_source_split_3651#4:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#4;

  corral_source_split_3652#4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#4, $bb38#4;

  $bb38#4:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#4;

  $bb39#4:
    assume {:verifier.code 0} true;
    goto $bb36#4;

  $bb36#4:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#4;

  corral_source_split_3656#4:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#4;

  $bb46#4:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#4;

  $bb48#4:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#4;

  corral_source_split_3679#4:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#4;

  $bb37#4:
    assume $i60 == 1;
    goto corral_source_split_3658#4;

  corral_source_split_3658#4:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#4;

  $bb20#4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#4;

  corral_source_split_3618#4:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#4;

  corral_source_split_3619#4:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#4;

  corral_source_split_3620#4:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#4;

  corral_source_split_3621#4:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#4;

  corral_source_split_3622#4:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#4;

  corral_source_split_3623#4:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#4;

  corral_source_split_3624#4:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#4, $bb50#12;

  $bb49#4:
    assume $i81 == 1;
    goto corral_source_split_3681#4;

  corral_source_split_3681#4:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#4;

  $bb22#5:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#5;

  corral_source_split_3634#5:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#5;

  corral_source_split_3635#5:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#5;

  corral_source_split_3636#5:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#5;

  corral_source_split_3637#5:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#5;

  corral_source_split_3638#5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#5, $bb54#12;

  $bb53#5:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#4;

  $bb52#4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#4;

  corral_source_split_3683#4:
    assume {:verifier.code 0} true;
    goto $bb21#4;

  $bb21#4:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#4;

  corral_source_split_3626#4:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#4;

  corral_source_split_3627#4:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#4;

  corral_source_split_3628#4:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#4;

  corral_source_split_3629#4:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#4;

  corral_source_split_3630#4:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#4;

  corral_source_split_3631#4:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#4;

  corral_source_split_3632#4:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#4, $bb23#4;

  $bb23#4:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#4;

  $bb24#4:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#3;

  $bb18#3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#3;

  $bb25#3:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#3, $bb27#3;

  $bb27#3:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#3, $bb29#3;

  $bb29#3:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#3;

  $bb28#3:
    assume $i49 == 1;
    goto corral_source_split_3640#3;

  corral_source_split_3640#3:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#3;

  corral_source_split_3641#3:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#3;

  corral_source_split_3642#3:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#3;

  corral_source_split_3643#3:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#3;

  corral_source_split_3644#3:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#3;

  corral_source_split_3645#3:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#3, $bb34#3;

  $bb34#3:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#3;

  $bb35#3:
    assume {:verifier.code 0} true;
    goto $bb36#3;

  $bb33#3:
    assume $i55 == 1;
    goto corral_source_split_3654#3;

  corral_source_split_3654#3:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#3;

  $bb26#3:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#3, $bb32#3;

  $bb32#3:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#3;

  $bb30#3:
    assume {:verifier.code 0} true;
    goto $bb40#3;

  $bb40#3:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#3;

  corral_source_split_3660#3:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#3;

  corral_source_split_3661#3:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#3;

  corral_source_split_3662#3:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#3;

  corral_source_split_3663#3:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#3;

  corral_source_split_3664#3:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#3, $bb42#3;

  $bb42#3:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#3;

  $bb43#3:
    assume {:verifier.code 0} true;
    goto $bb44#3;

  $bb44#3:
    assume {:verifier.code 0} true;
    goto $bb36#3;

  $bb41#3:
    assume $i65 == 1;
    goto corral_source_split_3666#3;

  corral_source_split_3666#3:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#3;

  $bb31#3:
    assume $i50 == 1;
    goto corral_source_split_3647#3;

  corral_source_split_3647#3:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#3;

  corral_source_split_3648#3:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#3;

  corral_source_split_3649#3:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#3;

  corral_source_split_3650#3:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#3;

  corral_source_split_3651#3:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#3;

  corral_source_split_3652#3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#3, $bb38#3;

  $bb38#3:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#3;

  $bb39#3:
    assume {:verifier.code 0} true;
    goto $bb36#3;

  $bb36#3:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#3;

  corral_source_split_3656#3:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#3;

  $bb46#3:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#3;

  $bb48#3:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#3;

  corral_source_split_3679#3:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#3;

  $bb37#3:
    assume $i60 == 1;
    goto corral_source_split_3658#3;

  corral_source_split_3658#3:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#3;

  $bb20#3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#3;

  corral_source_split_3618#3:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#3;

  corral_source_split_3619#3:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#3;

  corral_source_split_3620#3:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#3;

  corral_source_split_3621#3:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#3;

  corral_source_split_3622#3:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#3;

  corral_source_split_3623#3:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#3;

  corral_source_split_3624#3:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#3, $bb50#12;

  $bb49#3:
    assume $i81 == 1;
    goto corral_source_split_3681#3;

  corral_source_split_3681#3:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#3;

  $bb22#4:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#4;

  corral_source_split_3634#4:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#4;

  corral_source_split_3635#4:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#4;

  corral_source_split_3636#4:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#4;

  corral_source_split_3637#4:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#4;

  corral_source_split_3638#4:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#4, $bb54#12;

  $bb53#4:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#3;

  $bb52#3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#3;

  corral_source_split_3683#3:
    assume {:verifier.code 0} true;
    goto $bb21#3;

  $bb21#3:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#3;

  corral_source_split_3626#3:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#3;

  corral_source_split_3627#3:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#3;

  corral_source_split_3628#3:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#3;

  corral_source_split_3629#3:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#3;

  corral_source_split_3630#3:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#3;

  corral_source_split_3631#3:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#3;

  corral_source_split_3632#3:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#3, $bb23#3;

  $bb23#3:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#3;

  $bb24#3:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#2;

  $bb18#2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#2;

  $bb25#2:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#2, $bb27#2;

  $bb27#2:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#2, $bb29#2;

  $bb29#2:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#2;

  $bb28#2:
    assume $i49 == 1;
    goto corral_source_split_3640#2;

  corral_source_split_3640#2:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#2;

  corral_source_split_3641#2:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#2;

  corral_source_split_3642#2:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#2;

  corral_source_split_3643#2:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#2;

  corral_source_split_3644#2:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#2;

  corral_source_split_3645#2:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#2, $bb34#2;

  $bb34#2:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#2;

  $bb35#2:
    assume {:verifier.code 0} true;
    goto $bb36#2;

  $bb33#2:
    assume $i55 == 1;
    goto corral_source_split_3654#2;

  corral_source_split_3654#2:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#2;

  $bb26#2:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#2, $bb32#2;

  $bb32#2:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#2;

  $bb30#2:
    assume {:verifier.code 0} true;
    goto $bb40#2;

  $bb40#2:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#2;

  corral_source_split_3660#2:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#2;

  corral_source_split_3661#2:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#2;

  corral_source_split_3662#2:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#2;

  corral_source_split_3663#2:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#2;

  corral_source_split_3664#2:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#2, $bb42#2;

  $bb42#2:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#2;

  $bb43#2:
    assume {:verifier.code 0} true;
    goto $bb44#2;

  $bb44#2:
    assume {:verifier.code 0} true;
    goto $bb36#2;

  $bb41#2:
    assume $i65 == 1;
    goto corral_source_split_3666#2;

  corral_source_split_3666#2:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#2;

  $bb31#2:
    assume $i50 == 1;
    goto corral_source_split_3647#2;

  corral_source_split_3647#2:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#2;

  corral_source_split_3648#2:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#2;

  corral_source_split_3649#2:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#2;

  corral_source_split_3650#2:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#2;

  corral_source_split_3651#2:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#2;

  corral_source_split_3652#2:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#2, $bb38#2;

  $bb38#2:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#2;

  $bb39#2:
    assume {:verifier.code 0} true;
    goto $bb36#2;

  $bb36#2:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#2;

  corral_source_split_3656#2:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#2;

  $bb46#2:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#2;

  $bb48#2:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#2;

  corral_source_split_3679#2:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#2;

  $bb37#2:
    assume $i60 == 1;
    goto corral_source_split_3658#2;

  corral_source_split_3658#2:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#2;

  $bb20#2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#2;

  corral_source_split_3618#2:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#2;

  corral_source_split_3619#2:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#2;

  corral_source_split_3620#2:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#2;

  corral_source_split_3621#2:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#2;

  corral_source_split_3622#2:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#2;

  corral_source_split_3623#2:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#2;

  corral_source_split_3624#2:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#2, $bb50#12;

  $bb49#2:
    assume $i81 == 1;
    goto corral_source_split_3681#2;

  corral_source_split_3681#2:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#2;

  $bb22#3:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#3;

  corral_source_split_3634#3:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#3;

  corral_source_split_3635#3:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#3;

  corral_source_split_3636#3:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#3;

  corral_source_split_3637#3:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#3;

  corral_source_split_3638#3:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#3, $bb54#12;

  $bb53#3:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#2;

  $bb52#2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#2;

  corral_source_split_3683#2:
    assume {:verifier.code 0} true;
    goto $bb21#2;

  $bb21#2:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#2;

  corral_source_split_3626#2:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#2;

  corral_source_split_3627#2:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#2;

  corral_source_split_3628#2:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#2;

  corral_source_split_3629#2:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#2;

  corral_source_split_3630#2:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#2;

  corral_source_split_3631#2:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#2;

  corral_source_split_3632#2:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#2, $bb23#2;

  $bb23#2:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#2;

  $bb24#2:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#1;

  $bb18#1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25#1;

  $bb25#1:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26#1, $bb27#1;

  $bb27#1:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28#1, $bb29#1;

  $bb29#1:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30#1;

  $bb28#1:
    assume $i49 == 1;
    goto corral_source_split_3640#1;

  corral_source_split_3640#1:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641#1;

  corral_source_split_3641#1:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(89, 1));
    goto corral_source_split_3642#1;

  corral_source_split_3642#1:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3643#1;

  corral_source_split_3643#1:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3644#1;

  corral_source_split_3644#1:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3645#1;

  corral_source_split_3645#1:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33#1, $bb34#1;

  $bb34#1:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb35#1;

  $bb35#1:
    assume {:verifier.code 0} true;
    goto $bb36#1;

  $bb33#1:
    assume $i55 == 1;
    goto corral_source_split_3654#1;

  corral_source_split_3654#1:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#1;

  $bb26#1:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31#1, $bb32#1;

  $bb32#1:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30#1;

  $bb30#1:
    assume {:verifier.code 0} true;
    goto $bb40#1;

  $bb40#1:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p33);
    goto corral_source_split_3660#1;

  corral_source_split_3660#1:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(89, 1));
    goto corral_source_split_3661#1;

  corral_source_split_3661#1:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3662#1;

  corral_source_split_3662#1:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3663#1;

  corral_source_split_3663#1:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3664#1;

  corral_source_split_3664#1:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41#1, $bb42#1;

  $bb42#1:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43#1;

  $bb43#1:
    assume {:verifier.code 0} true;
    goto $bb44#1;

  $bb44#1:
    assume {:verifier.code 0} true;
    goto $bb36#1;

  $bb41#1:
    assume $i65 == 1;
    goto corral_source_split_3666#1;

  corral_source_split_3666#1:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#1;

  $bb31#1:
    assume $i50 == 1;
    goto corral_source_split_3647#1;

  corral_source_split_3647#1:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p33);
    goto corral_source_split_3648#1;

  corral_source_split_3648#1:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(89, 1));
    goto corral_source_split_3649#1;

  corral_source_split_3649#1:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3650#1;

  corral_source_split_3650#1:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3651#1;

  corral_source_split_3651#1:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652#1;

  corral_source_split_3652#1:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37#1, $bb38#1;

  $bb38#1:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39#1;

  $bb39#1:
    assume {:verifier.code 0} true;
    goto $bb36#1;

  $bb36#1:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i34, 0);
    goto corral_source_split_3656#1;

  corral_source_split_3656#1:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45#12, $bb46#1;

  $bb46#1:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb48#1;

  $bb48#1:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "w_value"} boogie_si_record_i32($i75);
    goto corral_source_split_3679#1;

  corral_source_split_3679#1:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i75;
    goto $bb20#1;

  $bb45#12:
    assume $i66 == 1;
    goto corral_source_split_3668#12;

  corral_source_split_3668#12:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_3669#12;

  corral_source_split_3669#12:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3670#12;

  corral_source_split_3670#12:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3671#12;

  corral_source_split_3671#12:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3672#12;

  corral_source_split_3672#12:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i5);
    goto corral_source_split_3673#12;

  corral_source_split_3673#12:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_3674#12;

  corral_source_split_3674#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i73 := config_buf($p33, $i11, $p70, $i72);
    call {:si_unique_call 472} {:cexpr "tmp___0"} boogie_si_record_i32($i73);
    goto corral_source_split_3675#12;

  corral_source_split_3675#12:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb47#12;

  $bb37#1:
    assume $i60 == 1;
    goto corral_source_split_3658#1;

  corral_source_split_3658#1:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p32, $i34;
    goto $bb20#1;

  $bb20#1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618#1;

  corral_source_split_3618#1:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3619#1;

  corral_source_split_3619#1:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3620#1;

  corral_source_split_3620#1:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3621#1;

  corral_source_split_3621#1:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3622#1;

  corral_source_split_3622#1:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3623#1;

  corral_source_split_3623#1:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i78, $i80);
    goto corral_source_split_3624#1;

  corral_source_split_3624#1:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49#1, $bb50#12;

  $bb50#12:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb51#12;

  $bb49#1:
    assume $i81 == 1;
    goto corral_source_split_3681#1;

  corral_source_split_3681#1:
    assume {:verifier.code 0} true;
    $p38 := $p77;
    goto $bb52#1;

  $bb22#2:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#2;

  corral_source_split_3634#2:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#2;

  corral_source_split_3635#2:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#2;

  corral_source_split_3636#2:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#2;

  corral_source_split_3637#2:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#2;

  corral_source_split_3638#2:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#2, $bb54#12;

  $bb53#2:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#1;

  $bb52#1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683#1;

  corral_source_split_3683#1:
    assume {:verifier.code 0} true;
    goto $bb21#1;

  $bb21#1:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p38);
    goto corral_source_split_3626#1;

  corral_source_split_3626#1:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3627#1;

  corral_source_split_3627#1:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(48, 1));
    goto corral_source_split_3628#1;

  corral_source_split_3628#1:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3629#1;

  corral_source_split_3629#1:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3630#1;

  corral_source_split_3630#1:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    goto corral_source_split_3631#1;

  corral_source_split_3631#1:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_3632#1;

  corral_source_split_3632#1:
    assume {:verifier.code 0} true;
    $p45, $p46, $p47 := $p38, $p38, $p39;
    assume {:branchcond $i44} true;
    goto $bb22#1, $bb23#1;

  $bb23#1:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24#1;

  $bb24#1:
    assume {:verifier.code 0} true;
    $p32, $p33, $i34 := $p46, $p47, $i36;
    goto $bb18#0;

  $bb18#0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb22#1:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3634#1;

  corral_source_split_3634#1:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3635#1;

  corral_source_split_3635#1:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3636#1;

  corral_source_split_3636#1:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3637#1;

  corral_source_split_3637#1:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i80);
    goto corral_source_split_3638#1;

  corral_source_split_3638#1:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53#1, $bb54#12;

  $bb54#12:
    assume !($i85 == 1);
    goto corral_source_split_3685#12;

  corral_source_split_3685#12:
    assume {:verifier.code 0} true;
    goto $bb51#12;

  $bb51#12:
    assume {:verifier.code 0} true;
    goto $bb55#12;

  $bb55#12:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 22);
    goto $bb47#12;

  $bb47#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3677#12;

  corral_source_split_3677#12:
    assume {:verifier.code 0} true;
    $r := $i74;
    return;

  $bb53#1:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p83;
    goto $bb52#0;

  $bb52#0:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const get_string: ref;

axiom get_string == $sub.ref(0, 478940);

procedure get_string($p0: ref, $p1: ref, $i2: i16, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation get_string($p0: ref, $p1: ref, $i2: i16, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p43: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p26: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p75: ref;
  var $p87: ref;
  var $i88: i16;
  var $i89: i32;
  var $i90: i1;
  var $p93: ref;
  var $i94: i16;
  var $i95: i32;
  var $i96: i1;
  var $i91: i32;
  var $i97: i1;
  var $i99: i32;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $p138: ref;
  var $i139: i32;
  var $i140: i16;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p137: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i16;
  var $i159: i32;
  var $i160: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $p168: ref;
  var $i169: i64;
  var $i170: i1;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i16;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $p190: ref;
  var $i191: i64;
  var $i192: i1;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $i200: i32;
  var $i201: i16;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i64;
  var $i212: i1;
  var $p193: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $p171: ref;
  var $i98: i32;
  var $p222: ref;
  var $i223: i16;
  var $i224: i32;
  var $i225: i1;
  var $p227: ref;
  var $i228: i16;
  var $i229: i32;
  var $i230: i1;
  var $p232: ref;
  var $i233: i16;
  var $i234: i32;
  var $i235: i1;
  var $p237: ref;
  var $i238: i16;
  var $i239: i32;
  var $i240: i1;
  var $p242: ref;
  var $i243: i16;
  var $i244: i32;
  var $i245: i1;
  var $p247: ref;
  var $i248: i16;
  var $i249: i32;
  var $i250: i1;
  var $p252: ref;
  var $i253: i16;
  var $i254: i32;
  var $i255: i1;
  var $p257: ref;
  var $i258: i16;
  var $i259: i32;
  var $i260: i1;
  var $p262: ref;
  var $i263: i16;
  var $i264: i32;
  var $i265: i1;
  var $p267: ref;
  var $i268: i16;
  var $i269: i32;
  var $i270: i1;
  var $p272: ref;
  var $i273: i16;
  var $i274: i32;
  var $i275: i1;
  var $p277: ref;
  var $i278: i16;
  var $i279: i32;
  var $i280: i1;
  var $p282: ref;
  var $i283: i16;
  var $i284: i32;
  var $i285: i1;
  var $p287: ref;
  var $i288: i16;
  var $i289: i32;
  var $i290: i1;
  var $p292: ref;
  var $i293: i16;
  var $i294: i32;
  var $i295: i1;
  var $p297: ref;
  var $i298: i16;
  var $i299: i32;
  var $i300: i1;
  var $p302: ref;
  var $i303: i16;
  var $i304: i32;
  var $i305: i1;
  var $p307: ref;
  var $i308: i16;
  var $i309: i32;
  var $i310: i1;
  var $p312: ref;
  var $i313: i16;
  var $i314: i32;
  var $i315: i1;
  var $p317: ref;
  var $i318: i16;
  var $i319: i32;
  var $i320: i1;
  var $p322: ref;
  var $i323: i16;
  var $i324: i32;
  var $i325: i1;
  var $p327: ref;
  var $i328: i16;
  var $i329: i32;
  var $i330: i1;
  var $p332: ref;
  var $i333: i16;
  var $i334: i32;
  var $i335: i1;
  var $p337: ref;
  var $i338: i16;
  var $i339: i32;
  var $i340: i1;
  var $p342: ref;
  var $i343: i16;
  var $i344: i32;
  var $i345: i1;
  var $p347: ref;
  var $i348: i16;
  var $i349: i32;
  var $i350: i1;
  var $p352: ref;
  var $i353: i16;
  var $i354: i32;
  var $i355: i1;
  var $p357: ref;
  var $i358: i16;
  var $i359: i32;
  var $i360: i1;
  var $p362: ref;
  var $i363: i16;
  var $i364: i32;
  var $i365: i1;
  var $p367: ref;
  var $i368: i16;
  var $i369: i32;
  var $i370: i1;
  var $p372: ref;
  var $i373: i16;
  var $i374: i32;
  var $i375: i1;
  var $p377: ref;
  var $i378: i16;
  var $i379: i32;
  var $i380: i1;
  var $p382: ref;
  var $i383: i16;
  var $i384: i32;
  var $i385: i1;
  var $p387: ref;
  var $i388: i16;
  var $i389: i32;
  var $i390: i1;
  var $p392: ref;
  var $i393: i16;
  var $i394: i32;
  var $i395: i1;
  var $p397: ref;
  var $i398: i16;
  var $i399: i32;
  var $i400: i1;
  var $p402: ref;
  var $i403: i16;
  var $i404: i32;
  var $i405: i1;
  var $p407: ref;
  var $i408: i16;
  var $i409: i32;
  var $i410: i1;
  var $p412: ref;
  var $i413: i16;
  var $i414: i32;
  var $i415: i1;
  var $p417: ref;
  var $i418: i16;
  var $i419: i32;
  var $i420: i1;
  var $p422: ref;
  var $i423: i16;
  var $i424: i32;
  var $i425: i1;
  var $p427: ref;
  var $i428: i16;
  var $i429: i32;
  var $i430: i1;
  var $p432: ref;
  var $i433: i16;
  var $i434: i32;
  var $i435: i1;
  var $p437: ref;
  var $i438: i16;
  var $i439: i32;
  var $i440: i1;
  var $p442: ref;
  var $i443: i16;
  var $i444: i32;
  var $i445: i1;
  var $p447: ref;
  var $i448: i16;
  var $i449: i32;
  var $i450: i1;
  var $p452: ref;
  var $i453: i16;
  var $i454: i32;
  var $i455: i1;
  var $p457: ref;
  var $i458: i16;
  var $i459: i32;
  var $i460: i1;
  var $p462: ref;
  var $i463: i16;
  var $i464: i32;
  var $i465: i1;
  var $p467: ref;
  var $i468: i16;
  var $i469: i32;
  var $i470: i1;
  var $p472: ref;
  var $i473: i16;
  var $i474: i32;
  var $i475: i1;
  var $p477: ref;
  var $i478: i16;
  var $i479: i32;
  var $i480: i1;
  var $p482: ref;
  var $i483: i16;
  var $i484: i32;
  var $i485: i1;
  var $p487: ref;
  var $i488: i16;
  var $i489: i32;
  var $i490: i1;
  var $p492: ref;
  var $i493: i16;
  var $i494: i32;
  var $i495: i1;
  var $p497: ref;
  var $i498: i16;
  var $i499: i32;
  var $i500: i1;
  var $p502: ref;
  var $i503: i16;
  var $i504: i32;
  var $i505: i1;
  var $p507: ref;
  var $i508: i16;
  var $i509: i32;
  var $i510: i1;
  var $p512: ref;
  var $i513: i16;
  var $i514: i32;
  var $i515: i1;
  var $p517: ref;
  var $i518: i16;
  var $i519: i32;
  var $i520: i1;
  var $p522: ref;
  var $i523: i16;
  var $i524: i32;
  var $i525: i1;
  var $p527: ref;
  var $i528: i16;
  var $i529: i32;
  var $i530: i1;
  var $p532: ref;
  var $i533: i16;
  var $i534: i32;
  var $i535: i1;
  var $p537: ref;
  var $i538: i16;
  var $i539: i32;
  var $i540: i1;
  var $p542: ref;
  var $i543: i16;
  var $i544: i32;
  var $i545: i1;
  var $p547: ref;
  var $i548: i16;
  var $i549: i32;
  var $i550: i1;
  var $p552: ref;
  var $i553: i16;
  var $i554: i32;
  var $i555: i1;
  var $p557: ref;
  var $i558: i16;
  var $i559: i32;
  var $i560: i1;
  var $p562: ref;
  var $i563: i16;
  var $i564: i32;
  var $i565: i1;
  var $p567: ref;
  var $i568: i16;
  var $i569: i32;
  var $i570: i1;
  var $p572: ref;
  var $i573: i16;
  var $i574: i32;
  var $i575: i1;
  var $p577: ref;
  var $i578: i16;
  var $i579: i32;
  var $i580: i1;
  var $p582: ref;
  var $i583: i16;
  var $i584: i32;
  var $i585: i1;
  var $p587: ref;
  var $i588: i16;
  var $i589: i32;
  var $i590: i1;
  var $p592: ref;
  var $i593: i16;
  var $i594: i32;
  var $i595: i1;
  var $p597: ref;
  var $i598: i16;
  var $i599: i32;
  var $i600: i1;
  var $p602: ref;
  var $i603: i16;
  var $i604: i32;
  var $i605: i1;
  var $p607: ref;
  var $i608: i16;
  var $i609: i32;
  var $i610: i1;
  var $p612: ref;
  var $i613: i16;
  var $i614: i32;
  var $i615: i1;
  var $p617: ref;
  var $i618: i16;
  var $i619: i32;
  var $i620: i1;
  var $p622: ref;
  var $i623: i16;
  var $i624: i32;
  var $i625: i1;
  var $p627: ref;
  var $i628: i16;
  var $i629: i32;
  var $i630: i1;
  var $p632: ref;
  var $i633: i16;
  var $i634: i32;
  var $i635: i1;
  var $p637: ref;
  var $i638: i16;
  var $i639: i32;
  var $i640: i1;
  var $p642: ref;
  var $i643: i16;
  var $i644: i32;
  var $i645: i1;
  var $p647: ref;
  var $i648: i16;
  var $i649: i32;
  var $i650: i1;
  var $p652: ref;
  var $i653: i16;
  var $i654: i32;
  var $i655: i1;
  var $p657: ref;
  var $i658: i16;
  var $i659: i32;
  var $i660: i1;
  var $p662: ref;
  var $i663: i16;
  var $i664: i32;
  var $i665: i1;
  var $p667: ref;
  var $i668: i16;
  var $i669: i32;
  var $i670: i1;
  var $p672: ref;
  var $i673: i16;
  var $i674: i32;
  var $i675: i1;
  var $p677: ref;
  var $i678: i16;
  var $i679: i32;
  var $i680: i1;
  var $p682: ref;
  var $i683: i16;
  var $i684: i32;
  var $i685: i1;
  var $p687: ref;
  var $i688: i16;
  var $i689: i32;
  var $i690: i1;
  var $p692: ref;
  var $i693: i16;
  var $i694: i32;
  var $i695: i1;
  var $p697: ref;
  var $i698: i16;
  var $i699: i32;
  var $i700: i1;
  var $p702: ref;
  var $i703: i16;
  var $i704: i32;
  var $i705: i1;
  var $p707: ref;
  var $i708: i16;
  var $i709: i32;
  var $i710: i1;
  var $p712: ref;
  var $i713: i16;
  var $i714: i32;
  var $i715: i1;
  var $p717: ref;
  var $i718: i16;
  var $i719: i32;
  var $i720: i1;
  var $p722: ref;
  var $i723: i16;
  var $i724: i32;
  var $i725: i1;
  var $p727: ref;
  var $i728: i16;
  var $i729: i32;
  var $i730: i1;
  var $p732: ref;
  var $i733: i16;
  var $i734: i32;
  var $i735: i1;
  var $p737: ref;
  var $i738: i16;
  var $i739: i32;
  var $i740: i1;
  var $p742: ref;
  var $i743: i16;
  var $i744: i32;
  var $i745: i1;
  var $p747: ref;
  var $i748: i16;
  var $i749: i32;
  var $i750: i1;
  var $p752: ref;
  var $i753: i16;
  var $i754: i32;
  var $i755: i1;
  var $p757: ref;
  var $i758: i16;
  var $i759: i32;
  var $i760: i1;
  var $p762: ref;
  var $i763: i16;
  var $i764: i32;
  var $i765: i1;
  var $p767: ref;
  var $i768: i16;
  var $i769: i32;
  var $i770: i1;
  var $p772: ref;
  var $i773: i16;
  var $i774: i32;
  var $i775: i1;
  var $p777: ref;
  var $i778: i16;
  var $i779: i32;
  var $i780: i1;
  var $p782: ref;
  var $i783: i16;
  var $i784: i32;
  var $i785: i1;
  var $p787: ref;
  var $i788: i16;
  var $i789: i32;
  var $i790: i1;
  var $p792: ref;
  var $i793: i16;
  var $i794: i32;
  var $i795: i1;
  var $p797: ref;
  var $i798: i16;
  var $i799: i32;
  var $i800: i1;
  var $p802: ref;
  var $i803: i16;
  var $i804: i32;
  var $i805: i1;
  var $p807: ref;
  var $i808: i16;
  var $i809: i32;
  var $i810: i1;
  var $p812: ref;
  var $i813: i16;
  var $i814: i32;
  var $i815: i1;
  var $p817: ref;
  var $i818: i16;
  var $i819: i32;
  var $i820: i1;
  var $p822: ref;
  var $i823: i16;
  var $i824: i32;
  var $i825: i1;
  var $p827: ref;
  var $i828: i16;
  var $i829: i32;
  var $i830: i1;
  var $p832: ref;
  var $i833: i16;
  var $i834: i32;
  var $i835: i1;
  var $p837: ref;
  var $i838: i16;
  var $i839: i32;
  var $i840: i1;
  var $p842: ref;
  var $i843: i16;
  var $i844: i32;
  var $i845: i1;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} {:cexpr "get_string:arg:language"} boogie_si_record_i16($i2);
    call {:si_unique_call 475} {:cexpr "get_string:arg:id"} boogie_si_record_i32($i3);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(56, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i133, $i135);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i136 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p152);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p164, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p164, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p168);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i167, $i169);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i98 := $sub.i32(0, 22);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $r := $i98;
    return;

  $bb78:
    assume $i170 == 1;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p171 := $p165;
    goto $bb81;

  $bb81:
    call $p172, $p173, $i174, $i175, $p176, $p177, $i178, $i179, $i180, $i181, $i182, $p184, $p185, $p186, $p187, $p188, $i189, $p190, $i191, $i192, $p194, $p195, $i196, $i197, $p198, $p199, $i200, $i201, $i202, $i203, $i204, $p206, $p207, $p208, $p209, $p210, $i211, $i212, $p193, $p214, $p215, $p216, $p217, $p218, $i219, $i220, $p171 := get_string_loop_$bb81($p1, $i2, $i3, $i169, $p172, $p173, $i174, $i175, $p176, $p177, $i178, $i179, $i180, $i181, $i182, $p184, $p185, $p186, $p187, $p188, $i189, $p190, $i191, $i192, $p194, $p195, $i196, $i197, $p198, $p199, $i200, $i201, $i202, $i203, $i204, $p206, $p207, $p208, $p209, $p210, $i211, $i212, $p193, $p214, $p215, $p216, $p217, $p218, $i219, $i220, $p171);
    goto $bb81_last;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p171, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p186, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p186, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p171, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p190);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i192 := $ne.i64($i189, $i191);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p171, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p215);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p216, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p216, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i220 := $ne.i64($i219, $i169);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i220 == 1);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb104:
    assume $i220 == 1;
    assume {:verifier.code 0} true;
    $p171 := $p217;
    goto $bb104_dummy;

  $bb89:
    assume $i192 == 1;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p193 := $p187;
    goto $bb92;

  $bb92:
    call $p194, $p195, $i196, $i197, $p198, $p199, $i200, $i201, $i202, $i203, $i204, $p206, $p207, $p208, $p209, $p210, $i211, $i212, $p193 := get_string_loop_$bb92($p1, $i2, $i3, $i191, $p194, $p195, $i196, $i197, $p198, $p199, $i200, $i201, $i202, $i203, $i204, $p206, $p207, $p208, $p209, $p210, $i211, $i212, $p193);
    goto $bb92_last;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p195);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i197 := $eq.i64($i196, 0);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p193, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i200 := $zext.i16.i32($i2);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i32.i16($i200);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i202 := lookup_string($p199, $p1, $i201, $i3);
    call {:si_unique_call 492} {:cexpr "len"} boogie_si_record_i32($i202);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i203 := $sgt.i32($i202, 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i204 := $i202;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p193, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p208, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p208, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i211 := $p2i.ref.i64($p210);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i212 := $ne.i64($i211, $i191);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i212 == 1);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb101:
    assume $i212 == 1;
    assume {:verifier.code 0} true;
    $p193 := $p209;
    goto $bb101_dummy;

  $bb98:
    assume $i203 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i98 := $i204;
    goto $bb47;

  $bb94:
    assume $i197 == 1;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb83:
    assume $i175 == 1;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p171, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i178 := $zext.i16.i32($i2);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i16($i178);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i180 := lookup_string($p177, $p1, $i179, $i3);
    call {:si_unique_call 490} {:cexpr "len"} boogie_si_record_i32($i180);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i181 := $sgt.i32($i180, 0);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i182 := $i180;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i98 := $i182;
    goto $bb47;

  $bb72:
    assume $i154 == 1;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i2);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i16($i157);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i159 := lookup_string($p156, $p1, $i158, $i3);
    call {:si_unique_call 488} {:cexpr "len"} boogie_si_record_i32($i159);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i160 := $sgt.i32($i159, 0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb74:
    assume $i160 == 1;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i98 := $i159;
    goto $bb47;

  $bb61:
    assume $i136 == 1;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p137 := $p130;
    goto $bb64;

  $bb64:
    call $p138, $i139, $i140, $i141, $i142, $i143, $p145, $p146, $p147, $p148, $i149, $i150, $p137 := get_string_loop_$bb64($p1, $i2, $i3, $i135, $p138, $i139, $i140, $i141, $i142, $i143, $p145, $p146, $p147, $p148, $i149, $i150, $p137);
    goto $bb64_last;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p138 := get_containers_gs($p137);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i2);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i141 := lookup_string($p138, $p1, $i140, $i3);
    call {:si_unique_call 486} {:cexpr "len"} boogie_si_record_i32($i141);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i142 := $sgt.i32($i141, 0);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i143 := $i141;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p137, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i149, $i135);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i150 == 1);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb69:
    assume $i150 == 1;
    assume {:verifier.code 0} true;
    $p137 := $p146;
    goto $bb69_dummy;

  $bb66:
    assume $i142 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i98 := $i143;
    goto $bb47;

  $bb50:
    assume $i112 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i2);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb52;

  $bb53:
    assume $i114 == 1;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i3, 238);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb52;

  $bb55:
    assume $i115 == 1;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 18)), $mul.ref(0, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, 18);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p116, $mul.ref(0, 18)), $mul.ref(1, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, 3);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i8.i1(0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p116, $mul.ref(0, 18)), $mul.ref(2, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(32, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 483} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p121, $p123, 14, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(46, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.0, $p124);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p116, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, $i125);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p116, $mul.ref(0, 18)), $mul.ref(17, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, 0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i98 := 18;
    goto $bb47;

  $bb57:
    assume $i119 == 1;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} __compiletime_assert_1002();
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 476} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p8, 0, 256, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 3);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i22, $i24);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i71, $i73);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(0, 2));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.0, $p93);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i91 := 0;
    assume {:branchcond $i96} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i91, 0);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i91, 1);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i102 := $mul.i32($i101, 2);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, $i103);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i98 := $i107;
    goto $bb47;

  $bb45:
    assume $i97 == 1;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i98 := $sub.i32(0, 22);
    goto $bb47;

  $bb42:
    assume $i96 == 1;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(1, 2));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.0, $p87);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i91 := 1;
    assume {:branchcond $i90} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb41;

  $bb39:
    assume $i90 == 1;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(2, 2));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i223 := $load.i16($M.0, $p222);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i224 := $zext.i16.i32($i223);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i91 := 2;
    assume {:branchcond $i225} true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb41;

  $bb109:
    assume $i225 == 1;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(3, 2));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i228 := $load.i16($M.0, $p227);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i32($i228);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i230 := $ne.i32($i229, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i91 := 3;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i230 == 1);
    goto $bb41;

  $bb113:
    assume $i230 == 1;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(4, 2));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i233 := $load.i16($M.0, $p232);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i234 := $zext.i16.i32($i233);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i235 := $ne.i32($i234, 0);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i91 := 4;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i235 == 1);
    goto $bb41;

  $bb117:
    assume $i235 == 1;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(5, 2));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i238 := $load.i16($M.0, $p237);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i239 := $zext.i16.i32($i238);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i239, 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i91 := 5;
    assume {:branchcond $i240} true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i240 == 1);
    goto $bb41;

  $bb121:
    assume $i240 == 1;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(6, 2));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i243 := $load.i16($M.0, $p242);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i244 := $zext.i16.i32($i243);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i244, 0);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i91 := 6;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb41;

  $bb125:
    assume $i245 == 1;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(7, 2));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i248 := $load.i16($M.0, $p247);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i249 := $zext.i16.i32($i248);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i91 := 7;
    assume {:branchcond $i250} true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i250 == 1);
    goto $bb41;

  $bb129:
    assume $i250 == 1;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(8, 2));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i253 := $load.i16($M.0, $p252);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i254 := $zext.i16.i32($i253);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i91 := 8;
    assume {:branchcond $i255} true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i255 == 1);
    goto $bb41;

  $bb133:
    assume $i255 == 1;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(9, 2));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i258 := $load.i16($M.0, $p257);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i259 := $zext.i16.i32($i258);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i91 := 9;
    assume {:branchcond $i260} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb41;

  $bb137:
    assume $i260 == 1;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(10, 2));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i263 := $load.i16($M.0, $p262);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i264 := $zext.i16.i32($i263);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i265 := $ne.i32($i264, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i91 := 10;
    assume {:branchcond $i265} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i265 == 1);
    goto $bb41;

  $bb141:
    assume $i265 == 1;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(11, 2));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i268 := $load.i16($M.0, $p267);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i269 := $zext.i16.i32($i268);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i269, 0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i91 := 11;
    assume {:branchcond $i270} true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb41;

  $bb145:
    assume $i270 == 1;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(12, 2));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i273 := $load.i16($M.0, $p272);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i274 := $zext.i16.i32($i273);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i275 := $ne.i32($i274, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i91 := 12;
    assume {:branchcond $i275} true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i275 == 1);
    goto $bb41;

  $bb149:
    assume $i275 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(13, 2));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i278 := $load.i16($M.0, $p277);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i279 := $zext.i16.i32($i278);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i280 := $ne.i32($i279, 0);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i91 := 13;
    assume {:branchcond $i280} true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !($i280 == 1);
    goto $bb41;

  $bb153:
    assume $i280 == 1;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(14, 2));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i283 := $load.i16($M.0, $p282);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i284 := $zext.i16.i32($i283);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i285 := $ne.i32($i284, 0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i91 := 14;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb41;

  $bb157:
    assume $i285 == 1;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(15, 2));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i288 := $load.i16($M.0, $p287);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i289 := $zext.i16.i32($i288);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i91 := 15;
    assume {:branchcond $i290} true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !($i290 == 1);
    goto $bb41;

  $bb161:
    assume $i290 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(16, 2));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i293 := $load.i16($M.0, $p292);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i294 := $zext.i16.i32($i293);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i91 := 16;
    assume {:branchcond $i295} true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb41;

  $bb165:
    assume $i295 == 1;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(17, 2));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i298 := $load.i16($M.0, $p297);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i299 := $zext.i16.i32($i298);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i91 := 17;
    assume {:branchcond $i300} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i300 == 1);
    goto $bb41;

  $bb169:
    assume $i300 == 1;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(18, 2));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i303 := $load.i16($M.0, $p302);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i304 := $zext.i16.i32($i303);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i305 := $ne.i32($i304, 0);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i91 := 18;
    assume {:branchcond $i305} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb41;

  $bb173:
    assume $i305 == 1;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(19, 2));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i308 := $load.i16($M.0, $p307);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i309 := $zext.i16.i32($i308);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i310 := $ne.i32($i309, 0);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i91 := 19;
    assume {:branchcond $i310} true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i310 == 1);
    goto $bb41;

  $bb177:
    assume $i310 == 1;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(20, 2));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i313 := $load.i16($M.0, $p312);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i314 := $zext.i16.i32($i313);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i91 := 20;
    assume {:branchcond $i315} true;
    goto $bb181, $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume !($i315 == 1);
    goto $bb41;

  $bb181:
    assume $i315 == 1;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(21, 2));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i318 := $load.i16($M.0, $p317);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i319 := $zext.i16.i32($i318);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 0);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i91 := 21;
    assume {:branchcond $i320} true;
    goto $bb185, $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb41;

  $bb185:
    assume $i320 == 1;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(22, 2));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i323 := $load.i16($M.0, $p322);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i324 := $zext.i16.i32($i323);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i325 := $ne.i32($i324, 0);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i91 := 22;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb41;

  $bb189:
    assume $i325 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(23, 2));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i328 := $load.i16($M.0, $p327);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i329 := $zext.i16.i32($i328);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i330 := $ne.i32($i329, 0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i91 := 23;
    assume {:branchcond $i330} true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i330 == 1);
    goto $bb41;

  $bb193:
    assume $i330 == 1;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(24, 2));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i333 := $load.i16($M.0, $p332);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i334 := $zext.i16.i32($i333);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i91 := 24;
    assume {:branchcond $i335} true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i335 == 1);
    goto $bb41;

  $bb197:
    assume $i335 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(25, 2));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i338 := $load.i16($M.0, $p337);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i339 := $zext.i16.i32($i338);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i340 := $ne.i32($i339, 0);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i91 := 25;
    assume {:branchcond $i340} true;
    goto $bb201, $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume !($i340 == 1);
    goto $bb41;

  $bb201:
    assume $i340 == 1;
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(26, 2));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i343 := $load.i16($M.0, $p342);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i344 := $zext.i16.i32($i343);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i345 := $ne.i32($i344, 0);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i91 := 26;
    assume {:branchcond $i345} true;
    goto $bb205, $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    assume !($i345 == 1);
    goto $bb41;

  $bb205:
    assume $i345 == 1;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(27, 2));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i348 := $load.i16($M.0, $p347);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i349 := $zext.i16.i32($i348);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i350 := $ne.i32($i349, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i91 := 27;
    assume {:branchcond $i350} true;
    goto $bb209, $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    assume !($i350 == 1);
    goto $bb41;

  $bb209:
    assume $i350 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(28, 2));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i353 := $load.i16($M.0, $p352);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i354 := $zext.i16.i32($i353);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i355 := $ne.i32($i354, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i91 := 28;
    assume {:branchcond $i355} true;
    goto $bb213, $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume !($i355 == 1);
    goto $bb41;

  $bb213:
    assume $i355 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(29, 2));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i358 := $load.i16($M.0, $p357);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i359 := $zext.i16.i32($i358);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i360 := $ne.i32($i359, 0);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i91 := 29;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i360 == 1);
    goto $bb41;

  $bb217:
    assume $i360 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(30, 2));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i363 := $load.i16($M.0, $p362);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i364 := $zext.i16.i32($i363);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i364, 0);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i91 := 30;
    assume {:branchcond $i365} true;
    goto $bb221, $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume !($i365 == 1);
    goto $bb41;

  $bb221:
    assume $i365 == 1;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(31, 2));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i368 := $load.i16($M.0, $p367);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i369 := $zext.i16.i32($i368);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i370 := $ne.i32($i369, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i91 := 31;
    assume {:branchcond $i370} true;
    goto $bb225, $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    assume !($i370 == 1);
    goto $bb41;

  $bb225:
    assume $i370 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(32, 2));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i373 := $load.i16($M.0, $p372);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i374 := $zext.i16.i32($i373);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i374, 0);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i91 := 32;
    assume {:branchcond $i375} true;
    goto $bb229, $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume !($i375 == 1);
    goto $bb41;

  $bb229:
    assume $i375 == 1;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(33, 2));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i378 := $load.i16($M.0, $p377);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i379 := $zext.i16.i32($i378);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i380 := $ne.i32($i379, 0);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i91 := 33;
    assume {:branchcond $i380} true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i380 == 1);
    goto $bb41;

  $bb233:
    assume $i380 == 1;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(34, 2));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i383 := $load.i16($M.0, $p382);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i384 := $zext.i16.i32($i383);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i385 := $ne.i32($i384, 0);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i91 := 34;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i385 == 1);
    goto $bb41;

  $bb237:
    assume $i385 == 1;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(35, 2));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i388 := $load.i16($M.0, $p387);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i389 := $zext.i16.i32($i388);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i390 := $ne.i32($i389, 0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i91 := 35;
    assume {:branchcond $i390} true;
    goto $bb241, $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    assume !($i390 == 1);
    goto $bb41;

  $bb241:
    assume $i390 == 1;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(36, 2));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i393 := $load.i16($M.0, $p392);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i394 := $zext.i16.i32($i393);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i395 := $ne.i32($i394, 0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i91 := 36;
    assume {:branchcond $i395} true;
    goto $bb245, $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    assume !($i395 == 1);
    goto $bb41;

  $bb245:
    assume $i395 == 1;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(37, 2));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i398 := $load.i16($M.0, $p397);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i399 := $zext.i16.i32($i398);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i91 := 37;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i400 == 1);
    goto $bb41;

  $bb249:
    assume $i400 == 1;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(38, 2));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i403 := $load.i16($M.0, $p402);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i404 := $zext.i16.i32($i403);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i405 := $ne.i32($i404, 0);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i91 := 38;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    assume !($i405 == 1);
    goto $bb41;

  $bb253:
    assume $i405 == 1;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(39, 2));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i408 := $load.i16($M.0, $p407);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i409 := $zext.i16.i32($i408);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i410 := $ne.i32($i409, 0);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i91 := 39;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    assume !($i410 == 1);
    goto $bb41;

  $bb257:
    assume $i410 == 1;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(40, 2));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i413 := $load.i16($M.0, $p412);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i414 := $zext.i16.i32($i413);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i415 := $ne.i32($i414, 0);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i91 := 40;
    assume {:branchcond $i415} true;
    goto $bb261, $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    assume !($i415 == 1);
    goto $bb41;

  $bb261:
    assume $i415 == 1;
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(41, 2));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i418 := $load.i16($M.0, $p417);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i419 := $zext.i16.i32($i418);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i420 := $ne.i32($i419, 0);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i91 := 41;
    assume {:branchcond $i420} true;
    goto $bb265, $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume !($i420 == 1);
    goto $bb41;

  $bb265:
    assume $i420 == 1;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(42, 2));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i423 := $load.i16($M.0, $p422);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i424 := $zext.i16.i32($i423);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i425 := $ne.i32($i424, 0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i91 := 42;
    assume {:branchcond $i425} true;
    goto $bb269, $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    assume !($i425 == 1);
    goto $bb41;

  $bb269:
    assume $i425 == 1;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(43, 2));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i428 := $load.i16($M.0, $p427);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i429 := $zext.i16.i32($i428);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i430 := $ne.i32($i429, 0);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i91 := 43;
    assume {:branchcond $i430} true;
    goto $bb273, $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    assume !($i430 == 1);
    goto $bb41;

  $bb273:
    assume $i430 == 1;
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(44, 2));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i433 := $load.i16($M.0, $p432);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i434 := $zext.i16.i32($i433);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i435 := $ne.i32($i434, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i91 := 44;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    assume !($i435 == 1);
    goto $bb41;

  $bb277:
    assume $i435 == 1;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(45, 2));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i438 := $load.i16($M.0, $p437);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i439 := $zext.i16.i32($i438);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i440 := $ne.i32($i439, 0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i91 := 45;
    assume {:branchcond $i440} true;
    goto $bb281, $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    assume !($i440 == 1);
    goto $bb41;

  $bb281:
    assume $i440 == 1;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(46, 2));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i443 := $load.i16($M.0, $p442);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i444 := $zext.i16.i32($i443);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i445 := $ne.i32($i444, 0);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i91 := 46;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    assume !($i445 == 1);
    goto $bb41;

  $bb285:
    assume $i445 == 1;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(47, 2));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i448 := $load.i16($M.0, $p447);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i449 := $zext.i16.i32($i448);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i450 := $ne.i32($i449, 0);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i91 := 47;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    assume !($i450 == 1);
    goto $bb41;

  $bb289:
    assume $i450 == 1;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(48, 2));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i453 := $load.i16($M.0, $p452);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i454 := $zext.i16.i32($i453);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i455 := $ne.i32($i454, 0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i91 := 48;
    assume {:branchcond $i455} true;
    goto $bb293, $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    assume !($i455 == 1);
    goto $bb41;

  $bb293:
    assume $i455 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(49, 2));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i458 := $load.i16($M.0, $p457);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i459 := $zext.i16.i32($i458);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i460 := $ne.i32($i459, 0);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i91 := 49;
    assume {:branchcond $i460} true;
    goto $bb297, $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    assume !($i460 == 1);
    goto $bb41;

  $bb297:
    assume $i460 == 1;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(50, 2));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i463 := $load.i16($M.0, $p462);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i464 := $zext.i16.i32($i463);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i465 := $ne.i32($i464, 0);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i91 := 50;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    assume !($i465 == 1);
    goto $bb41;

  $bb301:
    assume $i465 == 1;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(51, 2));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i468 := $load.i16($M.0, $p467);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i469 := $zext.i16.i32($i468);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i470 := $ne.i32($i469, 0);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i91 := 51;
    assume {:branchcond $i470} true;
    goto $bb305, $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    assume !($i470 == 1);
    goto $bb41;

  $bb305:
    assume $i470 == 1;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(52, 2));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i473 := $load.i16($M.0, $p472);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i474 := $zext.i16.i32($i473);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i475 := $ne.i32($i474, 0);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i91 := 52;
    assume {:branchcond $i475} true;
    goto $bb309, $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    assume !($i475 == 1);
    goto $bb41;

  $bb309:
    assume $i475 == 1;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(53, 2));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i478 := $load.i16($M.0, $p477);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i479 := $zext.i16.i32($i478);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i480 := $ne.i32($i479, 0);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i91 := 53;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    assume !($i480 == 1);
    goto $bb41;

  $bb313:
    assume $i480 == 1;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(54, 2));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i483 := $load.i16($M.0, $p482);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i484 := $zext.i16.i32($i483);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i485 := $ne.i32($i484, 0);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i91 := 54;
    assume {:branchcond $i485} true;
    goto $bb317, $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    assume !($i485 == 1);
    goto $bb41;

  $bb317:
    assume $i485 == 1;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(55, 2));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i488 := $load.i16($M.0, $p487);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i489 := $zext.i16.i32($i488);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i490 := $ne.i32($i489, 0);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i91 := 55;
    assume {:branchcond $i490} true;
    goto $bb321, $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    assume !($i490 == 1);
    goto $bb41;

  $bb321:
    assume $i490 == 1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(56, 2));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i493 := $load.i16($M.0, $p492);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i494 := $zext.i16.i32($i493);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i495 := $ne.i32($i494, 0);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i91 := 56;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    assume !($i495 == 1);
    goto $bb41;

  $bb325:
    assume $i495 == 1;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(57, 2));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i498 := $load.i16($M.0, $p497);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i499 := $zext.i16.i32($i498);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i500 := $ne.i32($i499, 0);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i91 := 57;
    assume {:branchcond $i500} true;
    goto $bb329, $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    assume !($i500 == 1);
    goto $bb41;

  $bb329:
    assume $i500 == 1;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(58, 2));
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i503 := $load.i16($M.0, $p502);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i504 := $zext.i16.i32($i503);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i505 := $ne.i32($i504, 0);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i91 := 58;
    assume {:branchcond $i505} true;
    goto $bb333, $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    assume !($i505 == 1);
    goto $bb41;

  $bb333:
    assume $i505 == 1;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(59, 2));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i508 := $load.i16($M.0, $p507);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i509 := $zext.i16.i32($i508);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i510 := $ne.i32($i509, 0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i91 := 59;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    assume !($i510 == 1);
    goto $bb41;

  $bb337:
    assume $i510 == 1;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(60, 2));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i513 := $load.i16($M.0, $p512);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i514 := $zext.i16.i32($i513);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i515 := $ne.i32($i514, 0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i91 := 60;
    assume {:branchcond $i515} true;
    goto $bb341, $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    assume !($i515 == 1);
    goto $bb41;

  $bb341:
    assume $i515 == 1;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(61, 2));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i518 := $load.i16($M.0, $p517);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i519 := $zext.i16.i32($i518);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i520 := $ne.i32($i519, 0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i91 := 61;
    assume {:branchcond $i520} true;
    goto $bb345, $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    assume !($i520 == 1);
    goto $bb41;

  $bb345:
    assume $i520 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(62, 2));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i523 := $load.i16($M.0, $p522);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i524 := $zext.i16.i32($i523);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i525 := $ne.i32($i524, 0);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i91 := 62;
    assume {:branchcond $i525} true;
    goto $bb349, $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    assume !($i525 == 1);
    goto $bb41;

  $bb349:
    assume $i525 == 1;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(63, 2));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i528 := $load.i16($M.0, $p527);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i529 := $zext.i16.i32($i528);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i530 := $ne.i32($i529, 0);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i91 := 63;
    assume {:branchcond $i530} true;
    goto $bb353, $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    assume !($i530 == 1);
    goto $bb41;

  $bb353:
    assume $i530 == 1;
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(64, 2));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i533 := $load.i16($M.0, $p532);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i534 := $zext.i16.i32($i533);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i535 := $ne.i32($i534, 0);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i91 := 64;
    assume {:branchcond $i535} true;
    goto $bb357, $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    assume !($i535 == 1);
    goto $bb41;

  $bb357:
    assume $i535 == 1;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(65, 2));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i538 := $load.i16($M.0, $p537);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i539 := $zext.i16.i32($i538);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i540 := $ne.i32($i539, 0);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i91 := 65;
    assume {:branchcond $i540} true;
    goto $bb361, $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    assume !($i540 == 1);
    goto $bb41;

  $bb361:
    assume $i540 == 1;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(66, 2));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i543 := $load.i16($M.0, $p542);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i544 := $zext.i16.i32($i543);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i545 := $ne.i32($i544, 0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i91 := 66;
    assume {:branchcond $i545} true;
    goto $bb365, $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    assume !($i545 == 1);
    goto $bb41;

  $bb365:
    assume $i545 == 1;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(67, 2));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i548 := $load.i16($M.0, $p547);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i549 := $zext.i16.i32($i548);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i550 := $ne.i32($i549, 0);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i91 := 67;
    assume true;
    goto $bb369, $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    assume !($i550 == 1);
    goto $bb41;

  $bb369:
    assume $i550 == 1;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(68, 2));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i553 := $load.i16($M.0, $p552);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i554 := $zext.i16.i32($i553);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i555 := $ne.i32($i554, 0);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i91 := 68;
    assume {:branchcond $i555} true;
    goto $bb373, $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    assume !($i555 == 1);
    goto $bb41;

  $bb373:
    assume $i555 == 1;
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(69, 2));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i558 := $load.i16($M.0, $p557);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i559 := $zext.i16.i32($i558);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i560 := $ne.i32($i559, 0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i91 := 69;
    assume {:branchcond $i560} true;
    goto $bb377, $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    assume !($i560 == 1);
    goto $bb41;

  $bb377:
    assume $i560 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(70, 2));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i563 := $load.i16($M.0, $p562);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i564 := $zext.i16.i32($i563);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i565 := $ne.i32($i564, 0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i91 := 70;
    assume true;
    goto $bb381, $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    assume !($i565 == 1);
    goto $bb41;

  $bb381:
    assume $i565 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(71, 2));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i568 := $load.i16($M.0, $p567);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i569 := $zext.i16.i32($i568);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i570 := $ne.i32($i569, 0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i91 := 71;
    assume {:branchcond $i570} true;
    goto $bb385, $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    assume !($i570 == 1);
    goto $bb41;

  $bb385:
    assume $i570 == 1;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(72, 2));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i573 := $load.i16($M.0, $p572);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i574 := $zext.i16.i32($i573);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i575 := $ne.i32($i574, 0);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i91 := 72;
    assume {:branchcond $i575} true;
    goto $bb389, $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    assume !($i575 == 1);
    goto $bb41;

  $bb389:
    assume $i575 == 1;
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(73, 2));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i578 := $load.i16($M.0, $p577);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i579 := $zext.i16.i32($i578);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i580 := $ne.i32($i579, 0);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i91 := 73;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    assume !($i580 == 1);
    goto $bb41;

  $bb393:
    assume $i580 == 1;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(74, 2));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i583 := $load.i16($M.0, $p582);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i584 := $zext.i16.i32($i583);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i585 := $ne.i32($i584, 0);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i91 := 74;
    assume {:branchcond $i585} true;
    goto $bb397, $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    assume !($i585 == 1);
    goto $bb41;

  $bb397:
    assume $i585 == 1;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(75, 2));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i588 := $load.i16($M.0, $p587);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i589 := $zext.i16.i32($i588);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i590 := $ne.i32($i589, 0);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i91 := 75;
    assume {:branchcond $i590} true;
    goto $bb401, $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    assume !($i590 == 1);
    goto $bb41;

  $bb401:
    assume $i590 == 1;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(76, 2));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i593 := $load.i16($M.0, $p592);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i594 := $zext.i16.i32($i593);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i595 := $ne.i32($i594, 0);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i91 := 76;
    assume true;
    goto $bb405, $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    assume !($i595 == 1);
    goto $bb41;

  $bb405:
    assume $i595 == 1;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(77, 2));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i598 := $load.i16($M.0, $p597);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i599 := $zext.i16.i32($i598);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i600 := $ne.i32($i599, 0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i91 := 77;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    assume !($i600 == 1);
    goto $bb41;

  $bb409:
    assume $i600 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(78, 2));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i603 := $load.i16($M.0, $p602);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i604 := $zext.i16.i32($i603);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i605 := $ne.i32($i604, 0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i91 := 78;
    assume {:branchcond $i605} true;
    goto $bb413, $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    assume !($i605 == 1);
    goto $bb41;

  $bb413:
    assume $i605 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(79, 2));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i608 := $load.i16($M.0, $p607);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i609 := $zext.i16.i32($i608);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i610 := $ne.i32($i609, 0);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i91 := 79;
    assume true;
    goto $bb417, $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    assume !($i610 == 1);
    goto $bb41;

  $bb417:
    assume $i610 == 1;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(80, 2));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i613 := $load.i16($M.0, $p612);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i614 := $zext.i16.i32($i613);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i615 := $ne.i32($i614, 0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i91 := 80;
    assume true;
    goto $bb421, $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    assume !($i615 == 1);
    goto $bb41;

  $bb421:
    assume $i615 == 1;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(81, 2));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i618 := $load.i16($M.0, $p617);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i619 := $zext.i16.i32($i618);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i620 := $ne.i32($i619, 0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i91 := 81;
    assume {:branchcond $i620} true;
    goto $bb425, $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    assume !($i620 == 1);
    goto $bb41;

  $bb425:
    assume $i620 == 1;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(82, 2));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i623 := $load.i16($M.0, $p622);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i624 := $zext.i16.i32($i623);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i625 := $ne.i32($i624, 0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i91 := 82;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    assume !($i625 == 1);
    goto $bb41;

  $bb429:
    assume $i625 == 1;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(83, 2));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i628 := $load.i16($M.0, $p627);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i629 := $zext.i16.i32($i628);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i630 := $ne.i32($i629, 0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i91 := 83;
    assume true;
    goto $bb433, $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    assume !($i630 == 1);
    goto $bb41;

  $bb433:
    assume $i630 == 1;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(84, 2));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i633 := $load.i16($M.0, $p632);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i634 := $zext.i16.i32($i633);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i635 := $ne.i32($i634, 0);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i91 := 84;
    assume {:branchcond $i635} true;
    goto $bb437, $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    assume !($i635 == 1);
    goto $bb41;

  $bb437:
    assume $i635 == 1;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(85, 2));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i638 := $load.i16($M.0, $p637);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i639 := $zext.i16.i32($i638);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i640 := $ne.i32($i639, 0);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i91 := 85;
    assume {:branchcond $i640} true;
    goto $bb441, $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    assume !($i640 == 1);
    goto $bb41;

  $bb441:
    assume $i640 == 1;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(86, 2));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i643 := $load.i16($M.0, $p642);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i644 := $zext.i16.i32($i643);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i645 := $ne.i32($i644, 0);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i91 := 86;
    assume {:branchcond $i645} true;
    goto $bb445, $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    assume !($i645 == 1);
    goto $bb41;

  $bb445:
    assume $i645 == 1;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(87, 2));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i648 := $load.i16($M.0, $p647);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i649 := $zext.i16.i32($i648);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i650 := $ne.i32($i649, 0);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i91 := 87;
    assume {:branchcond $i650} true;
    goto $bb449, $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    assume !($i650 == 1);
    goto $bb41;

  $bb449:
    assume $i650 == 1;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(88, 2));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i653 := $load.i16($M.0, $p652);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i654 := $zext.i16.i32($i653);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i655 := $ne.i32($i654, 0);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i91 := 88;
    assume {:branchcond $i655} true;
    goto $bb453, $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    assume !($i655 == 1);
    goto $bb41;

  $bb453:
    assume $i655 == 1;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(89, 2));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i658 := $load.i16($M.0, $p657);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i659 := $zext.i16.i32($i658);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i660 := $ne.i32($i659, 0);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i91 := 89;
    assume true;
    goto $bb457, $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    assume !($i660 == 1);
    goto $bb41;

  $bb457:
    assume $i660 == 1;
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(90, 2));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i663 := $load.i16($M.0, $p662);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i664 := $zext.i16.i32($i663);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i665 := $ne.i32($i664, 0);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i91 := 90;
    assume {:branchcond $i665} true;
    goto $bb461, $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    assume !($i665 == 1);
    goto $bb41;

  $bb461:
    assume $i665 == 1;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(91, 2));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i668 := $load.i16($M.0, $p667);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i669 := $zext.i16.i32($i668);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i670 := $ne.i32($i669, 0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i91 := 91;
    assume {:branchcond $i670} true;
    goto $bb465, $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    assume !($i670 == 1);
    goto $bb41;

  $bb465:
    assume $i670 == 1;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(92, 2));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i673 := $load.i16($M.0, $p672);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i674 := $zext.i16.i32($i673);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i675 := $ne.i32($i674, 0);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i91 := 92;
    assume {:branchcond $i675} true;
    goto $bb469, $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    assume !($i675 == 1);
    goto $bb41;

  $bb469:
    assume $i675 == 1;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(93, 2));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i678 := $load.i16($M.0, $p677);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i679 := $zext.i16.i32($i678);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i680 := $ne.i32($i679, 0);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i91 := 93;
    assume {:branchcond $i680} true;
    goto $bb473, $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    assume !($i680 == 1);
    goto $bb41;

  $bb473:
    assume $i680 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(94, 2));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i683 := $load.i16($M.0, $p682);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i684 := $zext.i16.i32($i683);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i685 := $ne.i32($i684, 0);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i91 := 94;
    assume true;
    goto $bb477, $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    assume !($i685 == 1);
    goto $bb41;

  $bb477:
    assume $i685 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(95, 2));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i688 := $load.i16($M.0, $p687);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i689 := $zext.i16.i32($i688);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i690 := $ne.i32($i689, 0);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i91 := 95;
    assume {:branchcond $i690} true;
    goto $bb481, $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    assume !($i690 == 1);
    goto $bb41;

  $bb481:
    assume $i690 == 1;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(96, 2));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i693 := $load.i16($M.0, $p692);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i694 := $zext.i16.i32($i693);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i695 := $ne.i32($i694, 0);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i91 := 96;
    assume true;
    goto $bb485, $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    assume !($i695 == 1);
    goto $bb41;

  $bb485:
    assume $i695 == 1;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(97, 2));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i698 := $load.i16($M.0, $p697);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i699 := $zext.i16.i32($i698);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i700 := $ne.i32($i699, 0);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i91 := 97;
    assume true;
    goto $bb489, $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    assume !($i700 == 1);
    goto $bb41;

  $bb489:
    assume $i700 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(98, 2));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i703 := $load.i16($M.0, $p702);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i704 := $zext.i16.i32($i703);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i705 := $ne.i32($i704, 0);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i91 := 98;
    assume {:branchcond $i705} true;
    goto $bb493, $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    assume !($i705 == 1);
    goto $bb41;

  $bb493:
    assume $i705 == 1;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(99, 2));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i708 := $load.i16($M.0, $p707);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i709 := $zext.i16.i32($i708);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i710 := $ne.i32($i709, 0);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i91 := 99;
    assume {:branchcond $i710} true;
    goto $bb497, $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    assume !($i710 == 1);
    goto $bb41;

  $bb497:
    assume $i710 == 1;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(100, 2));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i713 := $load.i16($M.0, $p712);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i714 := $zext.i16.i32($i713);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i715 := $ne.i32($i714, 0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i91 := 100;
    assume true;
    goto $bb501, $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    assume !($i715 == 1);
    goto $bb41;

  $bb501:
    assume $i715 == 1;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(101, 2));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i718 := $load.i16($M.0, $p717);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i719 := $zext.i16.i32($i718);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i720 := $ne.i32($i719, 0);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i91 := 101;
    assume {:branchcond $i720} true;
    goto $bb505, $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    assume !($i720 == 1);
    goto $bb41;

  $bb505:
    assume $i720 == 1;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(102, 2));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i723 := $load.i16($M.0, $p722);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i724 := $zext.i16.i32($i723);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i725 := $ne.i32($i724, 0);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i91 := 102;
    assume {:branchcond $i725} true;
    goto $bb509, $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    assume !($i725 == 1);
    goto $bb41;

  $bb509:
    assume $i725 == 1;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(103, 2));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i728 := $load.i16($M.0, $p727);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i729 := $zext.i16.i32($i728);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i730 := $ne.i32($i729, 0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i91 := 103;
    assume true;
    goto $bb513, $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    assume !($i730 == 1);
    goto $bb41;

  $bb513:
    assume $i730 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(104, 2));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i733 := $load.i16($M.0, $p732);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i734 := $zext.i16.i32($i733);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i735 := $ne.i32($i734, 0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i91 := 104;
    assume {:branchcond $i735} true;
    goto $bb517, $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    assume !($i735 == 1);
    goto $bb41;

  $bb517:
    assume $i735 == 1;
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(105, 2));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i738 := $load.i16($M.0, $p737);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i739 := $zext.i16.i32($i738);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i740 := $ne.i32($i739, 0);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i91 := 105;
    assume {:branchcond $i740} true;
    goto $bb521, $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    assume !($i740 == 1);
    goto $bb41;

  $bb521:
    assume $i740 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(106, 2));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i743 := $load.i16($M.0, $p742);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i744 := $zext.i16.i32($i743);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i745 := $ne.i32($i744, 0);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i91 := 106;
    assume true;
    goto $bb525, $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    assume !($i745 == 1);
    goto $bb41;

  $bb525:
    assume $i745 == 1;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(107, 2));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i748 := $load.i16($M.0, $p747);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i749 := $zext.i16.i32($i748);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i750 := $ne.i32($i749, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i91 := 107;
    assume {:branchcond $i750} true;
    goto $bb529, $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    assume !($i750 == 1);
    goto $bb41;

  $bb529:
    assume $i750 == 1;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(108, 2));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i753 := $load.i16($M.0, $p752);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i754 := $zext.i16.i32($i753);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i755 := $ne.i32($i754, 0);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i91 := 108;
    assume {:branchcond $i755} true;
    goto $bb533, $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    assume !($i755 == 1);
    goto $bb41;

  $bb533:
    assume $i755 == 1;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(109, 2));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i758 := $load.i16($M.0, $p757);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i759 := $zext.i16.i32($i758);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i760 := $ne.i32($i759, 0);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i91 := 109;
    assume true;
    goto $bb537, $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    assume !($i760 == 1);
    goto $bb41;

  $bb537:
    assume $i760 == 1;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(110, 2));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i763 := $load.i16($M.0, $p762);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i764 := $zext.i16.i32($i763);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i765 := $ne.i32($i764, 0);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i91 := 110;
    assume {:branchcond $i765} true;
    goto $bb541, $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    assume !($i765 == 1);
    goto $bb41;

  $bb541:
    assume $i765 == 1;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(111, 2));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i768 := $load.i16($M.0, $p767);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i769 := $zext.i16.i32($i768);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i770 := $ne.i32($i769, 0);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i91 := 111;
    assume {:branchcond $i770} true;
    goto $bb545, $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    assume !($i770 == 1);
    goto $bb41;

  $bb545:
    assume $i770 == 1;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(112, 2));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i773 := $load.i16($M.0, $p772);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i774 := $zext.i16.i32($i773);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i775 := $ne.i32($i774, 0);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i91 := 112;
    assume true;
    goto $bb549, $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    assume !($i775 == 1);
    goto $bb41;

  $bb549:
    assume $i775 == 1;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(113, 2));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i778 := $load.i16($M.0, $p777);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i779 := $zext.i16.i32($i778);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i780 := $ne.i32($i779, 0);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i91 := 113;
    assume {:branchcond $i780} true;
    goto $bb553, $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    assume !($i780 == 1);
    goto $bb41;

  $bb553:
    assume $i780 == 1;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(114, 2));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i783 := $load.i16($M.0, $p782);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i784 := $zext.i16.i32($i783);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i785 := $ne.i32($i784, 0);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i91 := 114;
    assume {:branchcond $i785} true;
    goto $bb557, $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    assume !($i785 == 1);
    goto $bb41;

  $bb557:
    assume $i785 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(115, 2));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i788 := $load.i16($M.0, $p787);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i789 := $zext.i16.i32($i788);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i790 := $ne.i32($i789, 0);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i91 := 115;
    assume true;
    goto $bb561, $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    assume !($i790 == 1);
    goto $bb41;

  $bb561:
    assume $i790 == 1;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(116, 2));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i793 := $load.i16($M.0, $p792);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i794 := $zext.i16.i32($i793);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i795 := $ne.i32($i794, 0);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i91 := 116;
    assume {:branchcond $i795} true;
    goto $bb565, $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    assume !($i795 == 1);
    goto $bb41;

  $bb565:
    assume $i795 == 1;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    $p797 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(117, 2));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i798 := $load.i16($M.0, $p797);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i799 := $zext.i16.i32($i798);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i800 := $ne.i32($i799, 0);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i91 := 117;
    assume {:branchcond $i800} true;
    goto $bb569, $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    assume !($i800 == 1);
    goto $bb41;

  $bb569:
    assume $i800 == 1;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(118, 2));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i803 := $load.i16($M.0, $p802);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i804 := $zext.i16.i32($i803);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i805 := $ne.i32($i804, 0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i91 := 118;
    assume true;
    goto $bb573, $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    assume !($i805 == 1);
    goto $bb41;

  $bb573:
    assume $i805 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(119, 2));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i808 := $load.i16($M.0, $p807);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i809 := $zext.i16.i32($i808);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i810 := $ne.i32($i809, 0);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i91 := 119;
    assume true;
    goto $bb577, $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    assume !($i810 == 1);
    goto $bb41;

  $bb577:
    assume $i810 == 1;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(120, 2));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i813 := $load.i16($M.0, $p812);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i814 := $zext.i16.i32($i813);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i815 := $ne.i32($i814, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i91 := 120;
    assume {:branchcond $i815} true;
    goto $bb581, $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    assume !($i815 == 1);
    goto $bb41;

  $bb581:
    assume $i815 == 1;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(121, 2));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i818 := $load.i16($M.0, $p817);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i819 := $zext.i16.i32($i818);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i820 := $ne.i32($i819, 0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i91 := 121;
    assume true;
    goto $bb585, $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    assume !($i820 == 1);
    goto $bb41;

  $bb585:
    assume $i820 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(122, 2));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i823 := $load.i16($M.0, $p822);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i824 := $zext.i16.i32($i823);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i825 := $ne.i32($i824, 0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i91 := 122;
    assume true;
    goto $bb589, $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    assume !($i825 == 1);
    goto $bb41;

  $bb589:
    assume $i825 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(123, 2));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i828 := $load.i16($M.0, $p827);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i829 := $zext.i16.i32($i828);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i830 := $ne.i32($i829, 0);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i91 := 123;
    assume {:branchcond $i830} true;
    goto $bb593, $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    assume !($i830 == 1);
    goto $bb41;

  $bb593:
    assume $i830 == 1;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(124, 2));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i833 := $load.i16($M.0, $p832);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i834 := $zext.i16.i32($i833);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i835 := $ne.i32($i834, 0);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i91 := 124;
    assume true;
    goto $bb597, $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    assume !($i835 == 1);
    goto $bb41;

  $bb597:
    assume $i835 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(125, 2));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i838 := $load.i16($M.0, $p837);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i839 := $zext.i16.i32($i838);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i840 := $ne.i32($i839, 0);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i91 := 125;
    assume true;
    goto $bb601, $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    assume !($i840 == 1);
    goto $bb41;

  $bb601:
    assume $i840 == 1;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(126, 2));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i843 := $load.i16($M.0, $p842);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i844 := $zext.i16.i32($i843);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i845 := $ne.i32($i844, 0);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i91 := 126;
    assume {:branchcond $i845} true;
    goto $bb605, $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    assume !($i845 == 1);
    goto $bb41;

  $bb605:
    assume $i845 == 1;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    $i91 := 127;
    goto $bb41;

  $bb28:
    assume $i74 == 1;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p75 := $p68;
    goto $bb31;

  $bb31:
    call $p76, $p77, $p78, $p80, $p81, $p82, $p83, $i84, $i85, $p75 := get_string_loop_$bb31($p7, $i73, $p76, $p77, $p78, $p80, $p81, $p82, $p83, $i84, $i85, $p75);
    goto $bb31_last;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p76 := get_containers_gs($p75);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} collect_langs($p76, $p78);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i73);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i85 == 1);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb33:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p75 := $p81;
    goto $bb33_dummy;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p26 := $p20;
    goto $bb9;

  $bb9:
    call $p27, $p28, $i29, $i30, $p31, $p32, $p34, $p35, $p36, $p37, $p38, $i39, $p40, $i41, $i42, $p44, $p45, $i46, $i47, $p48, $p49, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p43, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $p26 := get_string_loop_$bb9($p7, $i24, $p27, $p28, $i29, $i30, $p31, $p32, $p34, $p35, $p36, $p37, $p38, $i39, $p40, $i41, $i42, $p44, $p45, $i46, $i47, $p48, $p49, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p43, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $p26);
    goto $bb9_last;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p26, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i39, $i41);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p61, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, $i24);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb25:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $p26 := $p62;
    goto $bb25_dummy;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p43 := $p37;
    goto $bb17;

  $bb17:
    call $p44, $p45, $i46, $i47, $p48, $p49, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p43 := get_string_loop_$bb17($p7, $i41, $p44, $p45, $i46, $i47, $p48, $p49, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p43);
    goto $bb17_last;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p53, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, $i41);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i57 == 1);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb22:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $p43 := $p54;
    goto $bb22_dummy;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} collect_langs($p45, $p49);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} collect_langs($p28, $p32);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} collect_langs($p11, $p15);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb101_dummy:
    assume false;
    return;

  $bb92_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3955;

  $bb104_dummy:
    assume false;
    return;

  $bb81_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3926;

  $bb69_dummy:
    assume false;
    return;

  $bb64_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3880;

  $bb33_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  $bb22_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3744;

  $bb25_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3720;
}



const bos_desc: ref;

axiom bos_desc == $sub.ref(0, 479972);

procedure bos_desc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr, $M.29, assertsPassed;



implementation bos_desc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $p74: ref;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 5);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 15);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 5);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i64($i17);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i24);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} le16_add_cpu($p26, 7);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref($i18, 8)), $mul.ref(0, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 7);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p15, $mul.ref($i18, 8)), $mul.ref(1, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 16);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p15, $mul.ref($i18, 8)), $mul.ref(2, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 2);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p15, $mul.ref($i18, 8)), $mul.ref(4, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 6);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i64($i37);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 1);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i44);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} le16_add_cpu($p46, 10);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p35, $mul.ref($i38, 10)), $mul.ref(0, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 10);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p35, $mul.ref($i38, 10)), $mul.ref(1, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 16);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p35, $mul.ref($i38, 10)), $mul.ref(2, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 3);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p35, $mul.ref($i38, 10)), $mul.ref(3, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 0);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p35, $mul.ref($i38, 10)), $mul.ref(4, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, 15);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p35, $mul.ref($i38, 10)), $mul.ref(6, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 1);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 1584)), $mul.ref(88, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i60 == 1);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 1);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, 500);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p35, $mul.ref($i38, 10)), $mul.ref(7, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $i70);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p35, $mul.ref($i38, 10)), $mul.ref(8, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p74, $i73);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $r := $i77;
    return;

  $bb1:
    assume $i60 == 1;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 1584)), $mul.ref(88, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    call {:si_unique_call 496} devirtbounce.20($p66, $p1);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const gadget_is_otg: ref;

axiom gadget_is_otg == $sub.ref(0, 481004);

procedure gadget_is_otg($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gadget_is_otg($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i8($i2, 1);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, 1);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 482036);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} _raw_spin_lock($p2);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    return;
}



const set_config: ref;

axiom set_config == $sub.ref(0, 483068);

procedure set_config($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation set_config($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p23: ref;
  var $p43: ref;
  var $p22: ref;
  var $p33: ref;
  var $i34: i32;
  var $i44: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p47: ref;
  var $i48: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i75: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p84: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p92: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $p122: ref;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i24;
  var $i131: i24;
  var $i132: i24;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i24;
  var $i153: i24;
  var $i154: i24;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i24;
  var $i178: i24;
  var $i179: i24;
  var $p180: ref;
  var $p181: ref;
  var $i182: i8;
  var $i183: i64;
  var $i184: i64;
  var $i185: i64;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $i67: i32;
  var $i68: i32;
  var $i194: i32;
  var $i76: i32;
  var $p195: ref;
  var $i196: i16;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i16;
  var $i201: i32;
  var $i202: i32;
  var $i45: i32;
  var $i46: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 501} {:cexpr "set_config:arg:number"} boogie_si_record_i32($i2);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i8 := gadget_is_otg($p7);
    call {:si_unique_call 503} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i10 := (if $i9 == 1 then 8 else 100);
    call {:si_unique_call 504} {:cexpr "power"} boogie_si_record_i32($i10);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i2, 0);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p47, $i48 := $0.ref, 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p55 := usb_speed_string($i54);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p47);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i60 == 1);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p63 := .str.57;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} _dev_info.ref.ref.ref.i32.ref($p58, .str.56, $p55, $i2, $p63);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p47);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} usb_gadget_set_state($p7, 7);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p47);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i67, $i68 := 0, $i48;
    goto $bb32;

  $bb32:
    call $i69, $p71, $p72, $i73, $i74, $i75, $p77, $i78, $i79, $i80, $i81, $p82, $p83, $p85, $p86, $p87, $p88, $p84, $p89, $i90, $i91, $p93, $p94, $i95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $p111, $p112, $p113, $p114, $i115, $i116, $p92, $p117, $p118, $i119, $i120, $i121, $p122, $i123, $i145, $p146, $p147, $p148, $p149, $p150, $p151, $i152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $p165, $p166, $p167, $i168, $i169, $p170, $p171, $p172, $p173, $p174, $p175, $p176, $i177, $i178, $i179, $p180, $p181, $i182, $i183, $i184, $i185, $i186, $p187, $p188, $p189, $p190, $i191, $i192, $i193, $i67, $i68, $i194 := set_config_loop_$bb32($p0, $p4, $p5, $p7, $p47, $i69, $p71, $p72, $i73, $i74, $i75, $p77, $i78, $i79, $i80, $i81, $p82, $p83, $p85, $p86, $p87, $p88, $p84, $p89, $i90, $i91, $p93, $p94, $i95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $p111, $p112, $p113, $p114, $i115, $i116, $p92, $p117, $p118, $i119, $i120, $i121, $p122, $i123, $i145, $p146, $p147, $p148, $p149, $p150, $p151, $i152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $p165, $p166, $p167, $i168, $i169, $p170, $p171, $p172, $p173, $p174, $p175, $p176, $i177, $i178, $i179, $p180, $p181, $i182, $i183, $i184, $i185, $i186, $p187, $p188, $p189, $p190, $i191, $i192, $i193, $i67, $i68, $i194);
    goto $bb32_last;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i67);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i69, 8));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i75 := $i68;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i78, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p72, $mul.ref(0, 200)), $mul.ref(16, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p84 := $p88;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p84);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p72, $mul.ref(0, 200)), $mul.ref(96, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    call {:si_unique_call 513} $i119 := devirtbounce.12($p118, $p72, $i67, 0);
    call {:si_unique_call 514} {:cexpr "result"} boogie_si_record_i32($i119);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i119, 0);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i121, $p122, $i123 := $i67, $p72, $i119;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i119, 32767);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i67, 1);
    call {:si_unique_call 525} {:cexpr "tmp___0"} boogie_si_record_i32($i192);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i193 := $sle.i32($i192, 15);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i194 := $i119;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i76 := $i194;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p47, $mul.ref(0, 224)), $mul.ref(44, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i196 := $load.i16($M.0, $p195);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i197 := $zext.i16.i32($i196);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 0);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i198 == 1);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i202 := 2;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i76, $i202;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_66 := usb_gadget_vbus_draw($p7, $i46);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i204 := $sge.i32($i45, 0);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i204 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i208 := $i45;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $r := $i208;
    return;

  $bb82:
    assume $i204 == 1;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.0, $p205);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb84;

  $bb85:
    assume $i207 == 1;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i208 := 32767;
    goto $bb87;

  $bb79:
    assume $i198 == 1;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p47, $mul.ref(0, 224)), $mul.ref(44, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.0, $p199);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i202 := $i201;
    goto $bb81;

  $bb76:
    assume $i193 == 1;
    assume {:verifier.code 0} true;
    $i67, $i68 := $i192, $i119;
    goto $bb76_dummy;

  $bb67:
    assume $i145 == 1;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p146, .str.10);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p147, .str.58);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p148, .str.12);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p149, .str.30);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i152 := $load.i24($M.27, $p151);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i153 := $and.i24($i152, $sub.i24(0, 262144));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i154 := $or.i24($i153, 722);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p151, $i154);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p155, 1);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.28, $p156);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i64($i157);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i159 := $and.i64($i158, 1);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i160 := ldv__builtin_expect($i159, 0);
    call {:si_unique_call 520} {:cexpr "tmp___3"} boogie_si_record_i64($i160);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i168, 1);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p170, $i169);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p171, .str.10);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p172, .str.58);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p173, .str.12);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p174, .str.31);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i177 := $load.i24($M.27, $p176);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i178 := $and.i24($i177, $sub.i24(0, 262144));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i179 := $or.i24($i178, 725);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p176, $i179);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p180, 1);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.28, $p181);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i64($i182);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i184 := $and.i64($i183, 1);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i185 := ldv__builtin_expect($i184, 0);
    call {:si_unique_call 523} {:cexpr "tmp___4"} boogie_si_record_i64($i185);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i186 := $ne.i64($i185, 0);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i186 == 1;
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p189, .str.31, $i191);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i161 == 1;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p163, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p72, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p4, $p164, .str.30, .str.58, $i67, $p166);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb61:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p124, .str.10);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p125, .str.58);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p126, .str.12);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p127, .str.59);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i130 := $load.i24($M.27, $p129);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i131 := $and.i24($i130, $sub.i24(0, 262144));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i132 := $or.i24($i131, 713);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p129, $i132);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p133, 1);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.28, $p134);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i64($i135);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i137 := $and.i64($i136, 1);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i138 := ldv__builtin_expect($i137, 0);
    call {:si_unique_call 516} {:cexpr "tmp___2"} boogie_si_record_i64($i138);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} reset_config($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i123, $i10;
    goto $bb20;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i139 == 1;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p122, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __dynamic_dev_dbg.ref.ref.ref.i32.ref.ref.i32($p3, $p142, .str.59, $i121, $p144, $p122, $i123);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb49:
    assume $i91 == 1;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p92 := $p84;
    goto $bb52;

  $bb52:
    call $p93, $p94, $i95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $p111, $p112, $p113, $p114, $i115, $i116, $p92 := set_config_loop_$bb52($p72, $p93, $p94, $i95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $p111, $p112, $p113, $p114, $i115, $i116, $p92);
    goto $bb52_last;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 5);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p92);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 128);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i104 := $ashr.i32($i103, 3);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p99, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 15);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i104, $i108);
    call {:si_unique_call 511} {:cexpr "addr"} boogie_si_record_i32($i109);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i109);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p72, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} set_bit($i110, $p112);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p92, $mul.ref(1, 8));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i116 == 1);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb58:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $p92 := $p113;
    goto $bb58_dummy;

  $bb54:
    assume $i97 == 1;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb41:
    assume $i80 == 1;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p72, $mul.ref(0, 200)), $mul.ref(32, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p84 := $p83;
    goto $bb46;

  $bb39:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i78, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb43;

  $bb44:
    assume $i81 == 1;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p72, $mul.ref(0, 200)), $mul.ref(24, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p84 := $p86;
    goto $bb46;

  $bb34:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb36;

  $bb29:
    assume $i65 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i48, $i10;
    goto $bb20;

  $bb26:
    assume $i60 == 1;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p47, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p63 := $p62;
    goto $bb28;

  $bb23:
    assume $i52 == 1;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} reset_config($p0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i18, $i20);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p22 := $p16;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p33, $i34 := $p22, $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i34, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p47, $i48 := $p33, $i34;
    goto $bb22;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i34, $i10;
    goto $bb20;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p23 := $p16;
    goto $bb6;

  $bb6:
    call $p24, $i25, $i26, $i27, $p28, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $p23, $p43 := set_config_loop_$bb6($i2, $i20, $p24, $i25, $i26, $i27, $p28, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $p23, $p43);
    goto $bb6_last;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, $i2);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p28 := $p23;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p38, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, $i20);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p43 := $p39;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p22 := $p43;
    goto $bb5;

  $bb15:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p23 := $p39;
    goto $bb15_dummy;

  $bb8:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33, $i34 := $p28, 0;
    goto $bb13;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} reset_config($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb58_dummy:
    assume false;
    return;

  $bb52_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5112;

  $bb76_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5076;

  $bb15_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5011;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 484100);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} _raw_spin_unlock($p2);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    return;
}



const put_unaligned_le16: ref;

axiom put_unaligned_le16 == $sub.ref(0, 485132);

procedure put_unaligned_le16($i0: i16, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_le16($i0: i16, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} {:cexpr "put_unaligned_le16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, $i0);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    return;
}



const count_ext_compat: ref;

axiom count_ext_compat == $sub.ref(0, 486164);

procedure count_ext_compat($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation count_ext_compat($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i25: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i16: i32;
  var $i17: i32;
  var $i43: i32;
  var $i15: i32;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i6: i32;
  var $i7: i32;
  var $i48: i32;
  var $i5: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(88, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i5, 255);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 532} {:cexpr "tmp"} boogie_si_record_i64($i52);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb27:
    assume $i53 == 1;
    call {:si_unique_call 533} devirtbounce.21(0, .str.12, 1314, 12);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call count_ext_compat_loop_$bb29();
    goto $bb29_last;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $p11, $p12, $i13, $i14, $p18, $p19, $i20, $p22, $i23, $i24, $p26, $p27, $i28, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i25, $i40, $i41, $i42, $i16, $i17, $i43, $i15, $i44, $i45, $i46, $i47, $i6, $i7, $i48 := count_ext_compat_loop_$bb4($p0, $p1, $i8, $p10, $p11, $p12, $i13, $i14, $p18, $p19, $i20, $p22, $i23, $i24, $p26, $p27, $i28, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i25, $i40, $i41, $i42, $i16, $i17, $i43, $i15, $i44, $i45, $i46, $i47, $i6, $i7, $i48);
    goto $bb4_last;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i8, 8));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32(0, $i13);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i15 := $i7;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i6, 1);
    call {:si_unique_call 530} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p1);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i46, $i44);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i48 := $i15;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i5 := $i48;
    goto $bb3;

  $bb24:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i44, $i15;
    goto $bb24_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i16, $i17 := 0, $i7;
    goto $bb9;

  $bb9:
    call $p18, $p19, $i20, $p22, $i23, $i24, $p26, $p27, $i28, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i25, $i40, $i41, $i42, $i16, $i17, $i43 := count_ext_compat_loop_$bb9($p11, $p12, $p18, $p19, $i20, $p22, $i23, $i24, $p26, $p27, $i28, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i25, $i40, $i41, $i42, $i16, $i17, $i43, $i6);
    goto $bb9_last;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i16);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref($i20, 16)), $mul.ref(0, 1));
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, $i6);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p11, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i16);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p27, $mul.ref($i28, 16)), $mul.ref(8, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i39 := $i17;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i25 := $i39;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i16, 1);
    call {:si_unique_call 528} {:cexpr "j"} boogie_si_record_i32($i40);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p12);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32($i40, $i41);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i43 := $i25;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i15 := $i43;
    goto $bb8;

  $bb21:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i16, $i17 := $i40, $i25;
    goto $bb21_dummy;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb17;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i17, 1);
    call {:si_unique_call 529} {:cexpr "res"} boogie_si_record_i32($i38);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb20;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i25 := $i17;
    goto $bb13;

  $bb29_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb21_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5303;

  $bb24_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5292;
}



const put_unaligned_le32: ref;

axiom put_unaligned_le32 == $sub.ref(0, 487196);

procedure put_unaligned_le32($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_le32($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} {:cexpr "put_unaligned_le32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    return;
}



const fill_ext_compat: ref;

axiom fill_ext_compat == $sub.ref(0, 488228);

procedure fill_ext_compat($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fill_ext_compat($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p50: ref;
  var $i54: i32;
  var $i55: i1;
  var $i28: i32;
  var $p29: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i59: i32;
  var $p60: ref;
  var $i16: i32;
  var $p17: ref;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(88, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p6, $i7, $i8 := $p1, 0, 16;
    goto $bb4;

  $bb4:
    call $i9, $p11, $p12, $p13, $i14, $i15, $p21, $p22, $i23, $p25, $i26, $i27, $p30, $p31, $i32, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $p49, $p51, $i52, $p53, $p50, $i54, $i55, $i28, $p29, $i56, $i57, $i58, $i18, $p19, $i20, $i59, $p60, $i16, $p17, $i61, $i62, $i63, $i64, $p6, $i7, $i8, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25 := fill_ext_compat_loop_$bb4($p0, $p2, $i9, $p11, $p12, $p13, $i14, $i15, $p21, $p22, $i23, $p25, $i26, $i27, $p30, $p31, $i32, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $p49, $p51, $i52, $p53, $p50, $i54, $i55, $i28, $p29, $i56, $i57, $i58, $i18, $p19, $i20, $i59, $p60, $i16, $p17, $i61, $i62, $i63, $i64, $p6, $i7, $i8, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25);
    goto $bb4_last;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i7);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i9, 8));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32(0, $i14);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i16, $p17 := $i8, $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i7, 1);
    call {:si_unique_call 538} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p2);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32($i63, $i61);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i64 == 1);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $p6, $i7, $i8 := $p17, $i61, $i16;
    goto $bb28_dummy;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i18, $p19, $i20 := 0, $p6, $i8;
    goto $bb9;

  $bb9:
    call $p21, $p22, $i23, $p25, $i26, $i27, $p30, $p31, $i32, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $p49, $p51, $i52, $p53, $p50, $i54, $i55, $i28, $p29, $i56, $i57, $i58, $i18, $p19, $i20, $i59, $p60, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25 := fill_ext_compat_loop_$bb9($p12, $p13, $p21, $p22, $i23, $p25, $i26, $i27, $p30, $p31, $i32, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $p49, $p51, $i52, $p53, $p50, $i54, $i55, $i28, $p29, $i56, $i57, $i58, $i18, $p19, $i20, $i59, $p60, $i7, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25);
    goto $bb9_last;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i18);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref($i23, 16)), $mul.ref(0, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, $i7);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i18);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref($i32, 16)), $mul.ref(8, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p19, $mul.ref(1, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 1);
    $i52 := $add.i64(1, 23);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p19, $mul.ref($i52, 1));
    assume {:verifier.code 0} true;
    $p50 := $p53;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i20, 24);
    call {:si_unique_call 537} {:cexpr "count"} boogie_si_record_i32($i54);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i54, 4095);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i28, $p29 := $i54, $p50;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i18, 1);
    call {:si_unique_call 535} {:cexpr "j"} boogie_si_record_i32($i56);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p13);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i58 := $ult.i32($i56, $i57);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i59, $p60 := $i28, $p29;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i16, $p17 := $i59, $p60;
    goto $bb8;

  $bb25:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i18, $p19, $i20 := $i56, $p29, $i28;
    goto $bb25_dummy;

  $bb21:
    assume $i55 == 1;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb17;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p19, $mul.ref(1, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i7);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i43);
    $i44 := $add.i64(1, 1);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p19, $mul.ref($i44, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 1);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p35, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 536} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p45, $p47, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    $i48 := $add.i64($i44, 22);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p19, $mul.ref($i48, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p50 := $p49;
    goto $bb20;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i28, $p29 := $i20, $p19;
    goto $bb13;

  $bb25_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5380;

  $bb28_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5369;
}



const count_ext_prop: ref;

axiom count_ext_prop == $sub.ref(0, 489260);

procedure count_ext_prop($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation count_ext_prop($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i9: i32;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} {:cexpr "count_ext_prop:arg:interface"} boogie_si_record_i32($i1);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i2, 8));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i7);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p14, $i15, $i16, $p17, $p18, $i19, $p21, $p22, $i23, $i24, $p25, $p26, $i27, $i28, $p29, $i33, $i34, $i35, $i9 := count_ext_prop_loop_$bb4($i1, $p5, $p6, $p10, $p11, $i12, $p14, $i15, $i16, $p17, $p18, $i19, $p21, $p22, $i23, $i24, $p25, $p26, $i27, $i28, $p29, $i33, $i34, $i35, $i9);
    goto $bb4_last;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, $i1);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i9);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 16)), $mul.ref(8, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i9, 1);
    call {:si_unique_call 540} {:cexpr "j"} boogie_si_record_i32($i33);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p6);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i35 := $ult.i32($i33, $i34);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i33;
    goto $bb17_dummy;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p29 := $p22;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb12;

  $bb13:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 160)), $mul.ref(28, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb15;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5451;
}



const len_ext_prop: ref;

axiom len_ext_prop == $sub.ref(0, 490292);

procedure len_ext_prop($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation len_ext_prop($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i9: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} {:cexpr "len_ext_prop:arg:interface"} boogie_si_record_i32($i1);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i2, 8));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i7);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i31 := 10;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p14, $i15, $i16, $p17, $p18, $i19, $p21, $p22, $i23, $i24, $p25, $i32, $i33, $i34, $i9 := len_ext_prop_loop_$bb4($i1, $p5, $p6, $p10, $p11, $i12, $p14, $i15, $i16, $p17, $p18, $i19, $p21, $p22, $i23, $i24, $p25, $i32, $i33, $i34, $i9);
    goto $bb4_last;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, $i1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i9);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 16)), $mul.ref(8, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p25 := $p22;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i9, 1);
    call {:si_unique_call 542} {:cexpr "j"} boogie_si_record_i32($i32);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p6);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i34 := $ult.i32($i32, $i33);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i32;
    goto $bb17_dummy;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 10);
    call {:si_unique_call 543} {:cexpr "_min1"} boogie_si_record_i32($i28);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 4096);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i30 := 4096;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb15;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb14;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5500;
}



const fill_ext_prop: ref;

axiom fill_ext_prop == $sub.ref(0, 491324);

procedure fill_ext_prop($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fill_ext_prop($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i40: i64;
  var $i41: i32;
  var $i42: i64;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i64;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p38: ref;
  var $p39: ref;
  var $p93: ref;
  var $p37: ref;
  var $p94: ref;
  var $p19: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i10: i32;
  var $p11: ref;
  var $i46: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} {:cexpr "fill_ext_prop:arg:interface"} boogie_si_record_i32($i1);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref($i3, 8));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i10, $p11 := 0, $p2;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $p16, $i17, $i18, $p20, $p21, $i22, $p24, $p25, $i26, $i27, $p29, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $i40, $i41, $i42, $i43, $i44, $i45, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $p58, $p59, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $p77, $i78, $p80, $p81, $p82, $i83, $i84, $p85, $p87, $p88, $p89, $p90, $i91, $i92, $p38, $p39, $p93, $p37, $p94, $p19, $i95, $i96, $i97, $i10, $p11, vslice_dummy_var_67 := fill_ext_prop_loop_$bb4($i1, $p2, $p6, $p7, $p12, $p13, $i14, $p16, $i17, $i18, $p20, $p21, $i22, $p24, $p25, $i26, $i27, $p29, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $i40, $i41, $i42, $i43, $i44, $i45, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $p58, $p59, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $p77, $i78, $p80, $p81, $p82, $i83, $i84, $p85, $p87, $p88, $p89, $p90, $i91, $i92, $p38, $p39, $p93, $p37, $p94, $p19, $i95, $i96, $i97, $i10, $p11, vslice_dummy_var_67);
    goto $bb4_last;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i10);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 16)), $mul.ref(0, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, $i1);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i10);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref($i22, 16)), $mul.ref(8, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $p94 := $p11;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p19 := $p94;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i10, 1);
    call {:si_unique_call 545} {:cexpr "j"} boogie_si_record_i32($i95);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p7);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i97 := $ult.i32($i95, $i96);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i97 == 1);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb52:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i10, $p11 := $i95, $p19;
    goto $bb52_dummy;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p25, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i33, $i35);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p37 := $p11;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p94 := $p37;
    goto $bb51;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p38, $p39 := $p30, $p11;
    goto $bb15;

  $bb15:
    call $i40, $i41, $i42, $i43, $i44, $i45, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $p58, $p59, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $p77, $i78, $p80, $p81, $p82, $i83, $i84, $p85, $p87, $p88, $p89, $p90, $i91, $i92, $p38, $p39, $p93, vslice_dummy_var_67 := fill_ext_prop_loop_$bb15($p2, $i35, $i40, $i41, $i42, $i43, $i44, $i45, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $p58, $p59, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $p77, $i78, $p80, $p81, $p82, $i83, $i84, $p85, $p87, $p88, $p89, $p90, $i91, $i92, $p38, $p39, $p93, vslice_dummy_var_67);
    goto $bb15_last;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i64.i32($i40);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p2);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i41, $i43);
    call {:si_unique_call 546} {:cexpr "n"} boogie_si_record_i32($i44);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 4085);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i48, $i50);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 14);
    call {:si_unique_call 547} {:cexpr "count"} boogie_si_record_i32($i52);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(4086, $i44);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, $i52);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} usb_ext_prop_put_size($p39, $i52);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} usb_ext_prop_put_type($p39, $i57);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i62 := usb_ext_prop_put_name($p39, $p59, $i61);
    call {:si_unique_call 551} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 0);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i64 := $i62;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i67, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i67, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i67, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 22);
    goto $bb19;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_67 := usb_ext_prop_put_unicode($p39, $i62, $p76, $i78);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i52);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p39, $mul.ref($i84, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, $i35);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p93 := $p85;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p37 := $p93;
    goto $bb14;

  $bb48:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $p38, $p39 := $p88, $p85;
    goto $bb48_dummy;

  $bb32:
    assume $i70 == 1;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb30:
    assume $i69 == 1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb28:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i67, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i67, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb42;

  $bb42:
    assume !($i73 == 1);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} usb_ext_prop_put_binary($p39, $i62, $p81, $i83);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i67, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb37;

  $bb43:
    assume $i74 == 1;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb24:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i46 := $i64;
    goto $bb19;

  $bb21:
    assume $i54 == 1;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 22);
    goto $bb19;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb19;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p19 := $p11;
    goto $bb8;

  $bb48_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5589;

  $bb52_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5551;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 492356);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 555} $i2 := devirtbounce.22(0, $p1, $i0);
    call {:si_unique_call 556} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const list_is_singular: ref;

axiom list_is_singular == $sub.ref(0, 493388);

procedure list_is_singular($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_is_singular($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i3: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i1 := list_empty($p0);
    call {:si_unique_call 558} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i3);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i6, $i9);
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb3;
}



const usb_ext_prop_put_size: ref;

axiom usb_ext_prop_put_size == $sub.ref(0, 494420);

procedure usb_ext_prop_put_size($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_ext_prop_put_size($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} {:cexpr "usb_ext_prop_put_size:arg:dw_size"} boogie_si_record_i32($i1);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p2 := usb_ext_prop_size_ptr($p0);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} put_unaligned_le32($i1, $p2);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    return;
}



const usb_ext_prop_put_type: ref;

axiom usb_ext_prop_put_type == $sub.ref(0, 495452);

procedure usb_ext_prop_put_type($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_ext_prop_put_type($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} {:cexpr "usb_ext_prop_put_type:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p2 := usb_ext_prop_type_ptr($p0);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} put_unaligned_le32($i1, $p2);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    return;
}



const usb_ext_prop_put_name: ref;

axiom usb_ext_prop_put_name == $sub.ref(0, 496484);

procedure usb_ext_prop_put_name($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_ext_prop_put_name($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} {:cexpr "usb_ext_prop_put_name:arg:pnl"} boogie_si_record_i32($i2);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p3 := usb_ext_prop_name_len_ptr($p0);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i2);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} put_unaligned_le16($i6, $p3);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $p7 := usb_ext_prop_name_ptr($p0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i8 := strlen($p1);
    call {:si_unique_call 570} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p7);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i2, $sub.i32(0, 2));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i12 := utf8s_to_utf16s($p1, $i9, 1, $p10, $i11);
    call {:si_unique_call 572} {:cexpr "result"} boogie_si_record_i32($i12);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i2, 10);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, $sub.i64(0, 2));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p0, $mul.ref($i17, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} put_unaligned_le16(0, $p18);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i14 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb3;
}



const usb_ext_prop_put_unicode: ref;

axiom usb_ext_prop_put_unicode == $sub.ref(0, 497516);

procedure usb_ext_prop_put_unicode($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_ext_prop_put_unicode($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} {:cexpr "usb_ext_prop_put_unicode:arg:pnl"} boogie_si_record_i32($i1);
    call {:si_unique_call 575} {:cexpr "usb_ext_prop_put_unicode:arg:data_len"} boogie_si_record_i32($i3);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p5 := usb_ext_prop_data_len_ptr($p0, $i4);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} put_unaligned_le32($i3, $p5);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $p7 := usb_ext_prop_data_ptr($p0, $i6);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i8 := $ashr.i32($i3, 1);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p7);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i3, $sub.i32(0, 2));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i11 := utf8s_to_utf16s($p2, $i8, 1, $p9, $i10);
    call {:si_unique_call 580} {:cexpr "result"} boogie_si_record_i32($i11);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i1, 14);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, $i3);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, $sub.i64(0, 2));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p0, $mul.ref($i17, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} put_unaligned_le16(0, $p18);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;
}



const usb_ext_prop_put_binary: ref;

axiom usb_ext_prop_put_binary == $sub.ref(0, 498548);

procedure usb_ext_prop_put_binary($p0: ref, $i1: i32, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_ext_prop_put_binary($p0: ref, $i1: i32, $p2: ref, $i3: i32)
{
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} {:cexpr "usb_ext_prop_put_binary:arg:pnl"} boogie_si_record_i32($i1);
    call {:si_unique_call 583} {:cexpr "usb_ext_prop_put_binary:arg:data_len"} boogie_si_record_i32($i3);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p5 := usb_ext_prop_data_len_ptr($p0, $i4);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} put_unaligned_le32($i3, $p5);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p7 := usb_ext_prop_data_ptr($p0, $i6);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i3);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 587} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p7, $p2, $i8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    return;
}



const usb_ext_prop_data_len_ptr: ref;

axiom usb_ext_prop_data_len_ptr == $sub.ref(0, 499580);

procedure usb_ext_prop_data_len_ptr($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ext_prop_data_len_ptr($p0: ref, $i1: i64) returns ($r: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} {:cexpr "usb_ext_prop_data_len_ptr:arg:off"} boogie_si_record_i64($i1);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 10);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $p3 := __usb_ext_prop_ptr($p0, $i2);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_ext_prop_data_ptr: ref;

axiom usb_ext_prop_data_ptr == $sub.ref(0, 500612);

procedure usb_ext_prop_data_ptr($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ext_prop_data_ptr($p0: ref, $i1: i64) returns ($r: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} {:cexpr "usb_ext_prop_data_ptr:arg:off"} boogie_si_record_i64($i1);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 14);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p3 := __usb_ext_prop_ptr($p0, $i2);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __usb_ext_prop_ptr: ref;

axiom __usb_ext_prop_ptr == $sub.ref(0, 501644);

procedure __usb_ext_prop_ptr($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __usb_ext_prop_ptr($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} {:cexpr "__usb_ext_prop_ptr:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref($i1, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_ext_prop_name_len_ptr: ref;

axiom usb_ext_prop_name_len_ptr == $sub.ref(0, 502676);

procedure usb_ext_prop_name_len_ptr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ext_prop_name_len_ptr($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p1 := __usb_ext_prop_ptr($p0, 8);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const usb_ext_prop_name_ptr: ref;

axiom usb_ext_prop_name_ptr == $sub.ref(0, 503708);

procedure usb_ext_prop_name_ptr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ext_prop_name_ptr($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p1 := __usb_ext_prop_ptr($p0, 10);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const usb_ext_prop_type_ptr: ref;

axiom usb_ext_prop_type_ptr == $sub.ref(0, 504740);

procedure usb_ext_prop_type_ptr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ext_prop_type_ptr($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p1 := __usb_ext_prop_ptr($p0, 4);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const usb_ext_prop_size_ptr: ref;

axiom usb_ext_prop_size_ptr == $sub.ref(0, 505772);

procedure usb_ext_prop_size_ptr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ext_prop_size_ptr($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p1 := __usb_ext_prop_ptr($p0, 0);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 506804);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    return;
}



const usb_speed_string: ref;

axiom usb_speed_string == $sub.ref(0, 507836);

procedure usb_speed_string($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_speed_string($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} {:cexpr "usb_speed_string:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p1 := external_alloc();
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 508868);

procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_set_state: ref;

axiom usb_gadget_set_state == $sub.ref(0, 509900);

procedure usb_gadget_set_state($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation usb_gadget_set_state($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} {:cexpr "usb_gadget_set_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 510932);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 601} devirtbounce.23(0, $p1, $i0, $p1);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 511964);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 1} true;
    call {:si_unique_call 602} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 603} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 512996);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    return;
}



const le16_add_cpu: ref;

axiom le16_add_cpu == $sub.ref(0, 514028);

procedure le16_add_cpu($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation le16_add_cpu($p0: ref, $i1: i16)
{
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} {:cexpr "le16_add_cpu:arg:val"} boogie_si_record_i16($i1);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p0);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i3, $i4);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p0, $i6);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    return;
}



const collect_langs: ref;

axiom collect_langs == $sub.ref(0, 515060);

procedure collect_langs($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation collect_langs($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p13: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p22: ref;
  var $p12: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p0);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p5 := $p0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $i9, $i10, $i11, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $i21, $p13, $p23, $i24, $i25, $i26, $p27, $p22, $p12, $p28, $p29, $i30, $i31, $p5 := collect_langs_loop_$bb4($p1, $p6, $p7, $i8, $i9, $i10, $i11, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $i21, $p13, $p23, $i24, $i25, $i26, $p27, $p22, $p12, $p28, $p29, $i30, $i31, $p5);
    goto $bb4_last;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    call {:si_unique_call 605} {:cexpr "language"} boogie_si_record_i16($i8);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p1);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p12 := $p1;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $i8);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p5, $mul.ref(1, 8));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p28;
    goto $bb20_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p13 := $p1;
    goto $bb9;

  $bb9:
    call $i14, $i15, $i16, $i17, $p18, $i19, $i20, $i21, $p13, $p23, $i24, $i25, $i26, $p27, $p22 := collect_langs_loop_$bb9($p1, $i8, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $i21, $p13, $p23, $i24, $i25, $i26, $p27, $p22);
    goto $bb9_last;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p1, $mul.ref(126, 2));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p13);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i64($i24, $i25);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p27 := $p13;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p12 := $p27;
    goto $bb8;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i8);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, $i16);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p13, $mul.ref(1, 2));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p22 := $p18;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p12 := $p22;
    goto $bb8;

  $bb15:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p18;
    goto $bb15_dummy;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb15_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5812;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5801;
}



const __compiletime_assert_1002: ref;

axiom __compiletime_assert_1002 == $sub.ref(0, 516092);

procedure __compiletime_assert_1002();
  free requires assertsPassed;



implementation __compiletime_assert_1002()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    return;
}



const lookup_string: ref;

axiom lookup_string == $sub.ref(0, 517124);

procedure lookup_string($p0: ref, $p1: ref, $i2: i16, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation lookup_string($p0: ref, $p1: ref, $i2: i16, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p7: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} {:cexpr "lookup_string:arg:language"} boogie_si_record_i16($i2);
    call {:si_unique_call 607} {:cexpr "lookup_string:arg:id"} boogie_si_record_i32($i3);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p7 := $p0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $p10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $p7 := lookup_string_loop_$bb4($p1, $i2, $i3, $p8, $p9, $p10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $p7);
    goto $bb4_last;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(1, 8));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p7);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i2);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, $i13);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i18 := usb_gadget_get_string($p9, $i3, $p1);
    call {:si_unique_call 609} {:cexpr "value"} boogie_si_record_i32($i18);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 0);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p8);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p8;
    goto $bb9_dummy;

  $bb12:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb14;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5854;
}



const config_buf: ref;

axiom config_buf == $sub.ref(0, 518156);

procedure config_buf($p0: ref, $i1: i32, $p2: ref, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation config_buf($p0: ref, $i1: i32, $p2: ref, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p59: ref;
  var $p60: ref;
  var $i65: i64;
  var $i66: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $p67: ref;
  var $i68: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p83: ref;
  var $p50: ref;
  var $i84: i64;
  var $i85: i32;
  var $i86: i64;
  var $i87: i32;
  var $i88: i32;
  var $i89: i16;
  var $p90: ref;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} {:cexpr "config_buf:arg:speed"} boogie_si_record_i32($i1);
    call {:si_unique_call 611} {:cexpr "config_buf:arg:type"} boogie_si_record_i8($i3);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(9, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 9);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i3);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(88, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(5, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(41, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(42, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 128);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(7, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i23 := encode_bMaxPower($i1, $p0);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i23);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $p38, $i39 := $p4, 1015;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p43, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i46, $i48);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p50 := $p38;
    assume {:branchcond $i49} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p50);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p2);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i64.i32($i86);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32($i85, $i87);
    call {:si_unique_call 619} {:cexpr "len"} boogie_si_record_i32($i88);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, $i89);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i33 := $i88;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p51, $i52, $p53 := $p44, $i39, $p38;
    goto $bb11;

  $bb11:
    call $i54, $i55, $i56, $p57, $p58, $p61, $p62, $p63, $p64, $p59, $p60, $i65, $i66, $i69, $i70, $i71, $i72, $i73, $p74, $p67, $i68, $p76, $p77, $p78, $p79, $p80, $i81, $i82, $p51, $i52, $p53, $p83 := config_buf_loop_$bb11($i1, $i48, $i54, $i55, $i56, $p57, $p58, $p61, $p62, $p63, $p64, $p59, $p60, $i65, $i66, $i69, $i70, $i71, $i72, $i73, $p74, $p67, $i68, $p76, $p77, $p78, $p79, $p80, $i81, $i82, $p51, $i52, $p53, $p83);
    goto $bb11_last;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p51, $mul.ref(0, 200)), $mul.ref(16, 1));
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p59, $p60 := $p51, $p64;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p60);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i69 := usb_descriptor_fillbuf($p53, $i52, $p60);
    call {:si_unique_call 617} {:cexpr "status"} boogie_si_record_i32($i69);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, 0);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i71 := $i69;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i52, $i69);
    call {:si_unique_call 618} {:cexpr "len"} boogie_si_record_i32($i72);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i69);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p53, $mul.ref($i73, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p67, $i68 := $p74, $i72;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p78, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, $i48);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p83 := $p67;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p50 := $p83;
    goto $bb10;

  $bb31:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $p51, $i52, $p53 := $p79, $i68, $p67;
    goto $bb31_dummy;

  $bb28:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i33 := $i71;
    goto $bb5;

  $bb24:
    assume $i66 == 1;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p67, $i68 := $p53, $i52;
    goto $bb26;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p51, $mul.ref(0, 200)), $mul.ref(32, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p59, $p60 := $p51, $p58;
    goto $bb21;

  $bb14:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb18;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p51, $mul.ref(0, 200)), $mul.ref(24, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p59, $p60 := $p51, $p62;
    goto $bb21;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i31 := usb_descriptor_fillbuf($p4, 1015, $p30);
    call {:si_unique_call 614} {:cexpr "status"} boogie_si_record_i32($i31);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(1015, $i31);
    call {:si_unique_call 615} {:cexpr "len"} boogie_si_record_i32($i34);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i31);
    $i36 := $add.i64(9, $i35);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p2, $mul.ref($i36, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p38, $i39 := $p37, $i34;
    goto $bb7;

  $bb3:
    assume $i32 == 1;
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb5;

  $bb31_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5940;
}



const encode_bMaxPower: ref;

axiom encode_bMaxPower == $sub.ref(0, 519188);

procedure encode_bMaxPower($i0: i32, $p1: ref) returns ($r: i8);
  free requires assertsPassed;



implementation encode_bMaxPower($i0: i32, $p1: ref) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i11: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} {:cexpr "encode_bMaxPower:arg:speed"} boogie_si_record_i32($i0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(44, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i9 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i9, 1);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i17 := $udiv.i32($i16, 2);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i9, 7);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, 8);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb6;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(44, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    call {:si_unique_call 621} {:cexpr "val"} boogie_si_record_i32($i8);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const __composite_unbind: ref;

axiom __composite_unbind == $sub.ref(0, 520220);

procedure __composite_unbind($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation __composite_unbind($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var vslice_dummy_var_68: i64;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 622} {:cexpr "__composite_unbind:arg:unbind_driver"} boogie_si_record_i1($i1);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $p3 := get_gadget_data($p0);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 624} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 626} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} vslice_dummy_var_68 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i20 := list_empty($p19);
    call {:si_unique_call 630} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 264)), $mul.ref(40, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} composite_dev_cleanup($p4);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(128, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} kfree($p42);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} kfree($p43);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} set_gadget_data($p0, $0.ref);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i2);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb14;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 264)), $mul.ref(40, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 634} vslice_dummy_var_69 := devirtbounce.11($p39, $p4);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p23, $p24, $p25, $p26, $i27, $i28 := __composite_unbind_loop_$bb7($p4, $p19, $p23, $p24, $p25, $p26, $i27, $i28);
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} remove_config($p4, $p26);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i27 := list_empty($p19);
    call {:si_unique_call 633} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb9_dummy;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} warn_slowpath_null(.str.12, 1869);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const remove_config: ref;

axiom remove_config == $sub.ref(0, 521252);

procedure remove_config($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation remove_config($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i5 := list_empty($p4);
    call {:si_unique_call 642} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(56, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} list_del($p42);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p47, .str.10);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p48, .str.51);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p49, .str.12);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p50, .str.52);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.27, $p52);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 865);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p52, $i55);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p56, 1);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.28, $p57);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 652} {:cexpr "tmp___1"} boogie_si_record_i64($i61);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    call {:si_unique_call 654} devirtbounce.24($p69, $p1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i62 == 1;
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} __dynamic_dev_dbg.ref.ref.ref.ref.ref($p3, $p65, .str.52, $p67, $p1);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p8, $p9, $p10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $i40, $i41 := remove_config_loop_$bb4($p0, $p1, $p2, $p4, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $i40, $i41);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} list_del($p12);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(72, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i40 := list_empty($p4);
    call {:si_unique_call 649} {:cexpr "tmp___0"} boogie_si_record_i32($i40);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb12_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p17, .str.10);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p18, .str.51);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p19, .str.12);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p20, .str.17);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.27, $p22);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 858);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p22, $i25);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p26, 1);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.28, $p27);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 645} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(72, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 647} devirtbounce.2($p39, $p1, $p11);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(0, 1));
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} __dynamic_dev_dbg.ref.ref.ref.ref.ref($p2, $p35, .str.17, $p37, $p11);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const composite_dev_cleanup: ref;

axiom composite_dev_cleanup == $sub.ref(0, 522284);

procedure composite_dev_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation composite_dev_cleanup($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p14: ref;
  var $p15: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 0);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} device_remove_file($p80, dev_attr_suspended);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i54 == 1;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p0);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(216, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} kfree($p70);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} usb_ep_free_request($p74, $p76);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i59 == 1;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_71 := usb_ep_dequeue($p63, $p65);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p0);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(216, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} kfree($p44);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} usb_ep_free_request($p48, $p50);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_70 := usb_ep_dequeue($p37, $p39);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p14, $p15 := $p7, $p3;
    goto $bb4;

  $bb4:
    call $p16, $p17, $p19, $p20, $p22, $i23, $i24, $p14, $p15 := composite_dev_cleanup_loop_$bb4($i12, $p16, $p17, $p19, $p20, $p22, $i23, $i24, $p14, $p15);
    goto $bb4_last;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} list_del($p16);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p15);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} kfree($p17);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i12);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p14, $p15 := $p20, $p14;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6191;
}



const set_gadget_data: ref;

axiom set_gadget_data == $sub.ref(0, 523316);

procedure set_gadget_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_gadget_data($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} dev_set_drvdata($p2, $p1);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 524348);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    return;
}



const usb_ep_dequeue: ref;

axiom usb_ep_dequeue == $sub.ref(0, 525380);

procedure usb_ep_dequeue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation usb_ep_dequeue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    call {:si_unique_call 665} $i6 := devirtbounce.25($p5, $p0, $p1);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 666} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 526412);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    return;
}



const to_cdriver: ref;

axiom to_cdriver == $sub.ref(0, 527444);

procedure to_cdriver($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_cdriver($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 72), 264));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 528476);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    return;
}



const composite_dev_prepare: ref;

axiom composite_dev_prepare == $sub.ref(0, 529508);

procedure composite_dev_prepare($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation composite_dev_prepare($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i23: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i12: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p6 := usb_ep_alloc_request($p5, 208);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p13 := kmalloc(1024, 208);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p13);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i25 := device_create_file($p24, dev_attr_suspended);
    call {:si_unique_call 671} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, composite_setup_complete);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p1);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p1);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(112, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p0);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_72 := usb_gadget_set_selfpowered($p3);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} usb_ep_autoconfig_reset($p3);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} kfree($p43);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i23 := $i25;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} usb_ep_free_request($p45, $p47);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i12 := $i23;
    goto $bb3;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;
}



const composite_os_desc_req_prepare: ref;

axiom composite_os_desc_req_prepare == $sub.ref(0, 530540);

procedure composite_os_desc_req_prepare($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation composite_os_desc_req_prepare($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p2 := usb_ep_alloc_request($p1, 208);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p2);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p14 := kmalloc(4096, 208);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p14);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p0);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, composite_setup_complete);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i28 := PTR_ERR($p27);
    call {:si_unique_call 681} {:cexpr "tmp___0"} boogie_si_record_i64($i28);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    call {:si_unique_call 682} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} kfree($p32);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i13 := $i29;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(16, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i11 := PTR_ERR($p10);
    call {:si_unique_call 677} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    call {:si_unique_call 678} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const update_unchanged_dev_desc: ref;

axiom update_unchanged_dev_desc == $sub.ref(0, 531572);

procedure update_unchanged_dev_desc($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation update_unchanged_dev_desc($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $p4: ref;
  var $i5: i16;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i16;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(8, 1));
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    call {:si_unique_call 684} {:cexpr "idVendor"} boogie_si_record_i16($i3);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(10, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    call {:si_unique_call 685} {:cexpr "idProduct"} boogie_si_record_i16($i5);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(12, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    call {:si_unique_call 686} {:cexpr "bcdDevice"} boogie_si_record_i16($i7);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    call {:si_unique_call 687} {:cexpr "iSerialNumber"} boogie_si_record_i8($i9);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(14, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    call {:si_unique_call 688} {:cexpr "iManufacturer"} boogie_si_record_i8($i11);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(15, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    call {:si_unique_call 689} {:cexpr "iProduct"} boogie_si_record_i8($i13);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 690} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p14, $p15, 18, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i3);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i5);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i7);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i25 := get_default_bcdDevice();
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(12, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i25);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i9);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i11);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i13);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(15, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i13);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(14, 1));
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i11);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i9);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(12, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i7);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(10, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i5);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 18)), $mul.ref(8, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i3);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 532604);

procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    return;
}



const get_default_bcdDevice: ref;

axiom get_default_bcdDevice == $sub.ref(0, 533636);

procedure get_default_bcdDevice() returns ($r: i16);
  free requires assertsPassed;



implementation get_default_bcdDevice() returns ($r: i16)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i0 := $zext.i16.i32(1024);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i1 := $or.i32($i0, 2);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    call {:si_unique_call 692} {:cexpr "bcdDevice"} boogie_si_record_i16($i2);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 534668);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 693} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 694} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_gadget_set_selfpowered: ref;

axiom usb_gadget_set_selfpowered == $sub.ref(0, 535700);

procedure usb_gadget_set_selfpowered($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_gadget_set_selfpowered($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(88, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(88, 1));
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 695} $i12 := devirtbounce.3($p11, $p0, 1);
    call {:si_unique_call 696} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;
}



const usb_os_desc_attr_show: ref;

axiom usb_os_desc_attr_show == $sub.ref(0, 536732);

procedure usb_os_desc_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_os_desc_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p3 := to_usb_os_desc($p0);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 698} $i11 := devirtbounce.26($p10, $p3, $p2);
    call {:si_unique_call 699} {:cexpr "ret"} boogie_si_record_i64($i11);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const usb_os_desc_attr_store: ref;

axiom usb_os_desc_attr_store == $sub.ref(0, 537764);

procedure usb_os_desc_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_os_desc_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} {:cexpr "usb_os_desc_attr_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p4 := to_usb_os_desc($p0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 702} $i12 := devirtbounce.27($p11, $p4, $p2, $i3);
    call {:si_unique_call 703} {:cexpr "ret"} boogie_si_record_i64($i12);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const to_usb_os_desc: ref;

axiom to_usb_os_desc == $sub.ref(0, 538796);

procedure to_usb_os_desc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_usb_os_desc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p1 := to_config_group($p0);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 40), 160));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ext_prop_make: ref;

axiom ext_prop_make == $sub.ref(0, 539828);

procedure ext_prop_make($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ext_prop_make($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i2 := $add.i64(0, 7);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i3 := $xor.i64(7, $sub.i64(0, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i2, $i3);
    call {:si_unique_call 705} {:cexpr "offset"} boogie_si_record_i64($i4);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 128);
    call {:si_unique_call 706} {:cexpr "data_chunk__next"} boogie_si_record_i64($i5);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 7);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i7 := $xor.i64(7, $sub.i64(0, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i6, $i7);
    call {:si_unique_call 707} {:cexpr "offset___0"} boogie_si_record_i64($i8);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 32);
    call {:si_unique_call 708} {:cexpr "data_chunk__next"} boogie_si_record_i64($i9);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p10 := kzalloc($i9, 208);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p10, $mul.ref($i4, 1));
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p10, $mul.ref($i8, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, ext_prop_ops);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, ext_prop_attrs);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(152, 1));
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p25);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} config_item_init_type_name($p27, $p1, $p19);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p28 := kstrdup($p1, 208);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p28);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(24, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 14);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(24, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i42 := strlen($p41);
    call {:si_unique_call 716} {:cexpr "tmp___2"} boogie_si_record_i64($i42);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 1);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i43);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32($i44, 2);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(32, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(24, 1));
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i54, $i56);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(24, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(8, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} list_add_tail($p59, $p60);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(28, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 1);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(28, 1));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(32, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p15 := $p71;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb11:
    assume $i68 == 1;
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(32, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} mutex_unlock($p70);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i50 == 1;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 40), 160)), $mul.ref(32, 1));
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} mutex_lock_nested($p52, 0);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} kfree($p10);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p34 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p15 := $p34;
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p13 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p15 := $p13;
    goto $bb3;
}



const ext_prop_drop: ref;

axiom ext_prop_drop == $sub.ref(0, 540860);

procedure ext_prop_drop($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ext_prop_drop($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p2 := to_usb_os_desc_ext_prop($p1);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p4 := to_usb_os_desc($p3);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} list_del($p11);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(28, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, 1);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(28, 1));
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} kfree($p17);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i21, $i23);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($sub.i32(0, 14), $i24);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i19, $i25);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} config_item_put($p1);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} mutex_unlock($p33);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} mutex_lock_nested($p10, 0);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const to_usb_os_desc_ext_prop: ref;

axiom to_usb_os_desc_ext_prop == $sub.ref(0, 541892);

procedure to_usb_os_desc_ext_prop($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_usb_os_desc_ext_prop($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 48), 128));
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const config_item_put: ref;

axiom config_item_put == $sub.ref(0, 542924);

procedure config_item_put($p0: ref);
  free requires assertsPassed;



implementation config_item_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    return;
}



const config_item_init_type_name: ref;

axiom config_item_init_type_name == $sub.ref(0, 543956);

procedure config_item_init_type_name($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation config_item_init_type_name($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    return;
}



const kstrdup: ref;

axiom kstrdup == $sub.ref(0, 544988);

procedure kstrdup($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kstrdup($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} {:cexpr "kstrdup:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p2 := external_alloc();
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const interf_grp_compatible_id_show: ref;

axiom interf_grp_compatible_id_show == $sub.ref(0, 546020);

procedure interf_grp_compatible_id_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation interf_grp_compatible_id_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} llvm.memmove.p0i8.p0i8.i64($p1, $p3, 8, 1, 0);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $r := 8;
    return;
}



const interf_grp_compatible_id_store: ref;

axiom interf_grp_compatible_id_store == $sub.ref(0, 547052);

procedure interf_grp_compatible_id_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation interf_grp_compatible_id_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} {:cexpr "interf_grp_compatible_id_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    call {:si_unique_call 731} {:cexpr "__min2"} boogie_si_record_i32($i3);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(8, $i3);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $sub.i64(0, 1));
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref($i7, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 10);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i5;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i13);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 734} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p21, $p1, $i22, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} mutex_unlock($p28);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} mutex_lock_nested($p19, 0);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i5, 1);
    call {:si_unique_call 732} {:cexpr "l"} boogie_si_record_i32($i12);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i5 := 8;
    goto $bb3;
}



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 548084);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const interf_grp_sub_compatible_id_show: ref;

axiom interf_grp_sub_compatible_id_show == $sub.ref(0, 549116);

procedure interf_grp_sub_compatible_id_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation interf_grp_sub_compatible_id_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(8, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} llvm.memmove.p0i8.p0i8.i64($p1, $p4, 8, 1, 0);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $r := 8;
    return;
}



const interf_grp_sub_compatible_id_store: ref;

axiom interf_grp_sub_compatible_id_store == $sub.ref(0, 550148);

procedure interf_grp_sub_compatible_id_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation interf_grp_sub_compatible_id_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} {:cexpr "interf_grp_sub_compatible_id_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    call {:si_unique_call 738} {:cexpr "__min2"} boogie_si_record_i32($i3);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(8, $i3);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $sub.i64(0, 1));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref($i7, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 10);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i5;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(8, 1));
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i13);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 741} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p22, $p1, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} mutex_unlock($p29);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} mutex_lock_nested($p19, 0);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i5, 1);
    call {:si_unique_call 739} {:cexpr "l"} boogie_si_record_i32($i12);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i5 := 8;
    goto $bb3;
}



const function_make: ref;

axiom function_make == $sub.ref(0, 551180);

procedure function_make($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation function_make($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i64;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p8: ref;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i4 := snprintf.ref.i64.ref.ref($p3, 40, .str.103, $p1);
    call {:si_unique_call 745} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 39);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p10 := strchr($p9, 46);
    assume $isExternal($p10);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p10, $mul.ref(1, 1));
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p17 := usb_get_function_instance($p9);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i19 := IS_ERR($p18);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 752} {:cexpr "tmp___2"} boogie_si_record_i8($i20);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i27 := config_item_set_name.ref.ref($p26, $p1);
    call {:si_unique_call 755} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p17, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p0);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p43, $mul.ref($sub.ref(0, 112), 1336)), $mul.ref(600, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} mutex_lock_nested($p45, 0);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p17, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p43, $mul.ref($sub.ref(0, 112), 1336)), $mul.ref(800, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} list_add_tail($p46, $p47);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p43, $mul.ref($sub.ref(0, 112), 1336)), $mul.ref(600, 1));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} mutex_unlock($p48);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p8 := $p17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p17, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 758} $i38 := devirtbounce.28($p37, $p17, $p16);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 759} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} usb_put_function_instance($p17);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i38);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p41 := ERR_PTR($i40);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p8 := $p41;
    goto $bb3;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} usb_put_function_instance($p17);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i27);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p30 := ERR_PTR($i29);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p8 := $p30;
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p17);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p23 := ERR_CAST($p22);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p8 := $p23;
    goto $bb3;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} vslice_dummy_var_73 := printk.ref(.str.104);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p14 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p8 := $p14;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p6 := ERR_PTR($sub.i64(0, 36));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;
}



const function_drop: ref;

axiom function_drop == $sub.ref(0, 552212);

procedure function_drop($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation function_drop($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p2 := to_usb_function_instance($p1);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 112), 1336)), $mul.ref(600, 1));
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} mutex_lock_nested($p5, 0);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} list_del($p6);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 112), 1336)), $mul.ref(600, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} mutex_unlock($p7);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} config_item_put($p1);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    return;
}



const to_usb_function_instance: ref;

axiom to_usb_function_instance == $sub.ref(0, 553244);

procedure to_usb_function_instance($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_usb_function_instance($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p1 := to_config_group($p0);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const strchr: ref;

axiom strchr == $sub.ref(0, 554276);

procedure strchr($p0: ref, $i1: i32) returns ($r: ref);



const printk: ref;

axiom printk == $sub.ref(0, 555308);

procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 1} true;
    call {:si_unique_call 771} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 772} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 1} true;
    call {:si_unique_call 773} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 774} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const config_desc_make: ref;

axiom config_desc_make == $sub.ref(0, 556340);

procedure config_desc_make($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation config_desc_make($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i46: i8;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i45: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $p11: ref;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i7 := snprintf.ref.i64.ref.ref($p6, 40, .str.103, $p1);
    call {:si_unique_call 780} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 39);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p13 := strchr($p12, 46);
    assume $isExternal($p13);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p13, $mul.ref(1, 1));
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i21 := strlen($p20);
    call {:si_unique_call 786} {:cexpr "tmp___2"} boogie_si_record_i64($i21);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i25 := kstrtou8($p19, 0, $p3);
    call {:si_unique_call 789} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $p30 := kzalloc(520, 208);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p37 := kstrdup($p36, 208);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p37);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.33, $p3);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(40, 1));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i46);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(44, 1));
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, 2);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(42, 1));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $sub.i8(0, 128));
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(240, 1));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} INIT_LIST_HEAD($p53);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(480, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} INIT_LIST_HEAD($p54);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(224, 1));
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p55);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(112, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(224, 1)), $mul.ref(0, 8));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p59);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} config_group_init_type_name($p62, $p1, gadget_config_type);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(112, 1));
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} config_group_init_type_name($p63, .str.79, gadget_config_name_strings_type);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 224), 1336)), $mul.ref(1096, 1));
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(256, 1));
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i66 := usb_add_config_only($p64, $p65);
    call {:si_unique_call 802} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p11 := $p30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb21:
    assume $i67 == 1;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i45 := $i66;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} kfree($p71);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p31);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} kfree($p72);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i45);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p74 := ERR_PTR($i73);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p11 := $p74;
    goto $bb3;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 12);
    goto $bb19;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p34 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p11 := $p34;
    goto $bb3;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i25);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p28 := ERR_PTR($i27);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p11 := $p28;
    goto $bb3;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p23 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p11 := $p23;
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} vslice_dummy_var_74 := printk.ref(.str.107);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p17 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p11 := $p17;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p9 := ERR_PTR($sub.i64(0, 36));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p11 := $p9;
    goto $bb3;
}



const config_desc_drop: ref;

axiom config_desc_drop == $sub.ref(0, 557372);

procedure config_desc_drop($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation config_desc_drop($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} config_item_put($p1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    return;
}



const kstrtou8: ref;

axiom kstrtou8 == $sub.ref(0, 558404);

procedure kstrtou8($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtou8($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 804} {:cexpr "kstrtou8:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 1} true;
    call {:si_unique_call 805} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 806} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gadget_strings_strings_make: ref;

axiom gadget_strings_strings_make == $sub.ref(0, 559436);

procedure gadget_strings_strings_make($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_strings_strings_make($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i27: i32;
  var $p28: ref;
  var $i47: i32;
  var $i26: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i12: i32;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p2 := kzalloc(216, 208);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i10 := check_user_usb_string($p1, $p9);
    call {:si_unique_call 810} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(88, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} config_group_init_type_name($p13, $p1, gadget_strings_langid_type);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p14, $mul.ref($sub.ref(0, 336), 1336)), $mul.ref(784, 1)), $mul.ref(0, 1));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($sub.ref(0, 200), 216));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 200), 216)), $mul.ref(200, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 336), 1336)), $mul.ref(784, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i22, $i24);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i26 := 0;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i26, 1);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 336), 1336)), $mul.ref(784, 1));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} list_add_tail($p49, $p50);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(88, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p8 := $p51;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 75);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p3);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} kfree($p52);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i12);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p54 := ERR_PTR($i53);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p8 := $p54;
    goto $bb3;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i27, $p28 := 0, $p20;
    goto $bb12;

  $bb12:
    call $p30, $i31, $i32, $p34, $i35, $i36, $i37, $i38, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $i27, $p28, $i47 := gadget_strings_strings_make_loop_$bb12($p3, $i24, $p30, $i31, $i32, $p34, $i35, $i36, $i37, $i38, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $i27, $p28, $i47);
    goto $bb12_last;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.34, $p30);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i32, $i36);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i27, 1);
    call {:si_unique_call 814} {:cexpr "langs"} boogie_si_record_i32($i38);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.35, $p40);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref($sub.ref(0, 200), 216));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref($sub.ref(0, 200), 216)), $mul.ref(200, 1));
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, $i24);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i47 := $i38;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i26 := $i47;
    goto $bb11;

  $bb17:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i27, $p28 := $i38, $p43;
    goto $bb17_dummy;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 17);
    goto $bb7;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p6 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7049;
}



const gadget_strings_strings_drop: ref;

axiom gadget_strings_strings_drop == $sub.ref(0, 560468);

procedure gadget_strings_strings_drop($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation gadget_strings_strings_drop($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} config_item_put($p1);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    return;
}



const check_user_usb_string: ref;

axiom check_user_usb_string == $sub.ref(0, 561500);

procedure check_user_usb_string($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation check_user_usb_string($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i16;
  var $p21: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i3 := kstrtou16($p0, 0, $p2);
    call {:si_unique_call 819} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.36, $p2);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1023);
    call {:si_unique_call 820} {:cexpr "primary_lang"} boogie_si_record_i32($i8);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.36, $p2);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, 10);
    call {:si_unique_call 821} {:cexpr "sub_lang"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 98);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i8, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i8, $sub.i32(0, 256));
    assume {:verifier.code 0} true;
    $i15 := $ule.i32($i14, 767);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i11, 0);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.36, $p2);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i20);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb20:
    assume $i19 == 1;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i8, $sub.i32(0, 98));
    assume {:verifier.code 0} true;
    $i17 := $ule.i32($i16, 156);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const kstrtou16: ref;

axiom kstrtou16 == $sub.ref(0, 562532);

procedure kstrtou16($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtou16($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} {:cexpr "kstrtou16:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 823} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 824} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const os_desc_attr_release: ref;

axiom os_desc_attr_release == $sub.ref(0, 563564);

procedure os_desc_attr_release($p0: ref);
  free requires assertsPassed;



implementation os_desc_attr_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p1 := to_os_desc($p0);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} kfree($p2);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    return;
}



const os_desc_attr_show: ref;

axiom os_desc_attr_show == $sub.ref(0, 564596);

procedure os_desc_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation os_desc_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p3 := to_os_desc($p0);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 828} $i11 := devirtbounce.29($p10, $p3, $p2);
    call {:si_unique_call 829} {:cexpr "ret"} boogie_si_record_i64($i11);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const os_desc_attr_store: ref;

axiom os_desc_attr_store == $sub.ref(0, 565628);

procedure os_desc_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation os_desc_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} {:cexpr "os_desc_attr_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p4 := to_os_desc($p0);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 832} $i12 := devirtbounce.30($p11, $p4, $p2, $i3);
    call {:si_unique_call 833} {:cexpr "ret"} boogie_si_record_i64($i12);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const os_desc_link: ref;

axiom os_desc_link == $sub.ref(0, 566660);

procedure os_desc_link($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation os_desc_link($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p20: ref;
  var $p35: ref;
  var $p19: ref;
  var $p26: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i40: i32;
  var $p47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p2 := to_config_group($p0);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p6 := to_config_group($p1);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(600, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} mutex_lock_nested($p8, 0);
    $p10 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(1096, 1)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(1096, 1)), $mul.ref(80, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i15, $i17);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p19 := $p13;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $p19;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 520)), $mul.ref(256, 1));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p26);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i37, $i38);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p41 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 520)), $mul.ref(256, 1));
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p45);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(600, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} mutex_unlock($p47);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 16);
    goto $bb15;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb15;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p20 := $p13;
    goto $bb4;

  $bb4:
    call $p21, $i22, $i23, $i24, $p25, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p20, $p35 := os_desc_link_loop_$bb4($p7, $i17, $p21, $i22, $i23, $i24, $p25, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p20, $p35);
    goto $bb4_last;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 520)), $mul.ref(256, 1));
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p20);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p25 := $p20;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i17);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p35 := $p31;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p19 := $p35;
    goto $bb3;

  $bb10:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p20 := $p31;
    goto $bb10_dummy;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p26 := $p25;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7163;
}



const os_desc_unlink: ref;

axiom os_desc_unlink == $sub.ref(0, 567692);

procedure os_desc_unlink($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation os_desc_unlink($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p2 := to_config_group($p0);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 448), 1336));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(600, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} mutex_lock_nested($p6, 0);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(816, 1));
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(816, 1));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 841} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i17);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 843} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} vslice_dummy_var_76 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 448), 1336)), $mul.ref(600, 1));
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} mutex_unlock($p27);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} warn_slowpath_null(.str.73, 923);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} vslice_dummy_var_75 := unregister_gadget($p4);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const to_os_desc: ref;

axiom to_os_desc == $sub.ref(0, 568724);

procedure to_os_desc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_os_desc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p1 := to_config_group($p0);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const os_desc_use_show: ref;

axiom os_desc_use_show == $sub.ref(0, 569756);

procedure os_desc_use_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation os_desc_use_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p6 := to_gadget_info($p5);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1336)), $mul.ref(1320, 1));
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i11 := sprintf.ref.ref.i32($p1, .str.102, $i10);
    call {:si_unique_call 850} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const os_desc_use_store: ref;

axiom os_desc_use_store == $sub.ref(0, 570788);

procedure os_desc_use_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation os_desc_use_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 852} {:cexpr "os_desc_use_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p8 := to_gadget_info($p7);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1336)), $mul.ref(600, 1));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} mutex_lock_nested($p9, 0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i10 := strtobool($p1, $p3);
    call {:si_unique_call 856} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 1336)), $mul.ref(600, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} mutex_unlock($p18);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i17);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.37, $p3);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 1336)), $mul.ref(1320, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i13);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i15);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i2);
    call {:si_unique_call 857} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const strtobool: ref;

axiom strtobool == $sub.ref(0, 571820);

procedure strtobool($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation strtobool($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 859} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 860} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const os_desc_b_vendor_code_show: ref;

axiom os_desc_b_vendor_code_show == $sub.ref(0, 572852);

procedure os_desc_b_vendor_code_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation os_desc_b_vendor_code_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p6 := to_gadget_info($p5);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1336)), $mul.ref(1321, 1));
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i10 := sprintf.ref.ref.i32($p1, .str.102, $i9);
    call {:si_unique_call 863} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const os_desc_b_vendor_code_store: ref;

axiom os_desc_b_vendor_code_store == $sub.ref(0, 573884);

procedure os_desc_b_vendor_code_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation os_desc_b_vendor_code_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 865} {:cexpr "os_desc_b_vendor_code_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p8 := to_gadget_info($p7);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1336)), $mul.ref(600, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} mutex_lock_nested($p9, 0);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i10 := kstrtou8($p1, 0, $p3);
    call {:si_unique_call 869} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 1336)), $mul.ref(600, 1));
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} mutex_unlock($p16);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i15);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.33, $p3);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 1336)), $mul.ref(1321, 1));
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    call {:si_unique_call 870} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const os_desc_qw_sign_show: ref;

axiom os_desc_qw_sign_show == $sub.ref(0, 574916);

procedure os_desc_qw_sign_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation os_desc_qw_sign_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p6 := to_gadget_info($p5);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1336)), $mul.ref(1322, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 873} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p1, $p8, 14, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $r := 14;
    return;
}



const os_desc_qw_sign_store: ref;

axiom os_desc_qw_sign_store == $sub.ref(0, 575948);

procedure os_desc_qw_sign_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation os_desc_qw_sign_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} {:cexpr "os_desc_qw_sign_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p7 := to_gadget_info($p6);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    call {:si_unique_call 876} {:cexpr "_min1"} boogie_si_record_i32($i8);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 7);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i10 := 7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, $sub.i64(0, 1));
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p1, $mul.ref($i12, 1));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 10);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i10;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 1336)), $mul.ref(600, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} mutex_lock_nested($p19, 0);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 1336)), $mul.ref(1322, 1));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i22 := utf8s_to_utf16s($p1, $i18, 1, $p21, 14);
    call {:si_unique_call 880} {:cexpr "res"} boogie_si_record_i32($i22);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 0);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i22;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 1336)), $mul.ref(600, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} mutex_unlock($p26);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i25);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i2);
    call {:si_unique_call 881} {:cexpr "res"} boogie_si_record_i32($i24);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb9;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i10, 1);
    call {:si_unique_call 877} {:cexpr "l"} boogie_si_record_i32($i17);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const configfs_composite_bind: ref;

axiom configfs_composite_bind == $sub.ref(0, 576980);

procedure configfs_composite_bind($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr, $M.29, assertsPassed;



implementation configfs_composite_bind($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p32: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $i73: i64;
  var $p75: ref;
  var $p76: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p94: ref;
  var $i95: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p70: ref;
  var $i71: i32;
  var $i104: i32;
  var $i69: i32;
  var $i105: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i1;
  var $i114: i8;
  var $i115: i1;
  var $p116: ref;
  var $i117: i64;
  var $i118: i32;
  var $p119: ref;
  var $i120: i8;
  var $p123: ref;
  var $p125: ref;
  var $i126: i8;
  var $p129: ref;
  var $p131: ref;
  var $i132: i8;
  var $p135: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i1;
  var $p139: ref;
  var $i140: i8;
  var $i141: i8;
  var $i142: i8;
  var $p143: ref;
  var $i144: i8;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $i182: i64;
  var $p184: ref;
  var $p185: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p191: ref;
  var $i192: i32;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i64;
  var $i200: i1;
  var $p179: ref;
  var $i180: i32;
  var $i201: i32;
  var $i178: i32;
  var $i202: i64;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i1;
  var $i211: i8;
  var $i212: i1;
  var $p213: ref;
  var $p214: ref;
  var $i215: i64;
  var $i216: i32;
  var $p217: ref;
  var $i218: i8;
  var $p219: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i64;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $p241: ref;
  var $i242: i32;
  var $p243: ref;
  var $p244: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i64;
  var $i253: i1;
  var $p235: ref;
  var $p236: ref;
  var $p254: ref;
  var $p255: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $i262: i64;
  var $i263: i1;
  var $p162: ref;
  var $p264: ref;
  var $p265: ref;
  var $i266: i8;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $i271: i32;
  var $i272: i1;
  var $p273: ref;
  var $p274: ref;
  var $i245: i32;
  var $i19: i32;
  var $i10: i32;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p2 := to_cdriver($p1);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 832), 1336));
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1));
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(0, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p0);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} set_gadget_data($p0, $p7);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i8 := composite_dev_prepare($p2, $p5);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 886} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(80, 1));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i13 := list_empty($p12);
    call {:si_unique_call 888} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(80, 1));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i27, $i30);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(784, 1));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i57 := list_empty($p56);
    call {:si_unique_call 895} {:cexpr "tmp___4"} boogie_si_record_i32($i57);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1320, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p136);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i8.i1($i137);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p154, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p154, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(80, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i157, $i160);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p5);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($p264, $mul.ref(56, 1));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i266 := $load.i8($M.0, $p265);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i267 := $zext.i8.i32($i266);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    $p273 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(0, 1));
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} usb_ep_autoconfig_reset($p274);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb71:
    assume $i268 == 1;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(96, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i271 := composite_os_desc_req_prepare($p5, $p270);
    call {:si_unique_call 920} {:cexpr "ret"} boogie_si_record_i32($i271);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i272 == 1;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i245 := $i271;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} purge_configs_funcs($p4);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i19 := $i245;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} composite_dev_cleanup($p5);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i161 == 1;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p162 := $p155;
    goto $bb40;

  $bb40:
    call $p163, $p164, $p165, $i166, $i167, $p169, $p170, $p171, $p172, $p173, $i174, $p175, $i176, $i177, $i182, $p184, $p185, $p187, $p188, $p189, $p191, $i192, $p194, $p195, $p196, $p197, $p198, $i199, $i200, $p179, $i180, $i201, $i178, $i202, $p204, $p205, $p206, $p207, $p208, $p209, $i210, $i211, $i212, $p213, $p217, $i218, $p219, $p221, $p222, $p223, $p224, $p226, $p227, $p228, $p229, $p230, $i231, $p232, $i233, $i234, $p237, $i238, $i239, $p240, $p241, $i242, $p247, $p248, $p249, $p250, $p251, $i252, $i253, $p235, $p236, $p254, $p255, $p257, $p258, $p259, $p260, $p261, $i262, $i263, $p162 := configfs_composite_bind_loop_$bb40($p3, $i160, $p163, $p164, $p165, $i166, $i167, $p169, $p170, $p171, $p172, $p173, $i174, $p175, $i176, $i177, $i182, $p184, $p185, $p187, $p188, $p189, $p191, $i192, $p194, $p195, $p196, $p197, $p198, $i199, $i200, $p179, $i180, $i201, $i178, $i202, $p204, $p205, $p206, $p207, $p208, $p209, $i210, $i211, $i212, $p213, $p217, $i218, $p219, $p221, $p222, $p223, $p224, $p226, $p227, $p228, $p229, $p230, $i231, $p232, $i233, $i234, $p237, $i238, $i239, $p240, $p241, $i242, $p247, $p248, $p249, $p250, $p251, $i252, $i253, $p235, $p236, $p254, $p255, $p257, $p258, $p259, $p260, $p261, $i262, $i263, $p162);
    goto $bb40_last;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p163, $mul.ref($sub.ref(0, 256), 520));
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(240, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i166 := list_empty($p165);
    call {:si_unique_call 905} {:cexpr "tmp___8"} boogie_si_record_i32($i166);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 0);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p223, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p223, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $p228 := $bitcast.ref.ref($p227);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($p228, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p223, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i231 := $p2i.ref.i64($p230);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(480, 1));
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i234 := $ne.i64($i231, $i233);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i234 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    $p254 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(0, 1));
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} usb_ep_autoconfig_reset($p255);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p162, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.0, $p257);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p258);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($p259, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p259, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i262 := $p2i.ref.i64($p261);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i263 := $ne.i64($i262, $i160);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i263 == 1);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb68:
    assume $i263 == 1;
    assume {:verifier.code 0} true;
    $p162 := $p260;
    goto $bb68_dummy;

  $bb56:
    assume $i234 == 1;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p235, $p236 := $p229, $p224;
    goto $bb59;

  $bb59:
    call $p237, $i238, $i239, $p240, $p241, $i242, $p247, $p248, $p249, $p250, $p251, $i252, $i253, $p235, $p236 := configfs_composite_bind_loop_$bb59($p164, $i233, $p237, $i238, $i239, $p240, $p241, $i242, $p247, $p248, $p249, $p250, $p251, $i252, $i253, $p235, $p236, $p162);
    goto $bb59_last;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p236, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} list_del($p237);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i238 := usb_add_function($p162, $p236);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 915} {:cexpr "ret"} boogie_si_record_i32($i238);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 0);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $p240, $p241, $i242 := $p164, $p236, $i238;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p235, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p248);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($p249, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p235, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p251);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i253 := $ne.i64($i252, $i233);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i253 == 1);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb65:
    assume $i253 == 1;
    assume {:verifier.code 0} true;
    $p235, $p236 := $p250, $p235;
    goto $bb65_dummy;

  $bb61:
    assume $i239 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p241, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p240, $mul.ref(0, 520)), $mul.ref(480, 1));
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} list_add($p243, $p244);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i245 := $i242;
    goto $bb63;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i167 == 1;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p171, $mul.ref($sub.ref(0, 152), 168));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p171, $mul.ref($sub.ref(0, 152), 168)), $mul.ref(152, 1));
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(240, 1));
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i174, $i176);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i178 := 0;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i177 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i202 := $zext.i32.i64($i178);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(496, 1)), $mul.ref($i202, 8));
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p204, $0.ref);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(496, 1));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p208 := usb_gstrings_attach($p205, $p207, 1);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p208);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i210 := IS_ERR($p209);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i211 := $zext.i1.i8($i210);
    call {:si_unique_call 909} {:cexpr "tmp___7"} boogie_si_record_i8($i211);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i8.i1($i211);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p213 := $p208;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p208, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i218 := $load.i8($M.0, $p217);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p162, $mul.ref(0, 224)), $mul.ref(41, 1));
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p219, $i218);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i212 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p213);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i215 := PTR_ERR($p214);
    call {:si_unique_call 911} {:cexpr "tmp___6"} boogie_si_record_i64($i215);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i64.i32($i215);
    call {:si_unique_call 912} {:cexpr "ret"} boogie_si_record_i32($i216);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i19 := $i216;
    goto $bb7;

  $bb44:
    assume $i177 == 1;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p179, $i180 := $p172, 0;
    goto $bb47;

  $bb47:
    call $i182, $p184, $p185, $p187, $p188, $p189, $p191, $i192, $p194, $p195, $p196, $p197, $p198, $i199, $i200, $p179, $i180, $i201 := configfs_composite_bind_loop_$bb47($p163, $i176, $i182, $p184, $p185, $p187, $p188, $p189, $p191, $i192, $p194, $p195, $p196, $p197, $p198, $i199, $i200, $p179, $i180, $i201);
    goto $bb47_last;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i182 := $zext.i32.i64($i180);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(496, 1)), $mul.ref($i182, 8));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p184, $p179);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p179, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p179, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p187, $p185);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p179, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p179, $mul.ref(0, 168)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p191, $p189);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i180, 1);
    call {:si_unique_call 906} {:cexpr "i"} boogie_si_record_i32($i192);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p179, $mul.ref(0, 168)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($p196, $mul.ref($sub.ref(0, 152), 168));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p196, $mul.ref($sub.ref(0, 152), 168)), $mul.ref(152, 1));
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p198);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i200 := $ne.i64($i199, $i176);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i201 := $i192;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i178 := $i201;
    goto $bb46;

  $bb49:
    assume $i200 == 1;
    assume {:verifier.code 0} true;
    $p179, $i180 := $p197, $i192;
    goto $bb49_dummy;

  $bb34:
    assume $i138 == 1;
    $p139 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(56, 1));
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i141 := $and.i8($i140, $sub.i8(0, 2));
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i142 := $or.i8($i141, 1);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p139, $i142);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1321, 1));
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.0, $p143);
    $p145 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(46, 1));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p145, $i144);
    $p146 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(32, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1322, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 903} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p147, $p149, 14, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb20:
    assume $i58 == 1;
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(784, 1)), $mul.ref(0, 1));
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref($sub.ref(0, 200), 216));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p62, $mul.ref($sub.ref(0, 200), 216)), $mul.ref(200, 1));
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(784, 1));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i65, $i67);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i69 := 0;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i105 := $zext.i32.i64($i69);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(760, 1)), $mul.ref($i105, 8));
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, $0.ref);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1));
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(760, 1));
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p111 := usb_gstrings_attach($p108, $p110, 3);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i113 := IS_ERR($p112);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i114 := $zext.i1.i8($i113);
    call {:si_unique_call 899} {:cexpr "tmp___3"} boogie_si_record_i8($i114);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i8.i1($i114);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p111, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(14, 1));
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, $i120);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p111, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(15, 1));
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, $i126);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p111, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(16, 1));
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, $i132);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i115 == 1;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p111);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i117 := PTR_ERR($p116);
    call {:si_unique_call 901} {:cexpr "tmp___2"} boogie_si_record_i64($i117);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i64.i32($i117);
    call {:si_unique_call 902} {:cexpr "ret"} boogie_si_record_i32($i118);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i19 := $i118;
    goto $bb7;

  $bb22:
    assume $i68 == 1;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p70, $i71 := $p63, 0;
    goto $bb25;

  $bb25:
    call $i73, $p75, $p76, $p79, $p80, $p81, $p84, $p85, $p86, $p89, $p90, $p91, $p94, $i95, $p97, $p98, $p99, $p100, $p101, $i102, $i103, $p70, $i71, $i104 := configfs_composite_bind_loop_$bb25($p3, $i67, $i73, $p75, $p76, $p79, $p80, $p81, $p84, $p85, $p86, $p89, $p90, $p91, $p94, $i95, $p97, $p98, $p99, $p100, $p101, $i102, $i103, $p70, $i71, $i104);
    goto $bb25_last;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i71);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(760, 1)), $mul.ref($i73, 8));
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p70);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p70, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $p76);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p70, $mul.ref(0, 216)), $mul.ref(64, 1));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p70, $mul.ref(0, 216)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $p81);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p70, $mul.ref(0, 216)), $mul.ref(72, 1));
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p70, $mul.ref(0, 216)), $mul.ref(16, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $p86);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p70, $mul.ref(0, 216)), $mul.ref(80, 1));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p70, $mul.ref(0, 216)), $mul.ref(16, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $p91);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i71, 1);
    call {:si_unique_call 896} {:cexpr "i"} boogie_si_record_i32($i95);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p99, $mul.ref($sub.ref(0, 200), 216));
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p99, $mul.ref($sub.ref(0, 200), 216)), $mul.ref(200, 1));
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, $i67);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i104 := $i95;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i69 := $i104;
    goto $bb24;

  $bb27:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $p70, $i71 := $p100, $i95;
    goto $bb27_dummy;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p32 := $p25;
    goto $bb12;

  $bb12:
    call $p33, $p35, $i36, $i37, $p38, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p32 := configfs_composite_bind_loop_$bb12($i30, $p33, $p35, $i36, $i37, $p38, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p32);
    goto $bb12_last;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(480, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i36 := list_empty($p35);
    call {:si_unique_call 892} {:cexpr "tmp___1"} boogie_si_record_i32($i36);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p38 := $p32;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p51, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, $i30);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb17:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p32 := $p52;
    goto $bb17_dummy;

  $bb14:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p38, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(832, 1)), $mul.ref(0, 1));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} vslice_dummy_var_78 := printk.ref.ref.i32.ref(.str.76, $p40, $i43, $p46);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb7;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(832, 1)), $mul.ref(0, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_77 := printk.ref.ref(.str.75, $p17);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb65_dummy:
    assume false;
    return;

  $bb59_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7619;

  $bb49_dummy:
    assume false;
    return;

  $bb47_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7557;

  $bb68_dummy:
    assume false;
    return;

  $bb40_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7536;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7442;

  $bb17_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7397;
}



const configfs_composite_unbind: ref;

axiom configfs_composite_unbind == $sub.ref(0, 578012);

procedure configfs_composite_unbind($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation configfs_composite_unbind($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $p1 := get_gadget_data($p0);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1096), 1336));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} purge_configs_funcs($p4);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} composite_dev_cleanup($p2);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} usb_ep_autoconfig_reset($p6);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} set_gadget_data($p0, $0.ref);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const purge_configs_funcs: ref;

axiom purge_configs_funcs == $sub.ref(0, 579044);

procedure purge_configs_funcs($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation purge_configs_funcs($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p31: ref;
  var $p32: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i8;
  var $p61: ref;
  var $i62: i8;
  var $i63: i8;
  var $p64: ref;
  var $i65: i8;
  var $i66: i8;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p13: ref;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(80, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i8, $i11);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p13 := $p6;
    goto $bb4;

  $bb4:
    call $p14, $p17, $p18, $p19, $p20, $p22, $p23, $p24, $p25, $p26, $i27, $p28, $i29, $i30, $p33, $p34, $p35, $p36, $i37, $i38, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p31, $p32, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $i62, $i63, $p64, $i65, $i66, $p68, $p69, $p70, $p71, $p72, $i73, $i74, $p13, cmdloc_dummy_var_44, cmdloc_dummy_var_45 := purge_configs_funcs_loop_$bb4($p0, $i11, $p14, $p17, $p18, $p19, $p20, $p22, $p23, $p24, $p25, $p26, $i27, $p28, $i29, $i30, $p33, $p34, $p35, $p36, $i37, $i38, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p31, $p32, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $i62, $i63, $p64, $i65, $i66, $p68, $p69, $p70, $p71, $p72, $i73, $i74, $p13, cmdloc_dummy_var_44, cmdloc_dummy_var_45);
    goto $bb4_last;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p19, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i27, $i29);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p13, $mul.ref(0, 224)), $mul.ref(88, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p13, $mul.ref(0, 224)), $mul.ref(96, 1));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 930} cmdloc_dummy_var_45 := $memset.i8(cmdloc_dummy_var_44, $p57, 0, 128, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p13, $mul.ref(0, 224)), $mul.ref(89, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i60 := $and.i8($i59, $sub.i8(0, 2));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i60);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p13, $mul.ref(0, 224)), $mul.ref(89, 1));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i63 := $and.i8($i62, $sub.i8(0, 3));
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i63);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p13, $mul.ref(0, 224)), $mul.ref(89, 1));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i66 := $and.i8($i65, $sub.i8(0, 5));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $i66);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p70, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, $i11);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i74 == 1);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p71;
    goto $bb17_dummy;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p31, $p32 := $p25, $p20;
    goto $bb9;

  $bb9:
    call $p33, $p34, $p35, $p36, $i37, $i38, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p31, $p32 := purge_configs_funcs_loop_$bb9($p0, $p14, $i29, $p33, $p34, $p35, $p36, $i37, $i38, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p31, $p32, $p13);
    goto $bb9_last;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(480, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} list_move_tail($p33, $p34);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref(0, 200)), $mul.ref(72, 1));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p31, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, $i29);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $p31, $p32 := $p51, $p31;
    goto $bb14_dummy;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(0, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p32, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} dev_err.ref.ref.ref.ref($p42, .str.17, $p44, $p32);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p32, $mul.ref(0, 200)), $mul.ref(72, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    call {:si_unique_call 929} devirtbounce.2($p46, $p13, $p32);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb14_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7722;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7702;
}



const list_move_tail: ref;

axiom list_move_tail == $sub.ref(0, 580076);

procedure list_move_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} __list_del_entry($p0);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} list_add_tail($p0, $p1);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 581108);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 582140);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} __list_add($p0, $p1, $p3);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    return;
}



const gadget_info_attr_release: ref;

axiom gadget_info_attr_release == $sub.ref(0, 583172);

procedure gadget_info_attr_release($p0: ref);
  free requires assertsPassed;



implementation gadget_info_attr_release($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_79: i64;
  var vslice_dummy_var_80: i64;
  var vslice_dummy_var_81: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p1 := to_gadget_info($p0);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(80, 1));
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i4 := list_empty($p3);
    call {:si_unique_call 936} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 937} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 939} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_79 := ldv__builtin_expect($i14, 0);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 1336)), $mul.ref(784, 1));
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i17 := list_empty($p16);
    call {:si_unique_call 943} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    call {:si_unique_call 944} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i19);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 946} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i19, 0);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_80 := ldv__builtin_expect($i27, 0);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 1336)), $mul.ref(800, 1));
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i30 := list_empty($p29);
    call {:si_unique_call 950} {:cexpr "tmp___4"} boogie_si_record_i32($i30);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 951} {:cexpr "__ret_warn_on___1"} boogie_si_record_i32($i32);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 953} {:cexpr "tmp___5"} boogie_si_record_i64($i36);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i32, 0);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} vslice_dummy_var_81 := ldv__builtin_expect($i40, 0);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} kfree($p45);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p1);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} kfree($p46);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} warn_slowpath_null(.str.73, 347);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} warn_slowpath_null(.str.73, 346);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} warn_slowpath_null(.str.73, 345);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gadget_info_attr_show: ref;

axiom gadget_info_attr_show == $sub.ref(0, 584204);

procedure gadget_info_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gadget_info_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $p3 := to_gadget_info($p0);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 959} $i11 := devirtbounce.31($p10, $p3, $p2);
    call {:si_unique_call 960} {:cexpr "ret"} boogie_si_record_i64($i11);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const gadget_info_attr_store: ref;

axiom gadget_info_attr_store == $sub.ref(0, 585236);

procedure gadget_info_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_info_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} {:cexpr "gadget_info_attr_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p4 := to_gadget_info($p0);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 963} $i12 := devirtbounce.32($p11, $p4, $p2, $i3);
    call {:si_unique_call 964} {:cexpr "ret"} boogie_si_record_i64($i12);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const gadget_dev_desc_bDeviceClass_show: ref;

axiom gadget_dev_desc_bDeviceClass_show == $sub.ref(0, 586268);

procedure gadget_dev_desc_bDeviceClass_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_dev_desc_bDeviceClass_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(4, 1));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i7 := sprintf.ref.ref.i32($p1, .str.71, $i6);
    call {:si_unique_call 966} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const gadget_dev_desc_bDeviceClass_store: ref;

axiom gadget_dev_desc_bDeviceClass_store == $sub.ref(0, 587300);

procedure gadget_dev_desc_bDeviceClass_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_dev_desc_bDeviceClass_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i8: i8;
  var $p11: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 968} {:cexpr "gadget_dev_desc_bDeviceClass_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i4 := kstrtou8($p1, 0, $p3);
    call {:si_unique_call 970} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.33, $p3);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(4, 1));
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i8);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadget_dev_desc_bDeviceSubClass_show: ref;

axiom gadget_dev_desc_bDeviceSubClass_show == $sub.ref(0, 588332);

procedure gadget_dev_desc_bDeviceSubClass_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_dev_desc_bDeviceSubClass_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(5, 1));
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $i7 := sprintf.ref.ref.i32($p1, .str.71, $i6);
    call {:si_unique_call 972} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const gadget_dev_desc_bDeviceSubClass_store: ref;

axiom gadget_dev_desc_bDeviceSubClass_store == $sub.ref(0, 589364);

procedure gadget_dev_desc_bDeviceSubClass_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_dev_desc_bDeviceSubClass_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i8: i8;
  var $p11: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 974} {:cexpr "gadget_dev_desc_bDeviceSubClass_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i4 := kstrtou8($p1, 0, $p3);
    call {:si_unique_call 976} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.33, $p3);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(5, 1));
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i8);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadget_dev_desc_bDeviceProtocol_show: ref;

axiom gadget_dev_desc_bDeviceProtocol_show == $sub.ref(0, 590396);

procedure gadget_dev_desc_bDeviceProtocol_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_dev_desc_bDeviceProtocol_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(6, 1));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i7 := sprintf.ref.ref.i32($p1, .str.71, $i6);
    call {:si_unique_call 978} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const gadget_dev_desc_bDeviceProtocol_store: ref;

axiom gadget_dev_desc_bDeviceProtocol_store == $sub.ref(0, 591428);

procedure gadget_dev_desc_bDeviceProtocol_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_dev_desc_bDeviceProtocol_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i8: i8;
  var $p11: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 980} {:cexpr "gadget_dev_desc_bDeviceProtocol_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i4 := kstrtou8($p1, 0, $p3);
    call {:si_unique_call 982} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.33, $p3);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(6, 1));
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i8);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadget_dev_desc_bMaxPacketSize0_show: ref;

axiom gadget_dev_desc_bMaxPacketSize0_show == $sub.ref(0, 592460);

procedure gadget_dev_desc_bMaxPacketSize0_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_dev_desc_bMaxPacketSize0_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(7, 1));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i7 := sprintf.ref.ref.i32($p1, .str.71, $i6);
    call {:si_unique_call 984} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const gadget_dev_desc_bMaxPacketSize0_store: ref;

axiom gadget_dev_desc_bMaxPacketSize0_store == $sub.ref(0, 593492);

procedure gadget_dev_desc_bMaxPacketSize0_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_dev_desc_bMaxPacketSize0_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i8: i8;
  var $p11: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 986} {:cexpr "gadget_dev_desc_bMaxPacketSize0_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i4 := kstrtou8($p1, 0, $p3);
    call {:si_unique_call 988} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.33, $p3);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(7, 1));
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i8);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadget_dev_desc_idVendor_show: ref;

axiom gadget_dev_desc_idVendor_show == $sub.ref(0, 594524);

procedure gadget_dev_desc_idVendor_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_dev_desc_idVendor_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(8, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i5 := __le16_to_cpup($p4);
    call {:si_unique_call 990} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i7 := sprintf.ref.ref.i32($p1, .str.72, $i6);
    call {:si_unique_call 992} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const gadget_dev_desc_idVendor_store: ref;

axiom gadget_dev_desc_idVendor_store == $sub.ref(0, 595556);

procedure gadget_dev_desc_idVendor_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_dev_desc_idVendor_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i8: i16;
  var $p11: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 994} {:cexpr "gadget_dev_desc_idVendor_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i4 := kstrtou16($p1, 0, $p3);
    call {:si_unique_call 996} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $i8 := __cpu_to_le16p($p3);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(8, 1));
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i8);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const __cpu_to_le16p: ref;

axiom __cpu_to_le16p == $sub.ref(0, 596588);

procedure __cpu_to_le16p($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __cpu_to_le16p($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.36, $p0);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __le16_to_cpup: ref;

axiom __le16_to_cpup == $sub.ref(0, 597620);

procedure __le16_to_cpup($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __le16_to_cpup($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.0, $p0);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gadget_dev_desc_idProduct_show: ref;

axiom gadget_dev_desc_idProduct_show == $sub.ref(0, 598652);

procedure gadget_dev_desc_idProduct_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_dev_desc_idProduct_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(10, 1));
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i5 := __le16_to_cpup($p4);
    call {:si_unique_call 999} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i7 := sprintf.ref.ref.i32($p1, .str.72, $i6);
    call {:si_unique_call 1001} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const gadget_dev_desc_idProduct_store: ref;

axiom gadget_dev_desc_idProduct_store == $sub.ref(0, 599684);

procedure gadget_dev_desc_idProduct_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_dev_desc_idProduct_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i8: i16;
  var $p11: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1003} {:cexpr "gadget_dev_desc_idProduct_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i4 := kstrtou16($p1, 0, $p3);
    call {:si_unique_call 1005} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i8 := __cpu_to_le16p($p3);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(10, 1));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i8);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadget_dev_desc_bcdDevice_show: ref;

axiom gadget_dev_desc_bcdDevice_show == $sub.ref(0, 600716);

procedure gadget_dev_desc_bcdDevice_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_dev_desc_bcdDevice_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(12, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $i5 := __le16_to_cpup($p4);
    call {:si_unique_call 1008} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i7 := sprintf.ref.ref.i32($p1, .str.72, $i6);
    call {:si_unique_call 1010} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const gadget_dev_desc_bcdDevice_store: ref;

axiom gadget_dev_desc_bcdDevice_store == $sub.ref(0, 601748);

procedure gadget_dev_desc_bcdDevice_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_dev_desc_bcdDevice_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i16;
  var $p18: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1012} {:cexpr "gadget_dev_desc_bcdDevice_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i4 := kstrtou16($p1, 0, $p3);
    call {:si_unique_call 1014} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.36, $p3);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i11 := is_valid_bcd($i10);
    call {:si_unique_call 1016} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    call {:si_unique_call 1017} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.36, $p3);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(12, 1));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i15);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i12);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const is_valid_bcd: ref;

axiom is_valid_bcd == $sub.ref(0, 602780);

procedure is_valid_bcd($i0: i16) returns ($r: i64);
  free requires assertsPassed;



implementation is_valid_bcd($i0: i16) returns ($r: i64)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} {:cexpr "is_valid_bcd:arg:bcd_val"} boogie_si_record_i16($i0);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 15);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 9);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 4);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 15);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 9);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i0);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i10 := $ashr.i32($i9, 8);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 15);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 9);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i0);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i14 := $ashr.i32($i13, 12);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 15);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 9);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64(0, 22);
    goto $bb3;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64(0, 22);
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64(0, 22);
    goto $bb3;
}



const gadget_dev_desc_bcdUSB_show: ref;

axiom gadget_dev_desc_bcdUSB_show == $sub.ref(0, 603812);

procedure gadget_dev_desc_bcdUSB_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_dev_desc_bcdUSB_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(2, 1));
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i5 := __le16_to_cpup($p4);
    call {:si_unique_call 1020} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i7 := sprintf.ref.ref.i32($p1, .str.72, $i6);
    call {:si_unique_call 1022} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const gadget_dev_desc_bcdUSB_store: ref;

axiom gadget_dev_desc_bcdUSB_store == $sub.ref(0, 604844);

procedure gadget_dev_desc_bcdUSB_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_dev_desc_bcdUSB_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i16;
  var $p18: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1024} {:cexpr "gadget_dev_desc_bcdUSB_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i4 := kstrtou16($p1, 0, $p3);
    call {:si_unique_call 1026} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.36, $p3);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i11 := is_valid_bcd($i10);
    call {:si_unique_call 1028} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    call {:si_unique_call 1029} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.36, $p3);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(2, 1));
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i15);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i12);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadget_dev_desc_UDC_show: ref;

axiom gadget_dev_desc_UDC_show == $sub.ref(0, 605876);

procedure gadget_dev_desc_UDC_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_dev_desc_UDC_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(816, 1));
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p13 := .str.21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i14 := sprintf.ref.ref.ref($p1, .str.42, $p13);
    call {:si_unique_call 1031} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(816, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb3;
}



const gadget_dev_desc_UDC_store: ref;

axiom gadget_dev_desc_UDC_store == $sub.ref(0, 606908);

procedure gadget_dev_desc_UDC_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gadget_dev_desc_UDC_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i19: i32;
  var $p30: ref;
  var $i31: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} {:cexpr "gadget_dev_desc_UDC_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p3 := kstrdup($p1, 208);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p3, $mul.ref($i7, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 10);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(600, 1));
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} mutex_lock_nested($p14, 0);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i15 := strlen($p3);
    call {:si_unique_call 1036} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(816, 1));
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(72, 1));
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i26 := usb_udc_attach_driver($p3, $p25);
    call {:si_unique_call 1043} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(816, 1));
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p3);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(600, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} mutex_unlock($p29);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i19 := $i26;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} kfree($p3);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1336)), $mul.ref(600, 1));
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} mutex_unlock($p30);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i19);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i6 := $i31;
    goto $bb3;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 16);
    goto $bb12;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i17 := unregister_gadget($p0);
    call {:si_unique_call 1038} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb12;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p3, $mul.ref($i12, 1));
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 12);
    goto $bb3;
}



const usb_udc_attach_driver: ref;

axiom usb_udc_attach_driver == $sub.ref(0, 607940);

procedure usb_udc_attach_driver($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_udc_attach_driver($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1044} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1045} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gadget_config_name_attr_release: ref;

axiom gadget_config_name_attr_release == $sub.ref(0, 608972);

procedure gadget_config_name_attr_release($p0: ref);
  free requires assertsPassed;



implementation gadget_config_name_attr_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $p1 := to_gadget_config_name($p0);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} kfree($p3);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(152, 1));
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} list_del($p4);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} kfree($p5);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    return;
}



const gadget_config_name_attr_show: ref;

axiom gadget_config_name_attr_show == $sub.ref(0, 610004);

procedure gadget_config_name_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gadget_config_name_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p3 := to_gadget_config_name($p0);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1051} $i11 := devirtbounce.33($p10, $p3, $p2);
    call {:si_unique_call 1052} {:cexpr "ret"} boogie_si_record_i64($i11);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const gadget_config_name_attr_store: ref;

axiom gadget_config_name_attr_store == $sub.ref(0, 611036);

procedure gadget_config_name_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_config_name_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} {:cexpr "gadget_config_name_attr_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p4 := to_gadget_config_name($p0);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 1055} $i12 := devirtbounce.34($p11, $p4, $p2, $i3);
    call {:si_unique_call 1056} {:cexpr "ret"} boogie_si_record_i64($i12);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const to_gadget_config_name: ref;

axiom to_gadget_config_name == $sub.ref(0, 612068);

procedure to_gadget_config_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_gadget_config_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $p1 := to_config_group($p0);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 40), 168));
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const gadget_config_name_configuration_show: ref;

axiom gadget_config_name_configuration_show == $sub.ref(0, 613100);

procedure gadget_config_name_configuration_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_config_name_configuration_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p13 := .str.21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i14 := sprintf.ref.ref.ref($p1, .str.42, $p13);
    call {:si_unique_call 1059} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb3;
}



const gadget_config_name_configuration_store: ref;

axiom gadget_config_name_configuration_store == $sub.ref(0, 614132);

procedure gadget_config_name_configuration_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gadget_config_name_configuration_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} {:cexpr "gadget_config_name_configuration_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i4 := usb_string_copy($p1, $p3);
    call {:si_unique_call 1062} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const usb_string_copy: ref;

axiom usb_string_copy == $sub.ref(0, 615164);

procedure usb_string_copy($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_string_copy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i3 := strlen($p0);
    call {:si_unique_call 1064} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 1065} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 126);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $p7 := kstrdup($p0, 208);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i4);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, $sub.i64(0, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p7, $mul.ref($i11, 1));
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 10);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} kfree($p2);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p7);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i4);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, $sub.i64(0, 1));
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p7, $mul.ref($i17, 1));
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 75);
    goto $bb3;
}



const gadget_strings_attr_release: ref;

axiom gadget_strings_attr_release == $sub.ref(0, 616196);

procedure gadget_strings_attr_release($p0: ref);
  free requires assertsPassed;



implementation gadget_strings_attr_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $p1 := to_gadget_strings($p0);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(64, 1));
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} kfree($p3);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(72, 1));
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} kfree($p5);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(80, 1));
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} kfree($p7);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} list_del($p8);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} kfree($p9);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    return;
}



const gadget_strings_attr_show: ref;

axiom gadget_strings_attr_show == $sub.ref(0, 617228);

procedure gadget_strings_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gadget_strings_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p3 := to_gadget_strings($p0);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1075} $i11 := devirtbounce.35($p10, $p3, $p2);
    call {:si_unique_call 1076} {:cexpr "ret"} boogie_si_record_i64($i11);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const gadget_strings_attr_store: ref;

axiom gadget_strings_attr_store == $sub.ref(0, 618260);

procedure gadget_strings_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_strings_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} {:cexpr "gadget_strings_attr_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $p4 := to_gadget_strings($p0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 1079} $i12 := devirtbounce.36($p11, $p4, $p2, $i3);
    call {:si_unique_call 1080} {:cexpr "ret"} boogie_si_record_i64($i12);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const to_gadget_strings: ref;

axiom to_gadget_strings == $sub.ref(0, 619292);

procedure to_gadget_strings($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_gadget_strings($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $p1 := to_config_group($p0);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 88), 216));
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const gadget_strings_manufacturer_show: ref;

axiom gadget_strings_manufacturer_show == $sub.ref(0, 620324);

procedure gadget_strings_manufacturer_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_strings_manufacturer_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(64, 1));
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p13 := .str.21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i14 := sprintf.ref.ref.ref($p1, .str.42, $p13);
    call {:si_unique_call 1083} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(64, 1));
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb3;
}



const gadget_strings_manufacturer_store: ref;

axiom gadget_strings_manufacturer_store == $sub.ref(0, 621356);

procedure gadget_strings_manufacturer_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gadget_strings_manufacturer_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} {:cexpr "gadget_strings_manufacturer_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(64, 1));
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i4 := usb_string_copy($p1, $p3);
    call {:si_unique_call 1086} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadget_strings_product_show: ref;

axiom gadget_strings_product_show == $sub.ref(0, 622388);

procedure gadget_strings_product_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_strings_product_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(72, 1));
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p13 := .str.21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i14 := sprintf.ref.ref.ref($p1, .str.42, $p13);
    call {:si_unique_call 1088} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(72, 1));
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb3;
}



const gadget_strings_product_store: ref;

axiom gadget_strings_product_store == $sub.ref(0, 623420);

procedure gadget_strings_product_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gadget_strings_product_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} {:cexpr "gadget_strings_product_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(72, 1));
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i4 := usb_string_copy($p1, $p3);
    call {:si_unique_call 1091} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadget_strings_serialnumber_show: ref;

axiom gadget_strings_serialnumber_show == $sub.ref(0, 624452);

procedure gadget_strings_serialnumber_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_strings_serialnumber_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(80, 1));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $p13 := .str.21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i14 := sprintf.ref.ref.ref($p1, .str.42, $p13);
    call {:si_unique_call 1093} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(80, 1));
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb3;
}



const gadget_strings_serialnumber_store: ref;

axiom gadget_strings_serialnumber_store == $sub.ref(0, 625484);

procedure gadget_strings_serialnumber_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gadget_strings_serialnumber_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} {:cexpr "gadget_strings_serialnumber_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(80, 1));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i4 := usb_string_copy($p1, $p3);
    call {:si_unique_call 1096} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadgets_make: ref;

axiom gadgets_make == $sub.ref(0, 626516);

procedure gadgets_make($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadgets_make($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p53: ref;
  var $p56: ref;
  var $i57: i16;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p67: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $p89: ref;
  var $p9: ref;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $p3 := kzalloc(1336, 208);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(560, 1));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p10);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(112, 1));
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p14);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(224, 1));
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1, 8));
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p18);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(336, 1));
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(2, 8));
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p23);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(448, 1));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(3, 8));
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p28);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(112, 1));
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} config_group_init_type_name($p33, .str.77, functions_type);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(224, 1));
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} config_group_init_type_name($p34, .str.78, config_desc_type);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(336, 1));
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} config_group_init_type_name($p35, .str.79, gadget_strings_strings_type);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(448, 1));
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} config_group_init_type_name($p36, .str.46, os_desc_type);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(32, 1));
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, configfs_do_nothing);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(40, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, configfs_do_nothing);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(56, 1));
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $0.ref);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(64, 1));
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $0.ref);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(24, 1));
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 5);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(600, 1));
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} __mutex_init($p47, .str.80, $p2);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(784, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} INIT_LIST_HEAD($p48);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(800, 1));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} INIT_LIST_HEAD($p49);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(1096, 1));
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} composite_init_dev($p50);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(0, 1));
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 18);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(1, 1));
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 1);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i57 := get_default_bcdDevice();
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(58, 1)), $mul.ref(12, 1));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, $i57);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(72, 1));
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 1109} cmdloc_dummy_var_48 := $memcpy.i8(cmdloc_dummy_var_46, cmdloc_dummy_var_47, $p63, configfs_driver_template, 192, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p64 := kstrdup($p1, 208);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p64);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(0, 1));
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $p71);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(832, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(824, 1)), $mul.ref(0, 1));
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 3);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(824, 1)), $mul.ref(1, 1));
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, 9);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(824, 1)), $mul.ref(2, 1));
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 3);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 1336)), $mul.ref(0, 1));
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} config_group_init_type_name($p86, $p1, gadget_root_type);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p9 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb5:
    assume $i79 == 1;
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p4);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} kfree($p88);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $p89 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $p9 := $p89;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $p7 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $p9 := $p7;
    goto $bb3;
}



const gadgets_drop: ref;

axiom gadgets_drop == $sub.ref(0, 627548);

procedure gadgets_drop($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation gadgets_drop($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} config_item_put($p1);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    return;
}



const configfs_do_nothing: ref;

axiom configfs_do_nothing == $sub.ref(0, 628580);

procedure configfs_do_nothing($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation configfs_do_nothing($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var vslice_dummy_var_82: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32(1, 0);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 1116} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32(1, 0);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} vslice_dummy_var_82 := ldv__builtin_expect($i8, 0);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 22);
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} warn_slowpath_null(.str.73, 1268);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 629612);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    return;
}



const composite_init_dev: ref;

axiom composite_init_dev == $sub.ref(0, 630644);

procedure composite_init_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation composite_init_dev($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var vslice_dummy_var_83: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(144, 1));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} vslice_dummy_var_83 := spinlock_check($p2);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} __raw_spin_lock_init($p6, .str.64, $p1);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(80, 1));
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} INIT_LIST_HEAD($p7);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(96, 1));
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} INIT_LIST_HEAD($p8);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    return;
}



const usb_os_desc_ext_prop_release: ref;

axiom usb_os_desc_ext_prop_release == $sub.ref(0, 631676);

procedure usb_os_desc_ext_prop_release($p0: ref);
  free requires assertsPassed;



implementation usb_os_desc_ext_prop_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $p1 := to_usb_os_desc_ext_prop($p0);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} kfree($p2);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    return;
}



const usb_os_desc_ext_prop_attr_show: ref;

axiom usb_os_desc_ext_prop_attr_show == $sub.ref(0, 632708);

procedure usb_os_desc_ext_prop_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_os_desc_ext_prop_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $p3 := to_usb_os_desc_ext_prop($p0);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1127} $i11 := devirtbounce.37($p10, $p3, $p2);
    call {:si_unique_call 1128} {:cexpr "ret"} boogie_si_record_i64($i11);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const usb_os_desc_ext_prop_attr_store: ref;

axiom usb_os_desc_ext_prop_attr_store == $sub.ref(0, 633740);

procedure usb_os_desc_ext_prop_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_os_desc_ext_prop_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} {:cexpr "usb_os_desc_ext_prop_attr_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $p4 := to_usb_os_desc_ext_prop($p0);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 1131} $i12 := devirtbounce.38($p11, $p4, $p2, $i3);
    call {:si_unique_call 1132} {:cexpr "ret"} boogie_si_record_i64($i12);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const ext_prop_type_show: ref;

axiom ext_prop_type_show == $sub.ref(0, 634772);

procedure ext_prop_type_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ext_prop_type_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $i5 := sprintf.ref.ref.i32($p1, .str.102, $i4);
    call {:si_unique_call 1134} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ext_prop_type_store: ref;

axiom ext_prop_type_store == $sub.ref(0, 635804);

procedure ext_prop_type_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ext_prop_type_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i8;
  var $p74: ref;
  var $i75: i32;
  var $i16: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1136} {:cexpr "ext_prop_type_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p7 := to_usb_os_desc($p6);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i14 := kstrtou8($p1, 0, $p3);
    call {:si_unique_call 1140} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.33, $p3);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.33, $p3);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 7);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i26 == 1);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 4);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 5);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i51 == 1);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 2);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i55 == 1);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 6);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.33, $p3);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i73);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i64.i32($i2);
    call {:si_unique_call 1141} {:cexpr "ret"} boogie_si_record_i32($i75);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i16 := $i75;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i16);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $r := $i82;
    return;

  $bb46:
    assume $i79 == 1;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} mutex_unlock($p81);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.33, $p3);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 3);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i62 == 1);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.33, $p3);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 4);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i65 == 1);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.33, $p3);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 5);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb37;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i71 := $ashr.i32($i70, 1);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb39;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb31;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.33, $p3);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i37 == 1);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.33, $p3);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i40 == 1);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.33, $p3);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 6);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb21;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i46 := $shl.i32($i45, 1);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb23;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} mutex_lock_nested($p13, 0);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ext_prop_data_show: ref;

axiom ext_prop_data_show == $sub.ref(0, 636836);

procedure ext_prop_data_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation ext_prop_data_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 1143} {:cexpr "len"} boogie_si_record_i32($i3);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 6);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i3;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i17);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.0;
    cmdloc_dummy_var_50 := $M.0;
    call {:si_unique_call 1145} cmdloc_dummy_var_51 := $memcpy.i8(cmdloc_dummy_var_49, cmdloc_dummy_var_50, $p1, $p19, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_51;
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i17);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i3, 1);
    call {:si_unique_call 1144} {:cexpr "len"} boogie_si_record_i32($i16);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const ext_prop_data_store: ref;

axiom ext_prop_data_store == $sub.ref(0, 637868);

procedure ext_prop_data_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation ext_prop_data_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i22: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} {:cexpr "ext_prop_data_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p6 := to_usb_os_desc($p5);
    call {:si_unique_call 1148} {:cexpr "ext_prop_data_store:arg:ret_len"} boogie_si_record_i64($i2);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref($i7, 1));
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 10);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p1, $mul.ref($i12, 1));
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $p19 := kmemdup($p1, $i18, 208);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} kfree($p30);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p19);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i33, $i35);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i18);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i41, $i43);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i49 == 1);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i53 == 1);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 6);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb22:
    assume $i81 == 1;
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} mutex_unlock($p83);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i59, $i61);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i66 := $shl.i32($i65, 1);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 2);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i73, $i75);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i76);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb15;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} mutex_lock_nested($p28, 0);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 12);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64($i2, 1);
    call {:si_unique_call 1149} {:cexpr "len"} boogie_si_record_i64($i17);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;
}



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 638900);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} {:cexpr "kmemdup:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1155} {:cexpr "kmemdup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $p3 := external_alloc();
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const gadget_config_attr_release: ref;

axiom gadget_config_attr_release == $sub.ref(0, 639932);

procedure gadget_config_attr_release($p0: ref);
  free requires assertsPassed;



implementation gadget_config_attr_release($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_84: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $p1 := to_config_usb_cfg($p0);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(72, 1));
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i4 := list_empty($p3);
    call {:si_unique_call 1159} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 1160} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1162} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} vslice_dummy_var_84 := ldv__builtin_expect($i14, 0);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(56, 1));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} list_del($p17);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} kfree($p20);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} kfree($p21);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} warn_slowpath_null(.str.73, 364);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const config_usb_cfg_attr_show: ref;

axiom config_usb_cfg_attr_show == $sub.ref(0, 640964);

procedure config_usb_cfg_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation config_usb_cfg_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $p3 := to_config_usb_cfg($p0);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1169} $i11 := devirtbounce.39($p10, $p3, $p2);
    call {:si_unique_call 1170} {:cexpr "ret"} boogie_si_record_i64($i11);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const config_usb_cfg_attr_store: ref;

axiom config_usb_cfg_attr_store == $sub.ref(0, 641996);

procedure config_usb_cfg_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation config_usb_cfg_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} {:cexpr "config_usb_cfg_attr_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p4 := to_config_usb_cfg($p0);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 1173} $i12 := devirtbounce.40($p11, $p4, $p2, $i3);
    call {:si_unique_call 1174} {:cexpr "ret"} boogie_si_record_i64($i12);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const config_usb_cfg_link: ref;

axiom config_usb_cfg_link == $sub.ref(0, 643028);

procedure config_usb_cfg_link($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, assertsPassed, $CurrAddr;



implementation config_usb_cfg_link($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p22: ref;
  var $p36: ref;
  var $p21: ref;
  var $p27: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p51: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i1;
  var $i68: i8;
  var $i69: i1;
  var $p70: ref;
  var $i71: i64;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i40: i32;
  var $p75: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p2 := to_config_usb_cfg($p0);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(48, 1));
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p8 := to_config_group($p1);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 1096), 1336)), $mul.ref(600, 1));
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} mutex_lock_nested($p10, 0);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p6, $mul.ref($sub.ref(0, 1096), 1336)), $mul.ref(800, 1)), $mul.ref(0, 1));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(112, 1));
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 1096), 1336)), $mul.ref(800, 1));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i17, $i19);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $p21 := $p15;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $p21;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p27);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p9);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i37, $i38);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p44, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(480, 1));
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i47, $i49);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p65 := usb_get_function($p9);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i67 := IS_ERR($p66);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i8($i67);
    call {:si_unique_call 1181} {:cexpr "tmp___2"} boogie_si_record_i8($i68);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p65, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(480, 1));
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} list_add_tail($p73, $p74);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 1096), 1336)), $mul.ref(600, 1));
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} mutex_unlock($p75);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb28:
    assume $i69 == 1;
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p65);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i71 := PTR_ERR($p70);
    call {:si_unique_call 1183} {:cexpr "tmp___1"} boogie_si_record_i64($i71);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i64.i32($i71);
    call {:si_unique_call 1184} {:cexpr "ret"} boogie_si_record_i32($i72);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i40 := $i72;
    goto $bb15;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i50 == 1;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $p51 := $p45;
    goto $bb20;

  $bb20:
    call $p52, $p53, $i54, $i55, $i56, $p58, $p59, $p60, $p61, $p62, $i63, $i64, $p51 := config_usb_cfg_link_loop_$bb20($p9, $i49, $p52, $p53, $i54, $i55, $i56, $p58, $p59, $p60, $p61, $p62, $i63, $i64, $p51);
    goto $bb20_last;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p9);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i54, $i55);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p60, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, $i49);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb25:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $p51 := $p61;
    goto $bb25_dummy;

  $bb22:
    assume $i56 == 1;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 17);
    goto $bb15;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb15;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $p22 := $p15;
    goto $bb4;

  $bb4:
    call $i23, $i24, $i25, $p26, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p22, $p36 := config_usb_cfg_link_loop_$bb4($p9, $i19, $i23, $i24, $i25, $p26, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p22, $p36);
    goto $bb4_last;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p9);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i23, $i24);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p26 := $p22;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 152)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p31, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(112, 1));
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, $i19);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p36 := $p32;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p21 := $p36;
    goto $bb3;

  $bb10:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p22 := $p32;
    goto $bb10_dummy;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $p27 := $p26;
    goto $bb8;

  $bb25_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8974;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8933;
}



const config_usb_cfg_unlink: ref;

axiom config_usb_cfg_unlink == $sub.ref(0, 644060);

procedure config_usb_cfg_unlink($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation config_usb_cfg_unlink($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p40: ref;
  var $p57: ref;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $i63: i1;
  var $i64: i32;
  var $i65: i64;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i64;
  var vslice_dummy_var_87: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p2 := to_config_usb_cfg($p0);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(48, 1));
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.38, $p4);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 1096), 1336));
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $p8 := to_config_group($p1);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 1096), 1336)), $mul.ref(600, 1));
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} mutex_lock_nested($p10, 0);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 1096), 1336)), $mul.ref(816, 1));
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 1096), 1336)), $mul.ref(816, 1));
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 1190} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i20);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1192} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} vslice_dummy_var_86 := ldv__builtin_expect($i28, 0);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.38, $p31);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(480, 1));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i36, $i38);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 1096), 1336)), $mul.ref(600, 1));
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} mutex_unlock($p57);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32(1, 0);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 1200} {:cexpr "tmp___2"} boogie_si_record_i64($i61);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32(1, 0);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} vslice_dummy_var_87 := ldv__builtin_expect($i65, 0);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb19:
    assume $i62 == 1;
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} warn_slowpath_fmt.ref.i32.ref(.str.73, 454, .str.74);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $p40 := $p34;
    goto $bb10;

  $bb10:
    call $p41, $p42, $i43, $i44, $i45, $p46, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $p40 := config_usb_cfg_unlink_loop_$bb10($p9, $i38, $p41, $p42, $i43, $i44, $i45, $p46, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $p40);
    goto $bb10_last;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p9);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i43, $i44);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p46 := $p40;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p52, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, $i38);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i56 == 1);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $p40 := $p53;
    goto $bb16_dummy;

  $bb12:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} list_del($p47);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} usb_put_function($p46);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 1096), 1336)), $mul.ref(600, 1));
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} mutex_unlock($p48);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} warn_slowpath_null(.str.73, 443);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} vslice_dummy_var_85 := unregister_gadget($p7);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9057;
}



const to_config_usb_cfg: ref;

axiom to_config_usb_cfg == $sub.ref(0, 645092);

procedure to_config_usb_cfg($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_config_usb_cfg($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $p1 := to_config_group($p0);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const gadget_config_desc_MaxPower_show: ref;

axiom gadget_config_desc_MaxPower_show == $sub.ref(0, 646124);

procedure gadget_config_desc_MaxPower_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_config_desc_MaxPower_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(44, 1));
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i6 := sprintf.ref.ref.i32($p1, .str.95, $i5);
    call {:si_unique_call 1205} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const gadget_config_desc_MaxPower_store: ref;

axiom gadget_config_desc_MaxPower_store == $sub.ref(0, 647156);

procedure gadget_config_desc_MaxPower_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_config_desc_MaxPower_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i16;
  var $p14: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1207} {:cexpr "gadget_config_desc_MaxPower_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i4 := kstrtou16($p1, 0, $p3);
    call {:si_unique_call 1209} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.36, $p3);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 2047);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.36, $p3);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(44, 1));
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i12);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 34);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadget_config_desc_bmAttributes_show: ref;

axiom gadget_config_desc_bmAttributes_show == $sub.ref(0, 648188);

procedure gadget_config_desc_bmAttributes_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gadget_config_desc_bmAttributes_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(42, 1));
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $i6 := sprintf.ref.ref.i32($p1, .str.71, $i5);
    call {:si_unique_call 1211} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const gadget_config_desc_bmAttributes_store: ref;

axiom gadget_config_desc_bmAttributes_store == $sub.ref(0, 649220);

procedure gadget_config_desc_bmAttributes_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_config_desc_bmAttributes_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i8;
  var $p17: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1213} {:cexpr "gadget_config_desc_bmAttributes_store:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i4 := kstrtou8($p1, 0, $p3);
    call {:si_unique_call 1215} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.33, $p3);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i9, 0);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.33, $p3);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, $sub.i32(0, 225));
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.33, $p3);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(42, 1));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i15);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 22);
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const gadget_config_name_strings_make: ref;

axiom gadget_config_name_strings_make == $sub.ref(0, 650252);

procedure gadget_config_name_strings_make($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gadget_config_name_strings_make($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i27: i32;
  var $p28: ref;
  var $i47: i32;
  var $i26: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i12: i32;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $p2 := kzalloc(168, 208);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i10 := check_user_usb_string($p1, $p9);
    call {:si_unique_call 1219} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} config_group_init_type_name($p13, $p1, gadget_config_name_langid_type);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p14, $mul.ref($sub.ref(0, 112), 520)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($sub.ref(0, 152), 168));
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 152), 168)), $mul.ref(152, 1));
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 112), 520)), $mul.ref(240, 1));
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i22, $i24);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i26 := 0;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i26, 1);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(152, 1));
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 112), 520)), $mul.ref(240, 1));
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} list_add_tail($p49, $p50);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $p8 := $p51;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 75);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p3);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} kfree($p52);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i12);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $p54 := ERR_PTR($i53);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p8 := $p54;
    goto $bb3;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i27, $p28 := 0, $p20;
    goto $bb12;

  $bb12:
    call $p30, $i31, $i32, $p34, $i35, $i36, $i37, $i38, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $i27, $p28, $i47 := gadget_config_name_strings_make_loop_$bb12($p3, $i24, $p30, $i31, $i32, $p34, $i35, $i36, $i37, $i38, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $i27, $p28, $i47);
    goto $bb12_last;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.39, $p30);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i32, $i36);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i27, 1);
    call {:si_unique_call 1223} {:cexpr "langs"} boogie_si_record_i32($i38);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 168)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.40, $p40);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref($sub.ref(0, 152), 168));
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref($sub.ref(0, 152), 168)), $mul.ref(152, 1));
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, $i24);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $i47 := $i38;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i26 := $i47;
    goto $bb11;

  $bb17:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i27, $p28 := $i38, $p43;
    goto $bb17_dummy;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 17);
    goto $bb7;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $p6 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9203;
}



const gadget_config_name_strings_drop: ref;

axiom gadget_config_name_strings_drop == $sub.ref(0, 651284);

procedure gadget_config_name_strings_drop($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation gadget_config_name_strings_drop($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} config_item_put($p1);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 652316);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $p1 := calloc(1, $i0);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1228} __VERIFIER_assume($i4);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 653348);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1230} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.41;
    call {:si_unique_call 1231} cmdloc_dummy_var_53 := $memset.i8(cmdloc_dummy_var_52, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.41 := cmdloc_dummy_var_53;
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_usb_gadget_driver_37: ref;

axiom ldv_initialize_usb_gadget_driver_37 == $sub.ref(0, 654380);

procedure ldv_initialize_usb_gadget_driver_37();
  free requires assertsPassed;
  modifies $M.42, $M.0, $CurrAddr;



implementation ldv_initialize_usb_gadget_driver_37()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $p0 := ldv_init_zalloc(1576);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $M.42 := $p0;
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_38: ref;

axiom ldv_main_exported_38 == $sub.ref(0, 655412);

procedure ldv_main_exported_38();
  free requires assertsPassed;
  modifies $M.43, $M.0, $CurrAddr;



implementation ldv_main_exported_38()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_88: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $p2 := ldv_init_zalloc(48);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1236} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1237} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1238} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} ldv_stop();
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i7 := $M.43;
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} vslice_dummy_var_88 := suspended_show($p1, $p3, $p4);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1240} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(1);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 656444);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_37: ref;

axiom ldv_main_exported_37 == $sub.ref(0, 657476);

procedure ldv_main_exported_37();
  free requires assertsPassed;
  modifies $M.44, $M.45, $M.0, $M.46, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.47, $M.29, $CurrAddr, assertsPassed;



implementation ldv_main_exported_37()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p0 := ldv_init_zalloc(8);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p2 := ldv_init_zalloc(192);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1244} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1245} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1246} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} ldv_stop();
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i53 := $M.44;
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 4);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb56:
    assume $i54 == 1;
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p55 := $M.42;
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} composite_resume($p55);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(3);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i47 := $M.44;
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb50:
    assume $i48 == 1;
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $p49 := $M.42;
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $i50 := composite_setup($p49, $p1);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $M.47 := $i50;
    call {:si_unique_call 1269} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i50);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i51 := $M.47;
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i52 == 1;
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(3);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i44 := $M.44;
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 3);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb47:
    assume $i45 == 1;
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $p46 := $M.42;
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} composite_suspend($p46);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $M.44 := 4;
    call {:si_unique_call 1267} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(4);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i32 := $M.44;
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 4);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i35 := $M.44;
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 1);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i38 := $M.44;
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 3);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i41 := $M.44;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 2);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb44:
    assume $i42 == 1;
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $p43 := $M.42;
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} composite_disconnect($p43);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1265} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(2);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i39 == 1;
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p40 := $M.42;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} composite_disconnect($p40);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1263} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(3);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i36 == 1;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p37 := $M.42;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} composite_disconnect($p37);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1261} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(1);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i33 == 1;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p34 := $M.42;
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} composite_disconnect($p34);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $M.44 := 4;
    call {:si_unique_call 1259} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(4);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i11 == 1);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i24 := $M.44;
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29:
    assume $i25 == 1;
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $p26 := $M.42;
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i27 := composite_bind($p26, $p3);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $M.46 := $i27;
    call {:si_unique_call 1255} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i27);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $i28 := $M.46;
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i29 == 1;
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1256} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(2);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $i30 := $M.45;
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 1);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $M.45 := $i31;
    call {:si_unique_call 1257} {:cexpr "ref_cnt"} boogie_si_record_i32($i31);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i11 == 1;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i19 := $M.44;
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26:
    assume $i20 == 1;
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $p21 := $M.42;
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} composite_unbind($p21);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1252} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(1);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $i22 := $M.45;
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i22, 1);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $M.45 := $i23;
    call {:si_unique_call 1253} {:cexpr "ref_cnt"} boogie_si_record_i32($i23);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb17:
    assume $i12 == 1;
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i13 := $M.44;
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 4);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i16 := $M.44;
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 3);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i17 == 1;
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p18 := $M.42;
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} composite_disconnect($p18);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1250} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(2);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i14 == 1;
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p15 := $M.42;
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} composite_disconnect($p15);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1248} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(2);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const ldv_initialize_gadget_info_attribute_29: ref;

axiom ldv_initialize_gadget_info_attribute_29 == $sub.ref(0, 658508);

procedure ldv_initialize_gadget_info_attribute_29();
  free requires assertsPassed;
  modifies $M.48, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_info_attribute_29()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p0 := ldv_init_zalloc(1336);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $M.48 := $p0;
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_os_desc_ext_prop_attribute_9: ref;

axiom ldv_initialize_usb_os_desc_ext_prop_attribute_9 == $sub.ref(0, 659540);

procedure ldv_initialize_usb_os_desc_ext_prop_attribute_9();
  free requires assertsPassed;
  modifies $M.49, $M.0, $CurrAddr;



implementation ldv_initialize_usb_os_desc_ext_prop_attribute_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p0 := ldv_init_zalloc(128);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $M.49 := $p0;
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_config_name_attribute_22: ref;

axiom ldv_initialize_gadget_config_name_attribute_22 == $sub.ref(0, 660572);

procedure ldv_initialize_gadget_config_name_attribute_22();
  free requires assertsPassed;
  modifies $M.50, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_config_name_attribute_22()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p0 := ldv_init_zalloc(168);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_info_attribute_34: ref;

axiom ldv_initialize_gadget_info_attribute_34 == $sub.ref(0, 661604);

procedure ldv_initialize_gadget_info_attribute_34();
  free requires assertsPassed;
  modifies $M.51, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_info_attribute_34()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p0 := ldv_init_zalloc(1336);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $M.51 := $p0;
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_info_attribute_36: ref;

axiom ldv_initialize_gadget_info_attribute_36 == $sub.ref(0, 662636);

procedure ldv_initialize_gadget_info_attribute_36();
  free requires assertsPassed;
  modifies $M.52, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_info_attribute_36()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p0 := ldv_init_zalloc(1336);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $M.52 := $p0;
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_item_operations_26: ref;

axiom ldv_initialize_configfs_item_operations_26 == $sub.ref(0, 663668);

procedure ldv_initialize_configfs_item_operations_26();
  free requires assertsPassed;
  modifies $M.53, $M.54, $M.55, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_item_operations_26()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p0 := ldv_init_zalloc(80);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $M.53 := $p0;
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $p2 := ldv_init_zalloc(24);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $M.54 := $p2;
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $p4 := ldv_init_zalloc(80);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $M.55 := $p4;
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_info_attribute_30: ref;

axiom ldv_initialize_gadget_info_attribute_30 == $sub.ref(0, 664700);

procedure ldv_initialize_gadget_info_attribute_30();
  free requires assertsPassed;
  modifies $M.56, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_info_attribute_30()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $p0 := ldv_init_zalloc(1336);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $M.56 := $p0;
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_group_operations_20: ref;

axiom ldv_initialize_configfs_group_operations_20 == $sub.ref(0, 665732);

procedure ldv_initialize_configfs_group_operations_20();
  free requires assertsPassed;
  modifies $M.57, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_group_operations_20()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $p0 := ldv_init_zalloc(112);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $M.57 := $p0;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_config_usb_cfg_attribute_24: ref;

axiom ldv_initialize_config_usb_cfg_attribute_24 == $sub.ref(0, 666764);

procedure ldv_initialize_config_usb_cfg_attribute_24();
  free requires assertsPassed;
  modifies $M.58, $M.0, $CurrAddr;



implementation ldv_initialize_config_usb_cfg_attribute_24()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p0 := ldv_init_zalloc(520);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $M.58 := $p0;
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_item_operations_27: ref;

axiom ldv_initialize_configfs_item_operations_27 == $sub.ref(0, 667796);

procedure ldv_initialize_configfs_item_operations_27();
  free requires assertsPassed;
  modifies $M.59, $M.60, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_item_operations_27()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p0 := ldv_init_zalloc(24);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $M.59 := $p0;
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p2 := ldv_init_zalloc(80);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $M.60 := $p2;
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_os_desc_attribute_4: ref;

axiom ldv_initialize_usb_os_desc_attribute_4 == $sub.ref(0, 668828);

procedure ldv_initialize_usb_os_desc_attribute_4();
  free requires assertsPassed;
  modifies $M.61, $M.0, $CurrAddr;



implementation ldv_initialize_usb_os_desc_attribute_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $M.61 := $p0;
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_group_operations_19: ref;

axiom ldv_initialize_configfs_group_operations_19 == $sub.ref(0, 669860);

procedure ldv_initialize_configfs_group_operations_19();
  free requires assertsPassed;
  modifies $M.62, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_group_operations_19()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $p0 := ldv_init_zalloc(112);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $M.62 := $p0;
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_item_operations_5: ref;

axiom ldv_initialize_configfs_item_operations_5 == $sub.ref(0, 670892);

procedure ldv_initialize_configfs_item_operations_5();
  free requires assertsPassed;
  modifies $M.63, $M.64, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_item_operations_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p0 := ldv_init_zalloc(24);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $M.63 := $p0;
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p2 := ldv_init_zalloc(80);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $M.64 := $p2;
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_item_operations_15: ref;

axiom ldv_initialize_configfs_item_operations_15 == $sub.ref(0, 671924);

procedure ldv_initialize_configfs_item_operations_15();
  free requires assertsPassed;
  modifies $M.65, $M.66, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_item_operations_15()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $p0 := ldv_init_zalloc(24);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $M.65 := $p0;
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p2 := ldv_init_zalloc(80);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $M.66 := $p2;
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_item_operations_7: ref;

axiom ldv_initialize_configfs_item_operations_7 == $sub.ref(0, 672956);

procedure ldv_initialize_configfs_item_operations_7();
  free requires assertsPassed;
  modifies $M.67, $M.68, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_item_operations_7()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $p0 := ldv_init_zalloc(24);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $M.67 := $p0;
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $p2 := ldv_init_zalloc(80);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $M.68 := $p2;
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_info_attribute_28: ref;

axiom ldv_initialize_gadget_info_attribute_28 == $sub.ref(0, 673988);

procedure ldv_initialize_gadget_info_attribute_28();
  free requires assertsPassed;
  modifies $M.69, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_info_attribute_28()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} $p0 := ldv_init_zalloc(1336);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $M.69 := $p0;
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_strings_attribute_16: ref;

axiom ldv_initialize_gadget_strings_attribute_16 == $sub.ref(0, 675020);

procedure ldv_initialize_gadget_strings_attribute_16();
  free requires assertsPassed;
  modifies $M.70, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_strings_attribute_16()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p0 := ldv_init_zalloc(216);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $M.70 := $p0;
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_strings_attribute_17: ref;

axiom ldv_initialize_gadget_strings_attribute_17 == $sub.ref(0, 676052);

procedure ldv_initialize_gadget_strings_attribute_17();
  free requires assertsPassed;
  modifies $M.71, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_strings_attribute_17()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $p0 := ldv_init_zalloc(216);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $M.71 := $p0;
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_info_attribute_32: ref;

axiom ldv_initialize_gadget_info_attribute_32 == $sub.ref(0, 677084);

procedure ldv_initialize_gadget_info_attribute_32();
  free requires assertsPassed;
  modifies $M.72, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_info_attribute_32()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $p0 := ldv_init_zalloc(1336);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $M.72 := $p0;
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_gadget_driver_2: ref;

axiom ldv_initialize_usb_gadget_driver_2 == $sub.ref(0, 678116);

procedure ldv_initialize_usb_gadget_driver_2();
  free requires assertsPassed;
  modifies $M.73, $M.0, $CurrAddr;



implementation ldv_initialize_usb_gadget_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $p0 := ldv_init_zalloc(1576);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $M.73 := $p0;
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_group_operations_6: ref;

axiom ldv_initialize_configfs_group_operations_6 == $sub.ref(0, 679148);

procedure ldv_initialize_configfs_group_operations_6();
  free requires assertsPassed;
  modifies $M.74, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_group_operations_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p0 := ldv_init_zalloc(112);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $M.74 := $p0;
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_item_operations_10: ref;

axiom ldv_initialize_configfs_item_operations_10 == $sub.ref(0, 680180);

procedure ldv_initialize_configfs_item_operations_10();
  free requires assertsPassed;
  modifies $M.75, $M.76, $M.77, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_item_operations_10()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $p0 := ldv_init_zalloc(80);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $M.75 := $p0;
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $p2 := ldv_init_zalloc(24);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $M.76 := $p2;
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p4 := ldv_init_zalloc(80);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $M.77 := $p4;
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_os_desc_attribute_12: ref;

axiom ldv_initialize_os_desc_attribute_12 == $sub.ref(0, 681212);

procedure ldv_initialize_os_desc_attribute_12();
  free requires assertsPassed;
  modifies $M.78, $M.0, $CurrAddr;



implementation ldv_initialize_os_desc_attribute_12()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $p0 := ldv_init_zalloc(112);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $M.78 := $p0;
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_os_desc_attribute_11: ref;

axiom ldv_initialize_os_desc_attribute_11 == $sub.ref(0, 682244);

procedure ldv_initialize_os_desc_attribute_11();
  free requires assertsPassed;
  modifies $M.79, $M.0, $CurrAddr;



implementation ldv_initialize_os_desc_attribute_11()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p0 := ldv_init_zalloc(112);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $M.79 := $p0;
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_os_desc_ext_prop_attribute_8: ref;

axiom ldv_initialize_usb_os_desc_ext_prop_attribute_8 == $sub.ref(0, 683276);

procedure ldv_initialize_usb_os_desc_ext_prop_attribute_8();
  free requires assertsPassed;
  modifies $M.80, $M.0, $CurrAddr;



implementation ldv_initialize_usb_os_desc_ext_prop_attribute_8()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p0 := ldv_init_zalloc(128);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $M.80 := $p0;
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_group_operations_23: ref;

axiom ldv_initialize_configfs_group_operations_23 == $sub.ref(0, 684308);

procedure ldv_initialize_configfs_group_operations_23();
  free requires assertsPassed;
  modifies $M.81, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_group_operations_23()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p0 := ldv_init_zalloc(112);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $M.81 := $p0;
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_group_operations_1: ref;

axiom ldv_initialize_configfs_group_operations_1 == $sub.ref(0, 685340);

procedure ldv_initialize_configfs_group_operations_1();
  free requires assertsPassed;
  modifies $M.82, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_group_operations_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p0 := ldv_init_zalloc(112);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $M.82 := $p0;
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_config_usb_cfg_attribute_25: ref;

axiom ldv_initialize_config_usb_cfg_attribute_25 == $sub.ref(0, 686372);

procedure ldv_initialize_config_usb_cfg_attribute_25();
  free requires assertsPassed;
  modifies $M.83, $M.0, $CurrAddr;



implementation ldv_initialize_config_usb_cfg_attribute_25()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p0 := ldv_init_zalloc(520);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $M.83 := $p0;
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_os_desc_attribute_3: ref;

axiom ldv_initialize_usb_os_desc_attribute_3 == $sub.ref(0, 687404);

procedure ldv_initialize_usb_os_desc_attribute_3();
  free requires assertsPassed;
  modifies $M.84, $M.0, $CurrAddr;



implementation ldv_initialize_usb_os_desc_attribute_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $M.84 := $p0;
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_info_attribute_33: ref;

axiom ldv_initialize_gadget_info_attribute_33 == $sub.ref(0, 688436);

procedure ldv_initialize_gadget_info_attribute_33();
  free requires assertsPassed;
  modifies $M.85, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_info_attribute_33()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $p0 := ldv_init_zalloc(1336);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $M.85 := $p0;
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_os_desc_attribute_13: ref;

axiom ldv_initialize_os_desc_attribute_13 == $sub.ref(0, 689468);

procedure ldv_initialize_os_desc_attribute_13();
  free requires assertsPassed;
  modifies $M.86, $M.0, $CurrAddr;



implementation ldv_initialize_os_desc_attribute_13()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $p0 := ldv_init_zalloc(112);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $M.86 := $p0;
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_item_operations_21: ref;

axiom ldv_initialize_configfs_item_operations_21 == $sub.ref(0, 690500);

procedure ldv_initialize_configfs_item_operations_21();
  free requires assertsPassed;
  modifies $M.87, $M.88, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_item_operations_21()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $p0 := ldv_init_zalloc(24);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $M.87 := $p0;
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p2 := ldv_init_zalloc(80);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $M.88 := $p2;
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_strings_attribute_18: ref;

axiom ldv_initialize_gadget_strings_attribute_18 == $sub.ref(0, 691532);

procedure ldv_initialize_gadget_strings_attribute_18();
  free requires assertsPassed;
  modifies $M.89, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_strings_attribute_18()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $p0 := ldv_init_zalloc(216);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $M.89 := $p0;
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_info_attribute_35: ref;

axiom ldv_initialize_gadget_info_attribute_35 == $sub.ref(0, 692564);

procedure ldv_initialize_gadget_info_attribute_35();
  free requires assertsPassed;
  modifies $M.90, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_info_attribute_35()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $p0 := ldv_init_zalloc(1336);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $M.90 := $p0;
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_configfs_group_operations_14: ref;

axiom ldv_initialize_configfs_group_operations_14 == $sub.ref(0, 693596);

procedure ldv_initialize_configfs_group_operations_14();
  free requires assertsPassed;
  modifies $M.91, $M.0, $CurrAddr;



implementation ldv_initialize_configfs_group_operations_14()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $p0 := ldv_init_zalloc(112);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $M.91 := $p0;
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_gadget_info_attribute_31: ref;

axiom ldv_initialize_gadget_info_attribute_31 == $sub.ref(0, 694628);

procedure ldv_initialize_gadget_info_attribute_31();
  free requires assertsPassed;
  modifies $M.92, $M.0, $CurrAddr;



implementation ldv_initialize_gadget_info_attribute_31()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p0 := ldv_init_zalloc(1336);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $M.92 := $p0;
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 695660);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.45, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.43, $M.125, $M.126, $M.127, $M.44, $M.128, $M.129, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.130, $M.131, $M.132, $M.63, $M.64, $M.62, $M.42, $M.51, $M.61, $M.80, $M.65, $M.66, $M.78, $M.49, $M.84, $M.52, $M.74, $M.48, $M.81, $M.86, $M.50, $M.79, $M.90, $M.92, $M.75, $M.76, $M.77, $M.58, $M.91, $M.57, $M.69, $M.83, $M.59, $M.60, $M.70, $M.56, $M.89, $M.82, $M.73, $M.71, $M.53, $M.54, $M.55, $M.67, $M.68, $M.87, $M.88, $M.72, $M.85, $M.46, $M.47, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.29, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $CurrAddr, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $i167: i32;
  var $i168: i1;
  var $i169: i1;
  var $i170: i1;
  var $i171: i1;
  var $i172: i1;
  var $i173: i1;
  var $i174: i1;
  var $i175: i1;
  var $i176: i1;
  var $i177: i1;
  var $i178: i1;
  var $i179: i1;
  var $i180: i1;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i1;
  var $i185: i1;
  var $i186: i1;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $i190: i1;
  var $i191: i1;
  var $i192: i1;
  var $i193: i1;
  var $i194: i1;
  var $i195: i1;
  var $i196: i1;
  var $i197: i1;
  var $i198: i1;
  var $i199: i1;
  var $i200: i1;
  var $i201: i1;
  var $i202: i1;
  var $i203: i1;
  var $i204: i1;
  var $i205: i1;
  var $i206: i1;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i1;
  var $i212: i1;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i64;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i1;
  var $i227: i1;
  var $i228: i1;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i232: i64;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i238: i32;
  var $i239: i1;
  var $i240: i32;
  var $i241: i1;
  var $i242: i1;
  var $i243: i1;
  var $i244: i1;
  var $i245: i1;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $p249: ref;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i259: i32;
  var $i260: i32;
  var $i261: i32;
  var $i262: i1;
  var $p263: ref;
  var $p264: ref;
  var $i265: i64;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $i271: i64;
  var $i273: i32;
  var $i274: i1;
  var $i276: i32;
  var $i277: i32;
  var $i278: i32;
  var $i279: i1;
  var $i280: i32;
  var $i281: i1;
  var $i282: i1;
  var $i283: i1;
  var $i284: i1;
  var $i285: i1;
  var $i286: i32;
  var $i287: i1;
  var $p288: ref;
  var $p289: ref;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $p294: ref;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $i299: i32;
  var $i300: i32;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $i305: i64;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $p310: ref;
  var $i311: i64;
  var $i313: i32;
  var $i314: i1;
  var $i316: i32;
  var $i317: i32;
  var $i318: i32;
  var $i319: i1;
  var $i320: i32;
  var $i321: i1;
  var $i322: i1;
  var $i323: i1;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i1;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $p331: ref;
  var $i333: i32;
  var $i334: i1;
  var $p335: ref;
  var $p336: ref;
  var $i338: i32;
  var $i339: i1;
  var $p340: ref;
  var $i341: i32;
  var $i342: i32;
  var $i343: i32;
  var $i344: i1;
  var $p345: ref;
  var $p346: ref;
  var $i348: i32;
  var $i349: i1;
  var $p350: ref;
  var $p351: ref;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $p356: ref;
  var $i357: i64;
  var $i359: i32;
  var $i360: i1;
  var $p361: ref;
  var $p362: ref;
  var $i363: i64;
  var $i365: i32;
  var $i366: i1;
  var $p367: ref;
  var $p368: ref;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $p373: ref;
  var $i375: i32;
  var $i376: i1;
  var $i378: i32;
  var $i379: i32;
  var $i380: i32;
  var $i381: i1;
  var $i382: i32;
  var $i383: i1;
  var $i384: i1;
  var $i385: i1;
  var $i386: i32;
  var $i387: i1;
  var $p388: ref;
  var $i389: i64;
  var $i391: i32;
  var $i392: i1;
  var $p393: ref;
  var $i395: i32;
  var $i396: i1;
  var $i397: i32;
  var $i398: i1;
  var $i399: i1;
  var $i400: i1;
  var $i401: i1;
  var $i402: i1;
  var $i403: i1;
  var $i404: i1;
  var $i405: i1;
  var $i406: i32;
  var $i407: i1;
  var $p408: ref;
  var $i409: i32;
  var $i410: i1;
  var $p411: ref;
  var $i412: i32;
  var $i413: i1;
  var $p414: ref;
  var $i415: i32;
  var $i416: i32;
  var $i417: i32;
  var $i418: i1;
  var $p419: ref;
  var $i420: i32;
  var $i421: i32;
  var $i422: i1;
  var $i423: i32;
  var $i424: i32;
  var $i425: i32;
  var $i426: i1;
  var $p427: ref;
  var $i428: i32;
  var $i429: i1;
  var $p430: ref;
  var $i431: i32;
  var $i432: i1;
  var $p433: ref;
  var $i434: i32;
  var $i435: i1;
  var $p436: ref;
  var $i437: i32;
  var $i438: i1;
  var $p439: ref;
  var $i440: i32;
  var $i441: i1;
  var $p442: ref;
  var $i443: i32;
  var $i444: i32;
  var $i445: i1;
  var $i446: i32;
  var $i447: i1;
  var $p448: ref;
  var $i449: i32;
  var $i450: i1;
  var $i451: i32;
  var $i452: i1;
  var $i453: i1;
  var $i454: i1;
  var $i455: i32;
  var $i456: i1;
  var $p457: ref;
  var $i458: i32;
  var $i459: i1;
  var $p460: ref;
  var $i462: i32;
  var $i463: i1;
  var $i464: i32;
  var $i465: i1;
  var $i466: i1;
  var $i467: i1;
  var $i468: i32;
  var $i469: i1;
  var $p470: ref;
  var $i471: i64;
  var $i473: i32;
  var $i474: i1;
  var $p475: ref;
  var $i477: i32;
  var $i478: i1;
  var $i479: i32;
  var $i480: i1;
  var $i481: i1;
  var $i482: i1;
  var $i483: i32;
  var $i484: i1;
  var $p485: ref;
  var $i486: i64;
  var $i488: i32;
  var $i489: i1;
  var $p490: ref;
  var $i492: i32;
  var $i493: i1;
  var $i494: i32;
  var $i495: i1;
  var $i496: i1;
  var $i497: i1;
  var $i498: i32;
  var $i499: i1;
  var $p500: ref;
  var $i501: i64;
  var $i503: i32;
  var $i504: i1;
  var $p505: ref;
  var $i507: i32;
  var $i508: i1;
  var $i509: i32;
  var $i510: i1;
  var $i511: i1;
  var $i512: i1;
  var $i513: i1;
  var $i514: i1;
  var $i515: i32;
  var $i516: i1;
  var $p517: ref;
  var $p518: ref;
  var $i520: i32;
  var $i521: i1;
  var $p522: ref;
  var $p523: ref;
  var $i525: i32;
  var $i526: i1;
  var $p527: ref;
  var $i528: i32;
  var $i529: i32;
  var $i530: i32;
  var $i531: i1;
  var $p532: ref;
  var $p533: ref;
  var $i534: i64;
  var $i536: i32;
  var $i537: i1;
  var $p538: ref;
  var $p539: ref;
  var $i540: i64;
  var $i542: i32;
  var $i543: i1;
  var $i545: i32;
  var $i546: i32;
  var $i547: i32;
  var $i548: i1;
  var $i549: i32;
  var $i550: i1;
  var $i551: i1;
  var $i552: i1;
  var $i553: i32;
  var $i554: i1;
  var $p555: ref;
  var $i556: i64;
  var $i558: i32;
  var $i559: i1;
  var $p560: ref;
  var $i562: i32;
  var $i563: i1;
  var $i564: i32;
  var $i565: i1;
  var $i566: i1;
  var $i567: i1;
  var $i568: i32;
  var $i569: i1;
  var $p570: ref;
  var $i571: i64;
  var $i573: i32;
  var $i574: i1;
  var $p575: ref;
  var $i577: i32;
  var $i578: i1;
  var $i579: i32;
  var $i580: i1;
  var $i581: i1;
  var $i582: i1;
  var $i583: i32;
  var $i584: i1;
  var $p585: ref;
  var $i586: i32;
  var $i587: i1;
  var $p588: ref;
  var $i590: i32;
  var $i591: i1;
  var $i592: i32;
  var $i593: i1;
  var $i594: i1;
  var $i595: i1;
  var $i596: i32;
  var $i597: i1;
  var $p598: ref;
  var $i599: i32;
  var $i600: i1;
  var $p601: ref;
  var $i603: i32;
  var $i604: i1;
  var $i605: i32;
  var $i606: i1;
  var $i607: i1;
  var $i608: i1;
  var $i609: i32;
  var $i610: i1;
  var $p611: ref;
  var $i612: i64;
  var $i614: i32;
  var $i615: i1;
  var $p616: ref;
  var $i618: i32;
  var $i619: i1;
  var $i620: i32;
  var $i621: i1;
  var $i622: i1;
  var $i623: i1;
  var $i624: i1;
  var $i625: i1;
  var $i626: i1;
  var $i627: i1;
  var $i628: i32;
  var $i629: i1;
  var $p630: ref;
  var $p631: ref;
  var $i633: i32;
  var $i634: i1;
  var $p635: ref;
  var $p636: ref;
  var $i638: i32;
  var $i639: i1;
  var $p640: ref;
  var $i641: i32;
  var $i642: i32;
  var $i643: i32;
  var $i644: i1;
  var $p645: ref;
  var $p646: ref;
  var $i648: i32;
  var $i649: i1;
  var $p650: ref;
  var $p651: ref;
  var $i653: i32;
  var $i654: i1;
  var $p655: ref;
  var $p656: ref;
  var $i657: i64;
  var $i659: i32;
  var $i660: i1;
  var $p661: ref;
  var $p662: ref;
  var $i663: i64;
  var $i665: i32;
  var $i666: i1;
  var $p667: ref;
  var $p668: ref;
  var $i670: i32;
  var $i671: i1;
  var $p672: ref;
  var $p673: ref;
  var $i675: i32;
  var $i676: i1;
  var $i678: i32;
  var $i679: i32;
  var $i680: i32;
  var $i681: i1;
  var $i682: i32;
  var $i683: i1;
  var $i684: i1;
  var $i685: i1;
  var $i686: i32;
  var $i687: i1;
  var $p688: ref;
  var $i689: i64;
  var $i691: i32;
  var $i692: i1;
  var $p693: ref;
  var $i695: i32;
  var $i696: i1;
  var $i697: i32;
  var $i698: i1;
  var $i699: i1;
  var $i700: i1;
  var $i701: i32;
  var $i702: i1;
  var $p703: ref;
  var $i704: i64;
  var $i706: i32;
  var $i707: i1;
  var $p708: ref;
  var $i710: i32;
  var $i711: i1;
  var $i712: i32;
  var $i713: i1;
  var $i714: i1;
  var $i715: i1;
  var $i716: i32;
  var $i717: i1;
  var $p718: ref;
  var $i719: i64;
  var $i721: i32;
  var $i722: i1;
  var $p723: ref;
  var $i725: i32;
  var $i726: i1;
  var $i727: i32;
  var $i728: i1;
  var $i729: i1;
  var $i730: i1;
  var $i731: i32;
  var $i732: i1;
  var $p733: ref;
  var $i734: i64;
  var $i736: i32;
  var $i737: i1;
  var $p738: ref;
  var $i740: i32;
  var $i741: i1;
  var $i742: i32;
  var $i743: i1;
  var $i744: i1;
  var $i745: i1;
  var $i746: i32;
  var $i747: i1;
  var $i748: i32;
  var $i749: i1;
  var $i750: i32;
  var $i751: i1;
  var $i752: i32;
  var $i753: i32;
  var $i754: i1;
  var $i755: i32;
  var $i756: i1;
  var $i757: i32;
  var $i758: i1;
  var $i759: i32;
  var $i760: i1;
  var $i761: i1;
  var $i762: i1;
  var $i763: i32;
  var $i764: i1;
  var $p765: ref;
  var $i766: i64;
  var $i768: i32;
  var $i769: i1;
  var $p770: ref;
  var $i772: i32;
  var $i773: i1;
  var $i774: i32;
  var $i775: i1;
  var $i776: i1;
  var $i777: i1;
  var $i778: i32;
  var $i779: i1;
  var $p780: ref;
  var $i781: i32;
  var $i782: i1;
  var $p783: ref;
  var $i785: i32;
  var $i786: i1;
  var $i787: i32;
  var $i788: i1;
  var $i789: i1;
  var $i790: i1;
  var $i791: i32;
  var $i792: i1;
  var $p793: ref;
  var $i794: i64;
  var $i796: i32;
  var $i797: i1;
  var $p798: ref;
  var $i800: i32;
  var $i801: i1;
  var $i802: i32;
  var $i803: i1;
  var $i804: i1;
  var $i805: i1;
  var $i806: i32;
  var $i807: i1;
  var $p808: ref;
  var $i809: i32;
  var $i810: i1;
  var $p811: ref;
  var $i813: i32;
  var $i814: i1;
  var $i815: i32;
  var $i816: i1;
  var $i817: i1;
  var $i818: i1;
  var $i819: i32;
  var $i820: i1;
  var $p821: ref;
  var $i822: i64;
  var $i824: i32;
  var $i825: i1;
  var $p826: ref;
  var $i828: i32;
  var $i829: i1;
  var $i830: i32;
  var $i831: i1;
  var $i832: i1;
  var $i833: i1;
  var $i834: i32;
  var $i835: i1;
  var $p836: ref;
  var $i837: i64;
  var $i839: i32;
  var $i840: i1;
  var $p841: ref;
  var $i843: i32;
  var $i844: i1;
  var $i845: i32;
  var $i846: i1;
  var $i847: i1;
  var $i848: i1;
  var $i849: i32;
  var $i850: i1;
  var $p851: ref;
  var $i852: i64;
  var $i854: i32;
  var $i855: i1;
  var $p856: ref;
  var $i858: i32;
  var $i859: i1;
  var $i860: i32;
  var $i861: i1;
  var $i862: i1;
  var $i863: i1;
  var $i864: i32;
  var $i865: i1;
  var $p866: ref;
  var $i867: i64;
  var $i869: i32;
  var $i870: i1;
  var $p871: ref;
  var $i873: i32;
  var $i874: i1;
  var $i875: i32;
  var $i876: i1;
  var $i877: i1;
  var $i878: i1;
  var $i879: i1;
  var $i880: i1;
  var $i881: i32;
  var $i882: i1;
  var $p883: ref;
  var $p884: ref;
  var $i886: i32;
  var $i887: i1;
  var $p888: ref;
  var $p889: ref;
  var $i891: i32;
  var $i892: i1;
  var $p893: ref;
  var $i894: i32;
  var $i895: i32;
  var $i896: i32;
  var $i897: i1;
  var $p898: ref;
  var $p899: ref;
  var $i900: i64;
  var $i902: i32;
  var $i903: i1;
  var $p904: ref;
  var $p905: ref;
  var $i906: i64;
  var $i908: i32;
  var $i909: i1;
  var $i911: i32;
  var $i912: i32;
  var $i913: i32;
  var $i914: i1;
  var $i915: i32;
  var $i916: i1;
  var $i917: i32;
  var $i918: i1;
  var $i919: i1;
  var $i920: i1;
  var $i921: i32;
  var $i922: i1;
  var $p923: ref;
  var $i924: i64;
  var $i926: i32;
  var $i927: i1;
  var $p928: ref;
  var $i930: i32;
  var $i931: i1;
  var $i932: i32;
  var $i933: i1;
  var $i934: i1;
  var $i935: i1;
  var $i936: i32;
  var $i937: i1;
  var $p938: ref;
  var $i939: i64;
  var $i941: i32;
  var $i942: i1;
  var $p943: ref;
  var $i945: i32;
  var $i946: i1;
  var $i947: i32;
  var $i948: i1;
  var $i949: i1;
  var $i950: i1;
  var $i951: i32;
  var $i952: i1;
  var $p953: ref;
  var $i954: i64;
  var $i956: i32;
  var $i957: i1;
  var $p958: ref;
  var $i960: i32;
  var $i961: i1;
  var $i962: i32;
  var $i963: i1;
  var $i964: i32;
  var $i965: i1;
  var $i966: i1;
  var $i967: i1;
  var $i968: i32;
  var $i969: i1;
  var $p970: ref;
  var $i971: i32;
  var $i972: i1;
  var $p973: ref;
  var $i975: i32;
  var $i976: i1;
  var $i977: i32;
  var $i978: i1;
  var $i979: i1;
  var $i980: i1;
  var $i981: i32;
  var $i982: i1;
  var $p983: ref;
  var $p984: ref;
  var $i986: i32;
  var $i987: i1;
  var $p988: ref;
  var $p989: ref;
  var $i990: i64;
  var vslice_dummy_var_89: ref;
  var vslice_dummy_var_90: ref;
  var vslice_dummy_var_91: ref;
  var vslice_dummy_var_92: ref;
  var vslice_dummy_var_93: ref;
  var vslice_dummy_var_94: ref;
  var vslice_dummy_var_95: ref;
  var vslice_dummy_var_96: ref;
  var vslice_dummy_var_97: ref;
  var vslice_dummy_var_98: ref;
  var vslice_dummy_var_99: ref;
  var vslice_dummy_var_100: ref;
  var vslice_dummy_var_101: ref;
  var vslice_dummy_var_102: ref;
  var vslice_dummy_var_103: ref;
  var vslice_dummy_var_104: ref;
  var vslice_dummy_var_105: ref;
  var vslice_dummy_var_106: ref;
  var vslice_dummy_var_107: ref;
  var vslice_dummy_var_108: ref;
  var vslice_dummy_var_109: ref;
  var vslice_dummy_var_110: ref;
  var vslice_dummy_var_111: ref;
  var vslice_dummy_var_112: ref;
  var vslice_dummy_var_113: ref;
  var vslice_dummy_var_114: ref;
  var vslice_dummy_var_115: ref;
  var vslice_dummy_var_116: ref;
  var vslice_dummy_var_117: ref;
  var vslice_dummy_var_118: i64;
  var vslice_dummy_var_119: i64;
  var vslice_dummy_var_120: i64;
  var vslice_dummy_var_121: i64;
  var vslice_dummy_var_122: i64;
  var vslice_dummy_var_123: i64;
  var vslice_dummy_var_124: i64;
  var vslice_dummy_var_125: i64;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i64;
  var vslice_dummy_var_128: i64;
  var vslice_dummy_var_129: i64;
  var vslice_dummy_var_130: i64;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i64;
  var vslice_dummy_var_133: i64;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i64;
  var vslice_dummy_var_137: i64;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i64;
  var vslice_dummy_var_142: i64;
  var vslice_dummy_var_143: ref;
  var vslice_dummy_var_144: i64;
  var vslice_dummy_var_145: i64;
  var vslice_dummy_var_146: i64;
  var vslice_dummy_var_147: i64;
  var vslice_dummy_var_148: i64;
  var vslice_dummy_var_149: i64;
  var vslice_dummy_var_150: i64;
  var vslice_dummy_var_151: i64;
  var vslice_dummy_var_152: i64;
  var vslice_dummy_var_153: i64;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i64;
  var vslice_dummy_var_156: i64;
  var vslice_dummy_var_157: i64;
  var vslice_dummy_var_158: i64;
  var vslice_dummy_var_159: ref;
  var vslice_dummy_var_160: ref;
  var vslice_dummy_var_161: i64;
  var vslice_dummy_var_162: i64;
  var vslice_dummy_var_163: i64;
  var vslice_dummy_var_164: i64;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i64;
  var vslice_dummy_var_168: i64;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i64;
  var vslice_dummy_var_173: i64;
  var vslice_dummy_var_174: i64;
  var vslice_dummy_var_175: i64;
  var vslice_dummy_var_176: i64;
  var vslice_dummy_var_177: i64;
  var vslice_dummy_var_178: i64;
  var vslice_dummy_var_179: i64;
  var vslice_dummy_var_180: i64;
  var vslice_dummy_var_181: i64;
  var vslice_dummy_var_182: ref;
  var vslice_dummy_var_183: i64;
  var vslice_dummy_var_184: i64;
  var vslice_dummy_var_185: ref;
  var vslice_dummy_var_186: i64;
  var vslice_dummy_var_187: i64;
  var vslice_dummy_var_188: i64;
  var vslice_dummy_var_189: i64;
  var vslice_dummy_var_190: i64;
  var vslice_dummy_var_191: i64;
  var vslice_dummy_var_192: i64;
  var vslice_dummy_var_193: i64;
  var vslice_dummy_var_194: i64;
  var vslice_dummy_var_195: i64;
  var vslice_dummy_var_196: i64;
  var vslice_dummy_var_197: i64;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i64;
  var vslice_dummy_var_200: i64;
  var vslice_dummy_var_201: i64;
  var vslice_dummy_var_202: i64;
  var vslice_dummy_var_203: i64;
  var vslice_dummy_var_204: i64;
  var vslice_dummy_var_205: ref;
  var vslice_dummy_var_206: i64;
  var vslice_dummy_var_207: i64;

  $bb0:
    call {:si_unique_call 1319} $initialize();
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p18 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $p19 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $p20 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $p21 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $p22 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $p23 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $p24 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $p25 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $p26 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $p27 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $p28 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $p29 := ldv_init_zalloc(1);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $p30 := ldv_init_zalloc(1);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $p31 := ldv_init_zalloc(1);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $p32 := ldv_init_zalloc(1);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $p33 := ldv_init_zalloc(1);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $p34 := ldv_init_zalloc(1);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p35 := ldv_init_zalloc(1);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $p36 := ldv_init_zalloc(1);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p37 := ldv_init_zalloc(1);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $p38 := ldv_init_zalloc(1);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $p39 := ldv_init_zalloc(1);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $p40 := ldv_init_zalloc(1);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p41 := ldv_init_zalloc(8);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p43 := ldv_init_zalloc(192);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $p45 := ldv_init_zalloc(80);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $p47 := ldv_init_zalloc(1);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $p48 := ldv_init_zalloc(1);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p49 := ldv_init_zalloc(1);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $p50 := ldv_init_zalloc(1);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p51 := ldv_init_zalloc(1);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $p52 := ldv_init_zalloc(1);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $p53 := ldv_init_zalloc(1);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $p54 := ldv_init_zalloc(1);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $p55 := ldv_init_zalloc(1);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p56 := ldv_init_zalloc(1);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p57 := ldv_init_zalloc(1);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p58 := ldv_init_zalloc(1);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $p59 := ldv_init_zalloc(1);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $p60 := ldv_init_zalloc(80);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $p62 := ldv_init_zalloc(1);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $p63 := ldv_init_zalloc(80);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $p65 := ldv_init_zalloc(1);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $p66 := ldv_init_zalloc(1);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $p67 := ldv_init_zalloc(1);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $p68 := ldv_init_zalloc(1);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p69 := ldv_init_zalloc(1);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p70 := ldv_init_zalloc(1);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p71 := ldv_init_zalloc(1);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $p72 := ldv_init_zalloc(1);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $p73 := ldv_init_zalloc(1);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $p74 := ldv_init_zalloc(1);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $p75 := ldv_init_zalloc(1);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p76 := ldv_init_zalloc(1);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $p77 := ldv_init_zalloc(1);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p78 := ldv_init_zalloc(1);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p79 := ldv_init_zalloc(1);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $p80 := ldv_init_zalloc(1);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $p81 := ldv_init_zalloc(80);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p83 := ldv_init_zalloc(1);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p84 := ldv_init_zalloc(1);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $p85 := ldv_init_zalloc(1);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $p86 := ldv_init_zalloc(80);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $p88 := ldv_init_zalloc(1);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $p89 := ldv_init_zalloc(1);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $p90 := ldv_init_zalloc(1);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $p91 := ldv_init_zalloc(1);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $p92 := ldv_init_zalloc(1);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $p93 := ldv_init_zalloc(1);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $p94 := ldv_init_zalloc(1);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $p95 := ldv_init_zalloc(1);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p96 := ldv_init_zalloc(1);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p97 := ldv_init_zalloc(1);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p98 := ldv_init_zalloc(1);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p99 := ldv_init_zalloc(1);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $p100 := ldv_init_zalloc(1);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p101 := ldv_init_zalloc(1);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p102 := ldv_init_zalloc(1);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p103 := ldv_init_zalloc(1);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $p104 := ldv_init_zalloc(80);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p106 := ldv_init_zalloc(1);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p107 := ldv_init_zalloc(1);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p108 := ldv_init_zalloc(1);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} ldv_initialize();
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p0);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} vslice_dummy_var_89 := ldv_memset($p109, 0, 8);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p1);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} vslice_dummy_var_90 := ldv_memset($p111, 0, 8);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p2);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_91 := ldv_memset($p113, 0, 8);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p3);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} vslice_dummy_var_92 := ldv_memset($p115, 0, 8);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p4);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} vslice_dummy_var_93 := ldv_memset($p117, 0, 8);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p5);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} vslice_dummy_var_94 := ldv_memset($p119, 0, 8);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p6);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} vslice_dummy_var_95 := ldv_memset($p121, 0, 8);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p7);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} vslice_dummy_var_96 := ldv_memset($p123, 0, 8);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p8);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} vslice_dummy_var_97 := ldv_memset($p125, 0, 8);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p9);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} vslice_dummy_var_98 := ldv_memset($p127, 0, 8);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p10);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_99 := ldv_memset($p129, 0, 8);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p11);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} vslice_dummy_var_100 := ldv_memset($p131, 0, 8);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p12);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_101 := ldv_memset($p133, 0, 8);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p13);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} vslice_dummy_var_102 := ldv_memset($p135, 0, 8);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p14);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} vslice_dummy_var_103 := ldv_memset($p137, 0, 8);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p15);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_104 := ldv_memset($p139, 0, 8);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p16);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_105 := ldv_memset($p141, 0, 8);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p17);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} vslice_dummy_var_106 := ldv_memset($p143, 0, 8);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p18);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} vslice_dummy_var_107 := ldv_memset($p145, 0, 8);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p19);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} vslice_dummy_var_108 := ldv_memset($p147, 0, 8);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p20);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} vslice_dummy_var_109 := ldv_memset($p149, 0, 8);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p21);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} vslice_dummy_var_110 := ldv_memset($p151, 0, 8);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p22);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_111 := ldv_memset($p153, 0, 8);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p23);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} vslice_dummy_var_112 := ldv_memset($p155, 0, 8);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p24);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} vslice_dummy_var_113 := ldv_memset($p157, 0, 8);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p25);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} vslice_dummy_var_114 := ldv_memset($p159, 0, 8);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p26);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} vslice_dummy_var_115 := ldv_memset($p161, 0, 8);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p27);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} vslice_dummy_var_116 := ldv_memset($p163, 0, 8);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p28);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_117 := ldv_memset($p165, 0, 8);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $M.93 := 0;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(0);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $M.94 := 0;
    call {:si_unique_call 1453} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(0);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $M.95 := 0;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 1455} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $M.97 := 0;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(0);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $M.98 := 0;
    call {:si_unique_call 1457} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $M.99 := 0;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $M.100 := 0;
    call {:si_unique_call 1459} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $M.101 := 0;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $M.102 := 0;
    call {:si_unique_call 1461} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(0);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $M.103 := 0;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $M.104 := 0;
    call {:si_unique_call 1463} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(0);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $M.105 := 0;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(0);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $M.106 := 0;
    call {:si_unique_call 1465} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(0);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.107 := 0;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $M.108 := 0;
    call {:si_unique_call 1467} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $M.109 := 0;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(0);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $M.110 := 0;
    call {:si_unique_call 1469} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $M.111 := 0;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(0);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $M.112 := 0;
    call {:si_unique_call 1471} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(0);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $M.113 := 0;
    call {:si_unique_call 1472} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.114 := 0;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(0);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $M.45 := 0;
    call {:si_unique_call 1474} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $M.115 := 1;
    call {:si_unique_call 1475} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $M.116 := 0;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.117 := 0;
    call {:si_unique_call 1477} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(0);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $M.118 := 0;
    call {:si_unique_call 1478} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(0);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $M.119 := 0;
    call {:si_unique_call 1479} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $M.120 := 0;
    call {:si_unique_call 1480} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(0);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $M.121 := 0;
    call {:si_unique_call 1481} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $M.122 := 0;
    call {:si_unique_call 1482} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $M.123 := 0;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $M.124 := 0;
    call {:si_unique_call 1484} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(0);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $M.125 := 0;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $M.126 := 0;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $M.127 := 0;
    call {:si_unique_call 1488} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(0);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(0);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $M.128 := 0;
    call {:si_unique_call 1490} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $M.129 := 0;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $p216, $i217, $i219, $i220, $p221, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $p231, $i232, $i234, $i235, $p236, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $p248, $p249, $i251, $i252, $p253, $p254, $i256, $i257, $p258, $i259, $i260, $i261, $i262, $p263, $p264, $i265, $i267, $i268, $p269, $p270, $i271, $i273, $i274, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $p288, $p289, $i291, $i292, $p293, $p294, $i296, $i297, $p298, $i299, $i300, $i301, $i302, $p303, $p304, $i305, $i307, $i308, $p309, $p310, $i311, $i313, $i314, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $p330, $p331, $i333, $i334, $p335, $p336, $i338, $i339, $p340, $i341, $i342, $i343, $i344, $p345, $p346, $i348, $i349, $p350, $p351, $i353, $i354, $p355, $p356, $i357, $i359, $i360, $p361, $p362, $i363, $i365, $i366, $p367, $p368, $i370, $i371, $p372, $p373, $i375, $i376, $i378, $i379, $i380, $i381, $i382, $i383, $i384, $i385, $i386, $i387, $p388, $i389, $i391, $i392, $p393, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $p408, $i409, $i410, $p411, $i412, $i413, $p414, $i415, $i416, $i417, $i418, $p419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $p427, $i428, $i429, $p430, $i431, $i432, $p433, $i434, $i435, $p436, $i437, $i438, $p439, $i440, $i441, $p442, $i443, $i444, $i445, $i446, $i447, $p448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i456, $p457, $i458, $i459, $p460, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $p470, $i471, $i473, $i474, $p475, $i477, $i478, $i479, $i480, $i481, $i482, $i483, $i484, $p485, $i486, $i488, $i489, $p490, $i492, $i493, $i494, $i495, $i496, $i497, $i498, $i499, $p500, $i501, $i503, $i504, $p505, $i507, $i508, $i509, $i510, $i511, $i512, $i513, $i514, $i515, $i516, $p517, $p518, $i520, $i521, $p522, $p523, $i525, $i526, $p527, $i528, $i529, $i530, $i531, $p532, $p533, $i534, $i536, $i537, $p538, $p539, $i540, $i542, $i543, $i545, $i546, $i547, $i548, $i549, $i550, $i551, $i552, $i553, $i554, $p555, $i556, $i558, $i559, $p560, $i562, $i563, $i564, $i565, $i566, $i567, $i568, $i569, $p570, $i571, $i573, $i574, $p575, $i577, $i578, $i579, $i580, $i581, $i582, $i583, $i584, $p585, $i586, $i587, $p588, $i590, $i591, $i592, $i593, $i594, $i595, $i596, $i597, $p598, $i599, $i600, $p601, $i603, $i604, $i605, $i606, $i607, $i608, $i609, $i610, $p611, $i612, $i614, $i615, $p616, $i618, $i619, $i620, $i621, $i622, $i623, $i624, $i625, $i626, $i627, $i628, $i629, $p630, $p631, $i633, $i634, $p635, $p636, $i638, $i639, $p640, $i641, $i642, $i643, $i644, $p645, $p646, $i648, $i649, $p650, $p651, $i653, $i654, $p655, $p656, $i657, $i659, $i660, $p661, $p662, $i663, $i665, $i666, $p667, $p668, $i670, $i671, $p672, $p673, $i675, $i676, $i678, $i679, $i680, $i681, $i682, $i683, $i684, $i685, $i686, $i687, $p688, $i689, $i691, $i692, $p693, $i695, $i696, $i697, $i698, $i699, $i700, $i701, $i702, $p703, $i704, $i706, $i707, $p708, $i710, $i711, $i712, $i713, $i714, $i715, $i716, $i717, $p718, $i719, $i721, $i722, $p723, $i725, $i726, $i727, $i728, $i729, $i730, $i731, $i732, $p733, $i734, $i736, $i737, $p738, $i740, $i741, $i742, $i743, $i744, $i745, $i746, $i747, $i748, $i749, $i750, $i751, $i752, $i753, $i754, $i755, $i756, $i757, $i758, $i759, $i760, $i761, $i762, $i763, $i764, $p765, $i766, $i768, $i769, $p770, $i772, $i773, $i774, $i775, $i776, $i777, $i778, $i779, $p780, $i781, $i782, $p783, $i785, $i786, $i787, $i788, $i789, $i790, $i791, $i792, $p793, $i794, $i796, $i797, $p798, $i800, $i801, $i802, $i803, $i804, $i805, $i806, $i807, $p808, $i809, $i810, $p811, $i813, $i814, $i815, $i816, $i817, $i818, $i819, $i820, $p821, $i822, $i824, $i825, $p826, $i828, $i829, $i830, $i831, $i832, $i833, $i834, $i835, $p836, $i837, $i839, $i840, $p841, $i843, $i844, $i845, $i846, $i847, $i848, $i849, $i850, $p851, $i852, $i854, $i855, $p856, $i858, $i859, $i860, $i861, $i862, $i863, $i864, $i865, $p866, $i867, $i869, $i870, $p871, $i873, $i874, $i875, $i876, $i877, $i878, $i879, $i880, $i881, $i882, $p883, $p884, $i886, $i887, $p888, $p889, $i891, $i892, $p893, $i894, $i895, $i896, $i897, $p898, $p899, $i900, $i902, $i903, $p904, $p905, $i906, $i908, $i909, $i911, $i912, $i913, $i914, $i915, $i916, $i917, $i918, $i919, $i920, $i921, $i922, $p923, $i924, $i926, $i927, $p928, $i930, $i931, $i932, $i933, $i934, $i935, $i936, $i937, $p938, $i939, $i941, $i942, $p943, $i945, $i946, $i947, $i948, $i949, $i950, $i951, $i952, $p953, $i954, $i956, $i957, $p958, $i960, $i961, $i962, $i963, $i964, $i965, $i966, $i967, $i968, $i969, $p970, $i971, $i972, $p973, $i975, $i976, $i977, $i978, $i979, $i980, $i981, $i982, $p983, $p984, $i986, $i987, $p988, $p989, $i990, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192, vslice_dummy_var_193, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196, vslice_dummy_var_197, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $p40, $p42, $p44, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p61, $p62, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p82, $p83, $p84, $p85, $p87, $p88, $p89, $p90, $p91, $p92, $p93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $p102, $p103, $p105, $p106, $p107, $p108, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $p216, $i217, $i219, $i220, $p221, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $p231, $i232, $i234, $i235, $p236, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $p248, $p249, $i251, $i252, $p253, $p254, $i256, $i257, $p258, $i259, $i260, $i261, $i262, $p263, $p264, $i265, $i267, $i268, $p269, $p270, $i271, $i273, $i274, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $p288, $p289, $i291, $i292, $p293, $p294, $i296, $i297, $p298, $i299, $i300, $i301, $i302, $p303, $p304, $i305, $i307, $i308, $p309, $p310, $i311, $i313, $i314, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $p330, $p331, $i333, $i334, $p335, $p336, $i338, $i339, $p340, $i341, $i342, $i343, $i344, $p345, $p346, $i348, $i349, $p350, $p351, $i353, $i354, $p355, $p356, $i357, $i359, $i360, $p361, $p362, $i363, $i365, $i366, $p367, $p368, $i370, $i371, $p372, $p373, $i375, $i376, $i378, $i379, $i380, $i381, $i382, $i383, $i384, $i385, $i386, $i387, $p388, $i389, $i391, $i392, $p393, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $p408, $i409, $i410, $p411, $i412, $i413, $p414, $i415, $i416, $i417, $i418, $p419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $p427, $i428, $i429, $p430, $i431, $i432, $p433, $i434, $i435, $p436, $i437, $i438, $p439, $i440, $i441, $p442, $i443, $i444, $i445, $i446, $i447, $p448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i456, $p457, $i458, $i459, $p460, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $p470, $i471, $i473, $i474, $p475, $i477, $i478, $i479, $i480, $i481, $i482, $i483, $i484, $p485, $i486, $i488, $i489, $p490, $i492, $i493, $i494, $i495, $i496, $i497, $i498, $i499, $p500, $i501, $i503, $i504, $p505, $i507, $i508, $i509, $i510, $i511, $i512, $i513, $i514, $i515, $i516, $p517, $p518, $i520, $i521, $p522, $p523, $i525, $i526, $p527, $i528, $i529, $i530, $i531, $p532, $p533, $i534, $i536, $i537, $p538, $p539, $i540, $i542, $i543, $i545, $i546, $i547, $i548, $i549, $i550, $i551, $i552, $i553, $i554, $p555, $i556, $i558, $i559, $p560, $i562, $i563, $i564, $i565, $i566, $i567, $i568, $i569, $p570, $i571, $i573, $i574, $p575, $i577, $i578, $i579, $i580, $i581, $i582, $i583, $i584, $p585, $i586, $i587, $p588, $i590, $i591, $i592, $i593, $i594, $i595, $i596, $i597, $p598, $i599, $i600, $p601, $i603, $i604, $i605, $i606, $i607, $i608, $i609, $i610, $p611, $i612, $i614, $i615, $p616, $i618, $i619, $i620, $i621, $i622, $i623, $i624, $i625, $i626, $i627, $i628, $i629, $p630, $p631, $i633, $i634, $p635, $p636, $i638, $i639, $p640, $i641, $i642, $i643, $i644, $p645, $p646, $i648, $i649, $p650, $p651, $i653, $i654, $p655, $p656, $i657, $i659, $i660, $p661, $p662, $i663, $i665, $i666, $p667, $p668, $i670, $i671, $p672, $p673, $i675, $i676, $i678, $i679, $i680, $i681, $i682, $i683, $i684, $i685, $i686, $i687, $p688, $i689, $i691, $i692, $p693, $i695, $i696, $i697, $i698, $i699, $i700, $i701, $i702, $p703, $i704, $i706, $i707, $p708, $i710, $i711, $i712, $i713, $i714, $i715, $i716, $i717, $p718, $i719, $i721, $i722, $p723, $i725, $i726, $i727, $i728, $i729, $i730, $i731, $i732, $p733, $i734, $i736, $i737, $p738, $i740, $i741, $i742, $i743, $i744, $i745, $i746, $i747, $i748, $i749, $i750, $i751, $i752, $i753, $i754, $i755, $i756, $i757, $i758, $i759, $i760, $i761, $i762, $i763, $i764, $p765, $i766, $i768, $i769, $p770, $i772, $i773, $i774, $i775, $i776, $i777, $i778, $i779, $p780, $i781, $i782, $p783, $i785, $i786, $i787, $i788, $i789, $i790, $i791, $i792, $p793, $i794, $i796, $i797, $p798, $i800, $i801, $i802, $i803, $i804, $i805, $i806, $i807, $p808, $i809, $i810, $p811, $i813, $i814, $i815, $i816, $i817, $i818, $i819, $i820, $p821, $i822, $i824, $i825, $p826, $i828, $i829, $i830, $i831, $i832, $i833, $i834, $i835, $p836, $i837, $i839, $i840, $p841, $i843, $i844, $i845, $i846, $i847, $i848, $i849, $i850, $p851, $i852, $i854, $i855, $p856, $i858, $i859, $i860, $i861, $i862, $i863, $i864, $i865, $p866, $i867, $i869, $i870, $p871, $i873, $i874, $i875, $i876, $i877, $i878, $i879, $i880, $i881, $i882, $p883, $p884, $i886, $i887, $p888, $p889, $i891, $i892, $p893, $i894, $i895, $i896, $i897, $p898, $p899, $i900, $i902, $i903, $p904, $p905, $i906, $i908, $i909, $i911, $i912, $i913, $i914, $i915, $i916, $i917, $i918, $i919, $i920, $i921, $i922, $p923, $i924, $i926, $i927, $p928, $i930, $i931, $i932, $i933, $i934, $i935, $i936, $i937, $p938, $i939, $i941, $i942, $p943, $i945, $i946, $i947, $i948, $i949, $i950, $i951, $i952, $p953, $i954, $i956, $i957, $p958, $i960, $i961, $i962, $i963, $i964, $i965, $i966, $i967, $i968, $i969, $p970, $i971, $i972, $p973, $i975, $i976, $i977, $i978, $i979, $i980, $i981, $i982, $p983, $p984, $i986, $i987, $p988, $p989, $i990, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192, vslice_dummy_var_193, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196, vslice_dummy_var_197, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i168 := $slt.i32($i167, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    $i169 := $slt.i32($i167, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i167, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    $i171 := $slt.i32($i167, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    $i172 := $slt.i32($i167, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    $i173 := $slt.i32($i167, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i167, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i174 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb1012;

  $bb1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ldv_stop();
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    goto $bb1013;

  $bb1013:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb104_dummy;

  $bb15:
    assume $i174 == 1;
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $i975 := $M.129;
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $i976 := $ne.i32($i975, 0);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb992, $bb993;

  $bb993:
    assume !($i976 == 1);
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb1011:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb992:
    assume $i976 == 1;
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1961} $i977 := __VERIFIER_nondet_int();
    call {:si_unique_call 1962} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i977);
    call {:si_unique_call 1963} {:cexpr "tmp___108"} boogie_si_record_i32($i977);
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    $i978 := $slt.i32($i977, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb995, $bb996;

  $bb996:
    assume !($i978 == 1);
    assume {:verifier.code 0} true;
    $i979 := $eq.i32($i977, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb997, $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    assume !($i979 == 1);
    goto $bb999;

  $bb999:
    assume {:verifier.code 0} true;
    goto $bb1009;

  $bb1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} ldv_stop();
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    goto $bb1010;

  $bb1010:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb997:
    assume $i979 == 1;
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $i986 := $M.129;
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i987 := $eq.i32($i986, 1);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1006, $bb1007;

  $bb1007:
    assume !($i987 == 1);
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1006:
    assume $i987 == 1;
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $p988 := $M.64;
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $p989 := $M.63;
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $i990 := $load.i64($M.41, $p28);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} vslice_dummy_var_207 := usb_os_desc_attr_store($p988, $p989, $p107, $i990);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $M.129 := 1;
    call {:si_unique_call 1967} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb995:
    assume $i978 == 1;
    assume {:verifier.code 0} true;
    $i980 := $eq.i32($i977, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1000, $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    assume !($i980 == 1);
    goto $bb999;

  $bb1000:
    assume $i980 == 1;
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $i981 := $M.129;
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $i982 := $eq.i32($i981, 1);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1002, $bb1003;

  $bb1003:
    assume !($i982 == 1);
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1002:
    assume $i982 == 1;
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $p983 := $M.64;
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $p984 := $M.63;
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} vslice_dummy_var_206 := usb_os_desc_attr_show($p983, $p984, $p108);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $M.129 := 1;
    call {:si_unique_call 1965} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb13:
    assume $i173 == 1;
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i962 := $M.128;
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $i963 := $ne.i32($i962, 0);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb972, $bb973;

  $bb973:
    assume !($i963 == 1);
    assume {:verifier.code 0} true;
    goto $bb991;

  $bb991:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb972:
    assume $i963 == 1;
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1953} $i964 := __VERIFIER_nondet_int();
    call {:si_unique_call 1954} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i964);
    call {:si_unique_call 1955} {:cexpr "tmp___107"} boogie_si_record_i32($i964);
    assume {:verifier.code 0} true;
    goto $bb974;

  $bb974:
    assume {:verifier.code 0} true;
    $i965 := $slt.i32($i964, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb975, $bb976;

  $bb976:
    assume !($i965 == 1);
    assume {:verifier.code 0} true;
    $i966 := $eq.i32($i964, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb977, $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    assume !($i966 == 1);
    goto $bb979;

  $bb979:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} ldv_stop();
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    goto $bb990;

  $bb990:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    goto $bb991;

  $bb977:
    assume $i966 == 1;
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $i971 := $M.128;
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $i972 := $eq.i32($i971, 1);
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb986, $bb987;

  $bb987:
    assume !($i972 == 1);
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb986:
    assume $i972 == 1;
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $p973 := $M.62;
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} vslice_dummy_var_205 := config_desc_make($p973, $p106);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1959} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb975:
    assume $i965 == 1;
    assume {:verifier.code 0} true;
    $i967 := $eq.i32($i964, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb980, $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    assume !($i967 == 1);
    goto $bb979;

  $bb980:
    assume $i967 == 1;
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $i968 := $M.128;
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    $i969 := $eq.i32($i968, 1);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb982, $bb983;

  $bb983:
    assume !($i969 == 1);
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb982:
    assume $i969 == 1;
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $p970 := $M.62;
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} config_desc_drop($p970, $p105);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1957} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb11:
    assume $i172 == 1;
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $i960 := $M.44;
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i961 := $ne.i32($i960, 0);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb969, $bb970;

  $bb970:
    assume !($i961 == 1);
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb971:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb969:
    assume $i961 == 1;
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} ldv_main_exported_37();
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    goto $bb971;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i171 == 1;
    assume {:verifier.code 0} true;
    $i175 := $slt.i32($i167, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i175 == 1);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $i945 := $M.127;
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i946 := $ne.i32($i945, 0);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb949, $bb950;

  $bb950:
    assume !($i946 == 1);
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb949:
    assume $i946 == 1;
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1944} $i947 := __VERIFIER_nondet_int();
    call {:si_unique_call 1945} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i947);
    call {:si_unique_call 1946} {:cexpr "tmp___106"} boogie_si_record_i32($i947);
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    $i948 := $slt.i32($i947, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb952, $bb953;

  $bb953:
    assume !($i948 == 1);
    assume {:verifier.code 0} true;
    $i949 := $eq.i32($i947, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb954, $bb955;

  $bb955:
    assume {:verifier.code 0} true;
    assume !($i949 == 1);
    goto $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} ldv_stop();
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb967:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb962:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb954:
    assume $i949 == 1;
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $i956 := $M.127;
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $i957 := $eq.i32($i956, 1);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb963, $bb964;

  $bb964:
    assume !($i957 == 1);
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb963:
    assume $i957 == 1;
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $p958 := $M.51;
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} vslice_dummy_var_204 := gadget_dev_desc_bDeviceProtocol_show($p958, $p103);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1950} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(1);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb952:
    assume $i948 == 1;
    assume {:verifier.code 0} true;
    $i950 := $eq.i32($i947, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb957, $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    assume !($i950 == 1);
    goto $bb956;

  $bb957:
    assume $i950 == 1;
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $i951 := $M.127;
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i952 := $eq.i32($i951, 1);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb959, $bb960;

  $bb960:
    assume !($i952 == 1);
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb959:
    assume $i952 == 1;
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $p953 := $M.51;
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $i954 := $load.i64($M.41, $p27);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} vslice_dummy_var_203 := gadget_dev_desc_bDeviceProtocol_store($p953, $p102, $i954);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1948} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(1);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb18:
    assume $i175 == 1;
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i930 := $M.126;
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $i931 := $ne.i32($i930, 0);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb929, $bb930;

  $bb930:
    assume !($i931 == 1);
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb929:
    assume $i931 == 1;
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1936} $i932 := __VERIFIER_nondet_int();
    call {:si_unique_call 1937} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i932);
    call {:si_unique_call 1938} {:cexpr "tmp___105"} boogie_si_record_i32($i932);
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb931:
    assume {:verifier.code 0} true;
    $i933 := $slt.i32($i932, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb932, $bb933;

  $bb933:
    assume !($i933 == 1);
    assume {:verifier.code 0} true;
    $i934 := $eq.i32($i932, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb934, $bb935;

  $bb935:
    assume {:verifier.code 0} true;
    assume !($i934 == 1);
    goto $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} ldv_stop();
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb934:
    assume $i934 == 1;
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $i941 := $M.126;
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $i942 := $eq.i32($i941, 1);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb943, $bb944;

  $bb944:
    assume !($i942 == 1);
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb943:
    assume $i942 == 1;
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $p943 := $M.61;
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} vslice_dummy_var_202 := interf_grp_compatible_id_show($p943, $p100);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $M.126 := 1;
    call {:si_unique_call 1942} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb932:
    assume $i933 == 1;
    assume {:verifier.code 0} true;
    $i935 := $eq.i32($i932, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb937, $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    assume !($i935 == 1);
    goto $bb936;

  $bb937:
    assume $i935 == 1;
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i936 := $M.126;
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $i937 := $eq.i32($i936, 1);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb939, $bb940;

  $bb940:
    assume !($i937 == 1);
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb939:
    assume $i937 == 1;
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $p938 := $M.61;
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i939 := $load.i64($M.41, $p26);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} vslice_dummy_var_201 := interf_grp_compatible_id_store($p938, $p101, $i939);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $M.126 := 1;
    call {:si_unique_call 1940} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb7:
    assume $i170 == 1;
    assume {:verifier.code 0} true;
    $i176 := $slt.i32($i167, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    $i177 := $slt.i32($i167, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    $i178 := $slt.i32($i167, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i178 == 1);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $i915 := $M.125;
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $i916 := $ne.i32($i915, 0);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb909, $bb910;

  $bb910:
    assume !($i916 == 1);
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb909:
    assume $i916 == 1;
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1928} $i917 := __VERIFIER_nondet_int();
    call {:si_unique_call 1929} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i917);
    call {:si_unique_call 1930} {:cexpr "tmp___104"} boogie_si_record_i32($i917);
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    $i918 := $slt.i32($i917, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb912, $bb913;

  $bb913:
    assume !($i918 == 1);
    assume {:verifier.code 0} true;
    $i919 := $eq.i32($i917, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb914, $bb915;

  $bb915:
    assume {:verifier.code 0} true;
    assume !($i919 == 1);
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} ldv_stop();
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb927:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb914:
    assume $i919 == 1;
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $i926 := $M.125;
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $i927 := $eq.i32($i926, 1);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb923, $bb924;

  $bb924:
    assume !($i927 == 1);
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb923:
    assume $i927 == 1;
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $p928 := $M.80;
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} vslice_dummy_var_200 := ext_prop_data_show($p928, $p99);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 1934} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb912:
    assume $i918 == 1;
    assume {:verifier.code 0} true;
    $i920 := $eq.i32($i917, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb917, $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    assume !($i920 == 1);
    goto $bb916;

  $bb917:
    assume $i920 == 1;
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $i921 := $M.125;
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $i922 := $eq.i32($i921, 1);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb919, $bb920;

  $bb920:
    assume !($i922 == 1);
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb919:
    assume $i922 == 1;
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $p923 := $M.80;
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $i924 := $load.i64($M.41, $p25);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} vslice_dummy_var_199 := ext_prop_data_store($p923, $p98, $i924);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 1932} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb24:
    assume $i178 == 1;
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $i913 := $M.43;
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $i914 := $ne.i32($i913, 0);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb906, $bb907;

  $bb907:
    assume !($i914 == 1);
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb906:
    assume $i914 == 1;
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} ldv_main_exported_38();
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb22:
    assume $i177 == 1;
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i873 := $M.124;
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $i874 := $ne.i32($i873, 0);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb870, $bb871;

  $bb871:
    assume !($i874 == 1);
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb870:
    assume $i874 == 1;
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1909} $i875 := __VERIFIER_nondet_int();
    call {:si_unique_call 1910} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i875);
    call {:si_unique_call 1911} {:cexpr "tmp___103"} boogie_si_record_i32($i875);
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    $i876 := $slt.i32($i875, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb873, $bb874;

  $bb874:
    assume !($i876 == 1);
    assume {:verifier.code 0} true;
    $i877 := $slt.i32($i875, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb875, $bb876;

  $bb876:
    assume !($i877 == 1);
    assume {:verifier.code 0} true;
    $i878 := $eq.i32($i875, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb877, $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    assume !($i878 == 1);
    goto $bb879;

  $bb879:
    assume {:verifier.code 0} true;
    goto $bb903;

  $bb903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} ldv_stop();
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb877:
    assume $i878 == 1;
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $i908 := $M.124;
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $i909 := $eq.i32($i908, 1);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb900, $bb901;

  $bb901:
    assume !($i909 == 1);
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb900:
    assume $i909 == 1;
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} vslice_dummy_var_198 := ldv_probe_15();
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $M.124 := 2;
    call {:si_unique_call 1924} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $i911 := $M.45;
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $i912 := $add.i32($i911, 1);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $M.45 := $i912;
    call {:si_unique_call 1925} {:cexpr "ref_cnt"} boogie_si_record_i32($i912);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb875:
    assume $i877 == 1;
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $i896 := $M.124;
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $i897 := $eq.i32($i896, 1);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb894, $bb895;

  $bb895:
    assume !($i897 == 1);
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    $i902 := $M.124;
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $i903 := $eq.i32($i902, 2);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb897, $bb898;

  $bb898:
    assume !($i903 == 1);
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb899:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb897:
    assume $i903 == 1;
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $p904 := $M.66;
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $p905 := $M.65;
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $i906 := $load.i64($M.41, $p24);
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} vslice_dummy_var_197 := gadget_strings_attr_store($p904, $p905, $p96, $i906);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $M.124 := 2;
    call {:si_unique_call 1922} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb894:
    assume $i897 == 1;
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $p898 := $M.66;
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $p899 := $M.65;
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i900 := $load.i64($M.41, $p24);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} vslice_dummy_var_196 := gadget_strings_attr_store($p898, $p899, $p96, $i900);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1920} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb873:
    assume $i876 == 1;
    assume {:verifier.code 0} true;
    $i879 := $slt.i32($i875, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb880, $bb881;

  $bb881:
    assume !($i879 == 1);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $i891 := $M.124;
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $i892 := $eq.i32($i891, 2);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb891, $bb892;

  $bb892:
    assume !($i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb891:
    assume $i892 == 1;
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p893 := $M.66;
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} gadget_strings_attr_release($p893);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1917} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $i894 := $M.45;
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i895 := $sub.i32($i894, 1);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $M.45 := $i895;
    call {:si_unique_call 1918} {:cexpr "ref_cnt"} boogie_si_record_i32($i895);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb880:
    assume $i879 == 1;
    assume {:verifier.code 0} true;
    $i880 := $eq.i32($i875, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb882, $bb883;

  $bb883:
    assume {:verifier.code 0} true;
    assume !($i880 == 1);
    goto $bb879;

  $bb882:
    assume $i880 == 1;
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $i881 := $M.124;
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $i882 := $eq.i32($i881, 1);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb884, $bb885;

  $bb885:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    $i886 := $M.124;
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $i887 := $eq.i32($i886, 2);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb887, $bb888;

  $bb888:
    assume !($i887 == 1);
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb889:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb887:
    assume $i887 == 1;
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $p888 := $M.66;
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $p889 := $M.65;
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} vslice_dummy_var_195 := gadget_strings_attr_show($p888, $p889, $p97);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $M.124 := 2;
    call {:si_unique_call 1915} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb884:
    assume $i882 == 1;
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $p883 := $M.66;
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $p884 := $M.65;
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} vslice_dummy_var_194 := gadget_strings_attr_show($p883, $p884, $p97);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1913} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb20:
    assume $i176 == 1;
    assume {:verifier.code 0} true;
    $i179 := $slt.i32($i167, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i179 == 1);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $i858 := $M.123;
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $i859 := $ne.i32($i858, 0);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb850, $bb851;

  $bb851:
    assume !($i859 == 1);
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb850:
    assume $i859 == 1;
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1901} $i860 := __VERIFIER_nondet_int();
    call {:si_unique_call 1902} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i860);
    call {:si_unique_call 1903} {:cexpr "tmp___102"} boogie_si_record_i32($i860);
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    $i861 := $slt.i32($i860, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb853, $bb854;

  $bb854:
    assume !($i861 == 1);
    assume {:verifier.code 0} true;
    $i862 := $eq.i32($i860, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb855, $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    assume !($i862 == 1);
    goto $bb857;

  $bb857:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_stop();
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb863:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb855:
    assume $i862 == 1;
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i869 := $M.123;
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $i870 := $eq.i32($i869, 1);
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb864, $bb865;

  $bb865:
    assume !($i870 == 1);
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb864:
    assume $i870 == 1;
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $p871 := $M.78;
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} vslice_dummy_var_193 := os_desc_b_vendor_code_show($p871, $p94);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1907} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb853:
    assume $i861 == 1;
    assume {:verifier.code 0} true;
    $i863 := $eq.i32($i860, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb858, $bb859;

  $bb859:
    assume {:verifier.code 0} true;
    assume !($i863 == 1);
    goto $bb857;

  $bb858:
    assume $i863 == 1;
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i864 := $M.123;
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $i865 := $eq.i32($i864, 1);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb860, $bb861;

  $bb861:
    assume !($i865 == 1);
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb860:
    assume $i865 == 1;
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $p866 := $M.78;
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i867 := $load.i64($M.41, $p23);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} vslice_dummy_var_192 := os_desc_b_vendor_code_store($p866, $p95, $i867);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1905} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb26:
    assume $i179 == 1;
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $i843 := $M.122;
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $i844 := $ne.i32($i843, 0);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb830, $bb831;

  $bb831:
    assume !($i844 == 1);
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb830:
    assume $i844 == 1;
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1893} $i845 := __VERIFIER_nondet_int();
    call {:si_unique_call 1894} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i845);
    call {:si_unique_call 1895} {:cexpr "tmp___101"} boogie_si_record_i32($i845);
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    $i846 := $slt.i32($i845, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb833, $bb834;

  $bb834:
    assume !($i846 == 1);
    assume {:verifier.code 0} true;
    $i847 := $eq.i32($i845, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb835, $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    assume !($i847 == 1);
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} ldv_stop();
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb835:
    assume $i847 == 1;
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $i854 := $M.122;
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $i855 := $eq.i32($i854, 1);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb844, $bb845;

  $bb845:
    assume !($i855 == 1);
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb844:
    assume $i855 == 1;
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $p856 := $M.49;
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} vslice_dummy_var_191 := ext_prop_type_show($p856, $p93);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $M.122 := 1;
    call {:si_unique_call 1899} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb833:
    assume $i846 == 1;
    assume {:verifier.code 0} true;
    $i848 := $eq.i32($i845, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb838, $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    assume !($i848 == 1);
    goto $bb837;

  $bb838:
    assume $i848 == 1;
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $i849 := $M.122;
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $i850 := $eq.i32($i849, 1);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb840, $bb841;

  $bb841:
    assume !($i850 == 1);
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb840:
    assume $i850 == 1;
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $p851 := $M.49;
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $i852 := $load.i64($M.41, $p22);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} vslice_dummy_var_190 := ext_prop_type_store($p851, $p92, $i852);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $M.122 := 1;
    call {:si_unique_call 1897} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb5:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    $i180 := $slt.i32($i167, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i167, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i167, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    $i183 := $slt.i32($i167, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i183 == 1);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i828 := $M.121;
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i829 := $ne.i32($i828, 0);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb810, $bb811;

  $bb811:
    assume !($i829 == 1);
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb829:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb810:
    assume $i829 == 1;
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1885} $i830 := __VERIFIER_nondet_int();
    call {:si_unique_call 1886} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i830);
    call {:si_unique_call 1887} {:cexpr "tmp___100"} boogie_si_record_i32($i830);
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    $i831 := $slt.i32($i830, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb813, $bb814;

  $bb814:
    assume !($i831 == 1);
    assume {:verifier.code 0} true;
    $i832 := $eq.i32($i830, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb815, $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    assume !($i832 == 1);
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} ldv_stop();
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb815:
    assume $i832 == 1;
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $i839 := $M.121;
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $i840 := $eq.i32($i839, 1);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb824, $bb825;

  $bb825:
    assume !($i840 == 1);
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb824:
    assume $i840 == 1;
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $p841 := $M.84;
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} vslice_dummy_var_189 := interf_grp_sub_compatible_id_show($p841, $p91);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $M.121 := 1;
    call {:si_unique_call 1891} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb813:
    assume $i831 == 1;
    assume {:verifier.code 0} true;
    $i833 := $eq.i32($i830, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb818, $bb819;

  $bb819:
    assume {:verifier.code 0} true;
    assume !($i833 == 1);
    goto $bb817;

  $bb818:
    assume $i833 == 1;
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i834 := $M.121;
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $i835 := $eq.i32($i834, 1);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb820, $bb821;

  $bb821:
    assume !($i835 == 1);
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb820:
    assume $i835 == 1;
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $p836 := $M.84;
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i837 := $load.i64($M.41, $p21);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} vslice_dummy_var_188 := interf_grp_sub_compatible_id_store($p836, $p90, $i837);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $M.121 := 1;
    call {:si_unique_call 1889} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb34:
    assume $i183 == 1;
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i813 := $M.120;
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i814 := $ne.i32($i813, 0);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb790, $bb791;

  $bb791:
    assume !($i814 == 1);
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb790:
    assume $i814 == 1;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1877} $i815 := __VERIFIER_nondet_int();
    call {:si_unique_call 1878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i815);
    call {:si_unique_call 1879} {:cexpr "tmp___99"} boogie_si_record_i32($i815);
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    $i816 := $slt.i32($i815, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb793, $bb794;

  $bb794:
    assume !($i816 == 1);
    assume {:verifier.code 0} true;
    $i817 := $eq.i32($i815, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb795, $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    assume !($i817 == 1);
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} ldv_stop();
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb795:
    assume $i817 == 1;
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $i824 := $M.120;
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i825 := $eq.i32($i824, 1);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb804, $bb805;

  $bb805:
    assume !($i825 == 1);
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb804:
    assume $i825 == 1;
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $p826 := $M.52;
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} vslice_dummy_var_187 := gadget_dev_desc_bDeviceClass_show($p826, $p89);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1883} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(1);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb793:
    assume $i816 == 1;
    assume {:verifier.code 0} true;
    $i818 := $eq.i32($i815, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb798, $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    assume !($i818 == 1);
    goto $bb797;

  $bb798:
    assume $i818 == 1;
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $i819 := $M.120;
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i820 := $eq.i32($i819, 1);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb800, $bb801;

  $bb801:
    assume !($i820 == 1);
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb800:
    assume $i820 == 1;
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $p821 := $M.52;
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $i822 := $load.i64($M.41, $p20);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} vslice_dummy_var_186 := gadget_dev_desc_bDeviceClass_store($p821, $p88, $i822);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1881} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(1);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb32:
    assume $i182 == 1;
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i800 := $M.119;
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $i801 := $ne.i32($i800, 0);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb770, $bb771;

  $bb771:
    assume !($i801 == 1);
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb770:
    assume $i801 == 1;
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1869} $i802 := __VERIFIER_nondet_int();
    call {:si_unique_call 1870} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i802);
    call {:si_unique_call 1871} {:cexpr "tmp___98"} boogie_si_record_i32($i802);
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    $i803 := $slt.i32($i802, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb773, $bb774;

  $bb774:
    assume !($i803 == 1);
    assume {:verifier.code 0} true;
    $i804 := $eq.i32($i802, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb775, $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    assume !($i804 == 1);
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} ldv_stop();
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb775:
    assume $i804 == 1;
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i809 := $M.119;
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i810 := $eq.i32($i809, 1);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb784, $bb785;

  $bb785:
    assume !($i810 == 1);
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb784:
    assume $i810 == 1;
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $p811 := $M.74;
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} vslice_dummy_var_185 := ext_prop_make($p811, $p85);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1875} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb773:
    assume $i803 == 1;
    assume {:verifier.code 0} true;
    $i805 := $eq.i32($i802, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb778, $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    assume !($i805 == 1);
    goto $bb777;

  $bb778:
    assume $i805 == 1;
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $i806 := $M.119;
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i807 := $eq.i32($i806, 1);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb780, $bb781;

  $bb781:
    assume !($i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb780:
    assume $i807 == 1;
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $p808 := $M.74;
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} ext_prop_drop($p808, $p87);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1873} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb30:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i184 := $slt.i32($i167, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i184 == 1);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i785 := $M.118;
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $i786 := $ne.i32($i785, 0);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb750, $bb751;

  $bb751:
    assume !($i786 == 1);
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb750:
    assume $i786 == 1;
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1861} $i787 := __VERIFIER_nondet_int();
    call {:si_unique_call 1862} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i787);
    call {:si_unique_call 1863} {:cexpr "tmp___97"} boogie_si_record_i32($i787);
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    $i788 := $slt.i32($i787, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb753, $bb754;

  $bb754:
    assume !($i788 == 1);
    assume {:verifier.code 0} true;
    $i789 := $eq.i32($i787, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb755, $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    assume !($i789 == 1);
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} ldv_stop();
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb755:
    assume $i789 == 1;
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $i796 := $M.118;
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i797 := $eq.i32($i796, 1);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb764, $bb765;

  $bb765:
    assume !($i797 == 1);
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb764:
    assume $i797 == 1;
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $p798 := $M.48;
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} vslice_dummy_var_184 := gadget_dev_desc_bcdUSB_show($p798, $p83);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1867} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb753:
    assume $i788 == 1;
    assume {:verifier.code 0} true;
    $i790 := $eq.i32($i787, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb758, $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    assume !($i790 == 1);
    goto $bb757;

  $bb758:
    assume $i790 == 1;
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $i791 := $M.118;
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $i792 := $eq.i32($i791, 1);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb760, $bb761;

  $bb761:
    assume !($i792 == 1);
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb760:
    assume $i792 == 1;
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $p793 := $M.48;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $i794 := $load.i64($M.41, $p19);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} vslice_dummy_var_183 := gadget_dev_desc_bcdUSB_store($p793, $p84, $i794);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1865} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb36:
    assume $i184 == 1;
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i772 := $M.117;
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i773 := $ne.i32($i772, 0);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb730, $bb731;

  $bb731:
    assume !($i773 == 1);
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb730:
    assume $i773 == 1;
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1853} $i774 := __VERIFIER_nondet_int();
    call {:si_unique_call 1854} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i774);
    call {:si_unique_call 1855} {:cexpr "tmp___96"} boogie_si_record_i32($i774);
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    $i775 := $slt.i32($i774, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb733, $bb734;

  $bb734:
    assume !($i775 == 1);
    assume {:verifier.code 0} true;
    $i776 := $eq.i32($i774, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb735, $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    assume !($i776 == 1);
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} ldv_stop();
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb735:
    assume $i776 == 1;
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i781 := $M.117;
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $i782 := $eq.i32($i781, 1);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb744, $bb745;

  $bb745:
    assume !($i782 == 1);
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb744:
    assume $i782 == 1;
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $p783 := $M.81;
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} vslice_dummy_var_182 := function_make($p783, $p80);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $M.117 := 1;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    goto $bb746;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb733:
    assume $i775 == 1;
    assume {:verifier.code 0} true;
    $i777 := $eq.i32($i774, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb738, $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    assume !($i777 == 1);
    goto $bb737;

  $bb738:
    assume $i777 == 1;
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i778 := $M.117;
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i779 := $eq.i32($i778, 1);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb740, $bb741;

  $bb741:
    assume !($i779 == 1);
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb740:
    assume $i779 == 1;
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $p780 := $M.81;
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} function_drop($p780, $p82);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $M.117 := 1;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb28:
    assume $i180 == 1;
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i167, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    $i186 := $slt.i32($i167, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    $i187 := $slt.i32($i167, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i187 == 1);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $i757 := $M.116;
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $i758 := $ne.i32($i757, 0);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb710, $bb711;

  $bb711:
    assume !($i758 == 1);
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb710:
    assume $i758 == 1;
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1845} $i759 := __VERIFIER_nondet_int();
    call {:si_unique_call 1846} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i759);
    call {:si_unique_call 1847} {:cexpr "tmp___95"} boogie_si_record_i32($i759);
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    $i760 := $slt.i32($i759, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb713, $bb714;

  $bb714:
    assume !($i760 == 1);
    assume {:verifier.code 0} true;
    $i761 := $eq.i32($i759, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb715, $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    assume !($i761 == 1);
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} ldv_stop();
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb715:
    assume $i761 == 1;
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $i768 := $M.116;
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $i769 := $eq.i32($i768, 1);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb724, $bb725;

  $bb725:
    assume !($i769 == 1);
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb724:
    assume $i769 == 1;
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $p770 := $M.86;
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} vslice_dummy_var_181 := os_desc_use_show($p770, $p79);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $M.116 := 1;
    call {:si_unique_call 1851} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb713:
    assume $i760 == 1;
    assume {:verifier.code 0} true;
    $i762 := $eq.i32($i759, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb718, $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    assume !($i762 == 1);
    goto $bb717;

  $bb718:
    assume $i762 == 1;
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i763 := $M.116;
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $i764 := $eq.i32($i763, 1);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb720, $bb721;

  $bb721:
    assume !($i764 == 1);
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb720:
    assume $i764 == 1;
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $p765 := $M.86;
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $i766 := $load.i64($M.41, $p18);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} vslice_dummy_var_180 := os_desc_use_store($p765, $p78, $i766);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $M.116 := 1;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb42:
    assume $i187 == 1;
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i740 := $M.115;
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i741 := $ne.i32($i740, 0);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb680, $bb681;

  $bb681:
    assume !($i741 == 1);
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb680:
    assume $i741 == 1;
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1759} $i742 := __VERIFIER_nondet_int();
    call {:si_unique_call 1760} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i742);
    call {:si_unique_call 1761} {:cexpr "tmp___94"} boogie_si_record_i32($i742);
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    $i743 := $slt.i32($i742, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb683, $bb684;

  $bb684:
    assume !($i743 == 1);
    assume {:verifier.code 0} true;
    $i744 := $eq.i32($i742, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb685, $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    assume !($i744 == 1);
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} ldv_stop();
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb708:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb685:
    assume $i744 == 1;
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $i750 := $M.115;
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $i751 := $eq.i32($i750, 1);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb698, $bb699;

  $bb699:
    assume !($i751 == 1);
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb698:
    assume $i751 == 1;
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} $i752 := gadget_cfs_init();
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $M.132 := $i752;
    call {:si_unique_call 1766} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i752);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i753 := $M.132;
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $i754 := $ne.i32($i753, 0);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb700, $bb701;

  $bb701:
    assume !($i754 == 1);
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    $i755 := $M.132;
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $i756 := $eq.i32($i755, 0);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb703, $bb704;

  $bb704:
    assume !($i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb703:
    assume $i756 == 1;
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $M.115 := 2;
    call {:si_unique_call 1768} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $M.129 := 1;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} ldv_initialize_configfs_item_operations_5();
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} ldv_initialize_configfs_group_operations_19();
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(1);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} ldv_initialize_usb_gadget_driver_37();
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(1);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} ldv_initialize_gadget_info_attribute_34();
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $M.126 := 1;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} ldv_initialize_usb_os_desc_attribute_4();
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} ldv_initialize_usb_os_desc_ext_prop_attribute_8();
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(1);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} ldv_initialize_configfs_item_operations_15();
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1784} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} ldv_initialize_os_desc_attribute_12();
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $M.122 := 1;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} ldv_initialize_usb_os_desc_ext_prop_attribute_9();
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $M.121 := 1;
    call {:si_unique_call 1788} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} ldv_initialize_usb_os_desc_attribute_3();
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(1);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} ldv_initialize_gadget_info_attribute_36();
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1792} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} ldv_initialize_configfs_group_operations_6();
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1794} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} ldv_initialize_gadget_info_attribute_29();
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $M.117 := 1;
    call {:si_unique_call 1796} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} ldv_initialize_configfs_group_operations_23();
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $M.116 := 1;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} ldv_initialize_os_desc_attribute_13();
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $M.114 := 1;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} ldv_initialize_gadget_config_name_attribute_22();
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $M.113 := 1;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} ldv_initialize_os_desc_attribute_11();
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $M.112 := 1;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(1);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} ldv_initialize_gadget_info_attribute_35();
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $M.111 := 1;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} ldv_initialize_gadget_info_attribute_31();
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} ldv_initialize_configfs_item_operations_10();
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $M.109 := 1;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} ldv_initialize_config_usb_cfg_attribute_24();
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} ldv_initialize_configfs_group_operations_14();
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} ldv_initialize_configfs_group_operations_20();
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $M.106 := 1;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} ldv_initialize_gadget_info_attribute_28();
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} ldv_initialize_config_usb_cfg_attribute_25();
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $M.104 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} ldv_initialize_configfs_item_operations_27();
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $M.103 := 1;
    call {:si_unique_call 1822} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} ldv_initialize_gadget_strings_attribute_16();
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1824} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} ldv_initialize_gadget_info_attribute_30();
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} ldv_initialize_gadget_strings_attribute_18();
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1828} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} ldv_initialize_configfs_group_operations_1();
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1830} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} ldv_initialize_usb_gadget_driver_2();
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} ldv_initialize_gadget_strings_attribute_17();
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1834} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} ldv_initialize_configfs_item_operations_26();
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} ldv_initialize_configfs_item_operations_7();
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1838} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} ldv_initialize_configfs_item_operations_21();
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1840} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} ldv_initialize_gadget_info_attribute_32();
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1842} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} ldv_initialize_gadget_info_attribute_33();
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb700:
    assume $i754 == 1;
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $M.115 := 3;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} ldv_check_final_state();
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb683:
    assume $i743 == 1;
    assume {:verifier.code 0} true;
    $i745 := $eq.i32($i742, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb688, $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    assume !($i745 == 1);
    goto $bb687;

  $bb688:
    assume $i745 == 1;
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $i746 := $M.115;
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $i747 := $eq.i32($i746, 2);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb690, $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    assume !($i747 == 1);
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb690:
    assume $i747 == 1;
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $i748 := $M.45;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i749 := $eq.i32($i748, 0);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb693, $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    assume !($i749 == 1);
    goto $bb692;

  $bb693:
    assume $i749 == 1;
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} gadget_cfs_exit();
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $M.115 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb40:
    assume $i186 == 1;
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $i725 := $M.114;
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i726 := $ne.i32($i725, 0);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb660, $bb661;

  $bb661:
    assume !($i726 == 1);
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb660:
    assume $i726 == 1;
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1751} $i727 := __VERIFIER_nondet_int();
    call {:si_unique_call 1752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i727);
    call {:si_unique_call 1753} {:cexpr "tmp___93"} boogie_si_record_i32($i727);
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    $i728 := $slt.i32($i727, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb663, $bb664;

  $bb664:
    assume !($i728 == 1);
    assume {:verifier.code 0} true;
    $i729 := $eq.i32($i727, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb665, $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    assume !($i729 == 1);
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_stop();
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb665:
    assume $i729 == 1;
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $i736 := $M.114;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $i737 := $eq.i32($i736, 1);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb674, $bb675;

  $bb675:
    assume !($i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb674:
    assume $i737 == 1;
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $p738 := $M.50;
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} vslice_dummy_var_179 := gadget_config_name_configuration_show($p738, $p77);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $M.114 := 1;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb663:
    assume $i728 == 1;
    assume {:verifier.code 0} true;
    $i730 := $eq.i32($i727, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb668, $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    assume !($i730 == 1);
    goto $bb667;

  $bb668:
    assume $i730 == 1;
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $i731 := $M.114;
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $i732 := $eq.i32($i731, 1);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb670, $bb671;

  $bb671:
    assume !($i732 == 1);
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb670:
    assume $i732 == 1;
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $p733 := $M.50;
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $i734 := $load.i64($M.41, $p17);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} vslice_dummy_var_178 := gadget_config_name_configuration_store($p733, $p76, $i734);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $M.114 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb38:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i167, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i188 == 1);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i710 := $M.113;
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $i711 := $ne.i32($i710, 0);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb640, $bb641;

  $bb641:
    assume !($i711 == 1);
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb640:
    assume $i711 == 1;
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1743} $i712 := __VERIFIER_nondet_int();
    call {:si_unique_call 1744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i712);
    call {:si_unique_call 1745} {:cexpr "tmp___92"} boogie_si_record_i32($i712);
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    $i713 := $slt.i32($i712, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb643, $bb644;

  $bb644:
    assume !($i713 == 1);
    assume {:verifier.code 0} true;
    $i714 := $eq.i32($i712, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb645, $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    assume !($i714 == 1);
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} ldv_stop();
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb645:
    assume $i714 == 1;
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $i721 := $M.113;
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i722 := $eq.i32($i721, 1);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb654, $bb655;

  $bb655:
    assume !($i722 == 1);
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb654:
    assume $i722 == 1;
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $p723 := $M.79;
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} vslice_dummy_var_177 := os_desc_qw_sign_show($p723, $p75);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $M.113 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb643:
    assume $i713 == 1;
    assume {:verifier.code 0} true;
    $i715 := $eq.i32($i712, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb648, $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    assume !($i715 == 1);
    goto $bb647;

  $bb648:
    assume $i715 == 1;
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $i716 := $M.113;
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $i717 := $eq.i32($i716, 1);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb650, $bb651;

  $bb651:
    assume !($i717 == 1);
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb650:
    assume $i717 == 1;
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $p718 := $M.79;
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $i719 := $load.i64($M.41, $p16);
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} vslice_dummy_var_176 := os_desc_qw_sign_store($p718, $p74, $i719);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $M.113 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb44:
    assume $i188 == 1;
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $i695 := $M.112;
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $i696 := $ne.i32($i695, 0);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb620, $bb621;

  $bb621:
    assume !($i696 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb620:
    assume $i696 == 1;
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1735} $i697 := __VERIFIER_nondet_int();
    call {:si_unique_call 1736} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i697);
    call {:si_unique_call 1737} {:cexpr "tmp___91"} boogie_si_record_i32($i697);
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    $i698 := $slt.i32($i697, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb623, $bb624;

  $bb624:
    assume !($i698 == 1);
    assume {:verifier.code 0} true;
    $i699 := $eq.i32($i697, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb625, $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    assume !($i699 == 1);
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} ldv_stop();
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb625:
    assume $i699 == 1;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i706 := $M.112;
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i707 := $eq.i32($i706, 1);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb634, $bb635;

  $bb635:
    assume !($i707 == 1);
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb634:
    assume $i707 == 1;
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $p708 := $M.90;
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} vslice_dummy_var_175 := gadget_dev_desc_bDeviceSubClass_show($p708, $p72);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $M.112 := 1;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(1);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb623:
    assume $i698 == 1;
    assume {:verifier.code 0} true;
    $i700 := $eq.i32($i697, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb628, $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    assume !($i700 == 1);
    goto $bb627;

  $bb628:
    assume $i700 == 1;
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $i701 := $M.112;
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $i702 := $eq.i32($i701, 1);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb630, $bb631;

  $bb631:
    assume !($i702 == 1);
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb630:
    assume $i702 == 1;
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $p703 := $M.90;
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i704 := $load.i64($M.41, $p15);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} vslice_dummy_var_174 := gadget_dev_desc_bDeviceSubClass_store($p703, $p73, $i704);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $M.112 := 1;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(1);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb3:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i189 := $slt.i32($i167, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    $i190 := $slt.i32($i167, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i191 := $slt.i32($i167, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i167, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i167, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i193 == 1);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i680 := $M.111;
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i681 := $ne.i32($i680, 0);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600, $bb601;

  $bb601:
    assume !($i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb600:
    assume $i681 == 1;
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1727} $i682 := __VERIFIER_nondet_int();
    call {:si_unique_call 1728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i682);
    call {:si_unique_call 1729} {:cexpr "tmp___90"} boogie_si_record_i32($i682);
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    $i683 := $slt.i32($i682, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb603, $bb604;

  $bb604:
    assume !($i683 == 1);
    assume {:verifier.code 0} true;
    $i684 := $eq.i32($i682, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb605, $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    assume !($i684 == 1);
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_stop();
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb605:
    assume $i684 == 1;
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i691 := $M.111;
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i692 := $eq.i32($i691, 1);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb614, $bb615;

  $bb615:
    assume !($i692 == 1);
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb614:
    assume $i692 == 1;
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $p693 := $M.92;
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} vslice_dummy_var_173 := gadget_dev_desc_idProduct_show($p693, $p71);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $M.111 := 1;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb603:
    assume $i683 == 1;
    assume {:verifier.code 0} true;
    $i685 := $eq.i32($i682, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb608, $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    assume !($i685 == 1);
    goto $bb607;

  $bb608:
    assume $i685 == 1;
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $i686 := $M.111;
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i687 := $eq.i32($i686, 1);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb610, $bb611;

  $bb611:
    assume !($i687 == 1);
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb610:
    assume $i687 == 1;
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $p688 := $M.92;
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $i689 := $load.i64($M.41, $p14);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} vslice_dummy_var_172 := gadget_dev_desc_idProduct_store($p688, $p70, $i689);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $M.111 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb54:
    assume $i193 == 1;
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $i618 := $M.110;
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $i619 := $ne.i32($i618, 0);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb548, $bb549;

  $bb549:
    assume !($i619 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb548:
    assume $i619 == 1;
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1701} $i620 := __VERIFIER_nondet_int();
    call {:si_unique_call 1702} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i620);
    call {:si_unique_call 1703} {:cexpr "tmp___89"} boogie_si_record_i32($i620);
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    $i621 := $slt.i32($i620, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb551, $bb552;

  $bb552:
    assume !($i621 == 1);
    assume {:verifier.code 0} true;
    $i622 := $slt.i32($i620, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb553, $bb554;

  $bb554:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    $i623 := $slt.i32($i620, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i623 == 1);
    assume {:verifier.code 0} true;
    $i624 := $eq.i32($i620, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb557, $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    assume !($i624 == 1);
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} ldv_stop();
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb557:
    assume $i624 == 1;
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i675 := $M.110;
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $i676 := $eq.i32($i675, 1);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594, $bb595;

  $bb595:
    assume !($i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb594:
    assume $i676 == 1;
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} vslice_dummy_var_171 := ldv_probe_10();
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $M.110 := 2;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $i678 := $M.45;
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $i679 := $add.i32($i678, 1);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $M.45 := $i679;
    call {:si_unique_call 1725} {:cexpr "ref_cnt"} boogie_si_record_i32($i679);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb555:
    assume $i623 == 1;
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i665 := $M.110;
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $i666 := $eq.i32($i665, 1);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    $i670 := $M.110;
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $i671 := $eq.i32($i670, 2);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb591, $bb592;

  $bb592:
    assume !($i671 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb591:
    assume $i671 == 1;
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $p672 := $M.77;
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $p673 := $M.75;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} vslice_dummy_var_170 := os_desc_link($p672, $p673);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $M.110 := 2;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb588:
    assume $i666 == 1;
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $p667 := $M.77;
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $p668 := $M.75;
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} vslice_dummy_var_169 := os_desc_link($p667, $p668);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb553:
    assume $i622 == 1;
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $i653 := $M.110;
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $i654 := $eq.i32($i653, 1);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb582, $bb583;

  $bb583:
    assume !($i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    $i659 := $M.110;
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i660 := $eq.i32($i659, 2);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb585, $bb586;

  $bb586:
    assume !($i660 == 1);
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb585:
    assume $i660 == 1;
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $p661 := $M.77;
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $p662 := $M.76;
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $i663 := $load.i64($M.41, $p13);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} vslice_dummy_var_168 := os_desc_attr_store($p661, $p662, $p68, $i663);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $M.110 := 2;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb582:
    assume $i654 == 1;
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $p655 := $M.77;
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $p656 := $M.76;
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $i657 := $load.i64($M.41, $p13);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} vslice_dummy_var_167 := os_desc_attr_store($p655, $p656, $p68, $i657);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1716} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb551:
    assume $i621 == 1;
    assume {:verifier.code 0} true;
    $i625 := $slt.i32($i620, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb560, $bb561;

  $bb561:
    assume !($i625 == 1);
    assume {:verifier.code 0} true;
    $i626 := $slt.i32($i620, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  $bb563:
    assume !($i626 == 1);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i643 := $M.110;
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $i644 := $eq.i32($i643, 1);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb576, $bb577;

  $bb577:
    assume !($i644 == 1);
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    $i648 := $M.110;
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i649 := $eq.i32($i648, 2);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i649 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb579:
    assume $i649 == 1;
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $p650 := $M.77;
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $p651 := $M.75;
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} vslice_dummy_var_166 := os_desc_unlink($p650, $p651);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $M.110 := 2;
    call {:si_unique_call 1714} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb576:
    assume $i644 == 1;
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $p645 := $M.77;
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $p646 := $M.75;
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} vslice_dummy_var_165 := os_desc_unlink($p645, $p646);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1712} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb562:
    assume $i626 == 1;
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i638 := $M.110;
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $i639 := $eq.i32($i638, 2);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  $bb574:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb573:
    assume $i639 == 1;
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $p640 := $M.77;
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} os_desc_attr_release($p640);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i641 := $M.45;
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $i642 := $sub.i32($i641, 1);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $M.45 := $i642;
    call {:si_unique_call 1710} {:cexpr "ref_cnt"} boogie_si_record_i32($i642);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb560:
    assume $i625 == 1;
    assume {:verifier.code 0} true;
    $i627 := $eq.i32($i620, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    assume !($i627 == 1);
    goto $bb559;

  $bb564:
    assume $i627 == 1;
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i628 := $M.110;
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i629 := $eq.i32($i628, 1);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb566, $bb567;

  $bb567:
    assume !($i629 == 1);
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    $i633 := $M.110;
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $i634 := $eq.i32($i633, 2);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb569, $bb570;

  $bb570:
    assume !($i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb569:
    assume $i634 == 1;
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $p635 := $M.77;
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $p636 := $M.76;
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} vslice_dummy_var_164 := os_desc_attr_show($p635, $p636, $p69);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $M.110 := 2;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb566:
    assume $i629 == 1;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $p630 := $M.77;
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $p631 := $M.76;
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} vslice_dummy_var_163 := os_desc_attr_show($p630, $p631, $p69);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb52:
    assume $i192 == 1;
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $i603 := $M.109;
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i604 := $ne.i32($i603, 0);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  $bb529:
    assume !($i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb528:
    assume $i604 == 1;
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1693} $i605 := __VERIFIER_nondet_int();
    call {:si_unique_call 1694} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i605);
    call {:si_unique_call 1695} {:cexpr "tmp___88"} boogie_si_record_i32($i605);
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    $i606 := $slt.i32($i605, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  $bb532:
    assume !($i606 == 1);
    assume {:verifier.code 0} true;
    $i607 := $eq.i32($i605, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    assume !($i607 == 1);
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} ldv_stop();
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb533:
    assume $i607 == 1;
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $i614 := $M.109;
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $i615 := $eq.i32($i614, 1);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb542, $bb543;

  $bb543:
    assume !($i615 == 1);
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb542:
    assume $i615 == 1;
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $p616 := $M.58;
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} vslice_dummy_var_162 := gadget_config_desc_bmAttributes_show($p616, $p66);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $M.109 := 1;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb531:
    assume $i606 == 1;
    assume {:verifier.code 0} true;
    $i608 := $eq.i32($i605, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb536, $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    assume !($i608 == 1);
    goto $bb535;

  $bb536:
    assume $i608 == 1;
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i609 := $M.109;
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $i610 := $eq.i32($i609, 1);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb538, $bb539;

  $bb539:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb538:
    assume $i610 == 1;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p611 := $M.58;
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $i612 := $load.i64($M.41, $p12);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} vslice_dummy_var_161 := gadget_config_desc_bmAttributes_store($p611, $p67, $i612);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $M.109 := 1;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb50:
    assume $i191 == 1;
    assume {:verifier.code 0} true;
    $i194 := $slt.i32($i167, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i194 == 1);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $i590 := $M.108;
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $i591 := $ne.i32($i590, 0);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb508:
    assume $i591 == 1;
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1685} $i592 := __VERIFIER_nondet_int();
    call {:si_unique_call 1686} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i592);
    call {:si_unique_call 1687} {:cexpr "tmp___87"} boogie_si_record_i32($i592);
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    $i593 := $slt.i32($i592, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb511, $bb512;

  $bb512:
    assume !($i593 == 1);
    assume {:verifier.code 0} true;
    $i594 := $eq.i32($i592, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    assume !($i594 == 1);
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_stop();
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb513:
    assume $i594 == 1;
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $i599 := $M.108;
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $i600 := $eq.i32($i599, 1);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  $bb523:
    assume !($i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb522:
    assume $i600 == 1;
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $p601 := $M.91;
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} vslice_dummy_var_160 := gadget_strings_strings_make($p601, $p65);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb511:
    assume $i593 == 1;
    assume {:verifier.code 0} true;
    $i595 := $eq.i32($i592, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    assume !($i595 == 1);
    goto $bb515;

  $bb516:
    assume $i595 == 1;
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i596 := $M.108;
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $i597 := $eq.i32($i596, 1);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb518:
    assume $i597 == 1;
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $p598 := $M.91;
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} gadget_strings_strings_drop($p598, $p64);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb56:
    assume $i194 == 1;
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i577 := $M.107;
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $i578 := $ne.i32($i577, 0);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i578 == 1);
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb488:
    assume $i578 == 1;
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1677} $i579 := __VERIFIER_nondet_int();
    call {:si_unique_call 1678} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i579);
    call {:si_unique_call 1679} {:cexpr "tmp___86"} boogie_si_record_i32($i579);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    $i580 := $slt.i32($i579, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  $bb492:
    assume !($i580 == 1);
    assume {:verifier.code 0} true;
    $i581 := $eq.i32($i579, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb493, $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    assume !($i581 == 1);
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} ldv_stop();
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb493:
    assume $i581 == 1;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $i586 := $M.107;
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i586, 1);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb502, $bb503;

  $bb503:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb502:
    assume $i587 == 1;
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $p588 := $M.57;
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} vslice_dummy_var_159 := gadget_config_name_strings_make($p588, $p62);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb491:
    assume $i580 == 1;
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i579, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    assume !($i582 == 1);
    goto $bb495;

  $bb496:
    assume $i582 == 1;
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $i583 := $M.107;
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $i584 := $eq.i32($i583, 1);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb499:
    assume !($i584 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb498:
    assume $i584 == 1;
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $p585 := $M.57;
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} gadget_config_name_strings_drop($p585, $p61);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb48:
    assume $i190 == 1;
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i167, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i167, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    $i197 := $slt.i32($i167, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i197 == 1);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $i562 := $M.106;
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $i563 := $ne.i32($i562, 0);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i563 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb468:
    assume $i563 == 1;
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1669} $i564 := __VERIFIER_nondet_int();
    call {:si_unique_call 1670} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i564);
    call {:si_unique_call 1671} {:cexpr "tmp___85"} boogie_si_record_i32($i564);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    $i565 := $slt.i32($i564, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i565 == 1);
    assume {:verifier.code 0} true;
    $i566 := $eq.i32($i564, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    assume !($i566 == 1);
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} ldv_stop();
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb473:
    assume $i566 == 1;
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $i573 := $M.106;
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $i574 := $eq.i32($i573, 1);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb482:
    assume $i574 == 1;
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $p575 := $M.69;
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} vslice_dummy_var_158 := gadget_dev_desc_UDC_show($p575, $p59);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $M.106 := 1;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb471:
    assume $i565 == 1;
    assume {:verifier.code 0} true;
    $i567 := $eq.i32($i564, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    assume !($i567 == 1);
    goto $bb475;

  $bb476:
    assume $i567 == 1;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $i568 := $M.106;
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $i569 := $eq.i32($i568, 1);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  $bb479:
    assume !($i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb478:
    assume $i569 == 1;
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $p570 := $M.69;
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $i571 := $load.i64($M.41, $p11);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} vslice_dummy_var_157 := gadget_dev_desc_UDC_store($p570, $p58, $i571);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $M.106 := 1;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb62:
    assume $i197 == 1;
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i547 := $M.105;
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $i548 := $ne.i32($i547, 0);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb448:
    assume $i548 == 1;
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1661} $i549 := __VERIFIER_nondet_int();
    call {:si_unique_call 1662} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i549);
    call {:si_unique_call 1663} {:cexpr "tmp___84"} boogie_si_record_i32($i549);
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    $i550 := $slt.i32($i549, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i550 == 1);
    assume {:verifier.code 0} true;
    $i551 := $eq.i32($i549, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    assume !($i551 == 1);
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_stop();
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb453:
    assume $i551 == 1;
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $i558 := $M.105;
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i559 := $eq.i32($i558, 1);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  $bb463:
    assume !($i559 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb462:
    assume $i559 == 1;
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $p560 := $M.83;
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} vslice_dummy_var_156 := gadget_config_desc_MaxPower_show($p560, $p57);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb451:
    assume $i550 == 1;
    assume {:verifier.code 0} true;
    $i552 := $eq.i32($i549, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    assume !($i552 == 1);
    goto $bb455;

  $bb456:
    assume $i552 == 1;
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i553 := $M.105;
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $i554 := $eq.i32($i553, 1);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  $bb459:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb458:
    assume $i554 == 1;
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $p555 := $M.83;
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i556 := $load.i64($M.41, $p10);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} vslice_dummy_var_155 := gadget_config_desc_MaxPower_store($p555, $p56, $i556);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb60:
    assume $i196 == 1;
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $i507 := $M.104;
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $i508 := $ne.i32($i507, 0);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb412:
    assume $i508 == 1;
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1643} $i509 := __VERIFIER_nondet_int();
    call {:si_unique_call 1644} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i509);
    call {:si_unique_call 1645} {:cexpr "tmp___83"} boogie_si_record_i32($i509);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    $i510 := $slt.i32($i509, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    $i511 := $slt.i32($i509, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  $bb418:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i509, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    assume !($i512 == 1);
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_stop();
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb419:
    assume $i512 == 1;
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i542 := $M.104;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i543 := $eq.i32($i542, 1);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  $bb443:
    assume !($i543 == 1);
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb442:
    assume $i543 == 1;
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} vslice_dummy_var_154 := ldv_probe_27();
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $M.104 := 2;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(2);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i545 := $M.45;
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i546 := $add.i32($i545, 1);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $M.45 := $i546;
    call {:si_unique_call 1659} {:cexpr "ref_cnt"} boogie_si_record_i32($i546);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb417:
    assume $i511 == 1;
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i530 := $M.104;
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i531 := $eq.i32($i530, 1);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i531 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    $i536 := $M.104;
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $i537 := $eq.i32($i536, 2);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb439:
    assume $i537 == 1;
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $p538 := $M.60;
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $p539 := $M.59;
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $i540 := $load.i64($M.41, $p9);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} vslice_dummy_var_153 := gadget_info_attr_store($p538, $p539, $p54, $i540);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $M.104 := 2;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(2);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb436:
    assume $i531 == 1;
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p532 := $M.60;
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $p533 := $M.59;
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $i534 := $load.i64($M.41, $p9);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} vslice_dummy_var_152 := gadget_info_attr_store($p532, $p533, $p54, $i534);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $M.104 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb415:
    assume $i510 == 1;
    assume {:verifier.code 0} true;
    $i513 := $slt.i32($i509, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422, $bb423;

  $bb423:
    assume !($i513 == 1);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $i525 := $M.104;
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $i526 := $eq.i32($i525, 2);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  $bb434:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb433:
    assume $i526 == 1;
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $p527 := $M.60;
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} gadget_info_attr_release($p527);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $M.104 := 1;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $i528 := $M.45;
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i529 := $sub.i32($i528, 1);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $M.45 := $i529;
    call {:si_unique_call 1652} {:cexpr "ref_cnt"} boogie_si_record_i32($i529);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb422:
    assume $i513 == 1;
    assume {:verifier.code 0} true;
    $i514 := $eq.i32($i509, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    assume !($i514 == 1);
    goto $bb421;

  $bb424:
    assume $i514 == 1;
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $i515 := $M.104;
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i516 := $eq.i32($i515, 1);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $i520 := $M.104;
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i521 := $eq.i32($i520, 2);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume !($i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb429:
    assume $i521 == 1;
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p522 := $M.60;
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $p523 := $M.59;
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} vslice_dummy_var_151 := gadget_info_attr_show($p522, $p523, $p55);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $M.104 := 2;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(2);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb426:
    assume $i516 == 1;
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $p517 := $M.60;
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $p518 := $M.59;
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} vslice_dummy_var_150 := gadget_info_attr_show($p517, $p518, $p55);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $M.104 := 1;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb58:
    assume $i195 == 1;
    assume {:verifier.code 0} true;
    $i198 := $slt.i32($i167, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i198 == 1);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $i492 := $M.103;
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $i493 := $ne.i32($i492, 0);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i493 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb392:
    assume $i493 == 1;
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} $i494 := __VERIFIER_nondet_int();
    call {:si_unique_call 1636} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i494);
    call {:si_unique_call 1637} {:cexpr "tmp___82"} boogie_si_record_i32($i494);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    $i495 := $slt.i32($i494, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    $i496 := $eq.i32($i494, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    assume !($i496 == 1);
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} ldv_stop();
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb397:
    assume $i496 == 1;
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $i503 := $M.103;
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i503, 1);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  $bb407:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb406:
    assume $i504 == 1;
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $p505 := $M.70;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} vslice_dummy_var_149 := gadget_strings_serialnumber_show($p505, $p52);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $M.103 := 1;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb395:
    assume $i495 == 1;
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i494, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    assume !($i497 == 1);
    goto $bb399;

  $bb400:
    assume $i497 == 1;
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $i498 := $M.103;
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $i499 := $eq.i32($i498, 1);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i499 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb402:
    assume $i499 == 1;
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $p500 := $M.70;
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $i501 := $load.i64($M.41, $p8);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} vslice_dummy_var_148 := gadget_strings_serialnumber_store($p500, $p53, $i501);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $M.103 := 1;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb64:
    assume $i198 == 1;
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $i477 := $M.102;
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $i478 := $ne.i32($i477, 0);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i478 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb372:
    assume $i478 == 1;
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1627} $i479 := __VERIFIER_nondet_int();
    call {:si_unique_call 1628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i479);
    call {:si_unique_call 1629} {:cexpr "tmp___81"} boogie_si_record_i32($i479);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    $i480 := $slt.i32($i479, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i480 == 1);
    assume {:verifier.code 0} true;
    $i481 := $eq.i32($i479, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    assume !($i481 == 1);
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} ldv_stop();
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb377:
    assume $i481 == 1;
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $i488 := $M.102;
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $i489 := $eq.i32($i488, 1);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb386:
    assume $i489 == 1;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $p490 := $M.56;
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} vslice_dummy_var_147 := gadget_dev_desc_bcdDevice_show($p490, $p51);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb375:
    assume $i480 == 1;
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i479, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    assume !($i482 == 1);
    goto $bb379;

  $bb380:
    assume $i482 == 1;
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $i483 := $M.102;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i484 := $eq.i32($i483, 1);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb382:
    assume $i484 == 1;
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p485 := $M.56;
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $i486 := $load.i64($M.41, $p7);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} vslice_dummy_var_146 := gadget_dev_desc_bcdDevice_store($p485, $p50, $i486);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb46:
    assume $i189 == 1;
    assume {:verifier.code 0} true;
    $i199 := $slt.i32($i167, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i167, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    $i201 := $slt.i32($i167, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i167, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i202 == 1);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $i462 := $M.101;
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $i463 := $ne.i32($i462, 0);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb352:
    assume $i463 == 1;
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1619} $i464 := __VERIFIER_nondet_int();
    call {:si_unique_call 1620} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i464);
    call {:si_unique_call 1621} {:cexpr "tmp___80"} boogie_si_record_i32($i464);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $i465 := $slt.i32($i464, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i464, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb357, $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    assume !($i466 == 1);
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_stop();
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb357:
    assume $i466 == 1;
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i473 := $M.101;
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $i474 := $eq.i32($i473, 1);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb366:
    assume $i474 == 1;
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $p475 := $M.89;
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} vslice_dummy_var_145 := gadget_strings_manufacturer_show($p475, $p49);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb355:
    assume $i465 == 1;
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i464, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    assume !($i467 == 1);
    goto $bb359;

  $bb360:
    assume $i467 == 1;
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $i468 := $M.101;
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $i469 := $eq.i32($i468, 1);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb362:
    assume $i469 == 1;
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $p470 := $M.89;
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i471 := $load.i64($M.41, $p6);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} vslice_dummy_var_144 := gadget_strings_manufacturer_store($p470, $p48, $i471);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb72:
    assume $i202 == 1;
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $i449 := $M.100;
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $i450 := $ne.i32($i449, 0);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb332:
    assume $i450 == 1;
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1611} $i451 := __VERIFIER_nondet_int();
    call {:si_unique_call 1612} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i451);
    call {:si_unique_call 1613} {:cexpr "tmp___79"} boogie_si_record_i32($i451);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i452 := $slt.i32($i451, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    $i453 := $eq.i32($i451, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    assume !($i453 == 1);
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} ldv_stop();
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb337:
    assume $i453 == 1;
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $i458 := $M.100;
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $i459 := $eq.i32($i458, 1);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb346:
    assume $i459 == 1;
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $p460 := $M.82;
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} vslice_dummy_var_143 := gadgets_make($p460, $p47);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb335:
    assume $i452 == 1;
    assume {:verifier.code 0} true;
    $i454 := $eq.i32($i451, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    assume !($i454 == 1);
    goto $bb339;

  $bb340:
    assume $i454 == 1;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $i455 := $M.100;
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i456 := $eq.i32($i455, 1);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb342:
    assume $i456 == 1;
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p457 := $M.82;
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} gadgets_drop($p457, $p46);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb70:
    assume $i201 == 1;
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $i395 := $M.99;
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i396 := $ne.i32($i395, 0);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb269:
    assume $i396 == 1;
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1581} $i397 := __VERIFIER_nondet_int();
    call {:si_unique_call 1582} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i397);
    call {:si_unique_call 1583} {:cexpr "tmp___78"} boogie_si_record_i32($i397);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i398 := $slt.i32($i397, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    $i399 := $slt.i32($i397, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    $i400 := $slt.i32($i397, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i397, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    assume !($i401 == 1);
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} ldv_stop();
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb278:
    assume $i401 == 1;
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $i446 := $M.99;
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i447 := $eq.i32($i446, 4);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb326:
    assume $i447 == 1;
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $p448 := $M.73;
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} composite_resume($p448);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $M.99 := 3;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    goto $bb328;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb276:
    assume $i400 == 1;
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $i440 := $M.99;
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i440, 2);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb320:
    assume $i441 == 1;
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $p442 := $M.73;
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $i443 := composite_setup($p442, $p42);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $M.131 := $i443;
    call {:si_unique_call 1606} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i443);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $i444 := $M.131;
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $i445 := $eq.i32($i444, 0);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb322:
    assume $i445 == 1;
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $M.99 := 3;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    goto $bb324;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb274:
    assume $i399 == 1;
    assume {:verifier.code 0} true;
    $i402 := $slt.i32($i397, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i402 == 1);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $i437 := $M.99;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i437, 3);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb317:
    assume $i438 == 1;
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $p439 := $M.73;
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} composite_suspend($p439);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $M.99 := 4;
    call {:si_unique_call 1604} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    goto $bb319;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb281:
    assume $i402 == 1;
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $i425 := $M.99;
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i426 := $eq.i32($i425, 4);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $i428 := $M.99;
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i428, 1);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $i431 := $M.99;
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i431, 3);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $i434 := $M.99;
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i435 := $eq.i32($i434, 2);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb314:
    assume $i435 == 1;
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $p436 := $M.73;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} composite_disconnect($p436);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    goto $bb316;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb311:
    assume $i432 == 1;
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $p433 := $M.73;
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} composite_disconnect($p433);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $M.99 := 3;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    goto $bb313;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb308:
    assume $i429 == 1;
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $p430 := $M.73;
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} composite_disconnect($p430);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    goto $bb310;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb305:
    assume $i426 == 1;
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $p427 := $M.73;
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} composite_disconnect($p427);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $M.99 := 4;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    goto $bb307;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb272:
    assume $i398 == 1;
    assume {:verifier.code 0} true;
    $i403 := $slt.i32($i397, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    $i404 := $slt.i32($i397, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i404 == 1);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $i417 := $M.99;
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $i418 := $eq.i32($i417, 1);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb299:
    assume $i418 == 1;
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $p419 := $M.73;
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $i420 := configfs_composite_bind($p419, $p44);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $M.130 := $i420;
    call {:si_unique_call 1592} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i420);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i421 := $M.130;
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i421, 0);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb301:
    assume $i422 == 1;
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1593} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i423 := $M.45;
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $i424 := $add.i32($i423, 1);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $M.45 := $i424;
    call {:si_unique_call 1594} {:cexpr "ref_cnt"} boogie_si_record_i32($i424);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    goto $bb303;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb285:
    assume $i404 == 1;
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $i412 := $M.99;
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i412, 2);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb296:
    assume $i413 == 1;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p414 := $M.73;
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} configfs_composite_unbind($p414);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i415 := $M.45;
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $i416 := $sub.i32($i415, 1);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $M.45 := $i416;
    call {:si_unique_call 1590} {:cexpr "ref_cnt"} boogie_si_record_i32($i416);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    goto $bb298;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb283:
    assume $i403 == 1;
    assume {:verifier.code 0} true;
    $i405 := $eq.i32($i397, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    assume !($i405 == 1);
    goto $bb280;

  $bb287:
    assume $i405 == 1;
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $i406 := $M.99;
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i406, 4);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $i409 := $M.99;
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, 3);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb292:
    assume $i410 == 1;
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $p411 := $M.73;
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} composite_disconnect($p411);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1587} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    goto $bb294;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb289:
    assume $i407 == 1;
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $p408 := $M.73;
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} composite_disconnect($p408);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    goto $bb291;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i200 == 1;
    assume {:verifier.code 0} true;
    $i203 := $slt.i32($i167, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i203 == 1);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i380 := $M.98;
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i381 := $ne.i32($i380, 0);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb249:
    assume $i381 == 1;
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1573} $i382 := __VERIFIER_nondet_int();
    call {:si_unique_call 1574} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i382);
    call {:si_unique_call 1575} {:cexpr "tmp___77"} boogie_si_record_i32($i382);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i383 := $slt.i32($i382, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i382, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    assume !($i384 == 1);
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} ldv_stop();
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb254:
    assume $i384 == 1;
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $i391 := $M.98;
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 1);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb263:
    assume $i392 == 1;
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $p393 := $M.71;
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_142 := gadget_strings_product_show($p393, $p40);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb252:
    assume $i383 == 1;
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i382, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    assume !($i385 == 1);
    goto $bb256;

  $bb257:
    assume $i385 == 1;
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $i386 := $M.98;
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i386, 1);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb259:
    assume $i387 == 1;
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $p388 := $M.71;
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i389 := $load.i64($M.41, $p5);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_141 := gadget_strings_product_store($p388, $p39, $i389);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb74:
    assume $i203 == 1;
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $i318 := $M.97;
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i319 := $ne.i32($i318, 0);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb197:
    assume $i319 == 1;
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1547} $i320 := __VERIFIER_nondet_int();
    call {:si_unique_call 1548} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i320);
    call {:si_unique_call 1549} {:cexpr "tmp___76"} boogie_si_record_i32($i320);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i321 := $slt.i32($i320, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    $i322 := $slt.i32($i320, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    $i323 := $slt.i32($i320, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i320, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i324 == 1);
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} ldv_stop();
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb206:
    assume $i324 == 1;
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $i375 := $M.97;
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i375, 1);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb243:
    assume $i376 == 1;
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_140 := ldv_probe_26();
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $M.97 := 2;
    call {:si_unique_call 1570} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i378 := $M.45;
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $i379 := $add.i32($i378, 1);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $M.45 := $i379;
    call {:si_unique_call 1571} {:cexpr "ref_cnt"} boogie_si_record_i32($i379);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb204:
    assume $i323 == 1;
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i365 := $M.97;
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i365, 1);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i370 := $M.97;
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 2);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb240:
    assume $i371 == 1;
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $p372 := $M.55;
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $p373 := $M.53;
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_139 := config_usb_cfg_link($p372, $p373);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $M.97 := 2;
    call {:si_unique_call 1568} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    goto $bb242;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb237:
    assume $i366 == 1;
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $p367 := $M.55;
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $p368 := $M.53;
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} vslice_dummy_var_138 := config_usb_cfg_link($p367, $p368);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1566} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb239;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb202:
    assume $i322 == 1;
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $i353 := $M.97;
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 1);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $i359 := $M.97;
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 2);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb234:
    assume $i360 == 1;
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $p361 := $M.55;
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $p362 := $M.54;
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $i363 := $load.i64($M.41, $p4);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} vslice_dummy_var_137 := config_usb_cfg_attr_store($p361, $p362, $p38, $i363);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $M.97 := 2;
    call {:si_unique_call 1564} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb231:
    assume $i354 == 1;
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p355 := $M.55;
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $p356 := $M.54;
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $i357 := $load.i64($M.41, $p4);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} vslice_dummy_var_136 := config_usb_cfg_attr_store($p355, $p356, $p38, $i357);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1562} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb200:
    assume $i321 == 1;
    assume {:verifier.code 0} true;
    $i325 := $slt.i32($i320, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    $i326 := $slt.i32($i320, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i326 == 1);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $i343 := $M.97;
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 1);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i348 := $M.97;
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $i349 := $eq.i32($i348, 2);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb228:
    assume $i349 == 1;
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $p350 := $M.55;
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $p351 := $M.53;
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} vslice_dummy_var_135 := config_usb_cfg_unlink($p350, $p351);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $M.97 := 2;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    goto $bb230;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb225:
    assume $i344 == 1;
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $p345 := $M.55;
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $p346 := $M.53;
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} vslice_dummy_var_134 := config_usb_cfg_unlink($p345, $p346);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1558} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    goto $bb227;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb211:
    assume $i326 == 1;
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $i338 := $M.97;
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $i339 := $eq.i32($i338, 2);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb222:
    assume $i339 == 1;
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p340 := $M.55;
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} gadget_config_attr_release($p340);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $i341 := $M.45;
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $i342 := $sub.i32($i341, 1);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $M.45 := $i342;
    call {:si_unique_call 1556} {:cexpr "ref_cnt"} boogie_si_record_i32($i342);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb209:
    assume $i325 == 1;
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i320, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb208;

  $bb213:
    assume $i327 == 1;
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $i328 := $M.97;
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 1);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i333 := $M.97;
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 2);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb218:
    assume $i334 == 1;
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $p335 := $M.55;
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $p336 := $M.54;
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} vslice_dummy_var_133 := config_usb_cfg_attr_show($p335, $p336, $p37);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $M.97 := 2;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb215:
    assume $i329 == 1;
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $p330 := $M.55;
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $p331 := $M.54;
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} vslice_dummy_var_132 := config_usb_cfg_attr_show($p330, $p331, $p37);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb66:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    $i204 := $slt.i32($i167, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    $i205 := $slt.i32($i167, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i205 == 1);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i278 := $M.96;
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i279 := $ne.i32($i278, 0);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb161:
    assume $i279 == 1;
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1529} $i280 := __VERIFIER_nondet_int();
    call {:si_unique_call 1530} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i280);
    call {:si_unique_call 1531} {:cexpr "tmp___75"} boogie_si_record_i32($i280);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i281 := $slt.i32($i280, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    $i282 := $slt.i32($i280, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i280, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume !($i283 == 1);
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_stop();
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb168:
    assume $i283 == 1;
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $i313 := $M.96;
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 1);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb191:
    assume $i314 == 1;
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} vslice_dummy_var_131 := ldv_probe_7();
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $i316 := $M.45;
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $i317 := $add.i32($i316, 1);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $M.45 := $i317;
    call {:si_unique_call 1545} {:cexpr "ref_cnt"} boogie_si_record_i32($i317);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb166:
    assume $i282 == 1;
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $i301 := $M.96;
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 1);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i307 := $M.96;
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 2);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb188:
    assume $i308 == 1;
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $p309 := $M.68;
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $p310 := $M.67;
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $i311 := $load.i64($M.41, $p3);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} vslice_dummy_var_130 := usb_os_desc_ext_prop_attr_store($p309, $p310, $p36, $i311);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume $i302 == 1;
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $p303 := $M.68;
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $p304 := $M.67;
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i305 := $load.i64($M.41, $p3);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_129 := usb_os_desc_ext_prop_attr_store($p303, $p304, $p36, $i305);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb164:
    assume $i281 == 1;
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i280, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i284 == 1);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $i296 := $M.96;
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 2);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb182:
    assume $i297 == 1;
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p298 := $M.68;
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} usb_os_desc_ext_prop_release($p298);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1537} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $i299 := $M.45;
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $i300 := $sub.i32($i299, 1);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $M.45 := $i300;
    call {:si_unique_call 1538} {:cexpr "ref_cnt"} boogie_si_record_i32($i300);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb171:
    assume $i284 == 1;
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i280, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb170;

  $bb173:
    assume $i285 == 1;
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $i286 := $M.96;
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 1);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i291 := $M.96;
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 2);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb178:
    assume $i292 == 1;
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $p293 := $M.68;
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p294 := $M.67;
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} vslice_dummy_var_128 := usb_os_desc_ext_prop_attr_show($p293, $p294, $p35);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1535} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb175:
    assume $i287 == 1;
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $p288 := $M.68;
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $p289 := $M.67;
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} vslice_dummy_var_127 := usb_os_desc_ext_prop_attr_show($p288, $p289, $p35);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1533} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb78:
    assume $i205 == 1;
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $i238 := $M.95;
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 0);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb125:
    assume $i239 == 1;
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1511} $i240 := __VERIFIER_nondet_int();
    call {:si_unique_call 1512} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i240);
    call {:si_unique_call 1513} {:cexpr "tmp___74"} boogie_si_record_i32($i240);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i241 := $slt.i32($i240, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    $i242 := $slt.i32($i240, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i240, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    assume !($i243 == 1);
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_stop();
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb132:
    assume $i243 == 1;
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i273 := $M.95;
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 1);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb155:
    assume $i274 == 1;
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} vslice_dummy_var_126 := ldv_probe_21();
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1526} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $i276 := $M.45;
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $i277 := $add.i32($i276, 1);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $M.45 := $i277;
    call {:si_unique_call 1527} {:cexpr "ref_cnt"} boogie_si_record_i32($i277);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb130:
    assume $i242 == 1;
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i261 := $M.95;
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 1);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i267 := $M.95;
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i267, 2);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb152:
    assume $i268 == 1;
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $p269 := $M.88;
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p270 := $M.87;
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i271 := $load.i64($M.41, $p2);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} vslice_dummy_var_125 := gadget_config_name_attr_store($p269, $p270, $p34, $i271);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb149:
    assume $i262 == 1;
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $p263 := $M.88;
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $p264 := $M.87;
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i265 := $load.i64($M.41, $p2);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} vslice_dummy_var_124 := gadget_config_name_attr_store($p263, $p264, $p34, $i265);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1522} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb128:
    assume $i241 == 1;
    assume {:verifier.code 0} true;
    $i244 := $slt.i32($i240, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i244 == 1);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $i256 := $M.95;
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 2);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb146:
    assume $i257 == 1;
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $p258 := $M.88;
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} gadget_config_name_attr_release($p258);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1519} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $i259 := $M.45;
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $i260 := $sub.i32($i259, 1);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $M.45 := $i260;
    call {:si_unique_call 1520} {:cexpr "ref_cnt"} boogie_si_record_i32($i260);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb135:
    assume $i244 == 1;
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i240, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb134;

  $bb137:
    assume $i245 == 1;
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i246 := $M.95;
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 1);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i251 := $M.95;
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 2);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb142:
    assume $i252 == 1;
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $p253 := $M.88;
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $p254 := $M.87;
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} vslice_dummy_var_123 := gadget_config_name_attr_show($p253, $p254, $p33);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1517} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb139:
    assume $i247 == 1;
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $p248 := $M.88;
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p249 := $M.87;
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} vslice_dummy_var_122 := gadget_config_name_attr_show($p248, $p249, $p33);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1515} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb76:
    assume $i204 == 1;
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i167, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i206 == 1);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $i223 := $M.94;
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb105:
    assume $i224 == 1;
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1503} $i225 := __VERIFIER_nondet_int();
    call {:si_unique_call 1504} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i225);
    call {:si_unique_call 1505} {:cexpr "tmp___73"} boogie_si_record_i32($i225);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i226 := $slt.i32($i225, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i225, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i227 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_stop();
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb110:
    assume $i227 == 1;
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i234 := $M.94;
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 1);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb119:
    assume $i235 == 1;
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $p236 := $M.72;
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} vslice_dummy_var_121 := gadget_dev_desc_idVendor_show($p236, $p31);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1509} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb108:
    assume $i226 == 1;
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i225, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb112;

  $bb113:
    assume $i228 == 1;
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $i229 := $M.94;
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 1);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb115:
    assume $i230 == 1;
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $p231 := $M.72;
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i232 := $load.i64($M.41, $p1);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} vslice_dummy_var_120 := gadget_dev_desc_idVendor_store($p231, $p32, $i232);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1507} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb80:
    assume $i206 == 1;
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i167, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb17;

  $bb82:
    assume $i207 == 1;
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $i208 := $M.93;
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb84:
    assume $i209 == 1;
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1495} $i210 := __VERIFIER_nondet_int();
    call {:si_unique_call 1496} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i210);
    call {:si_unique_call 1497} {:cexpr "tmp___72"} boogie_si_record_i32($i210);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i211 := $slt.i32($i210, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i210, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_stop();
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb89:
    assume $i212 == 1;
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $i219 := $M.93;
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 1);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb98:
    assume $i220 == 1;
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $p221 := $M.85;
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_119 := gadget_dev_desc_bMaxPacketSize0_show($p221, $p29);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb87:
    assume $i211 == 1;
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i210, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i213 == 1);
    goto $bb91;

  $bb92:
    assume $i213 == 1;
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $i214 := $M.93;
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 1);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb94:
    assume $i215 == 1;
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $p216 := $M.85;
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $i217 := $load.i64($M.41, $p0);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} vslice_dummy_var_118 := gadget_dev_desc_bMaxPacketSize0_store($p216, $p30, $i217);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb104_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1492} $i167 := __VERIFIER_nondet_int();
    call {:si_unique_call 1493} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i167);
    call {:si_unique_call 1494} {:cexpr "tmp___71"} boogie_si_record_i32($i167);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 696692);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    return;
}



const ldv_probe_21: ref;

axiom ldv_probe_21 == $sub.ref(0, 697724);

procedure ldv_probe_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1970} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1971} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_7: ref;

axiom ldv_probe_7 == $sub.ref(0, 698756);

procedure ldv_probe_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1972} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1973} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_26: ref;

axiom ldv_probe_26 == $sub.ref(0, 699788);

procedure ldv_probe_26() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_26() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1974} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1975} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_27: ref;

axiom ldv_probe_27 == $sub.ref(0, 700820);

procedure ldv_probe_27() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_27() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1976} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1977} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_10: ref;

axiom ldv_probe_10 == $sub.ref(0, 701852);

procedure ldv_probe_10() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_10() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1978} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1979} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const gadget_cfs_exit: ref;

axiom gadget_cfs_exit == $sub.ref(0, 702884);

procedure gadget_cfs_exit();
  free requires assertsPassed;



implementation gadget_cfs_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} configfs_unregister_subsystem(gadget_subsys);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    return;
}



const gadget_cfs_init: ref;

axiom gadget_cfs_init == $sub.ref(0, 703916);

procedure gadget_cfs_init() returns ($r: i32);
  free requires assertsPassed;



implementation gadget_cfs_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} config_group_init(gadget_subsys);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} $i0 := configfs_register_subsystem(gadget_subsys);
    call {:si_unique_call 1983} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_15: ref;

axiom ldv_probe_15 == $sub.ref(0, 704948);

procedure ldv_probe_15() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_15() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1984} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1985} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 705980);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $i0 := $M.29;
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} ldv_error();
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const config_group_init: ref;

axiom config_group_init == $sub.ref(0, 707012);

procedure config_group_init($p0: ref);
  free requires assertsPassed;



implementation config_group_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    return;
}



const configfs_register_subsystem: ref;

axiom configfs_register_subsystem == $sub.ref(0, 708044);

procedure configfs_register_subsystem($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation configfs_register_subsystem($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1987} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1988} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const configfs_unregister_subsystem: ref;

axiom configfs_unregister_subsystem == $sub.ref(0, 709076);

procedure configfs_unregister_subsystem($p0: ref);
  free requires assertsPassed;



implementation configfs_unregister_subsystem($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 710108);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1989} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 1} true;
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 711140);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 712172);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 713204);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 714236);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 715268);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 716300);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 717332);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 718364);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 719396);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 720428);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 721460);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 722492);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 723524);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1990} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1991} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1992} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1993} __VERIFIER_assume($i4);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 724556);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 725588);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 726620);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 727652);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 728684);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 729716);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 730748);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 731780);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 732812);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1994} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1995} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1996} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1997} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1998} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1999} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2000} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2001} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2002} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2003} __VERIFIER_assume($i7);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2004} __VERIFIER_assume($i11);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 733844);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 734876);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 735908);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 736940);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 737972);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 739004);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 740036);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 741068);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 742100);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2005} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2006} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2007} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 743132);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2008} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2009} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 744164);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 745196);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2010} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2011} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 746228);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 747260);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 748292);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2012} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2013} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2014} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2015} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $p6 := malloc($i5);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 2017} cmdloc_dummy_var_55 := $memset.i8(cmdloc_dummy_var_54, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 749324);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 750356);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.136, $M.137, $M.0, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.130, $M.131, $M.132, $M.82, $M.112, $M.126, $M.86, $M.48, $M.49, $M.55, $M.111, $M.127, $M.94, $M.60, $M.121, $M.64, $M.68, $M.87, $M.53, $M.74, $M.50, $M.101, $M.78, $M.59, $M.85, $M.113, $M.80, $M.67, $M.75, $M.106, $M.77, $M.97, $M.105, $M.99, $M.103, $M.56, $M.119, $M.91, $M.54, $M.110, $M.57, $M.65, $M.62, $M.58, $M.117, $M.96, $M.52, $M.100, $M.76, $M.90, $M.61, $M.109, $M.122, $M.104, $M.128, $M.92, $M.98, $M.66, $M.118, $M.70, $M.71, $M.108, $M.114, $M.89, $M.79, $M.63, $M.83, $M.69, $M.84, $M.123, $M.116, $M.51, $M.81, $M.93, $M.129, $M.95, $M.115, $M.102, $M.72, $M.107, $M.73, $M.124, $M.88, $M.125, $M.120, $M.47, $M.46, $M.43, $M.42, $M.45, $M.44, $M.29, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2018} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.136 := $store.i8($M.136, __kstrtab_usb_gadget_get_string, 117);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(4, 1)), 103);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(5, 1)), 97);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(6, 1)), 100);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(7, 1)), 103);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(9, 1)), 116);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(11, 1)), 103);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(13, 1)), 116);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(15, 1)), 115);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(16, 1)), 116);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(17, 1)), 114);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(19, 1)), 110);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(20, 1)), 103);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_usb_gadget_get_string, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.137 := $store.i8($M.137, __kstrtab_alloc_ep_req, 97);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(1, 1)), 108);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(2, 1)), 108);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(3, 1)), 111);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(4, 1)), 99);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(6, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(7, 1)), 112);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(9, 1)), 114);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(11, 1)), 113);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_alloc_ep_req, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.ref($M.0, gadget_config_name_strings_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_strings_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), gadget_config_name_strings_make);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_strings_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_strings_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_strings_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_config_name_strings_drop);
    $M.0 := $store.ref($M.0, gadget_config_name_strings_type, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_strings_type, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_strings_type, $mul.ref(0, 32)), $mul.ref(16, 1)), gadget_config_name_strings_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_strings_type, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, gadget_usb_cfg_bmAttributes, .str.109);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_usb_cfg_bmAttributes, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_usb_cfg_bmAttributes, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_usb_cfg_bmAttributes, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_config_desc_bmAttributes_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_usb_cfg_bmAttributes, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_config_desc_bmAttributes_store);
    $M.0 := $store.ref($M.0, gadget_usb_cfg_MaxPower, .str.108);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_usb_cfg_MaxPower, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_usb_cfg_MaxPower, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_usb_cfg_MaxPower, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_config_desc_MaxPower_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_usb_cfg_MaxPower, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_config_desc_MaxPower_store);
    $M.0 := $store.ref($M.0, gadget_config_attrs, gadget_usb_cfg_MaxPower);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_attrs, $mul.ref(0, 24)), $mul.ref(1, 8)), gadget_usb_cfg_bmAttributes);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_attrs, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    $M.0 := $store.ref($M.0, gadget_config_item_ops, gadget_config_attr_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_item_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), config_usb_cfg_attr_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_item_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), config_usb_cfg_attr_store);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_item_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), config_usb_cfg_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_item_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), config_usb_cfg_unlink);
    $M.0 := $store.ref($M.0, gadget_config_type, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_type, $mul.ref(0, 32)), $mul.ref(8, 1)), gadget_config_item_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_type, $mul.ref(0, 32)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_type, $mul.ref(0, 32)), $mul.ref(24, 1)), gadget_config_attrs);
    $M.0 := $store.ref($M.0, ext_prop_data, .str.106);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ext_prop_data, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ext_prop_data, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ext_prop_data, $mul.ref(0, 40)), $mul.ref(24, 1)), ext_prop_data_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ext_prop_data, $mul.ref(0, 40)), $mul.ref(32, 1)), ext_prop_data_store);
    $M.0 := $store.ref($M.0, ext_prop_type, .str.105);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ext_prop_type, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ext_prop_type, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ext_prop_type, $mul.ref(0, 40)), $mul.ref(24, 1)), ext_prop_type_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ext_prop_type, $mul.ref(0, 40)), $mul.ref(32, 1)), ext_prop_type_store);
    $M.0 := $store.ref($M.0, ext_prop_attrs, ext_prop_type);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ext_prop_attrs, $mul.ref(0, 24)), $mul.ref(1, 8)), ext_prop_data);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ext_prop_attrs, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    $M.0 := $store.ref($M.0, ext_prop_ops, usb_os_desc_ext_prop_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ext_prop_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), usb_os_desc_ext_prop_attr_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ext_prop_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), usb_os_desc_ext_prop_attr_store);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ext_prop_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ext_prop_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, gadgets_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadgets_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), gadgets_make);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadgets_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadgets_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadgets_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), gadgets_drop);
    $M.0 := $store.ref($M.0, gadgets_type, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadgets_type, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadgets_type, $mul.ref(0, 32)), $mul.ref(16, 1)), gadgets_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadgets_type, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, gadget_subsys, $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(28, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), gadgets_type);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(gadget_subsys, $mul.ref(192, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(gadget_subsys, $mul.ref(192, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(104, 1)), $add.ref(gadget_subsys, $mul.ref(112, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.101);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(gadget_subsys, $mul.ref(0, 272)), $mul.ref(112, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, gadget_strings_serialnumber, .str.99);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_strings_serialnumber, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_strings_serialnumber, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_serialnumber, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_strings_serialnumber_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_serialnumber, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_strings_serialnumber_store);
    $M.0 := $store.ref($M.0, gadget_strings_product, .str.98);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_strings_product, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_strings_product, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_product, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_strings_product_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_product, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_strings_product_store);
    $M.0 := $store.ref($M.0, gadget_strings_manufacturer, .str.97);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_strings_manufacturer, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_strings_manufacturer, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_manufacturer, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_strings_manufacturer_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_manufacturer, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_strings_manufacturer_store);
    $M.0 := $store.ref($M.0, gadget_strings_langid_attrs, gadget_strings_manufacturer);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_langid_attrs, $mul.ref(0, 32)), $mul.ref(1, 8)), gadget_strings_product);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_langid_attrs, $mul.ref(0, 32)), $mul.ref(2, 8)), gadget_strings_serialnumber);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_langid_attrs, $mul.ref(0, 32)), $mul.ref(3, 8)), $0.ref);
    $M.0 := $store.ref($M.0, gadget_strings_langid_item_ops, gadget_strings_attr_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_langid_item_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), gadget_strings_attr_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_langid_item_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), gadget_strings_attr_store);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_langid_item_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_langid_item_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, gadget_strings_langid_type, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_langid_type, $mul.ref(0, 32)), $mul.ref(8, 1)), gadget_strings_langid_item_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_langid_type, $mul.ref(0, 32)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_langid_type, $mul.ref(0, 32)), $mul.ref(24, 1)), gadget_strings_langid_attrs);
    $M.0 := $store.ref($M.0, gadget_config_name_configuration, .str.96);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_config_name_configuration, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_config_name_configuration, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_configuration, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_config_name_configuration_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_configuration, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_config_name_configuration_store);
    $M.0 := $store.ref($M.0, gadget_config_name_langid_attrs, gadget_config_name_configuration);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_langid_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, gadget_config_name_langid_item_ops, gadget_config_name_attr_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_langid_item_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), gadget_config_name_attr_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_langid_item_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), gadget_config_name_attr_store);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_langid_item_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_langid_item_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, gadget_config_name_langid_type, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_langid_type, $mul.ref(0, 32)), $mul.ref(8, 1)), gadget_config_name_langid_item_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_langid_type, $mul.ref(0, 32)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_config_name_langid_type, $mul.ref(0, 32)), $mul.ref(24, 1)), gadget_config_name_langid_attrs);
    $M.0 := $store.ref($M.0, gadget_cdev_desc_UDC, .str.94);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_UDC, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_UDC, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_UDC, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_dev_desc_UDC_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_UDC, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_dev_desc_UDC_store);
    $M.0 := $store.ref($M.0, gadget_cdev_desc_bcdUSB, .str.93);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bcdUSB, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bcdUSB, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bcdUSB, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_dev_desc_bcdUSB_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bcdUSB, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_dev_desc_bcdUSB_store);
    $M.0 := $store.ref($M.0, gadget_cdev_desc_bcdDevice, .str.92);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bcdDevice, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bcdDevice, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bcdDevice, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_dev_desc_bcdDevice_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bcdDevice, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_dev_desc_bcdDevice_store);
    $M.0 := $store.ref($M.0, gadget_cdev_desc_idProduct, .str.91);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_idProduct, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_idProduct, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_idProduct, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_dev_desc_idProduct_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_idProduct, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_dev_desc_idProduct_store);
    $M.0 := $store.ref($M.0, gadget_cdev_desc_idVendor, .str.90);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_idVendor, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_idVendor, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_idVendor, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_dev_desc_idVendor_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_idVendor, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_dev_desc_idVendor_store);
    $M.0 := $store.ref($M.0, gadget_cdev_desc_bMaxPacketSize0, .str.89);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bMaxPacketSize0, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bMaxPacketSize0, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bMaxPacketSize0, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_dev_desc_bMaxPacketSize0_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bMaxPacketSize0, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_dev_desc_bMaxPacketSize0_store);
    $M.0 := $store.ref($M.0, gadget_cdev_desc_bDeviceProtocol, .str.88);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bDeviceProtocol, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bDeviceProtocol, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bDeviceProtocol, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_dev_desc_bDeviceProtocol_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bDeviceProtocol, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_dev_desc_bDeviceProtocol_store);
    $M.0 := $store.ref($M.0, gadget_cdev_desc_bDeviceSubClass, .str.87);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bDeviceSubClass, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bDeviceSubClass, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bDeviceSubClass, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_dev_desc_bDeviceSubClass_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bDeviceSubClass, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_dev_desc_bDeviceSubClass_store);
    $M.0 := $store.ref($M.0, gadget_cdev_desc_bDeviceClass, .str.86);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bDeviceClass, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(gadget_cdev_desc_bDeviceClass, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bDeviceClass, $mul.ref(0, 40)), $mul.ref(24, 1)), gadget_dev_desc_bDeviceClass_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_cdev_desc_bDeviceClass, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_dev_desc_bDeviceClass_store);
    $M.0 := $store.ref($M.0, gadget_root_attrs, gadget_cdev_desc_bDeviceClass);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_attrs, $mul.ref(0, 80)), $mul.ref(1, 8)), gadget_cdev_desc_bDeviceSubClass);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_attrs, $mul.ref(0, 80)), $mul.ref(2, 8)), gadget_cdev_desc_bDeviceProtocol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_attrs, $mul.ref(0, 80)), $mul.ref(3, 8)), gadget_cdev_desc_bMaxPacketSize0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_attrs, $mul.ref(0, 80)), $mul.ref(4, 8)), gadget_cdev_desc_idVendor);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_attrs, $mul.ref(0, 80)), $mul.ref(5, 8)), gadget_cdev_desc_idProduct);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_attrs, $mul.ref(0, 80)), $mul.ref(6, 8)), gadget_cdev_desc_bcdDevice);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_attrs, $mul.ref(0, 80)), $mul.ref(7, 8)), gadget_cdev_desc_bcdUSB);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_attrs, $mul.ref(0, 80)), $mul.ref(8, 8)), gadget_cdev_desc_UDC);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_attrs, $mul.ref(0, 80)), $mul.ref(9, 8)), $0.ref);
    $M.0 := $store.ref($M.0, gadget_root_item_ops, gadget_info_attr_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_item_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), gadget_info_attr_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_item_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), gadget_info_attr_store);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_item_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_item_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, gadget_root_type, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_type, $mul.ref(0, 32)), $mul.ref(8, 1)), gadget_root_item_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_type, $mul.ref(0, 32)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_root_type, $mul.ref(0, 32)), $mul.ref(24, 1)), gadget_root_attrs);
    $M.0 := $store.ref($M.0, configfs_driver_template, $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(8, 1)), 5);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(16, 1)), configfs_composite_bind);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(24, 1)), configfs_composite_unbind);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(32, 1)), composite_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(40, 1)), composite_disconnect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(48, 1)), composite_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(56, 1)), composite_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(64, 1)), composite_disconnect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(0, 1)), .str.84);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(16, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(configfs_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, os_desc_qw_sign, .str.83);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(os_desc_qw_sign, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(os_desc_qw_sign, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_qw_sign, $mul.ref(0, 40)), $mul.ref(24, 1)), os_desc_qw_sign_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_qw_sign, $mul.ref(0, 40)), $mul.ref(32, 1)), os_desc_qw_sign_store);
    $M.0 := $store.ref($M.0, os_desc_b_vendor_code, .str.82);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(os_desc_b_vendor_code, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(os_desc_b_vendor_code, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_b_vendor_code, $mul.ref(0, 40)), $mul.ref(24, 1)), os_desc_b_vendor_code_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_b_vendor_code, $mul.ref(0, 40)), $mul.ref(32, 1)), os_desc_b_vendor_code_store);
    $M.0 := $store.ref($M.0, os_desc_use, .str.81);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(os_desc_use, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(os_desc_use, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_use, $mul.ref(0, 40)), $mul.ref(24, 1)), os_desc_use_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_use, $mul.ref(0, 40)), $mul.ref(32, 1)), os_desc_use_store);
    $M.0 := $store.ref($M.0, os_desc_attrs, os_desc_use);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_attrs, $mul.ref(0, 32)), $mul.ref(1, 8)), os_desc_b_vendor_code);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_attrs, $mul.ref(0, 32)), $mul.ref(2, 8)), os_desc_qw_sign);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_attrs, $mul.ref(0, 32)), $mul.ref(3, 8)), $0.ref);
    $M.0 := $store.ref($M.0, os_desc_ops, os_desc_attr_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), os_desc_attr_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), os_desc_attr_store);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), os_desc_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), os_desc_unlink);
    $M.0 := $store.ref($M.0, os_desc_type, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_type, $mul.ref(0, 32)), $mul.ref(8, 1)), os_desc_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_type, $mul.ref(0, 32)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(os_desc_type, $mul.ref(0, 32)), $mul.ref(24, 1)), os_desc_attrs);
    $M.0 := $store.ref($M.0, gadget_strings_strings_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_strings_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), gadget_strings_strings_make);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_strings_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_strings_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_strings_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), gadget_strings_strings_drop);
    $M.0 := $store.ref($M.0, gadget_strings_strings_type, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_strings_type, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_strings_type, $mul.ref(0, 32)), $mul.ref(16, 1)), gadget_strings_strings_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gadget_strings_strings_type, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, config_desc_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(config_desc_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), config_desc_make);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(config_desc_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(config_desc_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(config_desc_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), config_desc_drop);
    $M.0 := $store.ref($M.0, config_desc_type, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(config_desc_type, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(config_desc_type, $mul.ref(0, 32)), $mul.ref(16, 1)), config_desc_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(config_desc_type, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, functions_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(functions_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), function_make);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(functions_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(functions_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(functions_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), function_drop);
    $M.0 := $store.ref($M.0, functions_type, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(functions_type, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(functions_type, $mul.ref(0, 32)), $mul.ref(16, 1)), functions_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(functions_type, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.138 := $store.i8($M.138, __kstrtab_unregister_gadget_item, 117);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(1, 1)), 110);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(4, 1)), 103);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(5, 1)), 105);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(6, 1)), 115);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(7, 1)), 116);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(9, 1)), 114);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(11, 1)), 103);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(12, 1)), 97);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(13, 1)), 100);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(14, 1)), 103);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(16, 1)), 116);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(18, 1)), 105);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(19, 1)), 116);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(21, 1)), 109);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_unregister_gadget_item, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.139 := $store.i8($M.139, __kstrtab_usb_os_desc_prepare_interf_dir, 117);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(1, 1)), 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(2, 1)), 98);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(3, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(4, 1)), 111);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(5, 1)), 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(6, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(7, 1)), 100);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(8, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(9, 1)), 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(10, 1)), 99);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(11, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(12, 1)), 112);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(13, 1)), 114);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(14, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(15, 1)), 112);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(16, 1)), 97);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(17, 1)), 114);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(18, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(19, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(20, 1)), 105);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(21, 1)), 110);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(22, 1)), 116);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(23, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(24, 1)), 114);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(25, 1)), 102);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(26, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(27, 1)), 100);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(28, 1)), 105);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(29, 1)), 114);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_usb_os_desc_prepare_interf_dir, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.ref($M.0, interf_grp_attr_sub_compatible_id, .str.70);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(interf_grp_attr_sub_compatible_id, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(interf_grp_attr_sub_compatible_id, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_grp_attr_sub_compatible_id, $mul.ref(0, 40)), $mul.ref(24, 1)), interf_grp_sub_compatible_id_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_grp_attr_sub_compatible_id, $mul.ref(0, 40)), $mul.ref(32, 1)), interf_grp_sub_compatible_id_store);
    $M.0 := $store.ref($M.0, interf_grp_attr_compatible_id, .str.69);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(interf_grp_attr_compatible_id, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(interf_grp_attr_compatible_id, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_grp_attr_compatible_id, $mul.ref(0, 40)), $mul.ref(24, 1)), interf_grp_compatible_id_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_grp_attr_compatible_id, $mul.ref(0, 40)), $mul.ref(32, 1)), interf_grp_compatible_id_store);
    $M.0 := $store.ref($M.0, interf_grp_attrs, interf_grp_attr_compatible_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_grp_attrs, $mul.ref(0, 24)), $mul.ref(1, 8)), interf_grp_attr_sub_compatible_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_grp_attrs, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    $M.0 := $store.ref($M.0, interf_grp_ops, ext_prop_make);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_grp_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_grp_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_grp_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_grp_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), ext_prop_drop);
    $M.0 := $store.ref($M.0, interf_item_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_item_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), usb_os_desc_attr_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_item_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), usb_os_desc_attr_store);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_item_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(interf_item_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.140 := $store.i8($M.140, __kstrtab_usb_function_unregister, 117);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(2, 1)), 98);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(4, 1)), 102);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(5, 1)), 117);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(6, 1)), 110);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(7, 1)), 99);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(8, 1)), 116);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(9, 1)), 105);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(10, 1)), 111);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(11, 1)), 110);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(13, 1)), 117);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(14, 1)), 110);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(15, 1)), 114);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(17, 1)), 103);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(18, 1)), 105);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(19, 1)), 115);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(20, 1)), 116);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(22, 1)), 114);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_usb_function_unregister, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.141 := $store.i8($M.141, __kstrtab_usb_function_register, 117);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(4, 1)), 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(5, 1)), 117);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(6, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(7, 1)), 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(9, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(10, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(11, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(13, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(15, 1)), 103);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(16, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(17, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(18, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(20, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_usb_function_register, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.ref($M.0, func_list, func_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(func_list, $mul.ref(0, 16)), $mul.ref(8, 1)), func_list);
    $M.0 := $store.i32($M.0, func_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.67);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(func_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(func_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), func_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.68);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(func_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.142 := $store.i8($M.142, __kstrtab_usb_put_function, 117);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(2, 1)), 98);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(4, 1)), 112);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(5, 1)), 117);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(6, 1)), 116);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(8, 1)), 102);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(9, 1)), 117);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(10, 1)), 110);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(11, 1)), 99);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_usb_put_function, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.143 := $store.i8($M.143, __kstrtab_usb_put_function_instance, 117);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(1, 1)), 115);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(2, 1)), 98);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(4, 1)), 112);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(5, 1)), 117);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(6, 1)), 116);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(8, 1)), 102);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(9, 1)), 117);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(10, 1)), 110);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(11, 1)), 99);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(12, 1)), 116);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(13, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(14, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(15, 1)), 110);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(17, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(18, 1)), 110);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(19, 1)), 115);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(20, 1)), 116);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(21, 1)), 97);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(22, 1)), 110);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(23, 1)), 99);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_usb_put_function_instance, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.144 := $store.i8($M.144, __kstrtab_usb_get_function, 117);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(2, 1)), 98);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(4, 1)), 103);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(6, 1)), 116);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(8, 1)), 102);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(9, 1)), 117);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(10, 1)), 110);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(11, 1)), 99);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_usb_get_function, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.145 := $store.i8($M.145, __kstrtab_usb_get_function_instance, 117);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(1, 1)), 115);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(2, 1)), 98);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(4, 1)), 103);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(5, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(6, 1)), 116);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(8, 1)), 102);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(9, 1)), 117);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(10, 1)), 110);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(11, 1)), 99);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(12, 1)), 116);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(13, 1)), 105);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(14, 1)), 111);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(15, 1)), 110);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(17, 1)), 105);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(18, 1)), 110);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(19, 1)), 115);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(20, 1)), 116);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(21, 1)), 97);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(22, 1)), 110);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(23, 1)), 99);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_usb_get_function_instance, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.146 := $store.i8($M.146, __kstrtab_usb_composite_overwrite_options, 117);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(1, 1)), 115);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(2, 1)), 98);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(3, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(4, 1)), 99);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(5, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(6, 1)), 109);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(7, 1)), 112);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(8, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(9, 1)), 115);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(10, 1)), 105);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(11, 1)), 116);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(12, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(13, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(14, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(15, 1)), 118);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(16, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(17, 1)), 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(18, 1)), 119);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(19, 1)), 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(20, 1)), 105);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(21, 1)), 116);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(22, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(23, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(24, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(25, 1)), 112);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(26, 1)), 116);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(27, 1)), 105);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(28, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(29, 1)), 110);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(30, 1)), 115);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_usb_composite_overwrite_options, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.147 := $store.i8($M.147, __kstrtab_usb_composite_setup_continue, 117);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(1, 1)), 115);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(2, 1)), 98);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(4, 1)), 99);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(5, 1)), 111);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(6, 1)), 109);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(7, 1)), 112);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(8, 1)), 111);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(9, 1)), 115);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(10, 1)), 105);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(11, 1)), 116);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(12, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(13, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(14, 1)), 115);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(15, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(16, 1)), 116);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(17, 1)), 117);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(18, 1)), 112);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(19, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(20, 1)), 99);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(21, 1)), 111);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(22, 1)), 110);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(23, 1)), 116);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(24, 1)), 105);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(25, 1)), 110);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(26, 1)), 117);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(27, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_usb_composite_setup_continue, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.148 := $store.i8($M.148, __kstrtab_usb_composite_unregister, 117);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(1, 1)), 115);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(2, 1)), 98);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(4, 1)), 99);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(5, 1)), 111);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(6, 1)), 109);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(7, 1)), 112);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(8, 1)), 111);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(9, 1)), 115);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(10, 1)), 105);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(11, 1)), 116);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(13, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(14, 1)), 117);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(15, 1)), 110);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(16, 1)), 114);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(17, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(18, 1)), 103);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(19, 1)), 105);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(20, 1)), 115);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(21, 1)), 116);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(22, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(23, 1)), 114);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_usb_composite_unregister, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.149 := $store.i8($M.149, __kstrtab_usb_composite_probe, 117);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(2, 1)), 98);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(4, 1)), 99);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(5, 1)), 111);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(6, 1)), 109);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(7, 1)), 112);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(8, 1)), 111);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(9, 1)), 115);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(10, 1)), 105);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(11, 1)), 116);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(14, 1)), 112);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(17, 1)), 98);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_usb_composite_probe, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.ref($M.0, composite_driver_template, $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(16, 1)), composite_bind);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(24, 1)), composite_unbind);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(32, 1)), composite_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(40, 1)), composite_disconnect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(48, 1)), composite_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(56, 1)), composite_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(64, 1)), composite_disconnect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(16, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(composite_driver_template, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(112, 1)), $0.ref);
    $M.150 := $store.ref($M.150, dev_attr_suspended, .str.60);
    $M.150 := $store.i16($M.150, $add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(32, 1)), suspended_show);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(dev_attr_suspended, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.151 := $store.i8($M.151, __kstrtab_usb_string_ids_n, 117);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(2, 1)), 98);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(5, 1)), 116);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(6, 1)), 114);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(8, 1)), 110);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(9, 1)), 103);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(11, 1)), 105);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(12, 1)), 100);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(13, 1)), 115);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(14, 1)), 95);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_usb_string_ids_n, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.152 := $store.i8($M.152, __kstrtab_usb_gstrings_attach, 117);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(2, 1)), 98);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(4, 1)), 103);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(6, 1)), 116);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(7, 1)), 114);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(8, 1)), 105);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(9, 1)), 110);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(10, 1)), 103);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(11, 1)), 115);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(13, 1)), 97);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(14, 1)), 116);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(15, 1)), 116);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(17, 1)), 99);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(18, 1)), 104);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_usb_gstrings_attach, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.153 := $store.i8($M.153, __kstrtab_usb_string_ids_tab, 117);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(1, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(2, 1)), 98);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(4, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(5, 1)), 116);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(6, 1)), 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(7, 1)), 105);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(8, 1)), 110);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(9, 1)), 103);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(11, 1)), 105);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(12, 1)), 100);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(13, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(14, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(15, 1)), 116);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(16, 1)), 97);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(17, 1)), 98);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_string_ids_tab, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.154 := $store.i8($M.154, __kstrtab_usb_string_id, 117);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(1, 1)), 115);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(2, 1)), 98);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(4, 1)), 115);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(5, 1)), 116);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(6, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(7, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(8, 1)), 110);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(9, 1)), 103);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(10, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(11, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(12, 1)), 100);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_string_id, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.155 := $store.i8($M.155, __kstrtab_usb_add_config, 117);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(1, 1)), 115);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(2, 1)), 98);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(4, 1)), 97);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(5, 1)), 100);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(6, 1)), 100);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(8, 1)), 99);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(9, 1)), 111);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(10, 1)), 110);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(11, 1)), 102);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(12, 1)), 105);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(13, 1)), 103);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_add_config, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.156 := $store.i8($M.156, __kstrtab_usb_add_config_only, 117);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(2, 1)), 98);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(5, 1)), 100);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(6, 1)), 100);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(8, 1)), 99);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(9, 1)), 111);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(10, 1)), 110);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(11, 1)), 102);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(12, 1)), 105);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(13, 1)), 103);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(15, 1)), 111);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(16, 1)), 110);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(17, 1)), 108);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(18, 1)), 121);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_add_config_only, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.157 := $store.i8($M.157, __kstrtab_usb_interface_id, 117);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(2, 1)), 98);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(4, 1)), 105);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(5, 1)), 110);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(6, 1)), 116);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(7, 1)), 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(9, 1)), 102);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(10, 1)), 97);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(11, 1)), 99);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(12, 1)), 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(13, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(14, 1)), 105);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(15, 1)), 100);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_usb_interface_id, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.158 := $store.i8($M.158, __kstrtab_usb_function_activate, 117);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(4, 1)), 102);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(5, 1)), 117);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(6, 1)), 110);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(7, 1)), 99);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(9, 1)), 105);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(10, 1)), 111);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(11, 1)), 110);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(13, 1)), 97);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(14, 1)), 99);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(16, 1)), 105);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(17, 1)), 118);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_usb_function_activate, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.159 := $store.i8($M.159, __kstrtab_usb_function_deactivate, 117);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(2, 1)), 98);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(4, 1)), 102);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(5, 1)), 117);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(6, 1)), 110);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(7, 1)), 99);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(8, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(9, 1)), 105);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(10, 1)), 111);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(11, 1)), 110);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(13, 1)), 100);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(15, 1)), 97);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(16, 1)), 99);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(17, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(18, 1)), 105);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(19, 1)), 118);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(20, 1)), 97);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(21, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(22, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_usb_function_deactivate, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.160 := $store.i8($M.160, __kstrtab_usb_remove_function, 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(2, 1)), 98);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(6, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(7, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(8, 1)), 118);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(11, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(12, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(13, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(14, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(15, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(17, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(18, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_usb_remove_function, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.161 := $store.i8($M.161, __kstrtab_usb_add_function, 117);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(2, 1)), 98);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(5, 1)), 100);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(6, 1)), 100);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(8, 1)), 102);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(9, 1)), 117);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(10, 1)), 110);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(11, 1)), 99);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_usb_add_function, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.162 := $store.i8($M.162, __kstrtab_config_ep_by_speed, 99);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(2, 1)), 110);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(3, 1)), 102);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(4, 1)), 105);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(5, 1)), 103);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(8, 1)), 112);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(10, 1)), 98);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(11, 1)), 121);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(13, 1)), 115);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(14, 1)), 112);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(17, 1)), 100);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_config_ep_by_speed, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.163 := $store.i8($M.163, __kstrtab_usb_ep_autoconfig_reset, 117);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(2, 1)), 98);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(4, 1)), 101);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(5, 1)), 112);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(7, 1)), 97);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(8, 1)), 117);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(9, 1)), 116);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(10, 1)), 111);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(11, 1)), 99);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(12, 1)), 111);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(13, 1)), 110);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(14, 1)), 102);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(15, 1)), 105);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(16, 1)), 103);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(17, 1)), 95);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(18, 1)), 114);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(19, 1)), 101);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(20, 1)), 115);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_reset, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.164 := $store.i8($M.164, __kstrtab_usb_ep_autoconfig, 117);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(1, 1)), 115);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(2, 1)), 98);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(5, 1)), 112);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(8, 1)), 117);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(10, 1)), 111);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(11, 1)), 99);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(12, 1)), 111);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(13, 1)), 110);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(14, 1)), 102);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(15, 1)), 105);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(16, 1)), 103);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.165 := $store.i8($M.165, __kstrtab_usb_ep_autoconfig_ss, 117);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(1, 1)), 115);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(2, 1)), 98);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(5, 1)), 112);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(8, 1)), 117);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(9, 1)), 116);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(10, 1)), 111);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(11, 1)), 99);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(12, 1)), 111);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(13, 1)), 110);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(14, 1)), 102);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(15, 1)), 105);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(16, 1)), 103);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(17, 1)), 95);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(18, 1)), 115);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_usb_ep_autoconfig_ss, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.166 := $store.i8($M.166, __kstrtab_usb_free_all_descriptors, 117);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(1, 1)), 115);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(2, 1)), 98);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(4, 1)), 102);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(5, 1)), 114);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(6, 1)), 101);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(7, 1)), 101);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(8, 1)), 95);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(9, 1)), 97);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(10, 1)), 108);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(11, 1)), 108);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(12, 1)), 95);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(13, 1)), 100);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(15, 1)), 115);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(17, 1)), 114);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(18, 1)), 105);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(19, 1)), 112);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(20, 1)), 116);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(22, 1)), 114);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(23, 1)), 115);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_usb_free_all_descriptors, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.167 := $store.i8($M.167, __kstrtab_usb_assign_descriptors, 117);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(1, 1)), 115);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(2, 1)), 98);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(5, 1)), 115);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(6, 1)), 115);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(7, 1)), 105);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(8, 1)), 103);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(9, 1)), 110);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(11, 1)), 100);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(14, 1)), 99);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(15, 1)), 114);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(16, 1)), 105);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(17, 1)), 112);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(19, 1)), 111);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(21, 1)), 115);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_usb_assign_descriptors, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.168 := $store.i8($M.168, __kstrtab_usb_copy_descriptors, 117);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(1, 1)), 115);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(2, 1)), 98);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(4, 1)), 99);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(5, 1)), 111);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(6, 1)), 112);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(7, 1)), 121);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(8, 1)), 95);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(9, 1)), 100);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(11, 1)), 115);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(12, 1)), 99);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(14, 1)), 105);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(15, 1)), 112);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(18, 1)), 114);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_usb_copy_descriptors, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.169 := $store.i8($M.169, __kstrtab_usb_gadget_config_buf, 117);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(4, 1)), 103);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(5, 1)), 97);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(6, 1)), 100);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(7, 1)), 103);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(9, 1)), 116);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(11, 1)), 99);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(13, 1)), 110);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(14, 1)), 102);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(15, 1)), 105);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(16, 1)), 103);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(18, 1)), 98);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(19, 1)), 117);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(20, 1)), 102);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_usb_gadget_config_buf, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.170 := $store.i8($M.170, __kstrtab_usb_descriptor_fillbuf, 117);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(1, 1)), 115);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(2, 1)), 98);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(6, 1)), 115);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(7, 1)), 99);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(9, 1)), 105);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(10, 1)), 112);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(13, 1)), 114);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(15, 1)), 102);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(16, 1)), 105);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(17, 1)), 108);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(18, 1)), 108);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(19, 1)), 98);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(20, 1)), 117);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(21, 1)), 102);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_usb_descriptor_fillbuf, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.130 := 0;
    call {:si_unique_call 2019} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.131 := 0;
    call {:si_unique_call 2020} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.132 := 0;
    call {:si_unique_call 2021} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.82 := $0.ref;
    $M.112 := 0;
    call {:si_unique_call 2022} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(0);
    $M.126 := 0;
    call {:si_unique_call 2023} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.86 := $0.ref;
    $M.48 := $0.ref;
    $M.49 := $0.ref;
    $M.55 := $0.ref;
    $M.111 := 0;
    call {:si_unique_call 2024} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(0);
    $M.127 := 0;
    call {:si_unique_call 2025} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 2026} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(0);
    $M.60 := $0.ref;
    $M.121 := 0;
    call {:si_unique_call 2027} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.64 := $0.ref;
    $M.68 := $0.ref;
    $M.87 := $0.ref;
    $M.53 := $0.ref;
    $M.74 := $0.ref;
    $M.50 := $0.ref;
    $M.101 := 0;
    call {:si_unique_call 2028} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    $M.78 := $0.ref;
    $M.59 := $0.ref;
    $M.85 := $0.ref;
    $M.113 := 0;
    call {:si_unique_call 2029} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.80 := $0.ref;
    $M.67 := $0.ref;
    $M.75 := $0.ref;
    $M.106 := 0;
    call {:si_unique_call 2030} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(0);
    $M.77 := $0.ref;
    $M.97 := 0;
    call {:si_unique_call 2031} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(0);
    $M.105 := 0;
    call {:si_unique_call 2032} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 2033} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.103 := 0;
    call {:si_unique_call 2034} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.56 := $0.ref;
    $M.119 := 0;
    call {:si_unique_call 2035} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.91 := $0.ref;
    $M.54 := $0.ref;
    $M.110 := 0;
    call {:si_unique_call 2036} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.57 := $0.ref;
    $M.65 := $0.ref;
    $M.62 := $0.ref;
    $M.58 := $0.ref;
    $M.117 := 0;
    call {:si_unique_call 2037} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 2038} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.52 := $0.ref;
    $M.100 := 0;
    call {:si_unique_call 2039} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.76 := $0.ref;
    $M.90 := $0.ref;
    $M.61 := $0.ref;
    $M.109 := 0;
    call {:si_unique_call 2040} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(0);
    $M.122 := 0;
    call {:si_unique_call 2041} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.104 := 0;
    call {:si_unique_call 2042} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(0);
    $M.128 := 0;
    call {:si_unique_call 2043} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    $M.92 := $0.ref;
    $M.98 := 0;
    call {:si_unique_call 2044} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    $M.66 := $0.ref;
    $M.118 := 0;
    call {:si_unique_call 2045} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(0);
    $M.70 := $0.ref;
    $M.71 := $0.ref;
    $M.108 := 0;
    call {:si_unique_call 2046} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.114 := 0;
    call {:si_unique_call 2047} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(0);
    $M.89 := $0.ref;
    $M.79 := $0.ref;
    $M.63 := $0.ref;
    $M.83 := $0.ref;
    $M.69 := $0.ref;
    $M.84 := $0.ref;
    $M.123 := 0;
    call {:si_unique_call 2048} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.116 := 0;
    call {:si_unique_call 2049} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.51 := $0.ref;
    $M.81 := $0.ref;
    $M.93 := 0;
    call {:si_unique_call 2050} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(0);
    $M.129 := 0;
    call {:si_unique_call 2051} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 2052} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    $M.115 := 0;
    call {:si_unique_call 2053} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 2054} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(0);
    $M.72 := $0.ref;
    $M.107 := 0;
    call {:si_unique_call 2055} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    $M.73 := $0.ref;
    $M.124 := 0;
    call {:si_unique_call 2056} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.88 := $0.ref;
    $M.125 := 0;
    call {:si_unique_call 2057} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.120 := 0;
    call {:si_unique_call 2058} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 2059} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 2060} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 2061} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(0);
    $M.42 := $0.ref;
    $M.45 := 0;
    call {:si_unique_call 2062} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 2063} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(0);
    $M.29 := 1;
    call {:si_unique_call 2064} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.237 := $store.i8($M.237, .str, 110);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(3, 1)), 50);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(4, 1)), 50);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(5, 1)), 56);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.238 := $store.i8($M.238, .str.1, 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(2, 1)), 45);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.238 := $store.i8($M.238, .str.2, 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.2, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.2, $mul.ref(0, 5)), $mul.ref(2, 1)), 45);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.2, $mul.ref(0, 5)), $mul.ref(3, 1)), 102);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.2, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.239 := $store.i8($M.239, .str.4, 105);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.4, $mul.ref(0, 3)), $mul.ref(1, 1)), 110);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.4, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.239 := $store.i8($M.239, .str.5, 111);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.5, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.5, $mul.ref(0, 4)), $mul.ref(2, 1)), 116);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.5, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.240 := $store.i8($M.240, .str.3, 101);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.3, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.3, $mul.ref(0, 7)), $mul.ref(2, 1)), 37);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.3, $mul.ref(0, 7)), $mul.ref(3, 1)), 100);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.3, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.3, $mul.ref(0, 7)), $mul.ref(5, 1)), 115);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.3, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.241 := $store.i8($M.241, .str.6, 103);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(1, 1)), 111);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(2, 1)), 107);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(3, 1)), 117);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(5, 1)), 117);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(6, 1)), 100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(7, 1)), 99);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.238 := $store.i8($M.238, .str.7, 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.7, $mul.ref(0, 9)), $mul.ref(1, 1)), 112);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.7, $mul.ref(0, 9)), $mul.ref(2, 1)), 51);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.7, $mul.ref(0, 9)), $mul.ref(3, 1)), 45);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.7, $mul.ref(0, 9)), $mul.ref(4, 1)), 98);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.7, $mul.ref(0, 9)), $mul.ref(5, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.7, $mul.ref(0, 9)), $mul.ref(6, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.7, $mul.ref(0, 9)), $mul.ref(7, 1)), 107);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.7, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.238 := $store.i8($M.238, .str.8, 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(1, 1)), 112);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(2, 1)), 50);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(3, 1)), 45);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(4, 1)), 98);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(5, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(6, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(7, 1)), 107);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.242 := $store.i8($M.242, .str.48, 112);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.48, $mul.ref(0, 11)), $mul.ref(1, 1)), 120);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.48, $mul.ref(0, 11)), $mul.ref(2, 1)), 97);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.48, $mul.ref(0, 11)), $mul.ref(3, 1)), 50);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.48, $mul.ref(0, 11)), $mul.ref(4, 1)), 53);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.48, $mul.ref(0, 11)), $mul.ref(5, 1)), 120);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.48, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.48, $mul.ref(0, 11)), $mul.ref(7, 1)), 117);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.48, $mul.ref(0, 11)), $mul.ref(8, 1)), 100);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.48, $mul.ref(0, 11)), $mul.ref(9, 1)), 99);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.48, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.150 := $store.i8($M.150, .str.9, 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(1, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(2, 1)), 48);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(4, 1)), 98);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(5, 1)), 77);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(6, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(7, 1)), 120);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(8, 1)), 66);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(9, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(10, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(11, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(12, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(13, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(14, 1)), 109);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(15, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(16, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(17, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(18, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(19, 1)), 98);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(20, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(21, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(22, 1)), 48);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(23, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.9, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.150 := $store.i8($M.150, .str.13, 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(1, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(2, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(3, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(4, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(5, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(6, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(7, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(8, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(9, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(10, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(11, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(12, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(13, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(14, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(15, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(16, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(17, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(18, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(19, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(20, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(21, 1)), 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(22, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(23, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(24, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(25, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(26, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(27, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(28, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(29, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(30, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(31, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(32, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.13, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.150 := $store.i8($M.150, .str.14, 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(1, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(4, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(5, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(6, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(7, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(8, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(9, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(10, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(11, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(12, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(13, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(14, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(15, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(16, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(17, 1)), 62);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(18, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(19, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(20, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(21, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.14, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.150 := $store.i8($M.150, .str.16, 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(1, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(2, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(3, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(4, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(5, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(6, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(7, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(8, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(9, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(10, 1)), 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(11, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(12, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(13, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(14, 1)), 35);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(15, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(16, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(18, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(19, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(20, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(21, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(22, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(24, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.150 := $store.i8($M.150, .str.17, 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(1, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(2, 1)), 98);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(3, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(4, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(5, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(6, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(7, 1)), 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(8, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(9, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(10, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(11, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(12, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(13, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(14, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(15, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(16, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(17, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(18, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(19, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(20, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(21, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(22, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(23, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.17, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.150 := $store.i8($M.150, .str.18, 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(1, 1)), 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(2, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(4, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(5, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(6, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(7, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(8, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(10, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(11, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(13, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(14, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(15, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(16, 1)), 58);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(17, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(18, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(19, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(20, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(21, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(22, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(23, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.19, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 6)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 6)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 6)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 6)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 10)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 10)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 10)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 10)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 10)), $mul.ref(5, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 10)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 10)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 10)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 0);
    $M.0 := $store.i8($M.0, .str.22, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.23, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.150 := $store.i8($M.150, .str.24, 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(1, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(2, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(3, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(4, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(6, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(7, 1)), 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(8, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(9, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(10, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(11, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(12, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(13, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(14, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(15, 1)), 61);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(16, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(17, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(18, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(19, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(20, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(21, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(22, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.24, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.150 := $store.i8($M.150, .str.25, 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(1, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(2, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(3, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(4, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(5, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(6, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(7, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(8, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(9, 1)), 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(10, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(11, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(12, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(13, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(14, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(15, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(16, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(17, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(18, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(19, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(20, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(21, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(22, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(23, 1)), 62);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(24, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(25, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(26, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(27, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.25, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 10)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 10)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 10)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 10)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 10)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(22, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(24, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(26, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.150 := $store.i8($M.150, .str.42, 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.42, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.42, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.42, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.150 := $store.i8($M.150, .str.44, 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(1, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(2, 1)), 58);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(3, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(4, 1)), 67);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(5, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(6, 1)), 109);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(7, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(8, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(9, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(10, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(11, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(12, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(13, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(14, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(15, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(16, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(17, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(18, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(19, 1)), 121);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(20, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(21, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(22, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(23, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(24, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(25, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(26, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(27, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(28, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(29, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.150 := $store.i8($M.150, .str.33, 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(1, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(3, 1)), 113);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(4, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(6, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(7, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(8, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(9, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(10, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(11, 1)), 62);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(12, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(13, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(14, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(15, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.33, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(19, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.150 := $store.i8($M.150, .str.54, 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(1, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(2, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(3, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(4, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(5, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(6, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(7, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(8, 1)), 109);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(9, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(10, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(11, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(12, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(13, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(14, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(15, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(16, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(17, 1)), 62);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(18, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(19, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(20, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(21, 1)), 44);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(22, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(23, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(24, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(25, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(26, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(27, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(28, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.54, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.243 := $store.i8($M.243, .str.62, 37);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(1, 1)), 115);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(2, 1)), 32);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(3, 1)), 37);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(4, 1)), 115);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(5, 1)), 32);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(6, 1)), 119);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(7, 1)), 105);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(8, 1)), 116);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(9, 1)), 104);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(10, 1)), 32);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(11, 1)), 37);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(12, 1)), 115);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.62, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 8)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 8)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 8)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 8)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 8)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(9, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(10, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.244 := $store.i8($M.244, .str.63, 37);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(.str.63, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(.str.63, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(.str.63, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.38, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.150 := $store.i8($M.150, .str.39, 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(2, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(3, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(4, 1)), 109);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.150 := $store.i8($M.150, .str.37, 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(1, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(2, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(3, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(4, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(5, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(6, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(7, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.150 := $store.i8($M.150, .str.50, 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(2, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(3, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(4, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(5, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(6, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(7, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(8, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(9, 1)), 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(11, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(12, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.50, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.26, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.150 := $store.i8($M.150, .str.27, 72);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(1, 1)), 78);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(2, 1)), 80);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(3, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(4, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(5, 1)), 118);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(6, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(7, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(8, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(9, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(10, 1)), 98);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(11, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.150 := $store.i8($M.150, .str.28, 72);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(1, 1)), 78);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(2, 1)), 80);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(3, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(4, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(5, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(6, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(8, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(9, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(11, 1)), 104);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(12, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(14, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(15, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(16, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(17, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(18, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(19, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.28, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.150 := $store.i8($M.150, .str.29, 72);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(1, 1)), 78);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(2, 1)), 80);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(3, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(4, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(5, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(6, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(7, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(8, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(9, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(10, 1)), 118);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(12, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.29, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.150 := $store.i8($M.150, .str.30, 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(1, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(2, 1)), 58);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(3, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(4, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(5, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(6, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(7, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(8, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(9, 1)), 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(10, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(11, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(12, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(13, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(14, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(15, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(16, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(17, 1)), 40);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(18, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(19, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(20, 1)), 41);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(21, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(22, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(23, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(24, 1)), 113);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(25, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(26, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(27, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(28, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(29, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(30, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(31, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(32, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(33, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(34, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(35, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(36, 1)), 121);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(37, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(38, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(39, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(40, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(41, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(42, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(43, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(44, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(45, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(46, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.30, $mul.ref(0, 48)), $mul.ref(47, 1)), 0);
    $M.150 := $store.i8($M.150, .str.31, 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(1, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(2, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(3, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(4, 1)), 121);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(6, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(8, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(9, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(10, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(11, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(12, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(14, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(15, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(16, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(17, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(18, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(19, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(20, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(21, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(22, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(23, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.31, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.150 := $store.i8($M.150, .str.32, 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(1, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(2, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(3, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(4, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(5, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(6, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(7, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(8, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(9, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(10, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(11, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(12, 1)), 40);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(13, 1)), 41);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(14, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(15, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(16, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(17, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(18, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(19, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(20, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(21, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(22, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(23, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(24, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(25, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(26, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(27, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(28, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(29, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(30, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(31, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(32, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.150 := $store.i8($M.150, .str.34, 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(1, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(2, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(3, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(4, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(5, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(6, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(7, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(8, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(9, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(10, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(11, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(12, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(13, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(14, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(15, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(16, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(17, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(18, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(19, 1)), 113);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(20, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(21, 1)), 48);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(22, 1)), 50);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(23, 1)), 120);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(24, 1)), 46);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(25, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(26, 1)), 48);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(27, 1)), 50);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(28, 1)), 120);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(29, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(30, 1)), 118);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(31, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(32, 1)), 48);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(33, 1)), 52);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(34, 1)), 120);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(35, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(36, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(37, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(38, 1)), 48);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(39, 1)), 52);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(40, 1)), 120);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(41, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(42, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(43, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(44, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(45, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.34, $mul.ref(0, 47)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.150 := $store.i8($M.150, .str.59, 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(1, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(2, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(3, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(4, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(5, 1)), 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(6, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(7, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(8, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(9, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(10, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(11, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(12, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(13, 1)), 40);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(14, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(15, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(16, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(17, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(18, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(19, 1)), 41);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(20, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(21, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(22, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(23, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(24, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(25, 1)), 48);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(26, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(27, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(28, 1)), 45);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(29, 1)), 62);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(30, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(31, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(32, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(33, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.59, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.150 := $store.i8($M.150, .str.52, 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(1, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(2, 1)), 98);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(4, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(5, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(6, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(7, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(8, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(9, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(10, 1)), 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(11, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(12, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(13, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(14, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(15, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(17, 1)), 39);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(18, 1)), 47);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(19, 1)), 37);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(20, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(21, 1)), 10);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(9, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(10, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(18, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 10)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 10)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 10)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 10)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 10)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 10)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 10)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.69, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.245 := $store.i8($M.245, .str.103, 37);
    $M.245 := $store.i8($M.245, $add.ref($add.ref(.str.103, $mul.ref(0, 3)), $mul.ref(1, 1)), 115);
    $M.245 := $store.i8($M.245, $add.ref($add.ref(.str.103, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 8)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 8)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 8)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 8)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 8)), $mul.ref(5, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 8)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.81, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 4)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.246 := $store.i8($M.246, .str.102, 37);
    $M.246 := $store.i8($M.246, $add.ref($add.ref(.str.102, $mul.ref(0, 3)), $mul.ref(1, 1)), 100);
    $M.246 := $store.i8($M.246, $add.ref($add.ref(.str.102, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.82, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(1, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.83, 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 8)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 8)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 8)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 8)), $mul.ref(5, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(5, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(6, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(8, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.86, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(3, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(7, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.247 := $store.i8($M.247, .str.71, 48);
    $M.247 := $store.i8($M.247, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.247 := $store.i8($M.247, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.247 := $store.i8($M.247, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.247 := $store.i8($M.247, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(4, 1)), 50);
    $M.247 := $store.i8($M.247, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.247 := $store.i8($M.247, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.247 := $store.i8($M.247, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(3, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(10, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(3, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(7, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.89, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(3, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(4, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(7, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(10, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(12, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(14, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.90, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.248 := $store.i8($M.248, .str.72, 48);
    $M.248 := $store.i8($M.248, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.248 := $store.i8($M.248, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.248 := $store.i8($M.248, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.248 := $store.i8($M.248, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(4, 1)), 52);
    $M.248 := $store.i8($M.248, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.248 := $store.i8($M.248, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.248 := $store.i8($M.248, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(2, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(5, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 7)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 7)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 7)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 7)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 7)), $mul.ref(5, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.94, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 4)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 4)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.96, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(5, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.98, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.99, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.77, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 10)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 10)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 10)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 10)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 10)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 10)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 10)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.78, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(5, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.105, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 5)), $mul.ref(1, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 5)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.106, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 5)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 5)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 5)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.108, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 9)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 9)), $mul.ref(2, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 9)), $mul.ref(3, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 9)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 9)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 9)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 9)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.249 := $store.i8($M.249, .str.95, 37);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.95, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.95, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.95, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.109, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(2, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    call {:si_unique_call 2065} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 751388);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i40 := $eq.ref(config_usb_cfg_unlink, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i40 == 1);
    $i39 := $eq.ref(config_usb_cfg_link, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i39 == 1);
    $i38 := $eq.ref(configfs_composite_bind, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i38 == 1);
    $i37 := $eq.ref(os_desc_unlink, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i37 == 1);
    $i36 := $eq.ref(os_desc_link, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i36 == 1);
    $i35 := $eq.ref(composite_setup, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i35 == 1);
    $i34 := $eq.ref(composite_bind, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i34 == 1);
    $i33 := $eq.ref(usb_string_ids_tab, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i33 == 1);
    $i32 := $eq.ref(usb_add_config_only, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i32 == 1);
    $i31 := $eq.ref(usb_interface_id, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i31 == 1);
    $i30 := $eq.ref(usb_add_function, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume false;
    return;

  $bb2:
    assume $i30 == 1;
    call {:si_unique_call 2066} $i1 := usb_add_function(arg, arg1);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    $r := $i1;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i31 == 1;
    call {:si_unique_call 2067} $i2 := usb_interface_id(arg, arg1);
    $r := $i2;
    return;

  $bb4:
    assume $i32 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2068} $i5 := usb_add_config_only($p3, $p4);
    $r := $i5;
    return;

  $bb5:
    assume $i33 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2069} $i8 := usb_string_ids_tab($p6, $p7);
    $r := $i8;
    return;

  $bb6:
    assume $i34 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2070} $i11 := composite_bind($p9, $p10);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    $r := $i11;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i35 == 1;
    $p12 := $bitcast.ref.ref(arg);
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2071} $i14 := composite_setup($p12, $p13);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    $r := $i14;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i36 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2072} $i17 := os_desc_link($p15, $p16);
    $r := $i17;
    return;

  $bb9:
    assume $i37 == 1;
    $p18 := $bitcast.ref.ref(arg);
    $p19 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2073} $i20 := os_desc_unlink($p18, $p19);
    $r := $i20;
    return;

  $bb10:
    assume $i38 == 1;
    $p21 := $bitcast.ref.ref(arg);
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2074} $i23 := configfs_composite_bind($p21, $p22);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    $r := $i23;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i39 == 1;
    $p24 := $bitcast.ref.ref(arg);
    $p25 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2075} $i26 := config_usb_cfg_link($p24, $p25);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    $r := $i26;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i40 == 1;
    $p27 := $bitcast.ref.ref(arg);
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2076} $i29 := config_usb_cfg_unlink($p27, $p28);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    $r := $i29;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 752420);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i36 := $eq.ref(gadget_config_attr_release, $p0);
    assume true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i36 == 1);
    $i35 := $eq.ref(usb_os_desc_ext_prop_release, $p0);
    assume true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i35 == 1);
    $i34 := $eq.ref(gadget_strings_attr_release, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i34 == 1);
    $i33 := $eq.ref(gadget_config_name_attr_release, $p0);
    assume true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i33 == 1);
    $i32 := $eq.ref(gadget_info_attr_release, $p0);
    assume true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i32 == 1);
    $i31 := $eq.ref(configfs_composite_unbind, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i31 == 1);
    $i30 := $eq.ref(os_desc_attr_release, $p0);
    assume true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i30 == 1);
    $i29 := $eq.ref(composite_resume, $p0);
    assume {:branchcond $i29} true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i29 == 1);
    $i28 := $eq.ref(composite_suspend, $p0);
    assume true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i28 == 1);
    $i27 := $eq.ref(composite_disconnect, $p0);
    assume true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i27 == 1);
    $i26 := $eq.ref(composite_unbind, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i26 == 1);
    $i25 := $eq.ref(unregister_gadget_item, $p0);
    assume true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_function_unregister, $p0);
    assume true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_put_function, $p0);
    assume {:branchcond $i23} true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_put_function_instance, $p0);
    assume true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_composite_setup_continue, $p0);
    assume true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_composite_unregister, $p0);
    assume true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_ep_autoconfig_reset, $p0);
    assume true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_free_all_descriptors, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i18 == 1);
    assume false;
    return;

  $bb2:
    assume $i18 == 1;
    call {:si_unique_call 2077} usb_free_all_descriptors(arg);
    return;

  $bb3:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2078} usb_ep_autoconfig_reset($p1);
    return;

  $bb4:
    assume $i20 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2079} usb_composite_unregister($p2);
    return;

  $bb5:
    assume $i21 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2080} usb_composite_setup_continue($p3);
    return;

  $bb6:
    assume $i22 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2081} usb_put_function_instance($p4);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    call {:si_unique_call 2082} usb_put_function(arg);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i24 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2083} usb_function_unregister($p5);
    return;

  $bb9:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2084} unregister_gadget_item($p6);
    return;

  $bb10:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2085} composite_unbind($p7);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i27 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2086} composite_disconnect($p8);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i28 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2087} composite_suspend($p9);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i29 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2088} composite_resume($p10);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i30 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2089} os_desc_attr_release($p11);
    return;

  $bb15:
    assume $i31 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2090} configfs_composite_unbind($p12);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i32 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2091} gadget_info_attr_release($p13);
    return;

  $bb17:
    assume $i33 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2092} gadget_config_name_attr_release($p14);
    return;

  $bb18:
    assume $i34 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2093} gadget_strings_attr_release($p15);
    return;

  $bb19:
    assume $i35 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2094} usb_os_desc_ext_prop_release($p16);
    return;

  $bb20:
    assume $i36 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2095} gadget_config_attr_release($p17);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 753452);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $M.29, $CurrAddr, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i25 := $eq.ref(gadget_config_name_strings_drop, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i25 == 1);
    $i24 := $eq.ref(gadgets_drop, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i24 == 1);
    $i23 := $eq.ref(gadget_strings_strings_drop, $p0);
    assume {:branchcond $i23} true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i23 == 1);
    $i22 := $eq.ref(config_desc_drop, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i22 == 1);
    $i21 := $eq.ref(function_drop, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i21 == 1);
    $i20 := $eq.ref(ext_prop_drop, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_composite_overwrite_options, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i19 == 1);
    $i18 := $eq.ref(composite_setup_complete, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_remove_function, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    call {:si_unique_call 2096} usb_remove_function(arg, arg1);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i18 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2097} composite_setup_complete($p1, $p2);
    return;

  $bb4:
    assume $i19 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2098} usb_composite_overwrite_options($p3, $p4);
    return;

  $bb5:
    assume $i20 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2099} ext_prop_drop($p5, $p6);
    return;

  $bb6:
    assume $i21 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2100} function_drop($p7, $p8);
    return;

  $bb7:
    assume $i22 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2101} config_desc_drop($p9, $p10);
    return;

  $bb8:
    assume $i23 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2102} gadget_strings_strings_drop($p11, $p12);
    return;

  $bb9:
    assume $i24 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2103} gadgets_drop($p13, $p14);
    return;

  $bb10:
    assume $i25 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2104} gadget_config_name_strings_drop($p15, $p16);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 754484);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(usb_string_ids_n, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2105} $i2 := usb_string_ids_n($p1, arg1);
    $r := $i2;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 755516);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 756548);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 757580);

procedure devirtbounce.6(funcPtr: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 758612);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, assertsPassed, $CurrAddr;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(usb_get_function, $p0);
    assume {:branchcond $i8} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(usb_get_function_instance, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i7 == 1);
    $i6 := $eq.ref(usb_copy_descriptors, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2106} $p2 := usb_copy_descriptors($p1);
    $r := $p2;
    return;

  $bb3:
    assume $i7 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2107} $p4 := usb_get_function_instance($p3);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    $r := $p4;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    call {:si_unique_call 2108} $p5 := usb_get_function(arg);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    $r := $p5;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 759644);

procedure devirtbounce.8(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i37 := $eq.ref(gadget_config_attr_release, $p0);
    assume true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i37 == 1);
    $i36 := $eq.ref(usb_os_desc_ext_prop_release, $p0);
    assume true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i36 == 1);
    $i35 := $eq.ref(gadget_strings_attr_release, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i35 == 1);
    $i34 := $eq.ref(gadget_config_name_attr_release, $p0);
    assume true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i34 == 1);
    $i33 := $eq.ref(gadget_info_attr_release, $p0);
    assume true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i33 == 1);
    $i32 := $eq.ref(configfs_composite_unbind, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i32 == 1);
    $i31 := $eq.ref(os_desc_attr_release, $p0);
    assume true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i31 == 1);
    $i30 := $eq.ref(composite_resume, $p0);
    assume true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i30 == 1);
    $i29 := $eq.ref(composite_suspend, $p0);
    assume {:branchcond $i29} true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i29 == 1);
    $i28 := $eq.ref(composite_disconnect, $p0);
    assume true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i28 == 1);
    $i27 := $eq.ref(composite_unbind, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i27 == 1);
    $i26 := $eq.ref(unregister_gadget_item, $p0);
    assume true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_function_unregister, $p0);
    assume true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_put_function, $p0);
    assume true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_put_function_instance, $p0);
    assume {:branchcond $i23} true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_composite_setup_continue, $p0);
    assume true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_composite_unregister, $p0);
    assume true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_ep_autoconfig_reset, $p0);
    assume true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_free_all_descriptors, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2109} usb_free_all_descriptors($p1);
    return;

  $bb3:
    assume $i20 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2110} usb_ep_autoconfig_reset($p2);
    return;

  $bb4:
    assume $i21 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2111} usb_composite_unregister($p3);
    return;

  $bb5:
    assume $i22 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2112} usb_composite_setup_continue($p4);
    return;

  $bb6:
    assume $i23 == 1;
    call {:si_unique_call 2113} usb_put_function_instance(arg);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i24 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2114} usb_put_function($p5);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2115} usb_function_unregister($p6);
    return;

  $bb9:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2116} unregister_gadget_item($p7);
    return;

  $bb10:
    assume $i27 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2117} composite_unbind($p8);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i28 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2118} composite_disconnect($p9);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i29 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2119} composite_suspend($p10);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i30 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2120} composite_resume($p11);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i31 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2121} os_desc_attr_release($p12);
    return;

  $bb15:
    assume $i32 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2122} configfs_composite_unbind($p13);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i33 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2123} gadget_info_attr_release($p14);
    return;

  $bb17:
    assume $i34 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2124} gadget_config_name_attr_release($p15);
    return;

  $bb18:
    assume $i35 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2125} gadget_strings_attr_release($p16);
    return;

  $bb19:
    assume $i36 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2126} usb_os_desc_ext_prop_release($p17);
    return;

  $bb20:
    assume $i37 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2127} gadget_config_attr_release($p18);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 760676);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 761708);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $M.29, $CurrAddr, assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i25 := $eq.ref(gadget_config_name_strings_drop, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i25 == 1);
    $i24 := $eq.ref(gadgets_drop, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i24 == 1);
    $i23 := $eq.ref(gadget_strings_strings_drop, $p0);
    assume {:branchcond $i23} true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i23 == 1);
    $i22 := $eq.ref(config_desc_drop, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i22 == 1);
    $i21 := $eq.ref(function_drop, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i21 == 1);
    $i20 := $eq.ref(ext_prop_drop, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_composite_overwrite_options, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i19 == 1);
    $i18 := $eq.ref(composite_setup_complete, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_remove_function, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2128} usb_remove_function($p1, $p2);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i18 == 1;
    call {:si_unique_call 2129} composite_setup_complete(arg, arg1);
    return;

  $bb4:
    assume $i19 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2130} usb_composite_overwrite_options($p3, $p4);
    return;

  $bb5:
    assume $i20 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2131} ext_prop_drop($p5, $p6);
    return;

  $bb6:
    assume $i21 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2132} function_drop($p7, $p8);
    return;

  $bb7:
    assume $i22 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2133} config_desc_drop($p9, $p10);
    return;

  $bb8:
    assume $i23 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2134} gadget_strings_strings_drop($p11, $p12);
    return;

  $bb9:
    assume $i24 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2135} gadgets_drop($p13, $p14);
    return;

  $bb10:
    assume $i25 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2136} gadget_config_name_strings_drop($p15, $p16);
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 762740);

procedure devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(configfs_do_nothing, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_function_register, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i15 == 1);
    $i14 := $eq.ref(usb_composite_probe, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i14 == 1);
    $i13 := $eq.ref(usb_string_id, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i13 == 1);
    $i12 := $eq.ref(usb_function_activate, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(usb_function_deactivate, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2137} $i2 := usb_function_deactivate($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2138} $i4 := usb_function_activate($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i13 == 1;
    call {:si_unique_call 2139} $i5 := usb_string_id(arg);
    $r := $i5;
    return;

  $bb5:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2140} $i7 := usb_composite_probe($p6);
    $r := $i7;
    return;

  $bb6:
    assume $i15 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2141} $i9 := usb_function_register($p8);
    $r := $i9;
    return;

  $bb7:
    assume $i16 == 1;
    call {:si_unique_call 2142} $i10 := configfs_do_nothing(arg);
    $r := $i10;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 763772);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 764804);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(usb_string_ids_n, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2143} $i2 := usb_string_ids_n($p1, arg1);
    $r := $i2;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 765836);

procedure devirtbounce.14(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.14(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(configfs_do_nothing, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_function_register, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i15 == 1);
    $i14 := $eq.ref(usb_composite_probe, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i14 == 1);
    $i13 := $eq.ref(usb_string_id, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i13 == 1);
    $i12 := $eq.ref(usb_function_activate, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(usb_function_deactivate, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    call {:si_unique_call 2144} $i1 := usb_function_deactivate(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i12 == 1;
    call {:si_unique_call 2145} $i2 := usb_function_activate(arg);
    $r := $i2;
    return;

  $bb4:
    assume $i13 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2146} $i4 := usb_string_id($p3);
    $r := $i4;
    return;

  $bb5:
    assume $i14 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2147} $i6 := usb_composite_probe($p5);
    $r := $i6;
    return;

  $bb6:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2148} $i8 := usb_function_register($p7);
    $r := $i8;
    return;

  $bb7:
    assume $i16 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2149} $i10 := configfs_do_nothing($p9);
    $r := $i10;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 766868);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i8) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(usb_string_ids_n, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i8.i32(arg1);
    call {:si_unique_call 2150} $i3 := usb_string_ids_n($p1, $i2);
    $r := $i3;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 767900);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i1)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 768932);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i43 := $eq.ref(config_usb_cfg_unlink, $p0);
    assume {:branchcond $i43} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i43 == 1);
    $i42 := $eq.ref(config_usb_cfg_link, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i42 == 1);
    $i41 := $eq.ref(configfs_composite_bind, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i41 == 1);
    $i40 := $eq.ref(os_desc_unlink, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i40 == 1);
    $i39 := $eq.ref(os_desc_link, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i39 == 1);
    $i38 := $eq.ref(composite_setup, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i38 == 1);
    $i37 := $eq.ref(composite_bind, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i37 == 1);
    $i36 := $eq.ref(usb_string_ids_tab, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i36 == 1);
    $i35 := $eq.ref(usb_add_config_only, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i35 == 1);
    $i34 := $eq.ref(usb_interface_id, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i34 == 1);
    $i33 := $eq.ref(usb_add_function, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume false;
    return;

  $bb2:
    assume $i33 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2151} $i3 := usb_add_function($p1, $p2);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    $r := $i3;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i34 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2152} $i6 := usb_interface_id($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i35 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2153} $i9 := usb_add_config_only($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i36 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2154} $i12 := usb_string_ids_tab($p10, $p11);
    $r := $i12;
    return;

  $bb6:
    assume $i37 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2155} $i15 := composite_bind($p13, $p14);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    $r := $i15;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i38 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2156} $i17 := composite_setup($p16, arg1);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    $r := $i17;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i39 == 1;
    $p18 := $bitcast.ref.ref(arg);
    $p19 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2157} $i20 := os_desc_link($p18, $p19);
    $r := $i20;
    return;

  $bb9:
    assume $i40 == 1;
    $p21 := $bitcast.ref.ref(arg);
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2158} $i23 := os_desc_unlink($p21, $p22);
    $r := $i23;
    return;

  $bb10:
    assume $i41 == 1;
    $p24 := $bitcast.ref.ref(arg);
    $p25 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2159} $i26 := configfs_composite_bind($p24, $p25);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    $r := $i26;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i42 == 1;
    $p27 := $bitcast.ref.ref(arg);
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2160} $i29 := config_usb_cfg_link($p27, $p28);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    $r := $i29;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i43 == 1;
    $p30 := $bitcast.ref.ref(arg);
    $p31 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2161} $i32 := config_usb_cfg_unlink($p30, $p31);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    $r := $i32;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 769964);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i41 := $eq.ref(config_usb_cfg_unlink, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i41 == 1);
    $i40 := $eq.ref(config_usb_cfg_link, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i40 == 1);
    $i39 := $eq.ref(configfs_composite_bind, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i39 == 1);
    $i38 := $eq.ref(os_desc_unlink, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i38 == 1);
    $i37 := $eq.ref(os_desc_link, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i37 == 1);
    $i36 := $eq.ref(composite_setup, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i36 == 1);
    $i35 := $eq.ref(composite_bind, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i35 == 1);
    $i34 := $eq.ref(usb_string_ids_tab, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i34 == 1);
    $i33 := $eq.ref(usb_add_config_only, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i33 == 1);
    $i32 := $eq.ref(usb_interface_id, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i32 == 1);
    $i31 := $eq.ref(usb_add_function, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume false;
    return;

  $bb2:
    assume $i31 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2162} $i2 := usb_add_function(arg, $p1);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    $r := $i2;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i32 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2163} $i4 := usb_interface_id(arg, $p3);
    $r := $i4;
    return;

  $bb4:
    assume $i33 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2164} $i7 := usb_add_config_only($p5, $p6);
    $r := $i7;
    return;

  $bb5:
    assume $i34 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2165} $i10 := usb_string_ids_tab($p8, $p9);
    $r := $i10;
    return;

  $bb6:
    assume $i35 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2166} $i13 := composite_bind($p11, $p12);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    $r := $i13;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i36 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2167} $i15 := composite_setup($p14, arg1);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    $r := $i15;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i37 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2168} $i18 := os_desc_link($p16, $p17);
    $r := $i18;
    return;

  $bb9:
    assume $i38 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2169} $i21 := os_desc_unlink($p19, $p20);
    $r := $i21;
    return;

  $bb10:
    assume $i39 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2170} $i24 := configfs_composite_bind($p22, $p23);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    $r := $i24;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i40 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2171} $i27 := config_usb_cfg_link($p25, $p26);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    $r := $i27;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i41 == 1;
    $p28 := $bitcast.ref.ref(arg);
    $p29 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2172} $i30 := config_usb_cfg_unlink($p28, $p29);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    $r := $i30;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 770996);

procedure devirtbounce.19(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i37 := $eq.ref(gadget_config_attr_release, $p0);
    assume true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i37 == 1);
    $i36 := $eq.ref(usb_os_desc_ext_prop_release, $p0);
    assume true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i36 == 1);
    $i35 := $eq.ref(gadget_strings_attr_release, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i35 == 1);
    $i34 := $eq.ref(gadget_config_name_attr_release, $p0);
    assume true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i34 == 1);
    $i33 := $eq.ref(gadget_info_attr_release, $p0);
    assume true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i33 == 1);
    $i32 := $eq.ref(configfs_composite_unbind, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i32 == 1);
    $i31 := $eq.ref(os_desc_attr_release, $p0);
    assume true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i31 == 1);
    $i30 := $eq.ref(composite_resume, $p0);
    assume true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i30 == 1);
    $i29 := $eq.ref(composite_suspend, $p0);
    assume {:branchcond $i29} true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i29 == 1);
    $i28 := $eq.ref(composite_disconnect, $p0);
    assume true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i28 == 1);
    $i27 := $eq.ref(composite_unbind, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i27 == 1);
    $i26 := $eq.ref(unregister_gadget_item, $p0);
    assume true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_function_unregister, $p0);
    assume true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_put_function, $p0);
    assume true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_put_function_instance, $p0);
    assume {:branchcond $i23} true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_composite_setup_continue, $p0);
    assume true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_composite_unregister, $p0);
    assume true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_ep_autoconfig_reset, $p0);
    assume true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_free_all_descriptors, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2173} usb_free_all_descriptors($p1);
    return;

  $bb3:
    assume $i20 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2174} usb_ep_autoconfig_reset($p2);
    return;

  $bb4:
    assume $i21 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2175} usb_composite_unregister($p3);
    return;

  $bb5:
    assume $i22 == 1;
    call {:si_unique_call 2176} usb_composite_setup_continue(arg);
    return;

  $bb6:
    assume $i23 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2177} usb_put_function_instance($p4);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i24 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2178} usb_put_function($p5);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2179} usb_function_unregister($p6);
    return;

  $bb9:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2180} unregister_gadget_item($p7);
    return;

  $bb10:
    assume $i27 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2181} composite_unbind($p8);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i28 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2182} composite_disconnect($p9);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i29 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2183} composite_suspend($p10);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i30 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2184} composite_resume($p11);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i31 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2185} os_desc_attr_release($p12);
    return;

  $bb15:
    assume $i32 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2186} configfs_composite_unbind($p13);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i33 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2187} gadget_info_attr_release($p14);
    return;

  $bb17:
    assume $i34 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2188} gadget_config_name_attr_release($p15);
    return;

  $bb18:
    assume $i35 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2189} gadget_strings_attr_release($p16);
    return;

  $bb19:
    assume $i36 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2190} usb_os_desc_ext_prop_release($p17);
    return;

  $bb20:
    assume $i37 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2191} gadget_config_attr_release($p18);
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 772028);

procedure devirtbounce.20(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i38 := $eq.ref(gadget_config_attr_release, $p0);
    assume true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i38 == 1);
    $i37 := $eq.ref(usb_os_desc_ext_prop_release, $p0);
    assume true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i37 == 1);
    $i36 := $eq.ref(gadget_strings_attr_release, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i36 == 1);
    $i35 := $eq.ref(gadget_config_name_attr_release, $p0);
    assume true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i35 == 1);
    $i34 := $eq.ref(gadget_info_attr_release, $p0);
    assume true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i34 == 1);
    $i33 := $eq.ref(configfs_composite_unbind, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i33 == 1);
    $i32 := $eq.ref(os_desc_attr_release, $p0);
    assume true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i32 == 1);
    $i31 := $eq.ref(composite_resume, $p0);
    assume true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i31 == 1);
    $i30 := $eq.ref(composite_suspend, $p0);
    assume true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i30 == 1);
    $i29 := $eq.ref(composite_disconnect, $p0);
    assume {:branchcond $i29} true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i29 == 1);
    $i28 := $eq.ref(composite_unbind, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i28 == 1);
    $i27 := $eq.ref(unregister_gadget_item, $p0);
    assume true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_function_unregister, $p0);
    assume true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_put_function, $p0);
    assume true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_put_function_instance, $p0);
    assume true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_composite_setup_continue, $p0);
    assume {:branchcond $i23} true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_composite_unregister, $p0);
    assume true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_ep_autoconfig_reset, $p0);
    assume true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_free_all_descriptors, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i20 == 1);
    assume false;
    return;

  $bb2:
    assume $i20 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2192} usb_free_all_descriptors($p1);
    return;

  $bb3:
    assume $i21 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2193} usb_ep_autoconfig_reset($p2);
    return;

  $bb4:
    assume $i22 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2194} usb_composite_unregister($p3);
    return;

  $bb5:
    assume $i23 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2195} usb_composite_setup_continue($p4);
    return;

  $bb6:
    assume $i24 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2196} usb_put_function_instance($p5);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2197} usb_put_function($p6);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2198} usb_function_unregister($p7);
    return;

  $bb9:
    assume $i27 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2199} unregister_gadget_item($p8);
    return;

  $bb10:
    assume $i28 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2200} composite_unbind($p9);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i29 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2201} composite_disconnect($p10);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i30 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2202} composite_suspend($p11);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i31 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2203} composite_resume($p12);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i32 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2204} os_desc_attr_release($p13);
    return;

  $bb15:
    assume $i33 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2205} configfs_composite_unbind($p14);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i34 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2206} gadget_info_attr_release($p15);
    return;

  $bb17:
    assume $i35 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2207} gadget_config_name_attr_release($p16);
    return;

  $bb18:
    assume $i36 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2208} gadget_strings_attr_release($p17);
    return;

  $bb19:
    assume $i37 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2209} usb_os_desc_ext_prop_release($p18);
    return;

  $bb20:
    assume $i38 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2210} gadget_config_attr_release($p19);
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 773060);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 774092);

procedure devirtbounce.22(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 775124);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 776156);

procedure devirtbounce.24(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i38 := $eq.ref(gadget_config_attr_release, $p0);
    assume true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i38 == 1);
    $i37 := $eq.ref(usb_os_desc_ext_prop_release, $p0);
    assume true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i37 == 1);
    $i36 := $eq.ref(gadget_strings_attr_release, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i36 == 1);
    $i35 := $eq.ref(gadget_config_name_attr_release, $p0);
    assume true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i35 == 1);
    $i34 := $eq.ref(gadget_info_attr_release, $p0);
    assume true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i34 == 1);
    $i33 := $eq.ref(configfs_composite_unbind, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i33 == 1);
    $i32 := $eq.ref(os_desc_attr_release, $p0);
    assume true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i32 == 1);
    $i31 := $eq.ref(composite_resume, $p0);
    assume true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i31 == 1);
    $i30 := $eq.ref(composite_suspend, $p0);
    assume true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i30 == 1);
    $i29 := $eq.ref(composite_disconnect, $p0);
    assume {:branchcond $i29} true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i29 == 1);
    $i28 := $eq.ref(composite_unbind, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i28 == 1);
    $i27 := $eq.ref(unregister_gadget_item, $p0);
    assume true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_function_unregister, $p0);
    assume true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_put_function, $p0);
    assume true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_put_function_instance, $p0);
    assume true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_composite_setup_continue, $p0);
    assume {:branchcond $i23} true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_composite_unregister, $p0);
    assume true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_ep_autoconfig_reset, $p0);
    assume true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_free_all_descriptors, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i20 == 1);
    assume false;
    return;

  $bb2:
    assume $i20 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2211} usb_free_all_descriptors($p1);
    return;

  $bb3:
    assume $i21 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2212} usb_ep_autoconfig_reset($p2);
    return;

  $bb4:
    assume $i22 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2213} usb_composite_unregister($p3);
    return;

  $bb5:
    assume $i23 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2214} usb_composite_setup_continue($p4);
    return;

  $bb6:
    assume $i24 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2215} usb_put_function_instance($p5);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2216} usb_put_function($p6);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2217} usb_function_unregister($p7);
    return;

  $bb9:
    assume $i27 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2218} unregister_gadget_item($p8);
    return;

  $bb10:
    assume $i28 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2219} composite_unbind($p9);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i29 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2220} composite_disconnect($p10);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i30 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2221} composite_suspend($p11);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i31 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2222} composite_resume($p12);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i32 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2223} os_desc_attr_release($p13);
    return;

  $bb15:
    assume $i33 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2224} configfs_composite_unbind($p14);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i34 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2225} gadget_info_attr_release($p15);
    return;

  $bb17:
    assume $i35 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2226} gadget_config_name_attr_release($p16);
    return;

  $bb18:
    assume $i36 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2227} gadget_strings_attr_release($p17);
    return;

  $bb19:
    assume $i37 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2228} usb_os_desc_ext_prop_release($p18);
    return;

  $bb20:
    assume $i38 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2229} gadget_config_attr_release($p19);
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 777188);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i44 := $eq.ref(config_usb_cfg_unlink, $p0);
    assume {:branchcond $i44} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i44 == 1);
    $i43 := $eq.ref(config_usb_cfg_link, $p0);
    assume {:branchcond $i43} true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i43 == 1);
    $i42 := $eq.ref(configfs_composite_bind, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i42 == 1);
    $i41 := $eq.ref(os_desc_unlink, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i41 == 1);
    $i40 := $eq.ref(os_desc_link, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i40 == 1);
    $i39 := $eq.ref(composite_setup, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i39 == 1);
    $i38 := $eq.ref(composite_bind, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i38 == 1);
    $i37 := $eq.ref(usb_string_ids_tab, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i37 == 1);
    $i36 := $eq.ref(usb_add_config_only, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i36 == 1);
    $i35 := $eq.ref(usb_interface_id, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i35 == 1);
    $i34 := $eq.ref(usb_add_function, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i34 == 1);
    assume false;
    return;

  $bb2:
    assume $i34 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2230} $i3 := usb_add_function($p1, $p2);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    $r := $i3;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i35 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2231} $i6 := usb_interface_id($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i36 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2232} $i9 := usb_add_config_only($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i37 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2233} $i12 := usb_string_ids_tab($p10, $p11);
    $r := $i12;
    return;

  $bb6:
    assume $i38 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2234} $i15 := composite_bind($p13, $p14);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    $r := $i15;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i39 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2235} $i18 := composite_setup($p16, $p17);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    $r := $i18;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i40 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2236} $i21 := os_desc_link($p19, $p20);
    $r := $i21;
    return;

  $bb9:
    assume $i41 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2237} $i24 := os_desc_unlink($p22, $p23);
    $r := $i24;
    return;

  $bb10:
    assume $i42 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2238} $i27 := configfs_composite_bind($p25, $p26);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    $r := $i27;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i43 == 1;
    $p28 := $bitcast.ref.ref(arg);
    $p29 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2239} $i30 := config_usb_cfg_link($p28, $p29);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    $r := $i30;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i44 == 1;
    $p31 := $bitcast.ref.ref(arg);
    $p32 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2240} $i33 := config_usb_cfg_unlink($p31, $p32);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    $r := $i33;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;
}



const devirtbounce.26: ref;

axiom devirtbounce.26 == $sub.ref(0, 778220);

procedure devirtbounce.26(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.26(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i64 := $eq.ref(gadget_config_desc_bmAttributes_show, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i64 == 1);
    $i63 := $eq.ref(gadget_config_desc_MaxPower_show, $p0);
    assume true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i63 == 1);
    $i62 := $eq.ref(ext_prop_data_show, $p0);
    assume {:branchcond $i62} true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i62 == 1);
    $i61 := $eq.ref(ext_prop_type_show, $p0);
    assume true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i61 == 1);
    $i60 := $eq.ref(gadget_strings_serialnumber_show, $p0);
    assume {:branchcond $i60} true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_product_show, $p0);
    assume true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_strings_manufacturer_show, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_config_name_configuration_show, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_dev_desc_UDC_show, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_bcdUSB_show, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_bcdDevice_show, $p0);
    assume true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_idProduct_show, $p0);
    assume {:branchcond $i53} true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_idVendor_show, $p0);
    assume {:branchcond $i52} true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_show, $p0);
    assume true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bDeviceProtocol_show, $p0);
    assume true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceSubClass_show, $p0);
    assume {:branchcond $i49} true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bDeviceClass_show, $p0);
    assume {:branchcond $i48} true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i48 == 1);
    $i47 := $eq.ref(os_desc_qw_sign_show, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_b_vendor_code_show, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i46 == 1);
    $i45 := $eq.ref(os_desc_use_show, $p0);
    assume true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i45 == 1);
    $i44 := $eq.ref(interf_grp_sub_compatible_id_show, $p0);
    assume {:branchcond $i44} true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i44 == 1);
    $i43 := $eq.ref(interf_grp_compatible_id_show, $p0);
    assume {:branchcond $i43} true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume false;
    return;

  $bb2:
    assume $i43 == 1;
    call {:si_unique_call 2241} $i1 := interf_grp_compatible_id_show(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i44 == 1;
    call {:si_unique_call 2242} $i2 := interf_grp_sub_compatible_id_show(arg, arg1);
    $r := $i2;
    return;

  $bb4:
    assume $i45 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2243} $i4 := os_desc_use_show($p3, arg1);
    $r := $i4;
    return;

  $bb5:
    assume $i46 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2244} $i6 := os_desc_b_vendor_code_show($p5, arg1);
    $r := $i6;
    return;

  $bb6:
    assume $i47 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2245} $i8 := os_desc_qw_sign_show($p7, arg1);
    $r := $i8;
    return;

  $bb7:
    assume $i48 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2246} $i10 := gadget_dev_desc_bDeviceClass_show($p9, arg1);
    $r := $i10;
    return;

  $bb8:
    assume $i49 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2247} $i12 := gadget_dev_desc_bDeviceSubClass_show($p11, arg1);
    $r := $i12;
    return;

  $bb9:
    assume $i50 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2248} $i14 := gadget_dev_desc_bDeviceProtocol_show($p13, arg1);
    $r := $i14;
    return;

  $bb10:
    assume $i51 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2249} $i16 := gadget_dev_desc_bMaxPacketSize0_show($p15, arg1);
    $r := $i16;
    return;

  $bb11:
    assume $i52 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2250} $i18 := gadget_dev_desc_idVendor_show($p17, arg1);
    $r := $i18;
    return;

  $bb12:
    assume $i53 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2251} $i20 := gadget_dev_desc_idProduct_show($p19, arg1);
    $r := $i20;
    return;

  $bb13:
    assume $i54 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2252} $i22 := gadget_dev_desc_bcdDevice_show($p21, arg1);
    $r := $i22;
    return;

  $bb14:
    assume $i55 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2253} $i24 := gadget_dev_desc_bcdUSB_show($p23, arg1);
    $r := $i24;
    return;

  $bb15:
    assume $i56 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2254} $i26 := gadget_dev_desc_UDC_show($p25, arg1);
    $r := $i26;
    return;

  $bb16:
    assume $i57 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2255} $i28 := gadget_config_name_configuration_show($p27, arg1);
    $r := $i28;
    return;

  $bb17:
    assume $i58 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2256} $i30 := gadget_strings_manufacturer_show($p29, arg1);
    $r := $i30;
    return;

  $bb18:
    assume $i59 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2257} $i32 := gadget_strings_product_show($p31, arg1);
    $r := $i32;
    return;

  $bb19:
    assume $i60 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2258} $i34 := gadget_strings_serialnumber_show($p33, arg1);
    $r := $i34;
    return;

  $bb20:
    assume $i61 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2259} $i36 := ext_prop_type_show($p35, arg1);
    $r := $i36;
    return;

  $bb21:
    assume $i62 == 1;
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2260} $i38 := ext_prop_data_show($p37, arg1);
    $r := $i38;
    return;

  $bb22:
    assume $i63 == 1;
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2261} $i40 := gadget_config_desc_MaxPower_show($p39, arg1);
    $r := $i40;
    return;

  $bb23:
    assume $i64 == 1;
    $p41 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2262} $i42 := gadget_config_desc_bmAttributes_show($p41, arg1);
    $r := $i42;
    return;
}



const devirtbounce.27: ref;

axiom devirtbounce.27 == $sub.ref(0, 779252);

procedure devirtbounce.27(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.27(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i64 := $eq.ref(gadget_config_desc_bmAttributes_store, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i64 == 1);
    $i63 := $eq.ref(gadget_config_desc_MaxPower_store, $p0);
    assume true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i63 == 1);
    $i62 := $eq.ref(ext_prop_data_store, $p0);
    assume {:branchcond $i62} true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i62 == 1);
    $i61 := $eq.ref(ext_prop_type_store, $p0);
    assume true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i61 == 1);
    $i60 := $eq.ref(gadget_strings_serialnumber_store, $p0);
    assume {:branchcond $i60} true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_product_store, $p0);
    assume true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_strings_manufacturer_store, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_config_name_configuration_store, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_dev_desc_UDC_store, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_bcdUSB_store, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_bcdDevice_store, $p0);
    assume true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_idProduct_store, $p0);
    assume {:branchcond $i53} true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_idVendor_store, $p0);
    assume {:branchcond $i52} true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_store, $p0);
    assume true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bDeviceProtocol_store, $p0);
    assume true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceSubClass_store, $p0);
    assume {:branchcond $i49} true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bDeviceClass_store, $p0);
    assume {:branchcond $i48} true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i48 == 1);
    $i47 := $eq.ref(os_desc_qw_sign_store, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_b_vendor_code_store, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i46 == 1);
    $i45 := $eq.ref(os_desc_use_store, $p0);
    assume true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i45 == 1);
    $i44 := $eq.ref(interf_grp_sub_compatible_id_store, $p0);
    assume {:branchcond $i44} true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i44 == 1);
    $i43 := $eq.ref(interf_grp_compatible_id_store, $p0);
    assume {:branchcond $i43} true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume false;
    return;

  $bb2:
    assume $i43 == 1;
    call {:si_unique_call 2263} $i1 := interf_grp_compatible_id_store(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i44 == 1;
    call {:si_unique_call 2264} $i2 := interf_grp_sub_compatible_id_store(arg, arg1, arg2);
    $r := $i2;
    return;

  $bb4:
    assume $i45 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2265} $i4 := os_desc_use_store($p3, arg1, arg2);
    $r := $i4;
    return;

  $bb5:
    assume $i46 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2266} $i6 := os_desc_b_vendor_code_store($p5, arg1, arg2);
    $r := $i6;
    return;

  $bb6:
    assume $i47 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2267} $i8 := os_desc_qw_sign_store($p7, arg1, arg2);
    $r := $i8;
    return;

  $bb7:
    assume $i48 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2268} $i10 := gadget_dev_desc_bDeviceClass_store($p9, arg1, arg2);
    $r := $i10;
    return;

  $bb8:
    assume $i49 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2269} $i12 := gadget_dev_desc_bDeviceSubClass_store($p11, arg1, arg2);
    $r := $i12;
    return;

  $bb9:
    assume $i50 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2270} $i14 := gadget_dev_desc_bDeviceProtocol_store($p13, arg1, arg2);
    $r := $i14;
    return;

  $bb10:
    assume $i51 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2271} $i16 := gadget_dev_desc_bMaxPacketSize0_store($p15, arg1, arg2);
    $r := $i16;
    return;

  $bb11:
    assume $i52 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2272} $i18 := gadget_dev_desc_idVendor_store($p17, arg1, arg2);
    $r := $i18;
    return;

  $bb12:
    assume $i53 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2273} $i20 := gadget_dev_desc_idProduct_store($p19, arg1, arg2);
    $r := $i20;
    return;

  $bb13:
    assume $i54 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2274} $i22 := gadget_dev_desc_bcdDevice_store($p21, arg1, arg2);
    $r := $i22;
    return;

  $bb14:
    assume $i55 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2275} $i24 := gadget_dev_desc_bcdUSB_store($p23, arg1, arg2);
    $r := $i24;
    return;

  $bb15:
    assume $i56 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2276} $i26 := gadget_dev_desc_UDC_store($p25, arg1, arg2);
    $r := $i26;
    return;

  $bb16:
    assume $i57 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2277} $i28 := gadget_config_name_configuration_store($p27, arg1, arg2);
    $r := $i28;
    return;

  $bb17:
    assume $i58 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2278} $i30 := gadget_strings_manufacturer_store($p29, arg1, arg2);
    $r := $i30;
    return;

  $bb18:
    assume $i59 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2279} $i32 := gadget_strings_product_store($p31, arg1, arg2);
    $r := $i32;
    return;

  $bb19:
    assume $i60 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2280} $i34 := gadget_strings_serialnumber_store($p33, arg1, arg2);
    $r := $i34;
    return;

  $bb20:
    assume $i61 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2281} $i36 := ext_prop_type_store($p35, arg1, arg2);
    $r := $i36;
    return;

  $bb21:
    assume $i62 == 1;
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2282} $i38 := ext_prop_data_store($p37, arg1, arg2);
    $r := $i38;
    return;

  $bb22:
    assume $i63 == 1;
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2283} $i40 := gadget_config_desc_MaxPower_store($p39, arg1, arg2);
    $r := $i40;
    return;

  $bb23:
    assume $i64 == 1;
    $p41 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2284} $i42 := gadget_config_desc_bmAttributes_store($p41, arg1, arg2);
    $r := $i42;
    return;
}



const devirtbounce.28: ref;

axiom devirtbounce.28 == $sub.ref(0, 780284);

procedure devirtbounce.28(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation devirtbounce.28(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i44 := $eq.ref(config_usb_cfg_unlink, $p0);
    assume {:branchcond $i44} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i44 == 1);
    $i43 := $eq.ref(config_usb_cfg_link, $p0);
    assume {:branchcond $i43} true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i43 == 1);
    $i42 := $eq.ref(configfs_composite_bind, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i42 == 1);
    $i41 := $eq.ref(os_desc_unlink, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i41 == 1);
    $i40 := $eq.ref(os_desc_link, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i40 == 1);
    $i39 := $eq.ref(composite_setup, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i39 == 1);
    $i38 := $eq.ref(composite_bind, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i38 == 1);
    $i37 := $eq.ref(usb_string_ids_tab, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i37 == 1);
    $i36 := $eq.ref(usb_add_config_only, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i36 == 1);
    $i35 := $eq.ref(usb_interface_id, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i35 == 1);
    $i34 := $eq.ref(usb_add_function, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i34 == 1);
    assume false;
    return;

  $bb2:
    assume $i34 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2285} $i3 := usb_add_function($p1, $p2);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    $r := $i3;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i35 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2286} $i6 := usb_interface_id($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i36 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2287} $i9 := usb_add_config_only($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i37 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2288} $i12 := usb_string_ids_tab($p10, $p11);
    $r := $i12;
    return;

  $bb6:
    assume $i38 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2289} $i15 := composite_bind($p13, $p14);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    $r := $i15;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i39 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2290} $i18 := composite_setup($p16, $p17);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    $r := $i18;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i40 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2291} $i21 := os_desc_link($p19, $p20);
    $r := $i21;
    return;

  $bb9:
    assume $i41 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2292} $i24 := os_desc_unlink($p22, $p23);
    $r := $i24;
    return;

  $bb10:
    assume $i42 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2293} $i27 := configfs_composite_bind($p25, $p26);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    $r := $i27;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i43 == 1;
    $p28 := $bitcast.ref.ref(arg);
    $p29 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2294} $i30 := config_usb_cfg_link($p28, $p29);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    $r := $i30;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i44 == 1;
    $p31 := $bitcast.ref.ref(arg);
    $p32 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2295} $i33 := config_usb_cfg_unlink($p31, $p32);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    $r := $i33;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;
}



const devirtbounce.29: ref;

axiom devirtbounce.29 == $sub.ref(0, 781316);

procedure devirtbounce.29(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.29(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i63 := $eq.ref(gadget_config_desc_bmAttributes_show, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i63 == 1);
    $i62 := $eq.ref(gadget_config_desc_MaxPower_show, $p0);
    assume {:branchcond $i62} true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i62 == 1);
    $i61 := $eq.ref(ext_prop_data_show, $p0);
    assume true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i61 == 1);
    $i60 := $eq.ref(ext_prop_type_show, $p0);
    assume {:branchcond $i60} true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_serialnumber_show, $p0);
    assume true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_strings_product_show, $p0);
    assume true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_strings_manufacturer_show, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_config_name_configuration_show, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_UDC_show, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_bcdUSB_show, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_bcdDevice_show, $p0);
    assume {:branchcond $i53} true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_idProduct_show, $p0);
    assume {:branchcond $i52} true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_idVendor_show, $p0);
    assume true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_show, $p0);
    assume true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceProtocol_show, $p0);
    assume {:branchcond $i49} true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bDeviceSubClass_show, $p0);
    assume {:branchcond $i48} true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i48 == 1);
    $i47 := $eq.ref(gadget_dev_desc_bDeviceClass_show, $p0);
    assume true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_qw_sign_show, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i46 == 1);
    $i45 := $eq.ref(os_desc_b_vendor_code_show, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i45 == 1);
    $i44 := $eq.ref(os_desc_use_show, $p0);
    assume {:branchcond $i44} true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i44 == 1);
    $i43 := $eq.ref(interf_grp_sub_compatible_id_show, $p0);
    assume {:branchcond $i43} true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i43 == 1);
    $i42 := $eq.ref(interf_grp_compatible_id_show, $p0);
    assume true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume false;
    return;

  $bb2:
    assume $i42 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2296} $i2 := interf_grp_compatible_id_show($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i43 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2297} $i4 := interf_grp_sub_compatible_id_show($p3, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i44 == 1;
    call {:si_unique_call 2298} $i5 := os_desc_use_show(arg, arg1);
    $r := $i5;
    return;

  $bb5:
    assume $i45 == 1;
    call {:si_unique_call 2299} $i6 := os_desc_b_vendor_code_show(arg, arg1);
    $r := $i6;
    return;

  $bb6:
    assume $i46 == 1;
    call {:si_unique_call 2300} $i7 := os_desc_qw_sign_show(arg, arg1);
    $r := $i7;
    return;

  $bb7:
    assume $i47 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2301} $i9 := gadget_dev_desc_bDeviceClass_show($p8, arg1);
    $r := $i9;
    return;

  $bb8:
    assume $i48 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2302} $i11 := gadget_dev_desc_bDeviceSubClass_show($p10, arg1);
    $r := $i11;
    return;

  $bb9:
    assume $i49 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2303} $i13 := gadget_dev_desc_bDeviceProtocol_show($p12, arg1);
    $r := $i13;
    return;

  $bb10:
    assume $i50 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2304} $i15 := gadget_dev_desc_bMaxPacketSize0_show($p14, arg1);
    $r := $i15;
    return;

  $bb11:
    assume $i51 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2305} $i17 := gadget_dev_desc_idVendor_show($p16, arg1);
    $r := $i17;
    return;

  $bb12:
    assume $i52 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2306} $i19 := gadget_dev_desc_idProduct_show($p18, arg1);
    $r := $i19;
    return;

  $bb13:
    assume $i53 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2307} $i21 := gadget_dev_desc_bcdDevice_show($p20, arg1);
    $r := $i21;
    return;

  $bb14:
    assume $i54 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2308} $i23 := gadget_dev_desc_bcdUSB_show($p22, arg1);
    $r := $i23;
    return;

  $bb15:
    assume $i55 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2309} $i25 := gadget_dev_desc_UDC_show($p24, arg1);
    $r := $i25;
    return;

  $bb16:
    assume $i56 == 1;
    $p26 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2310} $i27 := gadget_config_name_configuration_show($p26, arg1);
    $r := $i27;
    return;

  $bb17:
    assume $i57 == 1;
    $p28 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2311} $i29 := gadget_strings_manufacturer_show($p28, arg1);
    $r := $i29;
    return;

  $bb18:
    assume $i58 == 1;
    $p30 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2312} $i31 := gadget_strings_product_show($p30, arg1);
    $r := $i31;
    return;

  $bb19:
    assume $i59 == 1;
    $p32 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2313} $i33 := gadget_strings_serialnumber_show($p32, arg1);
    $r := $i33;
    return;

  $bb20:
    assume $i60 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2314} $i35 := ext_prop_type_show($p34, arg1);
    $r := $i35;
    return;

  $bb21:
    assume $i61 == 1;
    $p36 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2315} $i37 := ext_prop_data_show($p36, arg1);
    $r := $i37;
    return;

  $bb22:
    assume $i62 == 1;
    $p38 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2316} $i39 := gadget_config_desc_MaxPower_show($p38, arg1);
    $r := $i39;
    return;

  $bb23:
    assume $i63 == 1;
    $p40 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2317} $i41 := gadget_config_desc_bmAttributes_show($p40, arg1);
    $r := $i41;
    return;
}



const devirtbounce.30: ref;

axiom devirtbounce.30 == $sub.ref(0, 782348);

procedure devirtbounce.30(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.30(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i63 := $eq.ref(gadget_config_desc_bmAttributes_store, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i63 == 1);
    $i62 := $eq.ref(gadget_config_desc_MaxPower_store, $p0);
    assume {:branchcond $i62} true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i62 == 1);
    $i61 := $eq.ref(ext_prop_data_store, $p0);
    assume true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i61 == 1);
    $i60 := $eq.ref(ext_prop_type_store, $p0);
    assume {:branchcond $i60} true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_serialnumber_store, $p0);
    assume true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_strings_product_store, $p0);
    assume true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_strings_manufacturer_store, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_config_name_configuration_store, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_UDC_store, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_bcdUSB_store, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_bcdDevice_store, $p0);
    assume {:branchcond $i53} true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_idProduct_store, $p0);
    assume {:branchcond $i52} true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_idVendor_store, $p0);
    assume true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_store, $p0);
    assume true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceProtocol_store, $p0);
    assume {:branchcond $i49} true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bDeviceSubClass_store, $p0);
    assume {:branchcond $i48} true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i48 == 1);
    $i47 := $eq.ref(gadget_dev_desc_bDeviceClass_store, $p0);
    assume true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_qw_sign_store, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i46 == 1);
    $i45 := $eq.ref(os_desc_b_vendor_code_store, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i45 == 1);
    $i44 := $eq.ref(os_desc_use_store, $p0);
    assume {:branchcond $i44} true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i44 == 1);
    $i43 := $eq.ref(interf_grp_sub_compatible_id_store, $p0);
    assume {:branchcond $i43} true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i43 == 1);
    $i42 := $eq.ref(interf_grp_compatible_id_store, $p0);
    assume true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume false;
    return;

  $bb2:
    assume $i42 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2318} $i2 := interf_grp_compatible_id_store($p1, arg1, arg2);
    $r := $i2;
    return;

  $bb3:
    assume $i43 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2319} $i4 := interf_grp_sub_compatible_id_store($p3, arg1, arg2);
    $r := $i4;
    return;

  $bb4:
    assume $i44 == 1;
    call {:si_unique_call 2320} $i5 := os_desc_use_store(arg, arg1, arg2);
    $r := $i5;
    return;

  $bb5:
    assume $i45 == 1;
    call {:si_unique_call 2321} $i6 := os_desc_b_vendor_code_store(arg, arg1, arg2);
    $r := $i6;
    return;

  $bb6:
    assume $i46 == 1;
    call {:si_unique_call 2322} $i7 := os_desc_qw_sign_store(arg, arg1, arg2);
    $r := $i7;
    return;

  $bb7:
    assume $i47 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2323} $i9 := gadget_dev_desc_bDeviceClass_store($p8, arg1, arg2);
    $r := $i9;
    return;

  $bb8:
    assume $i48 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2324} $i11 := gadget_dev_desc_bDeviceSubClass_store($p10, arg1, arg2);
    $r := $i11;
    return;

  $bb9:
    assume $i49 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2325} $i13 := gadget_dev_desc_bDeviceProtocol_store($p12, arg1, arg2);
    $r := $i13;
    return;

  $bb10:
    assume $i50 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2326} $i15 := gadget_dev_desc_bMaxPacketSize0_store($p14, arg1, arg2);
    $r := $i15;
    return;

  $bb11:
    assume $i51 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2327} $i17 := gadget_dev_desc_idVendor_store($p16, arg1, arg2);
    $r := $i17;
    return;

  $bb12:
    assume $i52 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2328} $i19 := gadget_dev_desc_idProduct_store($p18, arg1, arg2);
    $r := $i19;
    return;

  $bb13:
    assume $i53 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2329} $i21 := gadget_dev_desc_bcdDevice_store($p20, arg1, arg2);
    $r := $i21;
    return;

  $bb14:
    assume $i54 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2330} $i23 := gadget_dev_desc_bcdUSB_store($p22, arg1, arg2);
    $r := $i23;
    return;

  $bb15:
    assume $i55 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2331} $i25 := gadget_dev_desc_UDC_store($p24, arg1, arg2);
    $r := $i25;
    return;

  $bb16:
    assume $i56 == 1;
    $p26 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2332} $i27 := gadget_config_name_configuration_store($p26, arg1, arg2);
    $r := $i27;
    return;

  $bb17:
    assume $i57 == 1;
    $p28 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2333} $i29 := gadget_strings_manufacturer_store($p28, arg1, arg2);
    $r := $i29;
    return;

  $bb18:
    assume $i58 == 1;
    $p30 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2334} $i31 := gadget_strings_product_store($p30, arg1, arg2);
    $r := $i31;
    return;

  $bb19:
    assume $i59 == 1;
    $p32 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2335} $i33 := gadget_strings_serialnumber_store($p32, arg1, arg2);
    $r := $i33;
    return;

  $bb20:
    assume $i60 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2336} $i35 := ext_prop_type_store($p34, arg1, arg2);
    $r := $i35;
    return;

  $bb21:
    assume $i61 == 1;
    $p36 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2337} $i37 := ext_prop_data_store($p36, arg1, arg2);
    $r := $i37;
    return;

  $bb22:
    assume $i62 == 1;
    $p38 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2338} $i39 := gadget_config_desc_MaxPower_store($p38, arg1, arg2);
    $r := $i39;
    return;

  $bb23:
    assume $i63 == 1;
    $p40 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2339} $i41 := gadget_config_desc_bmAttributes_store($p40, arg1, arg2);
    $r := $i41;
    return;
}



const devirtbounce.31: ref;

axiom devirtbounce.31 == $sub.ref(0, 783380);

procedure devirtbounce.31(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.31(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i57 := $eq.ref(gadget_config_desc_bmAttributes_show, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_config_desc_MaxPower_show, $p0);
    assume true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i56 == 1);
    $i55 := $eq.ref(ext_prop_data_show, $p0);
    assume true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i55 == 1);
    $i54 := $eq.ref(ext_prop_type_show, $p0);
    assume true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_strings_serialnumber_show, $p0);
    assume {:branchcond $i53} true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_strings_product_show, $p0);
    assume {:branchcond $i52} true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_strings_manufacturer_show, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_config_name_configuration_show, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_UDC_show, $p0);
    assume {:branchcond $i49} true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bcdUSB_show, $p0);
    assume {:branchcond $i48} true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i48 == 1);
    $i47 := $eq.ref(gadget_dev_desc_bcdDevice_show, $p0);
    assume true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i47 == 1);
    $i46 := $eq.ref(gadget_dev_desc_idProduct_show, $p0);
    assume true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i46 == 1);
    $i45 := $eq.ref(gadget_dev_desc_idVendor_show, $p0);
    assume true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i45 == 1);
    $i44 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_show, $p0);
    assume {:branchcond $i44} true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i44 == 1);
    $i43 := $eq.ref(gadget_dev_desc_bDeviceProtocol_show, $p0);
    assume {:branchcond $i43} true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i43 == 1);
    $i42 := $eq.ref(gadget_dev_desc_bDeviceSubClass_show, $p0);
    assume true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i42 == 1);
    $i41 := $eq.ref(gadget_dev_desc_bDeviceClass_show, $p0);
    assume true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i41 == 1);
    $i40 := $eq.ref(os_desc_qw_sign_show, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i40 == 1);
    $i39 := $eq.ref(os_desc_b_vendor_code_show, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i39 == 1);
    $i38 := $eq.ref(os_desc_use_show, $p0);
    assume true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i38 == 1);
    $i37 := $eq.ref(interf_grp_sub_compatible_id_show, $p0);
    assume true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i37 == 1);
    $i36 := $eq.ref(interf_grp_compatible_id_show, $p0);
    assume true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume false;
    return;

  $bb2:
    assume $i36 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2340} $i2 := interf_grp_compatible_id_show($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i37 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2341} $i4 := interf_grp_sub_compatible_id_show($p3, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i38 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2342} $i6 := os_desc_use_show($p5, arg1);
    $r := $i6;
    return;

  $bb5:
    assume $i39 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2343} $i8 := os_desc_b_vendor_code_show($p7, arg1);
    $r := $i8;
    return;

  $bb6:
    assume $i40 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2344} $i10 := os_desc_qw_sign_show($p9, arg1);
    $r := $i10;
    return;

  $bb7:
    assume $i41 == 1;
    call {:si_unique_call 2345} $i11 := gadget_dev_desc_bDeviceClass_show(arg, arg1);
    $r := $i11;
    return;

  $bb8:
    assume $i42 == 1;
    call {:si_unique_call 2346} $i12 := gadget_dev_desc_bDeviceSubClass_show(arg, arg1);
    $r := $i12;
    return;

  $bb9:
    assume $i43 == 1;
    call {:si_unique_call 2347} $i13 := gadget_dev_desc_bDeviceProtocol_show(arg, arg1);
    $r := $i13;
    return;

  $bb10:
    assume $i44 == 1;
    call {:si_unique_call 2348} $i14 := gadget_dev_desc_bMaxPacketSize0_show(arg, arg1);
    $r := $i14;
    return;

  $bb11:
    assume $i45 == 1;
    call {:si_unique_call 2349} $i15 := gadget_dev_desc_idVendor_show(arg, arg1);
    $r := $i15;
    return;

  $bb12:
    assume $i46 == 1;
    call {:si_unique_call 2350} $i16 := gadget_dev_desc_idProduct_show(arg, arg1);
    $r := $i16;
    return;

  $bb13:
    assume $i47 == 1;
    call {:si_unique_call 2351} $i17 := gadget_dev_desc_bcdDevice_show(arg, arg1);
    $r := $i17;
    return;

  $bb14:
    assume $i48 == 1;
    call {:si_unique_call 2352} $i18 := gadget_dev_desc_bcdUSB_show(arg, arg1);
    $r := $i18;
    return;

  $bb15:
    assume $i49 == 1;
    call {:si_unique_call 2353} $i19 := gadget_dev_desc_UDC_show(arg, arg1);
    $r := $i19;
    return;

  $bb16:
    assume $i50 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2354} $i21 := gadget_config_name_configuration_show($p20, arg1);
    $r := $i21;
    return;

  $bb17:
    assume $i51 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2355} $i23 := gadget_strings_manufacturer_show($p22, arg1);
    $r := $i23;
    return;

  $bb18:
    assume $i52 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2356} $i25 := gadget_strings_product_show($p24, arg1);
    $r := $i25;
    return;

  $bb19:
    assume $i53 == 1;
    $p26 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2357} $i27 := gadget_strings_serialnumber_show($p26, arg1);
    $r := $i27;
    return;

  $bb20:
    assume $i54 == 1;
    $p28 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2358} $i29 := ext_prop_type_show($p28, arg1);
    $r := $i29;
    return;

  $bb21:
    assume $i55 == 1;
    $p30 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2359} $i31 := ext_prop_data_show($p30, arg1);
    $r := $i31;
    return;

  $bb22:
    assume $i56 == 1;
    $p32 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2360} $i33 := gadget_config_desc_MaxPower_show($p32, arg1);
    $r := $i33;
    return;

  $bb23:
    assume $i57 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2361} $i35 := gadget_config_desc_bmAttributes_show($p34, arg1);
    $r := $i35;
    return;
}



const devirtbounce.32: ref;

axiom devirtbounce.32 == $sub.ref(0, 784412);

procedure devirtbounce.32(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.32(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i57 := $eq.ref(gadget_config_desc_bmAttributes_store, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_config_desc_MaxPower_store, $p0);
    assume true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i56 == 1);
    $i55 := $eq.ref(ext_prop_data_store, $p0);
    assume true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i55 == 1);
    $i54 := $eq.ref(ext_prop_type_store, $p0);
    assume true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_strings_serialnumber_store, $p0);
    assume {:branchcond $i53} true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_strings_product_store, $p0);
    assume {:branchcond $i52} true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_strings_manufacturer_store, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_config_name_configuration_store, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_UDC_store, $p0);
    assume {:branchcond $i49} true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bcdUSB_store, $p0);
    assume {:branchcond $i48} true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i48 == 1);
    $i47 := $eq.ref(gadget_dev_desc_bcdDevice_store, $p0);
    assume true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i47 == 1);
    $i46 := $eq.ref(gadget_dev_desc_idProduct_store, $p0);
    assume true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i46 == 1);
    $i45 := $eq.ref(gadget_dev_desc_idVendor_store, $p0);
    assume true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i45 == 1);
    $i44 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_store, $p0);
    assume {:branchcond $i44} true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i44 == 1);
    $i43 := $eq.ref(gadget_dev_desc_bDeviceProtocol_store, $p0);
    assume {:branchcond $i43} true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i43 == 1);
    $i42 := $eq.ref(gadget_dev_desc_bDeviceSubClass_store, $p0);
    assume true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i42 == 1);
    $i41 := $eq.ref(gadget_dev_desc_bDeviceClass_store, $p0);
    assume true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i41 == 1);
    $i40 := $eq.ref(os_desc_qw_sign_store, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i40 == 1);
    $i39 := $eq.ref(os_desc_b_vendor_code_store, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i39 == 1);
    $i38 := $eq.ref(os_desc_use_store, $p0);
    assume true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i38 == 1);
    $i37 := $eq.ref(interf_grp_sub_compatible_id_store, $p0);
    assume true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i37 == 1);
    $i36 := $eq.ref(interf_grp_compatible_id_store, $p0);
    assume true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume false;
    return;

  $bb2:
    assume $i36 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2362} $i2 := interf_grp_compatible_id_store($p1, arg1, arg2);
    $r := $i2;
    return;

  $bb3:
    assume $i37 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2363} $i4 := interf_grp_sub_compatible_id_store($p3, arg1, arg2);
    $r := $i4;
    return;

  $bb4:
    assume $i38 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2364} $i6 := os_desc_use_store($p5, arg1, arg2);
    $r := $i6;
    return;

  $bb5:
    assume $i39 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2365} $i8 := os_desc_b_vendor_code_store($p7, arg1, arg2);
    $r := $i8;
    return;

  $bb6:
    assume $i40 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2366} $i10 := os_desc_qw_sign_store($p9, arg1, arg2);
    $r := $i10;
    return;

  $bb7:
    assume $i41 == 1;
    call {:si_unique_call 2367} $i11 := gadget_dev_desc_bDeviceClass_store(arg, arg1, arg2);
    $r := $i11;
    return;

  $bb8:
    assume $i42 == 1;
    call {:si_unique_call 2368} $i12 := gadget_dev_desc_bDeviceSubClass_store(arg, arg1, arg2);
    $r := $i12;
    return;

  $bb9:
    assume $i43 == 1;
    call {:si_unique_call 2369} $i13 := gadget_dev_desc_bDeviceProtocol_store(arg, arg1, arg2);
    $r := $i13;
    return;

  $bb10:
    assume $i44 == 1;
    call {:si_unique_call 2370} $i14 := gadget_dev_desc_bMaxPacketSize0_store(arg, arg1, arg2);
    $r := $i14;
    return;

  $bb11:
    assume $i45 == 1;
    call {:si_unique_call 2371} $i15 := gadget_dev_desc_idVendor_store(arg, arg1, arg2);
    $r := $i15;
    return;

  $bb12:
    assume $i46 == 1;
    call {:si_unique_call 2372} $i16 := gadget_dev_desc_idProduct_store(arg, arg1, arg2);
    $r := $i16;
    return;

  $bb13:
    assume $i47 == 1;
    call {:si_unique_call 2373} $i17 := gadget_dev_desc_bcdDevice_store(arg, arg1, arg2);
    $r := $i17;
    return;

  $bb14:
    assume $i48 == 1;
    call {:si_unique_call 2374} $i18 := gadget_dev_desc_bcdUSB_store(arg, arg1, arg2);
    $r := $i18;
    return;

  $bb15:
    assume $i49 == 1;
    call {:si_unique_call 2375} $i19 := gadget_dev_desc_UDC_store(arg, arg1, arg2);
    $r := $i19;
    return;

  $bb16:
    assume $i50 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2376} $i21 := gadget_config_name_configuration_store($p20, arg1, arg2);
    $r := $i21;
    return;

  $bb17:
    assume $i51 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2377} $i23 := gadget_strings_manufacturer_store($p22, arg1, arg2);
    $r := $i23;
    return;

  $bb18:
    assume $i52 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2378} $i25 := gadget_strings_product_store($p24, arg1, arg2);
    $r := $i25;
    return;

  $bb19:
    assume $i53 == 1;
    $p26 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2379} $i27 := gadget_strings_serialnumber_store($p26, arg1, arg2);
    $r := $i27;
    return;

  $bb20:
    assume $i54 == 1;
    $p28 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2380} $i29 := ext_prop_type_store($p28, arg1, arg2);
    $r := $i29;
    return;

  $bb21:
    assume $i55 == 1;
    $p30 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2381} $i31 := ext_prop_data_store($p30, arg1, arg2);
    $r := $i31;
    return;

  $bb22:
    assume $i56 == 1;
    $p32 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2382} $i33 := gadget_config_desc_MaxPower_store($p32, arg1, arg2);
    $r := $i33;
    return;

  $bb23:
    assume $i57 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2383} $i35 := gadget_config_desc_bmAttributes_store($p34, arg1, arg2);
    $r := $i35;
    return;
}



const devirtbounce.33: ref;

axiom devirtbounce.33 == $sub.ref(0, 785444);

procedure devirtbounce.33(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.33(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i65 := $eq.ref(gadget_config_desc_bmAttributes_show, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i65 == 1);
    $i64 := $eq.ref(gadget_config_desc_MaxPower_show, $p0);
    assume true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i64 == 1);
    $i63 := $eq.ref(ext_prop_data_show, $p0);
    assume true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i63 == 1);
    $i62 := $eq.ref(ext_prop_type_show, $p0);
    assume {:branchcond $i62} true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i62 == 1);
    $i61 := $eq.ref(gadget_strings_serialnumber_show, $p0);
    assume true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i61 == 1);
    $i60 := $eq.ref(gadget_strings_product_show, $p0);
    assume {:branchcond $i60} true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_manufacturer_show, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_config_name_configuration_show, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_dev_desc_UDC_show, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_dev_desc_bcdUSB_show, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_bcdDevice_show, $p0);
    assume true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_idProduct_show, $p0);
    assume true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_idVendor_show, $p0);
    assume {:branchcond $i53} true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_show, $p0);
    assume {:branchcond $i52} true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_bDeviceProtocol_show, $p0);
    assume true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bDeviceSubClass_show, $p0);
    assume true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceClass_show, $p0);
    assume {:branchcond $i49} true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i49 == 1);
    $i48 := $eq.ref(os_desc_qw_sign_show, $p0);
    assume {:branchcond $i48} true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i48 == 1);
    $i47 := $eq.ref(os_desc_b_vendor_code_show, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_use_show, $p0);
    assume true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i46 == 1);
    $i45 := $eq.ref(interf_grp_sub_compatible_id_show, $p0);
    assume true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i45 == 1);
    $i44 := $eq.ref(interf_grp_compatible_id_show, $p0);
    assume {:branchcond $i44} true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume false;
    return;

  $bb2:
    assume $i44 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2384} $i2 := interf_grp_compatible_id_show($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i45 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2385} $i4 := interf_grp_sub_compatible_id_show($p3, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i46 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2386} $i6 := os_desc_use_show($p5, arg1);
    $r := $i6;
    return;

  $bb5:
    assume $i47 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2387} $i8 := os_desc_b_vendor_code_show($p7, arg1);
    $r := $i8;
    return;

  $bb6:
    assume $i48 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2388} $i10 := os_desc_qw_sign_show($p9, arg1);
    $r := $i10;
    return;

  $bb7:
    assume $i49 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2389} $i12 := gadget_dev_desc_bDeviceClass_show($p11, arg1);
    $r := $i12;
    return;

  $bb8:
    assume $i50 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2390} $i14 := gadget_dev_desc_bDeviceSubClass_show($p13, arg1);
    $r := $i14;
    return;

  $bb9:
    assume $i51 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2391} $i16 := gadget_dev_desc_bDeviceProtocol_show($p15, arg1);
    $r := $i16;
    return;

  $bb10:
    assume $i52 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2392} $i18 := gadget_dev_desc_bMaxPacketSize0_show($p17, arg1);
    $r := $i18;
    return;

  $bb11:
    assume $i53 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2393} $i20 := gadget_dev_desc_idVendor_show($p19, arg1);
    $r := $i20;
    return;

  $bb12:
    assume $i54 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2394} $i22 := gadget_dev_desc_idProduct_show($p21, arg1);
    $r := $i22;
    return;

  $bb13:
    assume $i55 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2395} $i24 := gadget_dev_desc_bcdDevice_show($p23, arg1);
    $r := $i24;
    return;

  $bb14:
    assume $i56 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2396} $i26 := gadget_dev_desc_bcdUSB_show($p25, arg1);
    $r := $i26;
    return;

  $bb15:
    assume $i57 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2397} $i28 := gadget_dev_desc_UDC_show($p27, arg1);
    $r := $i28;
    return;

  $bb16:
    assume $i58 == 1;
    call {:si_unique_call 2398} $i29 := gadget_config_name_configuration_show(arg, arg1);
    $r := $i29;
    return;

  $bb17:
    assume $i59 == 1;
    $p30 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2399} $i31 := gadget_strings_manufacturer_show($p30, arg1);
    $r := $i31;
    return;

  $bb18:
    assume $i60 == 1;
    $p32 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2400} $i33 := gadget_strings_product_show($p32, arg1);
    $r := $i33;
    return;

  $bb19:
    assume $i61 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2401} $i35 := gadget_strings_serialnumber_show($p34, arg1);
    $r := $i35;
    return;

  $bb20:
    assume $i62 == 1;
    $p36 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2402} $i37 := ext_prop_type_show($p36, arg1);
    $r := $i37;
    return;

  $bb21:
    assume $i63 == 1;
    $p38 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2403} $i39 := ext_prop_data_show($p38, arg1);
    $r := $i39;
    return;

  $bb22:
    assume $i64 == 1;
    $p40 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2404} $i41 := gadget_config_desc_MaxPower_show($p40, arg1);
    $r := $i41;
    return;

  $bb23:
    assume $i65 == 1;
    $p42 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2405} $i43 := gadget_config_desc_bmAttributes_show($p42, arg1);
    $r := $i43;
    return;
}



const devirtbounce.34: ref;

axiom devirtbounce.34 == $sub.ref(0, 786476);

procedure devirtbounce.34(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.34(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i65 := $eq.ref(gadget_config_desc_bmAttributes_store, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i65 == 1);
    $i64 := $eq.ref(gadget_config_desc_MaxPower_store, $p0);
    assume true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i64 == 1);
    $i63 := $eq.ref(ext_prop_data_store, $p0);
    assume true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i63 == 1);
    $i62 := $eq.ref(ext_prop_type_store, $p0);
    assume {:branchcond $i62} true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i62 == 1);
    $i61 := $eq.ref(gadget_strings_serialnumber_store, $p0);
    assume true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i61 == 1);
    $i60 := $eq.ref(gadget_strings_product_store, $p0);
    assume {:branchcond $i60} true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_manufacturer_store, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_config_name_configuration_store, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_dev_desc_UDC_store, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_dev_desc_bcdUSB_store, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_bcdDevice_store, $p0);
    assume true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_idProduct_store, $p0);
    assume true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_idVendor_store, $p0);
    assume {:branchcond $i53} true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_store, $p0);
    assume {:branchcond $i52} true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_bDeviceProtocol_store, $p0);
    assume true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bDeviceSubClass_store, $p0);
    assume true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceClass_store, $p0);
    assume {:branchcond $i49} true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i49 == 1);
    $i48 := $eq.ref(os_desc_qw_sign_store, $p0);
    assume {:branchcond $i48} true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i48 == 1);
    $i47 := $eq.ref(os_desc_b_vendor_code_store, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_use_store, $p0);
    assume true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i46 == 1);
    $i45 := $eq.ref(interf_grp_sub_compatible_id_store, $p0);
    assume true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i45 == 1);
    $i44 := $eq.ref(interf_grp_compatible_id_store, $p0);
    assume {:branchcond $i44} true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume false;
    return;

  $bb2:
    assume $i44 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2406} $i2 := interf_grp_compatible_id_store($p1, arg1, arg2);
    $r := $i2;
    return;

  $bb3:
    assume $i45 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2407} $i4 := interf_grp_sub_compatible_id_store($p3, arg1, arg2);
    $r := $i4;
    return;

  $bb4:
    assume $i46 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2408} $i6 := os_desc_use_store($p5, arg1, arg2);
    $r := $i6;
    return;

  $bb5:
    assume $i47 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2409} $i8 := os_desc_b_vendor_code_store($p7, arg1, arg2);
    $r := $i8;
    return;

  $bb6:
    assume $i48 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2410} $i10 := os_desc_qw_sign_store($p9, arg1, arg2);
    $r := $i10;
    return;

  $bb7:
    assume $i49 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2411} $i12 := gadget_dev_desc_bDeviceClass_store($p11, arg1, arg2);
    $r := $i12;
    return;

  $bb8:
    assume $i50 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2412} $i14 := gadget_dev_desc_bDeviceSubClass_store($p13, arg1, arg2);
    $r := $i14;
    return;

  $bb9:
    assume $i51 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2413} $i16 := gadget_dev_desc_bDeviceProtocol_store($p15, arg1, arg2);
    $r := $i16;
    return;

  $bb10:
    assume $i52 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2414} $i18 := gadget_dev_desc_bMaxPacketSize0_store($p17, arg1, arg2);
    $r := $i18;
    return;

  $bb11:
    assume $i53 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2415} $i20 := gadget_dev_desc_idVendor_store($p19, arg1, arg2);
    $r := $i20;
    return;

  $bb12:
    assume $i54 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2416} $i22 := gadget_dev_desc_idProduct_store($p21, arg1, arg2);
    $r := $i22;
    return;

  $bb13:
    assume $i55 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2417} $i24 := gadget_dev_desc_bcdDevice_store($p23, arg1, arg2);
    $r := $i24;
    return;

  $bb14:
    assume $i56 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2418} $i26 := gadget_dev_desc_bcdUSB_store($p25, arg1, arg2);
    $r := $i26;
    return;

  $bb15:
    assume $i57 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2419} $i28 := gadget_dev_desc_UDC_store($p27, arg1, arg2);
    $r := $i28;
    return;

  $bb16:
    assume $i58 == 1;
    call {:si_unique_call 2420} $i29 := gadget_config_name_configuration_store(arg, arg1, arg2);
    $r := $i29;
    return;

  $bb17:
    assume $i59 == 1;
    $p30 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2421} $i31 := gadget_strings_manufacturer_store($p30, arg1, arg2);
    $r := $i31;
    return;

  $bb18:
    assume $i60 == 1;
    $p32 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2422} $i33 := gadget_strings_product_store($p32, arg1, arg2);
    $r := $i33;
    return;

  $bb19:
    assume $i61 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2423} $i35 := gadget_strings_serialnumber_store($p34, arg1, arg2);
    $r := $i35;
    return;

  $bb20:
    assume $i62 == 1;
    $p36 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2424} $i37 := ext_prop_type_store($p36, arg1, arg2);
    $r := $i37;
    return;

  $bb21:
    assume $i63 == 1;
    $p38 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2425} $i39 := ext_prop_data_store($p38, arg1, arg2);
    $r := $i39;
    return;

  $bb22:
    assume $i64 == 1;
    $p40 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2426} $i41 := gadget_config_desc_MaxPower_store($p40, arg1, arg2);
    $r := $i41;
    return;

  $bb23:
    assume $i65 == 1;
    $p42 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2427} $i43 := gadget_config_desc_bmAttributes_store($p42, arg1, arg2);
    $r := $i43;
    return;
}



const devirtbounce.35: ref;

axiom devirtbounce.35 == $sub.ref(0, 787508);

procedure devirtbounce.35(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.35(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i63 := $eq.ref(gadget_config_desc_bmAttributes_show, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i63 == 1);
    $i62 := $eq.ref(gadget_config_desc_MaxPower_show, $p0);
    assume {:branchcond $i62} true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i62 == 1);
    $i61 := $eq.ref(ext_prop_data_show, $p0);
    assume true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i61 == 1);
    $i60 := $eq.ref(ext_prop_type_show, $p0);
    assume {:branchcond $i60} true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_serialnumber_show, $p0);
    assume true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_strings_product_show, $p0);
    assume true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_strings_manufacturer_show, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_config_name_configuration_show, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_UDC_show, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_bcdUSB_show, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_bcdDevice_show, $p0);
    assume {:branchcond $i53} true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_idProduct_show, $p0);
    assume {:branchcond $i52} true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_idVendor_show, $p0);
    assume true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_show, $p0);
    assume true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceProtocol_show, $p0);
    assume {:branchcond $i49} true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bDeviceSubClass_show, $p0);
    assume {:branchcond $i48} true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i48 == 1);
    $i47 := $eq.ref(gadget_dev_desc_bDeviceClass_show, $p0);
    assume true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_qw_sign_show, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i46 == 1);
    $i45 := $eq.ref(os_desc_b_vendor_code_show, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i45 == 1);
    $i44 := $eq.ref(os_desc_use_show, $p0);
    assume {:branchcond $i44} true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i44 == 1);
    $i43 := $eq.ref(interf_grp_sub_compatible_id_show, $p0);
    assume {:branchcond $i43} true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i43 == 1);
    $i42 := $eq.ref(interf_grp_compatible_id_show, $p0);
    assume true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume false;
    return;

  $bb2:
    assume $i42 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2428} $i2 := interf_grp_compatible_id_show($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i43 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2429} $i4 := interf_grp_sub_compatible_id_show($p3, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i44 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2430} $i6 := os_desc_use_show($p5, arg1);
    $r := $i6;
    return;

  $bb5:
    assume $i45 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2431} $i8 := os_desc_b_vendor_code_show($p7, arg1);
    $r := $i8;
    return;

  $bb6:
    assume $i46 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2432} $i10 := os_desc_qw_sign_show($p9, arg1);
    $r := $i10;
    return;

  $bb7:
    assume $i47 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2433} $i12 := gadget_dev_desc_bDeviceClass_show($p11, arg1);
    $r := $i12;
    return;

  $bb8:
    assume $i48 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2434} $i14 := gadget_dev_desc_bDeviceSubClass_show($p13, arg1);
    $r := $i14;
    return;

  $bb9:
    assume $i49 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2435} $i16 := gadget_dev_desc_bDeviceProtocol_show($p15, arg1);
    $r := $i16;
    return;

  $bb10:
    assume $i50 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2436} $i18 := gadget_dev_desc_bMaxPacketSize0_show($p17, arg1);
    $r := $i18;
    return;

  $bb11:
    assume $i51 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2437} $i20 := gadget_dev_desc_idVendor_show($p19, arg1);
    $r := $i20;
    return;

  $bb12:
    assume $i52 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2438} $i22 := gadget_dev_desc_idProduct_show($p21, arg1);
    $r := $i22;
    return;

  $bb13:
    assume $i53 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2439} $i24 := gadget_dev_desc_bcdDevice_show($p23, arg1);
    $r := $i24;
    return;

  $bb14:
    assume $i54 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2440} $i26 := gadget_dev_desc_bcdUSB_show($p25, arg1);
    $r := $i26;
    return;

  $bb15:
    assume $i55 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2441} $i28 := gadget_dev_desc_UDC_show($p27, arg1);
    $r := $i28;
    return;

  $bb16:
    assume $i56 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2442} $i30 := gadget_config_name_configuration_show($p29, arg1);
    $r := $i30;
    return;

  $bb17:
    assume $i57 == 1;
    call {:si_unique_call 2443} $i31 := gadget_strings_manufacturer_show(arg, arg1);
    $r := $i31;
    return;

  $bb18:
    assume $i58 == 1;
    call {:si_unique_call 2444} $i32 := gadget_strings_product_show(arg, arg1);
    $r := $i32;
    return;

  $bb19:
    assume $i59 == 1;
    call {:si_unique_call 2445} $i33 := gadget_strings_serialnumber_show(arg, arg1);
    $r := $i33;
    return;

  $bb20:
    assume $i60 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2446} $i35 := ext_prop_type_show($p34, arg1);
    $r := $i35;
    return;

  $bb21:
    assume $i61 == 1;
    $p36 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2447} $i37 := ext_prop_data_show($p36, arg1);
    $r := $i37;
    return;

  $bb22:
    assume $i62 == 1;
    $p38 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2448} $i39 := gadget_config_desc_MaxPower_show($p38, arg1);
    $r := $i39;
    return;

  $bb23:
    assume $i63 == 1;
    $p40 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2449} $i41 := gadget_config_desc_bmAttributes_show($p40, arg1);
    $r := $i41;
    return;
}



const devirtbounce.36: ref;

axiom devirtbounce.36 == $sub.ref(0, 788540);

procedure devirtbounce.36(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.36(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i63 := $eq.ref(gadget_config_desc_bmAttributes_store, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i63 == 1);
    $i62 := $eq.ref(gadget_config_desc_MaxPower_store, $p0);
    assume {:branchcond $i62} true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i62 == 1);
    $i61 := $eq.ref(ext_prop_data_store, $p0);
    assume true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i61 == 1);
    $i60 := $eq.ref(ext_prop_type_store, $p0);
    assume {:branchcond $i60} true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_serialnumber_store, $p0);
    assume true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_strings_product_store, $p0);
    assume true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_strings_manufacturer_store, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_config_name_configuration_store, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_UDC_store, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_bcdUSB_store, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_bcdDevice_store, $p0);
    assume {:branchcond $i53} true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_idProduct_store, $p0);
    assume {:branchcond $i52} true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_idVendor_store, $p0);
    assume true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_store, $p0);
    assume true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceProtocol_store, $p0);
    assume {:branchcond $i49} true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bDeviceSubClass_store, $p0);
    assume {:branchcond $i48} true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i48 == 1);
    $i47 := $eq.ref(gadget_dev_desc_bDeviceClass_store, $p0);
    assume true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_qw_sign_store, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i46 == 1);
    $i45 := $eq.ref(os_desc_b_vendor_code_store, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i45 == 1);
    $i44 := $eq.ref(os_desc_use_store, $p0);
    assume {:branchcond $i44} true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i44 == 1);
    $i43 := $eq.ref(interf_grp_sub_compatible_id_store, $p0);
    assume {:branchcond $i43} true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i43 == 1);
    $i42 := $eq.ref(interf_grp_compatible_id_store, $p0);
    assume true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume false;
    return;

  $bb2:
    assume $i42 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2450} $i2 := interf_grp_compatible_id_store($p1, arg1, arg2);
    $r := $i2;
    return;

  $bb3:
    assume $i43 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2451} $i4 := interf_grp_sub_compatible_id_store($p3, arg1, arg2);
    $r := $i4;
    return;

  $bb4:
    assume $i44 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2452} $i6 := os_desc_use_store($p5, arg1, arg2);
    $r := $i6;
    return;

  $bb5:
    assume $i45 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2453} $i8 := os_desc_b_vendor_code_store($p7, arg1, arg2);
    $r := $i8;
    return;

  $bb6:
    assume $i46 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2454} $i10 := os_desc_qw_sign_store($p9, arg1, arg2);
    $r := $i10;
    return;

  $bb7:
    assume $i47 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2455} $i12 := gadget_dev_desc_bDeviceClass_store($p11, arg1, arg2);
    $r := $i12;
    return;

  $bb8:
    assume $i48 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2456} $i14 := gadget_dev_desc_bDeviceSubClass_store($p13, arg1, arg2);
    $r := $i14;
    return;

  $bb9:
    assume $i49 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2457} $i16 := gadget_dev_desc_bDeviceProtocol_store($p15, arg1, arg2);
    $r := $i16;
    return;

  $bb10:
    assume $i50 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2458} $i18 := gadget_dev_desc_bMaxPacketSize0_store($p17, arg1, arg2);
    $r := $i18;
    return;

  $bb11:
    assume $i51 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2459} $i20 := gadget_dev_desc_idVendor_store($p19, arg1, arg2);
    $r := $i20;
    return;

  $bb12:
    assume $i52 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2460} $i22 := gadget_dev_desc_idProduct_store($p21, arg1, arg2);
    $r := $i22;
    return;

  $bb13:
    assume $i53 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2461} $i24 := gadget_dev_desc_bcdDevice_store($p23, arg1, arg2);
    $r := $i24;
    return;

  $bb14:
    assume $i54 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2462} $i26 := gadget_dev_desc_bcdUSB_store($p25, arg1, arg2);
    $r := $i26;
    return;

  $bb15:
    assume $i55 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2463} $i28 := gadget_dev_desc_UDC_store($p27, arg1, arg2);
    $r := $i28;
    return;

  $bb16:
    assume $i56 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2464} $i30 := gadget_config_name_configuration_store($p29, arg1, arg2);
    $r := $i30;
    return;

  $bb17:
    assume $i57 == 1;
    call {:si_unique_call 2465} $i31 := gadget_strings_manufacturer_store(arg, arg1, arg2);
    $r := $i31;
    return;

  $bb18:
    assume $i58 == 1;
    call {:si_unique_call 2466} $i32 := gadget_strings_product_store(arg, arg1, arg2);
    $r := $i32;
    return;

  $bb19:
    assume $i59 == 1;
    call {:si_unique_call 2467} $i33 := gadget_strings_serialnumber_store(arg, arg1, arg2);
    $r := $i33;
    return;

  $bb20:
    assume $i60 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2468} $i35 := ext_prop_type_store($p34, arg1, arg2);
    $r := $i35;
    return;

  $bb21:
    assume $i61 == 1;
    $p36 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2469} $i37 := ext_prop_data_store($p36, arg1, arg2);
    $r := $i37;
    return;

  $bb22:
    assume $i62 == 1;
    $p38 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2470} $i39 := gadget_config_desc_MaxPower_store($p38, arg1, arg2);
    $r := $i39;
    return;

  $bb23:
    assume $i63 == 1;
    $p40 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2471} $i41 := gadget_config_desc_bmAttributes_store($p40, arg1, arg2);
    $r := $i41;
    return;
}



const devirtbounce.37: ref;

axiom devirtbounce.37 == $sub.ref(0, 789572);

procedure devirtbounce.37(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.37(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i64 := $eq.ref(gadget_config_desc_bmAttributes_show, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i64 == 1);
    $i63 := $eq.ref(gadget_config_desc_MaxPower_show, $p0);
    assume true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i63 == 1);
    $i62 := $eq.ref(ext_prop_data_show, $p0);
    assume {:branchcond $i62} true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i62 == 1);
    $i61 := $eq.ref(ext_prop_type_show, $p0);
    assume true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i61 == 1);
    $i60 := $eq.ref(gadget_strings_serialnumber_show, $p0);
    assume {:branchcond $i60} true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_product_show, $p0);
    assume true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_strings_manufacturer_show, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_config_name_configuration_show, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_dev_desc_UDC_show, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_bcdUSB_show, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_bcdDevice_show, $p0);
    assume true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_idProduct_show, $p0);
    assume {:branchcond $i53} true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_idVendor_show, $p0);
    assume {:branchcond $i52} true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_show, $p0);
    assume true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bDeviceProtocol_show, $p0);
    assume true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceSubClass_show, $p0);
    assume {:branchcond $i49} true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bDeviceClass_show, $p0);
    assume {:branchcond $i48} true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i48 == 1);
    $i47 := $eq.ref(os_desc_qw_sign_show, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_b_vendor_code_show, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i46 == 1);
    $i45 := $eq.ref(os_desc_use_show, $p0);
    assume true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i45 == 1);
    $i44 := $eq.ref(interf_grp_sub_compatible_id_show, $p0);
    assume {:branchcond $i44} true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i44 == 1);
    $i43 := $eq.ref(interf_grp_compatible_id_show, $p0);
    assume {:branchcond $i43} true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume false;
    return;

  $bb2:
    assume $i43 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2472} $i2 := interf_grp_compatible_id_show($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i44 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2473} $i4 := interf_grp_sub_compatible_id_show($p3, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i45 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2474} $i6 := os_desc_use_show($p5, arg1);
    $r := $i6;
    return;

  $bb5:
    assume $i46 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2475} $i8 := os_desc_b_vendor_code_show($p7, arg1);
    $r := $i8;
    return;

  $bb6:
    assume $i47 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2476} $i10 := os_desc_qw_sign_show($p9, arg1);
    $r := $i10;
    return;

  $bb7:
    assume $i48 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2477} $i12 := gadget_dev_desc_bDeviceClass_show($p11, arg1);
    $r := $i12;
    return;

  $bb8:
    assume $i49 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2478} $i14 := gadget_dev_desc_bDeviceSubClass_show($p13, arg1);
    $r := $i14;
    return;

  $bb9:
    assume $i50 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2479} $i16 := gadget_dev_desc_bDeviceProtocol_show($p15, arg1);
    $r := $i16;
    return;

  $bb10:
    assume $i51 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2480} $i18 := gadget_dev_desc_bMaxPacketSize0_show($p17, arg1);
    $r := $i18;
    return;

  $bb11:
    assume $i52 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2481} $i20 := gadget_dev_desc_idVendor_show($p19, arg1);
    $r := $i20;
    return;

  $bb12:
    assume $i53 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2482} $i22 := gadget_dev_desc_idProduct_show($p21, arg1);
    $r := $i22;
    return;

  $bb13:
    assume $i54 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2483} $i24 := gadget_dev_desc_bcdDevice_show($p23, arg1);
    $r := $i24;
    return;

  $bb14:
    assume $i55 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2484} $i26 := gadget_dev_desc_bcdUSB_show($p25, arg1);
    $r := $i26;
    return;

  $bb15:
    assume $i56 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2485} $i28 := gadget_dev_desc_UDC_show($p27, arg1);
    $r := $i28;
    return;

  $bb16:
    assume $i57 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2486} $i30 := gadget_config_name_configuration_show($p29, arg1);
    $r := $i30;
    return;

  $bb17:
    assume $i58 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2487} $i32 := gadget_strings_manufacturer_show($p31, arg1);
    $r := $i32;
    return;

  $bb18:
    assume $i59 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2488} $i34 := gadget_strings_product_show($p33, arg1);
    $r := $i34;
    return;

  $bb19:
    assume $i60 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2489} $i36 := gadget_strings_serialnumber_show($p35, arg1);
    $r := $i36;
    return;

  $bb20:
    assume $i61 == 1;
    call {:si_unique_call 2490} $i37 := ext_prop_type_show(arg, arg1);
    $r := $i37;
    return;

  $bb21:
    assume $i62 == 1;
    call {:si_unique_call 2491} $i38 := ext_prop_data_show(arg, arg1);
    $r := $i38;
    return;

  $bb22:
    assume $i63 == 1;
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2492} $i40 := gadget_config_desc_MaxPower_show($p39, arg1);
    $r := $i40;
    return;

  $bb23:
    assume $i64 == 1;
    $p41 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2493} $i42 := gadget_config_desc_bmAttributes_show($p41, arg1);
    $r := $i42;
    return;
}



const devirtbounce.38: ref;

axiom devirtbounce.38 == $sub.ref(0, 790604);

procedure devirtbounce.38(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.38(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i64 := $eq.ref(gadget_config_desc_bmAttributes_store, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i64 == 1);
    $i63 := $eq.ref(gadget_config_desc_MaxPower_store, $p0);
    assume true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i63 == 1);
    $i62 := $eq.ref(ext_prop_data_store, $p0);
    assume {:branchcond $i62} true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i62 == 1);
    $i61 := $eq.ref(ext_prop_type_store, $p0);
    assume true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i61 == 1);
    $i60 := $eq.ref(gadget_strings_serialnumber_store, $p0);
    assume {:branchcond $i60} true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_product_store, $p0);
    assume true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_strings_manufacturer_store, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_config_name_configuration_store, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_dev_desc_UDC_store, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_bcdUSB_store, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_bcdDevice_store, $p0);
    assume true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_idProduct_store, $p0);
    assume {:branchcond $i53} true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_idVendor_store, $p0);
    assume {:branchcond $i52} true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_store, $p0);
    assume true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bDeviceProtocol_store, $p0);
    assume true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceSubClass_store, $p0);
    assume {:branchcond $i49} true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bDeviceClass_store, $p0);
    assume {:branchcond $i48} true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i48 == 1);
    $i47 := $eq.ref(os_desc_qw_sign_store, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_b_vendor_code_store, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i46 == 1);
    $i45 := $eq.ref(os_desc_use_store, $p0);
    assume true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i45 == 1);
    $i44 := $eq.ref(interf_grp_sub_compatible_id_store, $p0);
    assume {:branchcond $i44} true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i44 == 1);
    $i43 := $eq.ref(interf_grp_compatible_id_store, $p0);
    assume {:branchcond $i43} true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume false;
    return;

  $bb2:
    assume $i43 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2494} $i2 := interf_grp_compatible_id_store($p1, arg1, arg2);
    $r := $i2;
    return;

  $bb3:
    assume $i44 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2495} $i4 := interf_grp_sub_compatible_id_store($p3, arg1, arg2);
    $r := $i4;
    return;

  $bb4:
    assume $i45 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2496} $i6 := os_desc_use_store($p5, arg1, arg2);
    $r := $i6;
    return;

  $bb5:
    assume $i46 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2497} $i8 := os_desc_b_vendor_code_store($p7, arg1, arg2);
    $r := $i8;
    return;

  $bb6:
    assume $i47 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2498} $i10 := os_desc_qw_sign_store($p9, arg1, arg2);
    $r := $i10;
    return;

  $bb7:
    assume $i48 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2499} $i12 := gadget_dev_desc_bDeviceClass_store($p11, arg1, arg2);
    $r := $i12;
    return;

  $bb8:
    assume $i49 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2500} $i14 := gadget_dev_desc_bDeviceSubClass_store($p13, arg1, arg2);
    $r := $i14;
    return;

  $bb9:
    assume $i50 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2501} $i16 := gadget_dev_desc_bDeviceProtocol_store($p15, arg1, arg2);
    $r := $i16;
    return;

  $bb10:
    assume $i51 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2502} $i18 := gadget_dev_desc_bMaxPacketSize0_store($p17, arg1, arg2);
    $r := $i18;
    return;

  $bb11:
    assume $i52 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2503} $i20 := gadget_dev_desc_idVendor_store($p19, arg1, arg2);
    $r := $i20;
    return;

  $bb12:
    assume $i53 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2504} $i22 := gadget_dev_desc_idProduct_store($p21, arg1, arg2);
    $r := $i22;
    return;

  $bb13:
    assume $i54 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2505} $i24 := gadget_dev_desc_bcdDevice_store($p23, arg1, arg2);
    $r := $i24;
    return;

  $bb14:
    assume $i55 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2506} $i26 := gadget_dev_desc_bcdUSB_store($p25, arg1, arg2);
    $r := $i26;
    return;

  $bb15:
    assume $i56 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2507} $i28 := gadget_dev_desc_UDC_store($p27, arg1, arg2);
    $r := $i28;
    return;

  $bb16:
    assume $i57 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2508} $i30 := gadget_config_name_configuration_store($p29, arg1, arg2);
    $r := $i30;
    return;

  $bb17:
    assume $i58 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2509} $i32 := gadget_strings_manufacturer_store($p31, arg1, arg2);
    $r := $i32;
    return;

  $bb18:
    assume $i59 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2510} $i34 := gadget_strings_product_store($p33, arg1, arg2);
    $r := $i34;
    return;

  $bb19:
    assume $i60 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2511} $i36 := gadget_strings_serialnumber_store($p35, arg1, arg2);
    $r := $i36;
    return;

  $bb20:
    assume $i61 == 1;
    call {:si_unique_call 2512} $i37 := ext_prop_type_store(arg, arg1, arg2);
    $r := $i37;
    return;

  $bb21:
    assume $i62 == 1;
    call {:si_unique_call 2513} $i38 := ext_prop_data_store(arg, arg1, arg2);
    $r := $i38;
    return;

  $bb22:
    assume $i63 == 1;
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2514} $i40 := gadget_config_desc_MaxPower_store($p39, arg1, arg2);
    $r := $i40;
    return;

  $bb23:
    assume $i64 == 1;
    $p41 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2515} $i42 := gadget_config_desc_bmAttributes_store($p41, arg1, arg2);
    $r := $i42;
    return;
}



const devirtbounce.39: ref;

axiom devirtbounce.39 == $sub.ref(0, 791636);

procedure devirtbounce.39(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.39(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i64 := $eq.ref(gadget_config_desc_bmAttributes_show, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i64 == 1);
    $i63 := $eq.ref(gadget_config_desc_MaxPower_show, $p0);
    assume true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i63 == 1);
    $i62 := $eq.ref(ext_prop_data_show, $p0);
    assume {:branchcond $i62} true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i62 == 1);
    $i61 := $eq.ref(ext_prop_type_show, $p0);
    assume true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i61 == 1);
    $i60 := $eq.ref(gadget_strings_serialnumber_show, $p0);
    assume {:branchcond $i60} true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_product_show, $p0);
    assume true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_strings_manufacturer_show, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_config_name_configuration_show, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_dev_desc_UDC_show, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_bcdUSB_show, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_bcdDevice_show, $p0);
    assume true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_idProduct_show, $p0);
    assume {:branchcond $i53} true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_idVendor_show, $p0);
    assume {:branchcond $i52} true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_show, $p0);
    assume true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bDeviceProtocol_show, $p0);
    assume true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceSubClass_show, $p0);
    assume {:branchcond $i49} true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bDeviceClass_show, $p0);
    assume {:branchcond $i48} true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i48 == 1);
    $i47 := $eq.ref(os_desc_qw_sign_show, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_b_vendor_code_show, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i46 == 1);
    $i45 := $eq.ref(os_desc_use_show, $p0);
    assume true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i45 == 1);
    $i44 := $eq.ref(interf_grp_sub_compatible_id_show, $p0);
    assume {:branchcond $i44} true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i44 == 1);
    $i43 := $eq.ref(interf_grp_compatible_id_show, $p0);
    assume {:branchcond $i43} true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume false;
    return;

  $bb2:
    assume $i43 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2516} $i2 := interf_grp_compatible_id_show($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i44 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2517} $i4 := interf_grp_sub_compatible_id_show($p3, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i45 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2518} $i6 := os_desc_use_show($p5, arg1);
    $r := $i6;
    return;

  $bb5:
    assume $i46 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2519} $i8 := os_desc_b_vendor_code_show($p7, arg1);
    $r := $i8;
    return;

  $bb6:
    assume $i47 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2520} $i10 := os_desc_qw_sign_show($p9, arg1);
    $r := $i10;
    return;

  $bb7:
    assume $i48 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2521} $i12 := gadget_dev_desc_bDeviceClass_show($p11, arg1);
    $r := $i12;
    return;

  $bb8:
    assume $i49 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2522} $i14 := gadget_dev_desc_bDeviceSubClass_show($p13, arg1);
    $r := $i14;
    return;

  $bb9:
    assume $i50 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2523} $i16 := gadget_dev_desc_bDeviceProtocol_show($p15, arg1);
    $r := $i16;
    return;

  $bb10:
    assume $i51 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2524} $i18 := gadget_dev_desc_bMaxPacketSize0_show($p17, arg1);
    $r := $i18;
    return;

  $bb11:
    assume $i52 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2525} $i20 := gadget_dev_desc_idVendor_show($p19, arg1);
    $r := $i20;
    return;

  $bb12:
    assume $i53 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2526} $i22 := gadget_dev_desc_idProduct_show($p21, arg1);
    $r := $i22;
    return;

  $bb13:
    assume $i54 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2527} $i24 := gadget_dev_desc_bcdDevice_show($p23, arg1);
    $r := $i24;
    return;

  $bb14:
    assume $i55 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2528} $i26 := gadget_dev_desc_bcdUSB_show($p25, arg1);
    $r := $i26;
    return;

  $bb15:
    assume $i56 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2529} $i28 := gadget_dev_desc_UDC_show($p27, arg1);
    $r := $i28;
    return;

  $bb16:
    assume $i57 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2530} $i30 := gadget_config_name_configuration_show($p29, arg1);
    $r := $i30;
    return;

  $bb17:
    assume $i58 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2531} $i32 := gadget_strings_manufacturer_show($p31, arg1);
    $r := $i32;
    return;

  $bb18:
    assume $i59 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2532} $i34 := gadget_strings_product_show($p33, arg1);
    $r := $i34;
    return;

  $bb19:
    assume $i60 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2533} $i36 := gadget_strings_serialnumber_show($p35, arg1);
    $r := $i36;
    return;

  $bb20:
    assume $i61 == 1;
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2534} $i38 := ext_prop_type_show($p37, arg1);
    $r := $i38;
    return;

  $bb21:
    assume $i62 == 1;
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2535} $i40 := ext_prop_data_show($p39, arg1);
    $r := $i40;
    return;

  $bb22:
    assume $i63 == 1;
    call {:si_unique_call 2536} $i41 := gadget_config_desc_MaxPower_show(arg, arg1);
    $r := $i41;
    return;

  $bb23:
    assume $i64 == 1;
    call {:si_unique_call 2537} $i42 := gadget_config_desc_bmAttributes_show(arg, arg1);
    $r := $i42;
    return;
}



const devirtbounce.40: ref;

axiom devirtbounce.40 == $sub.ref(0, 792668);

procedure devirtbounce.40(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.40(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i64 := $eq.ref(gadget_config_desc_bmAttributes_store, $p0);
    assume true;
    goto $bb23, $bb45;

  $bb45:
    assume !($i64 == 1);
    $i63 := $eq.ref(gadget_config_desc_MaxPower_store, $p0);
    assume true;
    goto $bb22, $bb44;

  $bb44:
    assume !($i63 == 1);
    $i62 := $eq.ref(ext_prop_data_store, $p0);
    assume {:branchcond $i62} true;
    goto $bb21, $bb43;

  $bb43:
    assume !($i62 == 1);
    $i61 := $eq.ref(ext_prop_type_store, $p0);
    assume true;
    goto $bb20, $bb42;

  $bb42:
    assume !($i61 == 1);
    $i60 := $eq.ref(gadget_strings_serialnumber_store, $p0);
    assume {:branchcond $i60} true;
    goto $bb19, $bb41;

  $bb41:
    assume !($i60 == 1);
    $i59 := $eq.ref(gadget_strings_product_store, $p0);
    assume true;
    goto $bb18, $bb40;

  $bb40:
    assume !($i59 == 1);
    $i58 := $eq.ref(gadget_strings_manufacturer_store, $p0);
    assume true;
    goto $bb17, $bb39;

  $bb39:
    assume !($i58 == 1);
    $i57 := $eq.ref(gadget_config_name_configuration_store, $p0);
    assume true;
    goto $bb16, $bb38;

  $bb38:
    assume !($i57 == 1);
    $i56 := $eq.ref(gadget_dev_desc_UDC_store, $p0);
    assume true;
    goto $bb15, $bb37;

  $bb37:
    assume !($i56 == 1);
    $i55 := $eq.ref(gadget_dev_desc_bcdUSB_store, $p0);
    assume true;
    goto $bb14, $bb36;

  $bb36:
    assume !($i55 == 1);
    $i54 := $eq.ref(gadget_dev_desc_bcdDevice_store, $p0);
    assume true;
    goto $bb13, $bb35;

  $bb35:
    assume !($i54 == 1);
    $i53 := $eq.ref(gadget_dev_desc_idProduct_store, $p0);
    assume {:branchcond $i53} true;
    goto $bb12, $bb34;

  $bb34:
    assume !($i53 == 1);
    $i52 := $eq.ref(gadget_dev_desc_idVendor_store, $p0);
    assume {:branchcond $i52} true;
    goto $bb11, $bb33;

  $bb33:
    assume !($i52 == 1);
    $i51 := $eq.ref(gadget_dev_desc_bMaxPacketSize0_store, $p0);
    assume true;
    goto $bb10, $bb32;

  $bb32:
    assume !($i51 == 1);
    $i50 := $eq.ref(gadget_dev_desc_bDeviceProtocol_store, $p0);
    assume true;
    goto $bb9, $bb31;

  $bb31:
    assume !($i50 == 1);
    $i49 := $eq.ref(gadget_dev_desc_bDeviceSubClass_store, $p0);
    assume {:branchcond $i49} true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i49 == 1);
    $i48 := $eq.ref(gadget_dev_desc_bDeviceClass_store, $p0);
    assume {:branchcond $i48} true;
    goto $bb7, $bb29;

  $bb29:
    assume !($i48 == 1);
    $i47 := $eq.ref(os_desc_qw_sign_store, $p0);
    assume true;
    goto $bb6, $bb28;

  $bb28:
    assume !($i47 == 1);
    $i46 := $eq.ref(os_desc_b_vendor_code_store, $p0);
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i46 == 1);
    $i45 := $eq.ref(os_desc_use_store, $p0);
    assume true;
    goto $bb4, $bb26;

  $bb26:
    assume !($i45 == 1);
    $i44 := $eq.ref(interf_grp_sub_compatible_id_store, $p0);
    assume {:branchcond $i44} true;
    goto $bb3, $bb25;

  $bb25:
    assume !($i44 == 1);
    $i43 := $eq.ref(interf_grp_compatible_id_store, $p0);
    assume {:branchcond $i43} true;
    goto $bb2, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume false;
    return;

  $bb2:
    assume $i43 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2538} $i2 := interf_grp_compatible_id_store($p1, arg1, arg2);
    $r := $i2;
    return;

  $bb3:
    assume $i44 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2539} $i4 := interf_grp_sub_compatible_id_store($p3, arg1, arg2);
    $r := $i4;
    return;

  $bb4:
    assume $i45 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2540} $i6 := os_desc_use_store($p5, arg1, arg2);
    $r := $i6;
    return;

  $bb5:
    assume $i46 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2541} $i8 := os_desc_b_vendor_code_store($p7, arg1, arg2);
    $r := $i8;
    return;

  $bb6:
    assume $i47 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2542} $i10 := os_desc_qw_sign_store($p9, arg1, arg2);
    $r := $i10;
    return;

  $bb7:
    assume $i48 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2543} $i12 := gadget_dev_desc_bDeviceClass_store($p11, arg1, arg2);
    $r := $i12;
    return;

  $bb8:
    assume $i49 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2544} $i14 := gadget_dev_desc_bDeviceSubClass_store($p13, arg1, arg2);
    $r := $i14;
    return;

  $bb9:
    assume $i50 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2545} $i16 := gadget_dev_desc_bDeviceProtocol_store($p15, arg1, arg2);
    $r := $i16;
    return;

  $bb10:
    assume $i51 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2546} $i18 := gadget_dev_desc_bMaxPacketSize0_store($p17, arg1, arg2);
    $r := $i18;
    return;

  $bb11:
    assume $i52 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2547} $i20 := gadget_dev_desc_idVendor_store($p19, arg1, arg2);
    $r := $i20;
    return;

  $bb12:
    assume $i53 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2548} $i22 := gadget_dev_desc_idProduct_store($p21, arg1, arg2);
    $r := $i22;
    return;

  $bb13:
    assume $i54 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2549} $i24 := gadget_dev_desc_bcdDevice_store($p23, arg1, arg2);
    $r := $i24;
    return;

  $bb14:
    assume $i55 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2550} $i26 := gadget_dev_desc_bcdUSB_store($p25, arg1, arg2);
    $r := $i26;
    return;

  $bb15:
    assume $i56 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2551} $i28 := gadget_dev_desc_UDC_store($p27, arg1, arg2);
    $r := $i28;
    return;

  $bb16:
    assume $i57 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2552} $i30 := gadget_config_name_configuration_store($p29, arg1, arg2);
    $r := $i30;
    return;

  $bb17:
    assume $i58 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2553} $i32 := gadget_strings_manufacturer_store($p31, arg1, arg2);
    $r := $i32;
    return;

  $bb18:
    assume $i59 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2554} $i34 := gadget_strings_product_store($p33, arg1, arg2);
    $r := $i34;
    return;

  $bb19:
    assume $i60 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2555} $i36 := gadget_strings_serialnumber_store($p35, arg1, arg2);
    $r := $i36;
    return;

  $bb20:
    assume $i61 == 1;
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2556} $i38 := ext_prop_type_store($p37, arg1, arg2);
    $r := $i38;
    return;

  $bb21:
    assume $i62 == 1;
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2557} $i40 := ext_prop_data_store($p39, arg1, arg2);
    $r := $i40;
    return;

  $bb22:
    assume $i63 == 1;
    call {:si_unique_call 2558} $i41 := gadget_config_desc_MaxPower_store(arg, arg1, arg2);
    $r := $i41;
    return;

  $bb23:
    assume $i64 == 1;
    call {:si_unique_call 2559} $i42 := gadget_config_desc_bmAttributes_store(arg, arg1, arg2);
    $r := $i42;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.136, $M.137, $M.0, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.130, $M.131, $M.132, $M.82, $M.112, $M.126, $M.86, $M.48, $M.49, $M.55, $M.111, $M.127, $M.94, $M.60, $M.121, $M.64, $M.68, $M.87, $M.53, $M.74, $M.50, $M.101, $M.78, $M.59, $M.85, $M.113, $M.80, $M.67, $M.75, $M.106, $M.77, $M.97, $M.105, $M.99, $M.103, $M.56, $M.119, $M.91, $M.54, $M.110, $M.57, $M.65, $M.62, $M.58, $M.117, $M.96, $M.52, $M.100, $M.76, $M.90, $M.61, $M.109, $M.122, $M.104, $M.128, $M.92, $M.98, $M.66, $M.118, $M.70, $M.71, $M.108, $M.114, $M.89, $M.79, $M.63, $M.83, $M.69, $M.84, $M.123, $M.116, $M.51, $M.81, $M.93, $M.129, $M.95, $M.115, $M.102, $M.72, $M.107, $M.73, $M.124, $M.88, $M.125, $M.120, $M.47, $M.46, $M.43, $M.42, $M.45, $M.44, $M.29, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2560} __SMACK_static_init();
    call {:si_unique_call 2561} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.41, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.45, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.43, $M.125, $M.126, $M.127, $M.44, $M.128, $M.129, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.130, $M.131, $M.132, $M.63, $M.64, $M.62, $M.42, $M.51, $M.61, $M.80, $M.65, $M.66, $M.78, $M.49, $M.84, $M.52, $M.74, $M.48, $M.81, $M.86, $M.50, $M.79, $M.90, $M.92, $M.75, $M.76, $M.77, $M.58, $M.91, $M.57, $M.69, $M.83, $M.59, $M.60, $M.70, $M.56, $M.89, $M.82, $M.73, $M.71, $M.53, $M.54, $M.55, $M.67, $M.68, $M.87, $M.88, $M.72, $M.85, $M.46, $M.47, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.29, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $CurrAddr;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation usb_gadget_get_string_loop_$bb8(in_$i1: i32, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p21: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p31: ref) returns (out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p21: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p31: ref)
{

  entry:
    out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p28, out_$i29, out_$i30, out_$p21, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p31 := in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p28, in_$i29, in_$i30, in_$p21, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p31;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_30;

  $bb14:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p21 := out_$p28;
    goto $bb14_dummy;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p28;
    assume true;
    goto $bb14;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_49;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_48;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p21, $mul.ref(1, 16));
    goto corral_source_split_47;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p21;
    assume true;
    goto $bb11;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, in_$i1);
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    goto corral_source_split_38;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.0, out_$p22);
    goto corral_source_split_37;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_36;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume out_$i35 == 1;
    goto corral_source_split_53;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p21;
    assume true;
    goto $bb16;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_34;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_33;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_32;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_31;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p28, out_$i29, out_$i30, out_$p21, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p31 := usb_gadget_get_string_loop_$bb8(in_$i1, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p28, out_$i29, out_$i30, out_$p21, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p31);
    return;

  exit:
    return;
}



procedure usb_gadget_get_string_loop_$bb8(in_$i1: i32, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p21: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p31: ref) returns (out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p21: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p31: ref);



implementation usb_descriptor_fillbuf_loop_$bb8(in_$p13: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p10: ref, in_$i11: i32, in_$p12: ref, in_$p28: ref, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$p13: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p10: ref, out_$i11: i32, out_$p12: ref, out_$p28: ref, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p10, out_$i11, out_$p12, out_$p28, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p10, in_$i11, in_$p12, in_$p28, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_111;

  $bb13:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11, out_$p12 := out_$p23, out_$i21, out_$p24;
    goto $bb13_dummy;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p23;
    assume true;
    goto $bb13;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_131;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_129;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p12, $mul.ref(1, 8));
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p10, $mul.ref(out_$i22, 1));
    goto corral_source_split_127;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i32.i64(out_$i16);
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(out_$i11, out_$i16);
    call {:si_unique_call 14} {:cexpr "buflen"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_125;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 13} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p10, out_$p19, out_$i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i16);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_122;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p12);
    goto corral_source_split_121;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$i17 := $ugt.i32(out_$i16, out_$i11);
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    call {:si_unique_call 12} {:cexpr "len"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_116;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p14);
    goto corral_source_split_115;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_114;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_113;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p10, out_$i11, out_$p12, out_$p28, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := usb_descriptor_fillbuf_loop_$bb8(out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p10, out_$i11, out_$p12, out_$p28, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2);
    return;

  exit:
    return;
}



procedure usb_descriptor_fillbuf_loop_$bb8(in_$p13: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p10: ref, in_$i11: i32, in_$p12: ref, in_$p28: ref, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$p13: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p10: ref, out_$i11: i32, out_$p12: ref, out_$p28: ref, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8);
  modifies $M.0;



implementation usb_copy_descriptors_loop_$bb16(in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i8, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i8, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p59: ref, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i8, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i8, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p59: ref, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8)
{

  entry:
    out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39, out_$p40, out_$p41, out_$p59, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p39, in_$p40, in_$p41, in_$p59, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  $bb18:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$p39, out_$p40, out_$p41 := out_$p55, out_$p49, out_$p54;
    goto $bb18_dummy;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p59 := out_$p49;
    assume true;
    goto $bb18;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p39, $mul.ref(1, 8));
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p41, $mul.ref(out_$i53, 1));
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i64(out_$i52);
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.0, out_$p51);
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p39);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p40, $mul.ref(1, 8));
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p40, out_$p41);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.0;
    out_cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 19} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p41, out_$p43, out_$i47, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_5;
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i64(out_$i46);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.0, out_$p45);
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p39);
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_190;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p39);
    goto corral_source_split_189;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39, out_$p40, out_$p41, out_$p59, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := usb_copy_descriptors_loop_$bb16(out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39, out_$p40, out_$p41, out_$p59, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5);
    return;

  exit:
    return;
}



procedure usb_copy_descriptors_loop_$bb16(in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i8, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i8, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p59: ref, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i8, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i8, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p59: ref, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8);
  modifies $M.0;



implementation usb_copy_descriptors_loop_$bb4(in_$p9: ref, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i19: i32, in_$i20: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i19: i32, out_$i20: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p6, out_$i7, out_$i8, out_$i19, out_$i20 := in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$p16, in_$i17, in_$i18, in_$p6, in_$i7, in_$i8, in_$i19, in_$i20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_148;

  $bb6:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$p6, out_$i7, out_$i8 := out_$p14, out_$i13, out_$i15;
    goto $bb6_dummy;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    out_$i19, out_$i20 := out_$i15, out_$i13;
    assume true;
    goto $bb6;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p14);
    goto corral_source_split_157;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i8, 1);
    call {:si_unique_call 16} {:cexpr "n_desc"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p6, $mul.ref(1, 8));
    goto corral_source_split_155;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i12, out_$i7);
    call {:si_unique_call 15} {:cexpr "bytes"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.0, out_$p10);
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_151;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p6);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p6, out_$i7, out_$i8, out_$i19, out_$i20 := usb_copy_descriptors_loop_$bb4(out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p6, out_$i7, out_$i8, out_$i19, out_$i20);
    return;

  exit:
    return;
}



procedure usb_copy_descriptors_loop_$bb4(in_$p9: ref, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i19: i32, in_$i20: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i19: i32, out_$i20: i32);



implementation usb_ep_autoconfig_reset_loop_$bb4(in_$i9: i64, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p11: ref) returns (out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p11 := in_$p12, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_277;

  $bb6:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p17;
    goto $bb6_dummy;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, in_$i9);
    goto corral_source_split_287;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_286;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p16, $mul.ref($sub.ref(0, 24), 64)), $mul.ref(24, 1));
    goto corral_source_split_285;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p16, $mul.ref($sub.ref(0, 24), 64));
    goto corral_source_split_284;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_283;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_281;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p12, $0.ref);
    goto corral_source_split_280;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_279;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p11 := usb_ep_autoconfig_reset_loop_$bb4(in_$i9, out_$p12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p11);
    return;

  exit:
    return;
}



procedure usb_ep_autoconfig_reset_loop_$bb4(in_$i9: i64, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p11: ref) returns (out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p11: ref);
  modifies $M.0;



implementation usb_add_config_only_loop_$bb8(in_$p1: ref, in_$i15: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p17: ref) returns (out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p17: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p17 := in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p17;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_705;

  $bb13:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p29;
    goto $bb13_dummy;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, in_$i15);
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p28, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_721;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p28, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_718;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_717;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i20, out_$i23);
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_712;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.0, out_$p21);
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p1, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.0, out_$p18);
    goto corral_source_split_708;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p17 := usb_add_config_only_loop_$bb8(in_$p1, in_$i15, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p17);
    return;

  exit:
    return;
}



procedure usb_add_config_only_loop_$bb8(in_$p1: ref, in_$i15: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p17: ref) returns (out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p17: ref);



implementation usb_string_ids_tab_loop_$bb4(in_$i12: i1, in_$i13: i32, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i18: i32, in_$i19: i8, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i10: i32, in_$p11: ref, in_$i26: i32) returns (out_$i12: i1, out_$i13: i32, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i18: i32, out_$i19: i8, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i10: i32, out_$p11: ref, out_$i26: i32)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i10, out_$p11, out_$i26 := in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i10, in_$p11, in_$i26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_785;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$p11 := out_$i18, out_$p21;
    goto $bb10_dummy;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i18;
    assume true;
    goto $bb10;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p11, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p11, $mul.ref(1, 16));
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p20, out_$i19);
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i32.i8(out_$i18);
    goto corral_source_split_798;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i10, 1);
    call {:si_unique_call 97} {:cexpr "next"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_797;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_791;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} out_$i15 := ldv__builtin_expect(out_$i14, 0);
    call {:si_unique_call 96} {:cexpr "tmp"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i1.i32(out_$i12);
    goto corral_source_split_788;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i12 := $sgt.i32(out_$i10, 253);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i10, out_$p11, out_$i26 := usb_string_ids_tab_loop_$bb4(out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i10, out_$p11, out_$i26);
    return;

  exit:
    return;
}



procedure usb_string_ids_tab_loop_$bb4(in_$i12: i1, in_$i13: i32, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i18: i32, in_$i19: i8, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i10: i32, in_$p11: ref, in_$i26: i32) returns (out_$i12: i1, out_$i13: i32, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i18: i32, out_$i19: i8, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i10: i32, out_$p11: ref, out_$i26: i32);
  modifies $M.0;



implementation usb_gstrings_attach_loop_$bb28(in_$i2: i32, in_$p49: ref, in_$i50: i8, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i46: i32, in_$p47: ref, in_$p48: ref) returns (out_$p49: ref, out_$i50: i8, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i46: i32, out_$p47: ref, out_$p48: ref)
{

  entry:
    out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i46, out_$p47, out_$p48 := in_$p49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i46, in_$p47, in_$p48;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_884;

  $bb30:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i46, out_$p47, out_$p48 := out_$i54, out_$p52, out_$p53;
    goto $bb30_dummy;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$i55 := $ult.i32(out_$i54, in_$i2);
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i46, 1);
    call {:si_unique_call 111} {:cexpr "n"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p48, $mul.ref(1, 16));
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p47, $mul.ref(1, 16));
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p51, out_$i50);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p47, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i8($M.0, out_$p49);
    goto corral_source_split_887;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i46, out_$p47, out_$p48 := usb_gstrings_attach_loop_$bb28(in_$i2, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i46, out_$p47, out_$p48);
    return;

  exit:
    return;
}



procedure usb_gstrings_attach_loop_$bb28(in_$i2: i32, in_$p49: ref, in_$i50: i8, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i46: i32, in_$p47: ref, in_$p48: ref) returns (out_$p49: ref, out_$i50: i8, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i46: i32, out_$p47: ref, out_$p48: ref);
  modifies $M.0;



implementation usb_gstrings_attach_loop_$bb23(in_$i2: i32, in_$i6: i32, in_$p29: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i1, in_$p49: ref, in_$i50: i8, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i56: i32, in_$i57: i1, in_$i36: i32) returns (out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i1, out_$p49: ref, out_$i50: i8, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i56: i32, out_$i57: i1, out_$i36: i32)
{

  entry:
    out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i46, out_$p47, out_$p48, out_$i56, out_$i57, out_$i36 := in_$p37, in_$p38, in_$p39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$p49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i46, in_$p47, in_$p48, in_$i56, in_$i57, in_$i36;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_870;

  $bb33:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i56;
    goto $bb33_dummy;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$i57 := $ult.i32(out_$i56, in_$i6);
    goto corral_source_split_898;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i36, 1);
    call {:si_unique_call 112} {:cexpr "i"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_897;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb27;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb31:
    assume !(out_$i55 == 1);
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$i55 := $ult.i32(out_$i54, in_$i2);
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i46, 1);
    call {:si_unique_call 111} {:cexpr "n"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p48, $mul.ref(1, 16));
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p47, $mul.ref(1, 16));
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p51, out_$i50);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p47, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i8($M.0, out_$p49);
    goto corral_source_split_887;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    call out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i46, out_$p47, out_$p48 := usb_gstrings_attach_loop_$bb28(in_$i2, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i46, out_$p47, out_$p48);
    goto $bb28_last;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$i46, out_$p47, out_$p48 := 0, out_$p44, out_$p39;
    goto $bb28;

  $bb30:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i46, out_$p47, out_$p48 := out_$i54, out_$p52, out_$p53;
    assume false;
    return;

  $bb25:
    assume out_$i45 == 1;
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i45 := $ult.i32(0, in_$i2);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(in_$p29, $mul.ref(out_$i40, 8));
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i36);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_873;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, in_$p29);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i46, out_$p47, out_$p48, out_$i56, out_$i57, out_$i36 := usb_gstrings_attach_loop_$bb23(in_$i2, in_$i6, in_$p29, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i46, out_$p47, out_$p48, out_$i56, out_$i57, out_$i36);
    return;

  exit:
    return;
}



procedure usb_gstrings_attach_loop_$bb23(in_$i2: i32, in_$i6: i32, in_$p29: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i1, in_$p49: ref, in_$i50: i8, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i56: i32, in_$i57: i1, in_$i36: i32) returns (out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i1, out_$p49: ref, out_$i50: i8, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i56: i32, out_$i57: i1, out_$i36: i32);
  modifies $M.0;



implementation usb_gstrings_attach_loop_$bb4(in_$p1: ref, in_$i9: i32, in_$i10: i32, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$i7: i32, in_$i8: i32, in_$i16: i32) returns (out_$i9: i32, out_$i10: i32, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$i7: i32, out_$i8: i32, out_$i16: i32)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i7, out_$i8, out_$i16 := in_$i9, in_$i10, in_$i11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i7, in_$i8, in_$i16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$i8 := out_$i10, out_$i9;
    goto $bb6_dummy;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i9;
    assume true;
    goto $bb6;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(in_$p1, $mul.ref(out_$i11, 8));
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i10);
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i7, 1);
    call {:si_unique_call 100} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_823;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i9 := $add.i32(out_$i8, 1);
    call {:si_unique_call 99} {:cexpr "n_gstrings"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i7, out_$i8, out_$i16 := usb_gstrings_attach_loop_$bb4(in_$p1, out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i7, out_$i8, out_$i16);
    return;

  exit:
    return;
}



procedure usb_gstrings_attach_loop_$bb4(in_$p1: ref, in_$i9: i32, in_$i10: i32, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$i7: i32, in_$i8: i32, in_$i16: i32) returns (out_$i9: i32, out_$i10: i32, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$i7: i32, out_$i8: i32, out_$i16: i32);



implementation copy_gadget_strings_loop_$bb13(in_$i2: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$p69: ref) returns (out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$p69: ref)
{

  entry:
    out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p53, out_$p54, out_$i55, out_$p69 := in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p53, in_$p54, in_$i55, in_$p69;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_974;

  $bb18:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$p53, out_$p54, out_$i55 := out_$p66, out_$p57, out_$i67;
    goto $bb18_dummy;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p57;
    assume true;
    goto $bb18;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    out_$i68 := $ult.i32(out_$i67, in_$i2);
    goto corral_source_split_994;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i55, 1);
    call {:si_unique_call 124} {:cexpr "n_s"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_993;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p53, $mul.ref(1, 16));
    goto corral_source_split_992;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p65, .str.21);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p64, out_$p63);
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p56, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_986;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_985;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p53, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_984;

  $bb15:
    assume out_$i61 == 1;
    goto corral_source_split_983;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, 0);
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_980;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_979;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p53, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_978;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref(out_$p54, $mul.ref(16, 1));
    goto corral_source_split_977;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_976;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p56, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_990;

  $bb16:
    assume !(out_$i61 == 1);
    goto corral_source_split_989;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p53, out_$p54, out_$i55, out_$p69 := copy_gadget_strings_loop_$bb13(in_$i2, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p53, out_$p54, out_$i55, out_$p69);
    return;

  exit:
    return;
}



procedure copy_gadget_strings_loop_$bb13(in_$i2: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$p69: ref) returns (out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$p69: ref);
  modifies $M.0;



implementation copy_gadget_strings_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p20: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i16, in_$p43: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i1, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$p69: ref, in_$p52: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p29: ref, in_$i30: i32, in_$i75: i32) returns (out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i16, out_$p43: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i1, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$p69: ref, out_$p52: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p29: ref, out_$i30: i32, out_$i75: i32)
{

  entry:
    out_$i32, out_$p33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p53, out_$p54, out_$i55, out_$p69, out_$p52, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p29, out_$i30, out_$i75 := in_$i32, in_$p33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p43, in_$p45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p53, in_$p54, in_$i55, in_$p69, in_$p52, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p29, in_$i30, in_$i75;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_945;

  $bb21:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$p29, out_$i30 := out_$p72, out_$i73;
    goto $bb21_dummy;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i73;
    assume true;
    goto $bb21;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$i74 := $ult.i32(out_$i73, in_$i1);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i30, 1);
    call {:si_unique_call 125} {:cexpr "n_gs"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p52, $mul.ref(16, 1));
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p71, $0.ref);
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p70, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_999;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_998;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb12;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p69;
    goto $bb12;

  $bb19:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_996;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p57;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    out_$i68 := $ult.i32(out_$i67, in_$i2);
    goto corral_source_split_994;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i55, 1);
    call {:si_unique_call 124} {:cexpr "n_s"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_993;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p53, $mul.ref(1, 16));
    goto corral_source_split_992;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p65, .str.21);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p64, out_$p63);
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p56, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_986;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_985;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p53, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_984;

  $bb15:
    assume out_$i61 == 1;
    goto corral_source_split_983;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, 0);
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_980;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_979;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p53, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_978;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref(out_$p54, $mul.ref(16, 1));
    goto corral_source_split_977;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_976;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    call out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p53, out_$p54, out_$i55, out_$p69 := copy_gadget_strings_loop_$bb13(in_$i2, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p53, out_$p54, out_$i55, out_$p69);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_974;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    out_$p53, out_$p54, out_$i55 := out_$p50, out_$p37, 0;
    goto $bb13;

  $bb18:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$p53, out_$p54, out_$i55 := out_$p66, out_$p57, out_$i67;
    assume false;
    return;

  $bb10:
    assume out_$i51 == 1;
    goto corral_source_split_972;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p37;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i32(0, in_$i2);
    goto corral_source_split_970;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_969;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_968;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(in_$p0, $mul.ref(out_$i46, 8));
    goto corral_source_split_966;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i30);
    goto corral_source_split_965;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p45, out_$p37);
    goto corral_source_split_964;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p36, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_963;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p43, out_$i42);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p36, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p41);
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_957;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p0, $mul.ref(out_$i38, 8));
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i30);
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p29, $mul.ref(16, 1));
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(in_$p20, $mul.ref(out_$i34, 8));
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i32.i64(out_$i30);
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p33, out_$p29);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(in_$p20, $mul.ref(out_$i32, 8));
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i32.i64(out_$i30);
    goto corral_source_split_948;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p56, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_990;

  $bb16:
    assume !(out_$i61 == 1);
    goto corral_source_split_989;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i32, out_$p33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p53, out_$p54, out_$i55, out_$p69, out_$p52, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p29, out_$i30, out_$i75 := copy_gadget_strings_loop_$bb8(in_$p0, in_$i1, in_$i2, in_$p20, out_$i32, out_$p33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p53, out_$p54, out_$i55, out_$p69, out_$p52, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p29, out_$i30, out_$i75);
    return;

  exit:
    return;
}



procedure copy_gadget_strings_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p20: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i16, in_$p43: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i1, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$p69: ref, in_$p52: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p29: ref, in_$i30: i32, in_$i75: i32) returns (out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i16, out_$p43: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i1, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$p69: ref, out_$p52: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p29: ref, out_$i30: i32, out_$i75: i32);
  modifies $M.0;



implementation try_get_usb_function_instance_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p9: ref) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p9: ref)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p9 := in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  $bb20:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p9 := out_$p39;
    goto $bb20_dummy;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, $p2i.ref.i64(func_list));
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p38, $mul.ref($sub.ref(0, 16), 48)), $mul.ref(16, 1));
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p38, $mul.ref($sub.ref(0, 16), 48));
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_1612;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$p14 := out_$p9;
    assume true;
    goto $bb6;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} out_$i12 := strcmp(in_$p0, out_$p11);
    call {:si_unique_call 210} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_1606;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_1605;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1604;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p9 := try_get_usb_function_instance_loop_$bb4(in_$p0, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p9);
    return;

  exit:
    return;
}



procedure try_get_usb_function_instance_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p9: ref) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p9: ref);



implementation usb_function_register_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p7 := in_$p8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1766;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p19;
    goto $bb10_dummy;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, $p2i.ref.i64(func_list));
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p18, $mul.ref($sub.ref(0, 16), 48)), $mul.ref(16, 1));
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p18, $mul.ref($sub.ref(0, 16), 48));
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1781;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1780;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} out_$i12 := strcmp(out_$p9, out_$p11);
    call {:si_unique_call 246} {:cexpr "tmp"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_1769;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p7 := usb_function_register_loop_$bb4(in_$p0, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p7);
    return;

  exit:
    return;
}



procedure usb_function_register_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p7: ref);



implementation composite_setup_loop_$bb311(in_$i674: i8, in_$p684: ref, in_$i691: i64, in_$p692: ref, in_$p693: ref, in_$i694: i32, in_$i695: i1, in_$p696: ref, in_$p699: ref, in_$p700: ref, in_$p701: ref, in_$p702: ref, in_$p703: ref, in_$i704: i64, in_$p705: ref, in_$p706: ref, in_$i707: i64, in_$i708: i1, in_$p690: ref, in_$p709: ref) returns (out_$i691: i64, out_$p692: ref, out_$p693: ref, out_$i694: i32, out_$i695: i1, out_$p696: ref, out_$p699: ref, out_$p700: ref, out_$p701: ref, out_$p702: ref, out_$p703: ref, out_$i704: i64, out_$p705: ref, out_$p706: ref, out_$i707: i64, out_$i708: i1, out_$p690: ref, out_$p709: ref)
{

  entry:
    out_$i691, out_$p692, out_$p693, out_$i694, out_$i695, out_$p696, out_$p699, out_$p700, out_$p701, out_$p702, out_$p703, out_$i704, out_$p705, out_$p706, out_$i707, out_$i708, out_$p690, out_$p709 := in_$i691, in_$p692, in_$p693, in_$i694, in_$i695, in_$p696, in_$p699, in_$p700, in_$p701, in_$p702, in_$p703, in_$i704, in_$p705, in_$p706, in_$i707, in_$i708, in_$p690, in_$p709;
    goto $bb311, exit;

  $bb311:
    assume {:verifier.code 0} true;
    goto corral_source_split_2934;

  $bb317:
    assume out_$i708 == 1;
    assume {:verifier.code 0} true;
    out_$p690 := out_$p702;
    goto $bb317_dummy;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    out_$p709 := out_$p702;
    assume true;
    goto $bb317;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    out_$i708 := $ne.i64(out_$i704, out_$i707);
    goto corral_source_split_2962;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    out_$i707 := $p2i.ref.i64(out_$p706);
    goto corral_source_split_2961;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$p706 := $add.ref($add.ref(out_$p705, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_2960;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    out_$p705 := $load.ref($M.0, in_$p684);
    goto corral_source_split_2959;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    out_$i704 := $p2i.ref.i64(out_$p703);
    goto corral_source_split_2958;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    out_$p703 := $add.ref($add.ref(out_$p701, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_2957;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    out_$p702 := $add.ref(out_$p701, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_2956;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    out_$p701 := $bitcast.ref.ref(out_$p700);
    goto corral_source_split_2955;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    out_$p700 := $load.ref($M.0, out_$p699);
    goto corral_source_split_2954;

  $bb316:
    assume {:verifier.code 0} true;
    out_$p699 := $add.ref($add.ref($add.ref(out_$p690, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2953;

  $bb314:
    assume !(out_$i695 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$p696 := out_$p690;
    assume true;
    goto $bb314;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$i695 := $ne.i32(out_$i694, 0);
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} out_$i694 := variable_test_bit(out_$i691, out_$p693);
    call {:si_unique_call 404} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i694);
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$p693 := $bitcast.ref.ref(out_$p692);
    goto corral_source_split_2938;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    out_$p692 := $add.ref($add.ref(out_$p690, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_2937;

  $bb312:
    assume {:verifier.code 0} true;
    out_$i691 := $zext.i8.i64(in_$i674);
    goto corral_source_split_2936;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb317_dummy:
    call {:si_unique_call 1} out_$i691, out_$p692, out_$p693, out_$i694, out_$i695, out_$p696, out_$p699, out_$p700, out_$p701, out_$p702, out_$p703, out_$i704, out_$p705, out_$p706, out_$i707, out_$i708, out_$p690, out_$p709 := composite_setup_loop_$bb311(in_$i674, in_$p684, out_$i691, out_$p692, out_$p693, out_$i694, out_$i695, out_$p696, out_$p699, out_$p700, out_$p701, out_$p702, out_$p703, out_$i704, out_$p705, out_$p706, out_$i707, out_$i708, out_$p690, out_$p709);
    return;

  exit:
    return;
}



procedure composite_setup_loop_$bb311(in_$i674: i8, in_$p684: ref, in_$i691: i64, in_$p692: ref, in_$p693: ref, in_$i694: i32, in_$i695: i1, in_$p696: ref, in_$p699: ref, in_$p700: ref, in_$p701: ref, in_$p702: ref, in_$p703: ref, in_$i704: i64, in_$p705: ref, in_$p706: ref, in_$i707: i64, in_$i708: i1, in_$p690: ref, in_$p709: ref) returns (out_$i691: i64, out_$p692: ref, out_$p693: ref, out_$i694: i32, out_$i695: i1, out_$p696: ref, out_$p699: ref, out_$p700: ref, out_$p701: ref, out_$p702: ref, out_$p703: ref, out_$i704: i64, out_$p705: ref, out_$p706: ref, out_$i707: i64, out_$i708: i1, out_$p690: ref, out_$p709: ref);



implementation composite_setup_loop_$bb281(in_$p1: ref, in_$p616: ref, in_$p622: ref, in_$p623: ref, in_$i624: i64, in_$i625: i1, in_$p626: ref, in_$p627: ref, in_$i628: i1, in_$i629: i8, in_$i630: i1, in_$p631: ref, in_$p634: ref, in_$p635: ref, in_$p636: ref, in_$p637: ref, in_$p638: ref, in_$i639: i64, in_$p640: ref, in_$p641: ref, in_$i642: i64, in_$i643: i1, in_$p621: ref) returns (out_$p622: ref, out_$p623: ref, out_$i624: i64, out_$i625: i1, out_$p626: ref, out_$p627: ref, out_$i628: i1, out_$i629: i8, out_$i630: i1, out_$p631: ref, out_$p634: ref, out_$p635: ref, out_$p636: ref, out_$p637: ref, out_$p638: ref, out_$i639: i64, out_$p640: ref, out_$p641: ref, out_$i642: i64, out_$i643: i1, out_$p621: ref)
{

  entry:
    out_$p622, out_$p623, out_$i624, out_$i625, out_$p626, out_$p627, out_$i628, out_$i629, out_$i630, out_$p631, out_$p634, out_$p635, out_$p636, out_$p637, out_$p638, out_$i639, out_$p640, out_$p641, out_$i642, out_$i643, out_$p621 := in_$p622, in_$p623, in_$i624, in_$i625, in_$p626, in_$p627, in_$i628, in_$i629, in_$i630, in_$p631, in_$p634, in_$p635, in_$p636, in_$p637, in_$p638, in_$i639, in_$p640, in_$p641, in_$i642, in_$i643, in_$p621;
    goto $bb281, exit;

  $bb281:
    assume {:verifier.code 0} true;
    goto corral_source_split_2852;

  $bb290:
    assume out_$i643 == 1;
    assume {:verifier.code 0} true;
    out_$p621 := out_$p637;
    goto $bb290_dummy;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    out_$i643 := $ne.i64(out_$i639, out_$i642);
    goto corral_source_split_2880;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    out_$i642 := $p2i.ref.i64(out_$p641);
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    out_$p641 := $add.ref($add.ref(out_$p640, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$p640 := $load.ref($M.0, in_$p616);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$i639 := $p2i.ref.i64(out_$p638);
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    out_$p638 := $add.ref($add.ref(out_$p636, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_2875;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$p637 := $add.ref(out_$p636, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$p636 := $bitcast.ref.ref(out_$p635);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$p635 := $load.ref($M.0, out_$p634);
    goto corral_source_split_2872;

  $bb289:
    assume {:verifier.code 0} true;
    out_$p634 := $add.ref($add.ref($add.ref(out_$p621, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2871;

  $bb284:
    assume !(out_$i625 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb286:
    assume !(out_$i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$p631 := out_$p621;
    assume true;
    goto $bb286;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    out_$i630 := $trunc.i8.i1(out_$i629);
    goto corral_source_split_2863;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    out_$i629 := $zext.i1.i8(out_$i628);
    call {:si_unique_call 401} {:cexpr "tmp___17"} boogie_si_record_i8(out_$i629);
    goto corral_source_split_2862;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    out_$p627 := $load.ref($M.0, out_$p626);
    call {:si_unique_call 400} out_$i628 := devirtbounce.16(out_$p627, out_$p621, in_$p1);
    goto corral_source_split_2861;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$p626 := $add.ref($add.ref(out_$p621, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2860;

  $bb283:
    assume out_$i625 == 1;
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$i625 := $ne.i64(out_$i624, 0);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$i624 := $p2i.ref.i64(out_$p623);
    goto corral_source_split_2856;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$p623 := $load.ref($M.0, out_$p622);
    goto corral_source_split_2855;

  $bb282:
    assume {:verifier.code 0} true;
    out_$p622 := $add.ref($add.ref(out_$p621, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2854;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb290_dummy:
    call {:si_unique_call 1} out_$p622, out_$p623, out_$i624, out_$i625, out_$p626, out_$p627, out_$i628, out_$i629, out_$i630, out_$p631, out_$p634, out_$p635, out_$p636, out_$p637, out_$p638, out_$i639, out_$p640, out_$p641, out_$i642, out_$i643, out_$p621 := composite_setup_loop_$bb281(in_$p1, in_$p616, out_$p622, out_$p623, out_$i624, out_$i625, out_$p626, out_$p627, out_$i628, out_$i629, out_$i630, out_$p631, out_$p634, out_$p635, out_$p636, out_$p637, out_$p638, out_$i639, out_$p640, out_$p641, out_$i642, out_$i643, out_$p621);
    return;

  exit:
    return;
}



procedure composite_setup_loop_$bb281(in_$p1: ref, in_$p616: ref, in_$p622: ref, in_$p623: ref, in_$i624: i64, in_$i625: i1, in_$p626: ref, in_$p627: ref, in_$i628: i1, in_$i629: i8, in_$i630: i1, in_$p631: ref, in_$p634: ref, in_$p635: ref, in_$p636: ref, in_$p637: ref, in_$p638: ref, in_$i639: i64, in_$p640: ref, in_$p641: ref, in_$i642: i64, in_$i643: i1, in_$p621: ref) returns (out_$p622: ref, out_$p623: ref, out_$i624: i64, out_$i625: i1, out_$p626: ref, out_$p627: ref, out_$i628: i1, out_$i629: i8, out_$i630: i1, out_$p631: ref, out_$p634: ref, out_$p635: ref, out_$p636: ref, out_$p637: ref, out_$p638: ref, out_$i639: i64, out_$p640: ref, out_$p641: ref, out_$i642: i64, out_$i643: i1, out_$p621: ref);



implementation composite_suspend_loop_$bb9(in_$p36: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p41: ref) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p41: ref)
{

  entry:
    out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p41 := in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p41;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3188;

  $bb14:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$p41 := out_$p52;
    goto $bb14_dummy;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i54, out_$i57);
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3206;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, in_$p36);
    goto corral_source_split_3205;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p51, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p51, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_3200;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p41, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3199;

  $bb12:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_78:
    goto corral_source_split_3197;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    call {:si_unique_call 436} devirtbounce.1(out_$p47, out_$p41);
    goto SeqInstr_77;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p41, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_3196;

  $bb11:
    assume out_$i45 == 1;
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_3191;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p41 := composite_suspend_loop_$bb9(in_$p36, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p41);
    return;

  exit:
    return;
}



procedure composite_suspend_loop_$bb9(in_$p36: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p41: ref) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p41: ref);
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation composite_resume_loop_$bb12(in_$p46: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p51: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p51: ref)
{

  entry:
    out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p51 := in_$p52, in_$p53, in_$i54, in_$i55, in_$p56, in_$p57, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p51;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3299;

  $bb17:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$p51 := out_$p62;
    goto $bb17_dummy;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i64(out_$i64, out_$i67);
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p66);
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, in_$p46);
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p61, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(out_$p61, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_3311;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(out_$p51, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3310;

  $bb15:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_87:
    goto corral_source_split_3308;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    call {:si_unique_call 445} devirtbounce.1(out_$p57, out_$p51);
    goto SeqInstr_86;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p51, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_3307;

  $bb14:
    assume out_$i55 == 1;
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_3302;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p51 := composite_resume_loop_$bb12(in_$p46, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p51);
    return;

  exit:
    return;
}



procedure composite_resume_loop_$bb12(in_$p46: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p51: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p51: ref);
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation reset_config_loop_$bb7(in_$p30: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p35: ref) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p35: ref)
{

  entry:
    out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p35 := in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p35;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3406;

  $bb12:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$p35 := out_$p48;
    goto $bb12_dummy;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i50, out_$i53);
    goto corral_source_split_3429;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3427;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, in_$p30);
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p47, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p47, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3423;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_3422;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_3421;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} bitmap_zero(out_$p43, 32);
    goto corral_source_split_3419;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_3418;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p35, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_3417;

  $bb10:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_90:
    goto corral_source_split_3415;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    call {:si_unique_call 455} devirtbounce.1(out_$p41, out_$p35);
    goto SeqInstr_89;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p35, $mul.ref(0, 200)), $mul.ref(112, 1));
    goto corral_source_split_3414;

  $bb9:
    assume out_$i39 == 1;
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_3411;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_3409;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 200)), $mul.ref(112, 1));
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p35 := reset_config_loop_$bb7(in_$p30, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p35);
    return;

  exit:
    return;
}



procedure reset_config_loop_$bb7(in_$p30: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p35: ref) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p35: ref);
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation count_configs_loop_$bb16(in_$i18: i32, in_$i19: i32, in_$i28: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i39: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i31: i32, in_$p32: ref, in_$i60: i32) returns (out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i39: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i31: i32, out_$p32: ref, out_$i60: i32)
{

  entry:
    out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i39, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i31, out_$p32, out_$i60 := in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i39, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i31, in_$p32, in_$i60;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3480;

  $bb34:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i31, out_$p32 := out_$i39, out_$p56;
    goto $bb34_dummy;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i39;
    assume true;
    goto $bb34;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, in_$i28);
    goto corral_source_split_3503;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_3502;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p55, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p55, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3500;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_3499;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_3498;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p32, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3497;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i51;
    goto $bb22;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i31;
    goto $bb22;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i31;
    goto $bb22;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i31;
    goto $bb22;

  $bb20:
    assume out_$i38 == 1;
    goto corral_source_split_3494;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 0);
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, out_$p35);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p34, $mul.ref(89, 1));
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_3485;

  $bb18:
    assume out_$i33 == 1;
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(in_$i19, 0);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb27:
    assume out_$i45 == 1;
    goto corral_source_split_3521;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_3512;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i43);
    goto corral_source_split_3511;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.0, out_$p42);
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p41, $mul.ref(89, 1));
    goto corral_source_split_3509;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_3508;

  $bb25:
    assume out_$i40 == 1;
    goto corral_source_split_3507;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(in_$i18, 0);
    goto corral_source_split_3492;

  $bb19:
    assume !(out_$i33 == 1);
    goto corral_source_split_3491;

  $bb31:
    assume out_$i50 == 1;
    goto corral_source_split_3523;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 0);
    goto corral_source_split_3519;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_3518;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.0, out_$p47);
    goto corral_source_split_3517;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p46, $mul.ref(89, 1));
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_3515;

  $bb26:
    assume !(out_$i40 == 1);
    goto corral_source_split_3514;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i31, 1);
    call {:si_unique_call 461} {:cexpr "count"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_3505;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i39, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i31, out_$p32, out_$i60 := count_configs_loop_$bb16(in_$i18, in_$i19, in_$i28, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i39, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i31, out_$p32, out_$i60);
    return;

  exit:
    return;
}



procedure count_configs_loop_$bb16(in_$i18: i32, in_$i19: i32, in_$i28: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i39: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i31: i32, in_$p32: ref, in_$i60: i32) returns (out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i39: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i31: i32, out_$p32: ref, out_$i60: i32);



implementation get_string_loop_$bb92(in_$p1: ref, in_$i2: i16, in_$i3: i32, in_$i191: i64, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$i197: i1, in_$p198: ref, in_$p199: ref, in_$i200: i32, in_$i201: i16, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$i211: i64, in_$i212: i1, in_$p193: ref) returns (out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$i197: i1, out_$p198: ref, out_$p199: ref, out_$i200: i32, out_$i201: i16, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$i211: i64, out_$i212: i1, out_$p193: ref)
{

  entry:
    out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p193 := in_$p194, in_$p195, in_$i196, in_$i197, in_$p198, in_$p199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$p206, in_$p207, in_$p208, in_$p209, in_$p210, in_$i211, in_$i212, in_$p193;
    goto $bb92, exit;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_3955;

  $bb101:
    assume out_$i212 == 1;
    assume {:verifier.code 0} true;
    out_$p193 := out_$p209;
    goto $bb101_dummy;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$i212 := $ne.i64(out_$i211, in_$i191);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i211 := $p2i.ref.i64(out_$p210);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(out_$p208, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref(out_$p208, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3967;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    out_$p208 := $bitcast.ref.ref(out_$p207);
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    out_$p207 := $load.ref($M.0, out_$p206);
    goto corral_source_split_3965;

  $bb96:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3964;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume out_$i197 == 1;
    goto corral_source_split_3962;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i64(out_$i196, 0);
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    out_$i196 := $p2i.ref.i64(out_$p195);
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    out_$p195 := $load.ref($M.0, out_$p194);
    goto corral_source_split_3958;

  $bb93:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(out_$p193, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb99:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    out_$i204 := out_$i202;
    assume true;
    goto $bb99;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    out_$i203 := $sgt.i32(out_$i202, 0);
    goto corral_source_split_3977;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} out_$i202 := lookup_string(out_$p199, in_$p1, out_$i201, in_$i3);
    call {:si_unique_call 492} {:cexpr "len"} boogie_si_record_i32(out_$i202);
    goto corral_source_split_3976;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i201 := $trunc.i32.i16(out_$i200);
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i200 := $zext.i16.i32(in_$i2);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$p199 := $load.ref($M.0, out_$p198);
    goto corral_source_split_3973;

  $bb97:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p193, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3972;

  $bb95:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb101_dummy:
    call {:si_unique_call 1} out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p193 := get_string_loop_$bb92(in_$p1, in_$i2, in_$i3, in_$i191, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p193);
    return;

  exit:
    return;
}



procedure get_string_loop_$bb92(in_$p1: ref, in_$i2: i16, in_$i3: i32, in_$i191: i64, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$i197: i1, in_$p198: ref, in_$p199: ref, in_$i200: i32, in_$i201: i16, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$i211: i64, in_$i212: i1, in_$p193: ref) returns (out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$i197: i1, out_$p198: ref, out_$p199: ref, out_$i200: i32, out_$i201: i16, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$i211: i64, out_$i212: i1, out_$p193: ref);
  modifies $M.0;



implementation get_string_loop_$bb81(in_$p1: ref, in_$i2: i16, in_$i3: i32, in_$i169: i64, in_$p172: ref, in_$p173: ref, in_$i174: i64, in_$i175: i1, in_$p176: ref, in_$p177: ref, in_$i178: i32, in_$i179: i16, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$i189: i64, in_$p190: ref, in_$i191: i64, in_$i192: i1, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$i197: i1, in_$p198: ref, in_$p199: ref, in_$i200: i32, in_$i201: i16, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$i211: i64, in_$i212: i1, in_$p193: ref, in_$p214: ref, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$i219: i64, in_$i220: i1, in_$p171: ref) returns (out_$p172: ref, out_$p173: ref, out_$i174: i64, out_$i175: i1, out_$p176: ref, out_$p177: ref, out_$i178: i32, out_$i179: i16, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$i189: i64, out_$p190: ref, out_$i191: i64, out_$i192: i1, out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$i197: i1, out_$p198: ref, out_$p199: ref, out_$i200: i32, out_$i201: i16, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$i211: i64, out_$i212: i1, out_$p193: ref, out_$p214: ref, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$i219: i64, out_$i220: i1, out_$p171: ref)
{

  entry:
    out_$p172, out_$p173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p184, out_$p185, out_$p186, out_$p187, out_$p188, out_$i189, out_$p190, out_$i191, out_$i192, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p193, out_$p214, out_$p215, out_$p216, out_$p217, out_$p218, out_$i219, out_$i220, out_$p171 := in_$p172, in_$p173, in_$i174, in_$i175, in_$p176, in_$p177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$p184, in_$p185, in_$p186, in_$p187, in_$p188, in_$i189, in_$p190, in_$i191, in_$i192, in_$p194, in_$p195, in_$i196, in_$i197, in_$p198, in_$p199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$p206, in_$p207, in_$p208, in_$p209, in_$p210, in_$i211, in_$i212, in_$p193, in_$p214, in_$p215, in_$p216, in_$p217, in_$p218, in_$i219, in_$i220, in_$p171;
    goto $bb81, exit;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_3926;

  $bb104:
    assume out_$i220 == 1;
    assume {:verifier.code 0} true;
    out_$p171 := out_$p217;
    goto $bb104_dummy;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$i220 := $ne.i64(out_$i219, in_$i169);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    out_$i219 := $p2i.ref.i64(out_$p218);
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref(out_$p216, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_3987;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref(out_$p216, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3986;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    out_$p216 := $bitcast.ref.ref(out_$p215);
    goto corral_source_split_3985;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    out_$p215 := $load.ref($M.0, out_$p214);
    goto corral_source_split_3984;

  $bb103:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref($add.ref(out_$p171, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3983;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(out_$i192 == 1);
    goto $bb91;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb102:
    assume !(out_$i212 == 1);
    goto corral_source_split_3981;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$i212 := $ne.i64(out_$i211, out_$i191);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i211 := $p2i.ref.i64(out_$p210);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(out_$p208, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref(out_$p208, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3967;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    out_$p208 := $bitcast.ref.ref(out_$p207);
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    out_$p207 := $load.ref($M.0, out_$p206);
    goto corral_source_split_3965;

  $bb96:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3964;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume out_$i197 == 1;
    goto corral_source_split_3962;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i64(out_$i196, 0);
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    out_$i196 := $p2i.ref.i64(out_$p195);
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    out_$p195 := $load.ref($M.0, out_$p194);
    goto corral_source_split_3958;

  $bb93:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(out_$p193, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb92:
    call out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p193 := get_string_loop_$bb92(in_$p1, in_$i2, in_$i3, out_$i191, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p193);
    goto $bb92_last;

  $bb92_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3955;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$p193 := out_$p187;
    goto $bb92;

  $bb101:
    assume out_$i212 == 1;
    assume {:verifier.code 0} true;
    out_$p193 := out_$p209;
    assume false;
    return;

  $bb89:
    assume out_$i192 == 1;
    goto corral_source_split_3953;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    out_$i192 := $ne.i64(out_$i189, out_$i191);
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$i191 := $p2i.ref.i64(out_$p190);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(out_$p171, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$i189 := $p2i.ref.i64(out_$p188);
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(out_$p186, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3947;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref(out_$p186, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$p186 := $bitcast.ref.ref(out_$p185);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$p185 := $load.ref($M.0, out_$p184);
    goto corral_source_split_3944;

  $bb88:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref($add.ref(out_$p171, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3943;

  $bb84:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb86:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$i182 := out_$i180;
    assume true;
    goto $bb86;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$i181 := $sgt.i32(out_$i180, 0);
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} out_$i180 := lookup_string(out_$p177, in_$p1, out_$i179, in_$i3);
    call {:si_unique_call 490} {:cexpr "len"} boogie_si_record_i32(out_$i180);
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$i179 := $trunc.i32.i16(out_$i178);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i178 := $zext.i16.i32(in_$i2);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$p177 := $load.ref($M.0, out_$p176);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(out_$p171, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_3934;

  $bb83:
    assume out_$i175 == 1;
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$i175 := $ne.i64(out_$i174, 0);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i174 := $p2i.ref.i64(out_$p173);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$p173 := $load.ref($M.0, out_$p172);
    goto corral_source_split_3929;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(out_$p171, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb99:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    out_$i204 := out_$i202;
    assume true;
    goto $bb99;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    out_$i203 := $sgt.i32(out_$i202, 0);
    goto corral_source_split_3977;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} out_$i202 := lookup_string(out_$p199, in_$p1, out_$i201, in_$i3);
    call {:si_unique_call 492} {:cexpr "len"} boogie_si_record_i32(out_$i202);
    goto corral_source_split_3976;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i201 := $trunc.i32.i16(out_$i200);
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i200 := $zext.i16.i32(in_$i2);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$p199 := $load.ref($M.0, out_$p198);
    goto corral_source_split_3973;

  $bb97:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p193, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3972;

  $bb95:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb104_dummy:
    call {:si_unique_call 1} out_$p172, out_$p173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p184, out_$p185, out_$p186, out_$p187, out_$p188, out_$i189, out_$p190, out_$i191, out_$i192, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p193, out_$p214, out_$p215, out_$p216, out_$p217, out_$p218, out_$i219, out_$i220, out_$p171 := get_string_loop_$bb81(in_$p1, in_$i2, in_$i3, in_$i169, out_$p172, out_$p173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p184, out_$p185, out_$p186, out_$p187, out_$p188, out_$i189, out_$p190, out_$i191, out_$i192, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p193, out_$p214, out_$p215, out_$p216, out_$p217, out_$p218, out_$i219, out_$i220, out_$p171);
    return;

  exit:
    return;
}



procedure get_string_loop_$bb81(in_$p1: ref, in_$i2: i16, in_$i3: i32, in_$i169: i64, in_$p172: ref, in_$p173: ref, in_$i174: i64, in_$i175: i1, in_$p176: ref, in_$p177: ref, in_$i178: i32, in_$i179: i16, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$i189: i64, in_$p190: ref, in_$i191: i64, in_$i192: i1, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$i197: i1, in_$p198: ref, in_$p199: ref, in_$i200: i32, in_$i201: i16, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$i211: i64, in_$i212: i1, in_$p193: ref, in_$p214: ref, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$i219: i64, in_$i220: i1, in_$p171: ref) returns (out_$p172: ref, out_$p173: ref, out_$i174: i64, out_$i175: i1, out_$p176: ref, out_$p177: ref, out_$i178: i32, out_$i179: i16, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$i189: i64, out_$p190: ref, out_$i191: i64, out_$i192: i1, out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$i197: i1, out_$p198: ref, out_$p199: ref, out_$i200: i32, out_$i201: i16, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$i211: i64, out_$i212: i1, out_$p193: ref, out_$p214: ref, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$i219: i64, out_$i220: i1, out_$p171: ref);
  modifies $M.0;



implementation get_string_loop_$bb64(in_$p1: ref, in_$i2: i16, in_$i3: i32, in_$i135: i64, in_$p138: ref, in_$i139: i32, in_$i140: i16, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p137: ref) returns (out_$p138: ref, out_$i139: i32, out_$i140: i16, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p137: ref)
{

  entry:
    out_$p138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p137 := in_$p138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$p145, in_$p146, in_$p147, in_$p148, in_$i149, in_$i150, in_$p137;
    goto $bb64, exit;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_3880;

  $bb69:
    assume out_$i150 == 1;
    assume {:verifier.code 0} true;
    out_$p137 := out_$p146;
    goto $bb69_dummy;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i64(out_$i149, in_$i135);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$i149 := $p2i.ref.i64(out_$p148);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(out_$p146);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$p146 := $load.ref($M.0, out_$p145);
    goto corral_source_split_3891;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref($add.ref(out_$p137, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3890;

  $bb67:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$i143 := out_$i141;
    assume true;
    goto $bb67;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i142 := $sgt.i32(out_$i141, 0);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} out_$i141 := lookup_string(out_$p138, in_$p1, out_$i140, in_$i3);
    call {:si_unique_call 486} {:cexpr "len"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$i140 := $trunc.i32.i16(out_$i139);
    goto corral_source_split_3884;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i16.i32(in_$i2);
    goto corral_source_split_3883;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} out_$p138 := get_containers_gs(out_$p137);
    goto corral_source_split_3882;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb69_dummy:
    call {:si_unique_call 1} out_$p138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p137 := get_string_loop_$bb64(in_$p1, in_$i2, in_$i3, in_$i135, out_$p138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p137);
    return;

  exit:
    return;
}



procedure get_string_loop_$bb64(in_$p1: ref, in_$i2: i16, in_$i3: i32, in_$i135: i64, in_$p138: ref, in_$i139: i32, in_$i140: i16, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p137: ref) returns (out_$p138: ref, out_$i139: i32, out_$i140: i16, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p137: ref);
  modifies $M.0;



implementation get_string_loop_$bb31(in_$p7: ref, in_$i73: i64, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p75: ref) returns (out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p75: ref)
{

  entry:
    out_$p76, out_$p77, out_$p78, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p75 := in_$p76, in_$p77, in_$p78, in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$i85, in_$p75;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  $bb33:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$p75 := out_$p81;
    goto $bb33_dummy;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i64(out_$i84, in_$i73);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(out_$p83);
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p82, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    out_$p82 := $bitcast.ref.ref(out_$p81);
    goto corral_source_split_3795;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3793;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} collect_langs(out_$p76, out_$p78);
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p7, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3790;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} out_$p76 := get_containers_gs(out_$p75);
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p76, out_$p77, out_$p78, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p75 := get_string_loop_$bb31(in_$p7, in_$i73, out_$p76, out_$p77, out_$p78, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p75);
    return;

  exit:
    return;
}



procedure get_string_loop_$bb31(in_$p7: ref, in_$i73: i64, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p75: ref) returns (out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p75: ref);
  modifies $M.0;



implementation get_string_loop_$bb17(in_$p7: ref, in_$i41: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p43: ref) returns (out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p43: ref)
{

  entry:
    out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43 := in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p43;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3744;

  $bb22:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$p43 := out_$p54;
    goto $bb22_dummy;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, in_$i41);
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p53, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p53, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_3757;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  $bb20:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} collect_langs(out_$p45, out_$p49);
    goto corral_source_split_3754;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p7, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3752;

  $bb19:
    assume out_$i47 == 1;
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3747;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3746;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43 := get_string_loop_$bb17(in_$p7, in_$i41, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43);
    return;

  exit:
    return;
}



procedure get_string_loop_$bb17(in_$p7: ref, in_$i41: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p43: ref) returns (out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p43: ref);
  modifies $M.0;



implementation get_string_loop_$bb9(in_$p7: ref, in_$i24: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p43: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p26: ref) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p43: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p26: ref)
{

  entry:
    out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p26 := in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p43, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$p26;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3720;

  $bb25:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$p26 := out_$p62;
    goto $bb25_dummy;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, in_$i24);
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p61, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(out_$p61, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_3767;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3766;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb16;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume !(out_$i57 == 1);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, out_$i41);
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p53, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p53, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_3757;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  $bb20:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} collect_langs(out_$p45, out_$p49);
    goto corral_source_split_3754;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p7, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3752;

  $bb19:
    assume out_$i47 == 1;
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3747;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3746;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    call out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43 := get_string_loop_$bb17(in_$p7, out_$i41, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43);
    goto $bb17_last;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3744;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p37;
    goto $bb17;

  $bb22:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$p43 := out_$p54;
    assume false;
    return;

  $bb14:
    assume out_$i42 == 1;
    goto corral_source_split_3742;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i39, out_$i41);
    goto corral_source_split_3740;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_3739;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p26, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p36, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_3734;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_3733;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3732;

  $bb12:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} collect_langs(out_$p28, out_$p32);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p7, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3728;

  $bb11:
    assume out_$i30 == 1;
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_3725;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_3724;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_3723;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 224)), $mul.ref(8, 1));
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p26 := get_string_loop_$bb9(in_$p7, in_$i24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p26);
    return;

  exit:
    return;
}



procedure get_string_loop_$bb9(in_$p7: ref, in_$i24: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p43: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p26: ref) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p43: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p26: ref);
  modifies $M.0;



implementation set_config_loop_$bb52(in_$p72: ref, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i32, in_$i104: i32, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$i110: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p92: ref) returns (out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i32, out_$i104: i32, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i32, out_$i109: i32, out_$i110: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p92: ref)
{

  entry:
    out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p92 := in_$p93, in_$p94, in_$i95, in_$i96, in_$i97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$p112, in_$p113, in_$p114, in_$i115, in_$i116, in_$p92;
    goto $bb52, exit;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_5112;

  $bb58:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$p92 := out_$p113;
    goto $bb58_dummy;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i64(out_$i115, 0);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    out_$i115 := $p2i.ref.i64(out_$p114);
    goto corral_source_split_5124;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_5123;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p92, $mul.ref(1, 8));
    goto corral_source_split_5122;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume out_$i97 == 1;
    goto corral_source_split_5120;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 5);
    goto corral_source_split_5118;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i32(out_$i95);
    goto corral_source_split_5117;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i8($M.0, out_$p94);
    goto corral_source_split_5116;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p93, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5115;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_5114;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} set_bit(out_$i110, out_$p112);
    goto corral_source_split_5142;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_5141;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p72, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_5140;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i109);
    goto corral_source_split_5139;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    out_$i109 := $or.i32(out_$i104, out_$i108);
    call {:si_unique_call 511} {:cexpr "addr"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_5138;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    out_$i108 := $and.i32(out_$i107, 15);
    goto corral_source_split_5137;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i106);
    goto corral_source_split_5136;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i8($M.0, out_$p105);
    goto corral_source_split_5135;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p99, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5134;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    out_$i104 := $ashr.i32(out_$i103, 3);
    goto corral_source_split_5133;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i32(out_$i102, 128);
    goto corral_source_split_5132;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i8.i32(out_$i101);
    goto corral_source_split_5131;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i8($M.0, out_$p100);
    goto corral_source_split_5130;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5129;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    out_$p99 := $bitcast.ref.ref(out_$p98);
    goto corral_source_split_5128;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p92);
    goto corral_source_split_5127;

  $bb55:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb58_dummy:
    call {:si_unique_call 1} out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p92 := set_config_loop_$bb52(in_$p72, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p92);
    return;

  exit:
    return;
}



procedure set_config_loop_$bb52(in_$p72: ref, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i32, in_$i104: i32, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$i110: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p92: ref) returns (out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i32, out_$i104: i32, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i32, out_$i109: i32, out_$i110: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p92: ref);



implementation set_config_loop_$bb32(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p47: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p84: ref, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i32, in_$i104: i32, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$i110: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p92: ref, in_$p117: ref, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$p122: ref, in_$i123: i32, in_$i145: i1, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i24, in_$i153: i24, in_$i154: i24, in_$p155: ref, in_$p156: ref, in_$i157: i8, in_$i158: i64, in_$i159: i64, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$i168: i32, in_$i169: i32, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$i177: i24, in_$i178: i24, in_$i179: i24, in_$p180: ref, in_$p181: ref, in_$i182: i8, in_$i183: i64, in_$i184: i64, in_$i185: i64, in_$i186: i1, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i67: i32, in_$i68: i32, in_$i194: i32) returns (out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p84: ref, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i32, out_$i104: i32, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i32, out_$i109: i32, out_$i110: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p92: ref, out_$p117: ref, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$p122: ref, out_$i123: i32, out_$i145: i1, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i24, out_$i153: i24, out_$i154: i24, out_$p155: ref, out_$p156: ref, out_$i157: i8, out_$i158: i64, out_$i159: i64, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$i168: i32, out_$i169: i32, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$i177: i24, out_$i178: i24, out_$i179: i24, out_$p180: ref, out_$p181: ref, out_$i182: i8, out_$i183: i64, out_$i184: i64, out_$i185: i64, out_$i186: i1, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i67: i32, out_$i68: i32, out_$i194: i32)
{

  entry:
    out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$p84, out_$p89, out_$i90, out_$i91, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p92, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$p188, out_$p189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i67, out_$i68, out_$i194 := in_$i69, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$p83, in_$p85, in_$p86, in_$p87, in_$p88, in_$p84, in_$p89, in_$i90, in_$i91, in_$p93, in_$p94, in_$i95, in_$i96, in_$i97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$p112, in_$p113, in_$p114, in_$i115, in_$i116, in_$p92, in_$p117, in_$p118, in_$i119, in_$i120, in_$i121, in_$p122, in_$i123, in_$i145, in_$p146, in_$p147, in_$p148, in_$p149, in_$p150, in_$p151, in_$i152, in_$i153, in_$i154, in_$p155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$p163, in_$p164, in_$p165, in_$p166, in_$p167, in_$i168, in_$i169, in_$p170, in_$p171, in_$p172, in_$p173, in_$p174, in_$p175, in_$p176, in_$i177, in_$i178, in_$i179, in_$p180, in_$p181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$p187, in_$p188, in_$p189, in_$p190, in_$i191, in_$i192, in_$i193, in_$i67, in_$i68, in_$i194;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5076;

  $bb76:
    assume out_$i193 == 1;
    assume {:verifier.code 0} true;
    out_$i67, out_$i68 := out_$i192, out_$i119;
    goto $bb76_dummy;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    out_$i194 := out_$i119;
    assume true;
    goto $bb76;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    out_$i193 := $sle.i32(out_$i192, 15);
    goto corral_source_split_5255;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i192 := $add.i32(out_$i67, 1);
    call {:si_unique_call 525} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_5254;

  $bb68:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p5, out_$p189, .str.31, out_$i191);
    goto corral_source_split_5252;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i32($M.0, out_$p190);
    goto corral_source_split_5251;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(in_$p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p188, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_5249;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$p188 := $load.ref($M.0, out_$p187);
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(in_$p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5247;

  $bb72:
    assume out_$i186 == 1;
    goto corral_source_split_5246;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    out_$i186 := $ne.i64(out_$i185, 0);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} out_$i185 := ldv__builtin_expect(out_$i184, 0);
    call {:si_unique_call 523} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i185);
    goto corral_source_split_5243;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    out_$i184 := $and.i64(out_$i183, 1);
    goto corral_source_split_5242;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i8.i64(out_$i182);
    goto corral_source_split_5241;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i8($M.28, out_$p181);
    goto corral_source_split_5240;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5239;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, out_$p180, 1);
    goto corral_source_split_5238;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5237;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, out_$p176, out_$i179);
    goto corral_source_split_5236;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    out_$i179 := $or.i24(out_$i178, 725);
    goto corral_source_split_5235;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    out_$i178 := $and.i24(out_$i177, $sub.i24(0, 262144));
    goto corral_source_split_5234;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i24($M.27, out_$p176);
    goto corral_source_split_5233;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    out_$p176 := $bitcast.ref.ref(out_$p175);
    goto corral_source_split_5232;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5231;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, out_$p174, .str.31);
    goto corral_source_split_5230;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5229;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p173, .str.12);
    goto corral_source_split_5228;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5227;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p172, .str.58);
    goto corral_source_split_5226;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5225;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, out_$p171, .str.10);
    goto corral_source_split_5224;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5223;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p170, out_$i169);
    goto corral_source_split_5222;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_5221;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i32(out_$i168, 1);
    goto corral_source_split_5220;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i32($M.0, out_$p167);
    goto corral_source_split_5219;

  $bb71:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p0, $mul.ref(0, 224)), $mul.ref(140, 1));
    goto corral_source_split_5218;

  $bb70:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref(in_$p4, out_$p164, .str.30, .str.58, out_$i67, out_$p166);
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    out_$p166 := $load.ref($M.0, out_$p165);
    goto corral_source_split_5215;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(out_$p72, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_5214;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(out_$p163, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_5213;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    out_$p163 := $load.ref($M.0, out_$p162);
    goto corral_source_split_5212;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5211;

  $bb69:
    assume out_$i161 == 1;
    goto corral_source_split_5210;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    out_$i161 := $ne.i64(out_$i160, 0);
    goto corral_source_split_5208;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} out_$i160 := ldv__builtin_expect(out_$i159, 0);
    call {:si_unique_call 520} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i160);
    goto corral_source_split_5207;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    out_$i159 := $and.i64(out_$i158, 1);
    goto corral_source_split_5206;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    out_$i158 := $zext.i8.i64(out_$i157);
    goto corral_source_split_5205;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i8($M.28, out_$p156);
    goto corral_source_split_5204;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5203;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, out_$p155, 1);
    goto corral_source_split_5202;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5201;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, out_$p151, out_$i154);
    goto corral_source_split_5200;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    out_$i154 := $or.i24(out_$i153, 722);
    goto corral_source_split_5199;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    out_$i153 := $and.i24(out_$i152, $sub.i24(0, 262144));
    goto corral_source_split_5198;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i24($M.27, out_$p151);
    goto corral_source_split_5197;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(out_$p150);
    goto corral_source_split_5196;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5195;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, out_$p149, .str.30);
    goto corral_source_split_5194;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5193;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p148, .str.12);
    goto corral_source_split_5192;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5191;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p147, .str.58);
    goto corral_source_split_5190;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5189;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, out_$p146, .str.10);
    goto corral_source_split_5188;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5187;

  $bb67:
    assume out_$i145 == 1;
    goto corral_source_split_5186;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i119, 32767);
    goto corral_source_split_5184;

  $bb62:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    out_$i121, out_$p122, out_$i123 := out_$i67, out_$p72, out_$i119;
    assume true;
    goto $bb62;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i119, 0);
    goto corral_source_split_5148;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.0, out_$p117);
    call {:si_unique_call 513} out_$i119 := devirtbounce.12(out_$p118, out_$p72, out_$i67, 0);
    call {:si_unique_call 514} {:cexpr "result"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_5147;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p72, $mul.ref(0, 200)), $mul.ref(96, 1));
    goto corral_source_split_5146;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb51;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb59:
    assume !(out_$i116 == 1);
    goto corral_source_split_5144;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i64(out_$i115, 0);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    out_$i115 := $p2i.ref.i64(out_$p114);
    goto corral_source_split_5124;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_5123;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p92, $mul.ref(1, 8));
    goto corral_source_split_5122;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume out_$i97 == 1;
    goto corral_source_split_5120;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 5);
    goto corral_source_split_5118;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i32(out_$i95);
    goto corral_source_split_5117;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i8($M.0, out_$p94);
    goto corral_source_split_5116;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p93, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5115;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_5114;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    call out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p92 := set_config_loop_$bb52(out_$p72, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p92);
    goto $bb52_last;

  $bb52_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5112;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    out_$p92 := out_$p84;
    goto $bb52;

  $bb58:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$p92 := out_$p113;
    assume false;
    return;

  $bb49:
    assume out_$i91 == 1;
    goto corral_source_split_5110;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i64(out_$i90, 0);
    goto corral_source_split_5105;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p89);
    goto corral_source_split_5104;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p84);
    goto corral_source_split_5103;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_5102;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p84 := out_$p88;
    goto $bb46;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    out_$p84 := out_$p83;
    goto $bb46;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    out_$p84 := out_$p86;
    goto $bb46;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_5100;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p72, $mul.ref(0, 200)), $mul.ref(24, 1));
    goto corral_source_split_5099;

  $bb44:
    assume out_$i81 == 1;
    goto corral_source_split_5098;

  $bb39:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i78, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i78, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1584)), $mul.ref(120, 1));
    goto corral_source_split_5092;

  $bb35:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i68;
    assume true;
    goto $bb35;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i64(out_$i73, 0);
    goto corral_source_split_5082;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_5081;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_5080;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p47, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref(out_$i69, 8));
    goto corral_source_split_5079;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5078;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_5096;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p72, $mul.ref(0, 200)), $mul.ref(32, 1));
    goto corral_source_split_5095;

  $bb41:
    assume out_$i80 == 1;
    goto corral_source_split_5094;

  $bb40:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i78, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_5108;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p72, $mul.ref(0, 200)), $mul.ref(16, 1));
    goto corral_source_split_5107;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i80 == 1);
    goto $bb43;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb43;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} set_bit(out_$i110, out_$p112);
    goto corral_source_split_5142;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_5141;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p72, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_5140;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i109);
    goto corral_source_split_5139;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    out_$i109 := $or.i32(out_$i104, out_$i108);
    call {:si_unique_call 511} {:cexpr "addr"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_5138;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    out_$i108 := $and.i32(out_$i107, 15);
    goto corral_source_split_5137;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i106);
    goto corral_source_split_5136;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i8($M.0, out_$p105);
    goto corral_source_split_5135;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p99, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5134;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    out_$i104 := $ashr.i32(out_$i103, 3);
    goto corral_source_split_5133;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i32(out_$i102, 128);
    goto corral_source_split_5132;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i8.i32(out_$i101);
    goto corral_source_split_5131;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i8($M.0, out_$p100);
    goto corral_source_split_5130;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5129;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    out_$p99 := $bitcast.ref.ref(out_$p98);
    goto corral_source_split_5128;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p92);
    goto corral_source_split_5127;

  $bb55:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb76_dummy:
    call {:si_unique_call 1} out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$p84, out_$p89, out_$i90, out_$i91, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p92, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$p188, out_$p189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i67, out_$i68, out_$i194 := set_config_loop_$bb32(in_$p0, in_$p4, in_$p5, in_$p7, in_$p47, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$p84, out_$p89, out_$i90, out_$i91, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p92, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$p188, out_$p189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i67, out_$i68, out_$i194);
    return;

  exit:
    return;
}



procedure set_config_loop_$bb32(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p47: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p84: ref, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i32, in_$i104: i32, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$i110: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p92: ref, in_$p117: ref, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$p122: ref, in_$i123: i32, in_$i145: i1, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i24, in_$i153: i24, in_$i154: i24, in_$p155: ref, in_$p156: ref, in_$i157: i8, in_$i158: i64, in_$i159: i64, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$i168: i32, in_$i169: i32, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$i177: i24, in_$i178: i24, in_$i179: i24, in_$p180: ref, in_$p181: ref, in_$i182: i8, in_$i183: i64, in_$i184: i64, in_$i185: i64, in_$i186: i1, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i67: i32, in_$i68: i32, in_$i194: i32) returns (out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p84: ref, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i32, out_$i104: i32, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i32, out_$i109: i32, out_$i110: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p92: ref, out_$p117: ref, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$p122: ref, out_$i123: i32, out_$i145: i1, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i24, out_$i153: i24, out_$i154: i24, out_$p155: ref, out_$p156: ref, out_$i157: i8, out_$i158: i64, out_$i159: i64, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$i168: i32, out_$i169: i32, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$i177: i24, out_$i178: i24, out_$i179: i24, out_$p180: ref, out_$p181: ref, out_$i182: i8, out_$i183: i64, out_$i184: i64, out_$i185: i64, out_$i186: i1, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i67: i32, out_$i68: i32, out_$i194: i32);
  modifies $M.28, $M.27, $M.26, $M.25, $M.24, $M.23, $M.0;



implementation set_config_loop_$bb6(in_$i2: i32, in_$i20: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p23: ref, in_$p43: ref) returns (out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p23: ref, out_$p43: ref)
{

  entry:
    out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p23, out_$p43 := in_$p24, in_$i25, in_$i26, in_$i27, in_$p28, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p23, in_$p43;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5011;

  $bb15:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p39;
    goto $bb15_dummy;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p39;
    assume true;
    goto $bb15;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, in_$i20);
    goto corral_source_split_5036;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_5035;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p38, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_5034;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p38, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_5033;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_5032;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_5031;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_5030;

  $bb9:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p23;
    assume true;
    goto $bb9;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, in_$i2);
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_5015;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.0, out_$p24);
    goto corral_source_split_5014;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p23, out_$p43 := set_config_loop_$bb6(in_$i2, in_$i20, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p23, out_$p43);
    return;

  exit:
    return;
}



procedure set_config_loop_$bb6(in_$i2: i32, in_$i20: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p23: ref, in_$p43: ref) returns (out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p23: ref, out_$p43: ref);



implementation count_ext_compat_loop_$bb29()
{

  entry:
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb29_dummy:
    call {:si_unique_call 1} count_ext_compat_loop_$bb29();
    return;

  exit:
    return;
}



procedure count_ext_compat_loop_$bb29();



implementation count_ext_compat_loop_$bb9(in_$p11: ref, in_$p12: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i32, in_$i25: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i16: i32, in_$i17: i32, in_$i43: i32, in_$i6: i32) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i32, out_$i25: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i16: i32, out_$i17: i32, out_$i43: i32)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i25, out_$i40, out_$i41, out_$i42, out_$i16, out_$i17, out_$i43 := in_$p18, in_$p19, in_$i20, in_$p22, in_$i23, in_$i24, in_$p26, in_$p27, in_$i28, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i25, in_$i40, in_$i41, in_$i42, in_$i16, in_$i17, in_$i43;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5303;

  $bb21:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i40, out_$i25;
    goto $bb21_dummy;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i25;
    assume true;
    goto $bb21;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    out_$i42 := $ult.i32(out_$i40, out_$i41);
    goto corral_source_split_5318;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, in_$p12);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i16, 1);
    call {:si_unique_call 528} {:cexpr "j"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_5316;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5315;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i39;
    goto $bb13;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i17;
    goto $bb13;

  $bb11:
    assume out_$i24 == 1;
    goto corral_source_split_5313;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, in_$i6);
    goto corral_source_split_5311;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_5310;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 16)), $mul.ref(0, 1));
    goto corral_source_split_5309;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i16);
    goto corral_source_split_5307;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_5306;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p11, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5305;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5338;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i17;
    goto $bb20;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i38;
    goto $bb20;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i17, 1);
    call {:si_unique_call 529} {:cexpr "res"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_5336;

  $bb18:
    assume out_$i37 == 1;
    goto corral_source_split_5335;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_5333;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_5332;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_5331;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5330;

  $bb15:
    assume out_$i33 == 1;
    goto corral_source_split_5329;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, 0);
    goto corral_source_split_5327;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_5326;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_5325;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 16)), $mul.ref(8, 1));
    goto corral_source_split_5324;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    goto corral_source_split_5323;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i16);
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_5321;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p11, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5320;

  $bb12:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb17;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i25, out_$i40, out_$i41, out_$i42, out_$i16, out_$i17, out_$i43 := count_ext_compat_loop_$bb9(in_$p11, in_$p12, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i25, out_$i40, out_$i41, out_$i42, out_$i16, out_$i17, out_$i43, in_$i6);
    return;

  exit:
    return;
}



procedure count_ext_compat_loop_$bb9(in_$p11: ref, in_$p12: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i32, in_$i25: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i16: i32, in_$i17: i32, in_$i43: i32, in_$i6: i32) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i32, out_$i25: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i16: i32, out_$i17: i32, out_$i43: i32);



implementation count_ext_compat_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i32, in_$i25: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i16: i32, in_$i17: i32, in_$i43: i32, in_$i15: i32, in_$i44: i32, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i6: i32, in_$i7: i32, in_$i48: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i32, out_$i25: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i16: i32, out_$i17: i32, out_$i43: i32, out_$i15: i32, out_$i44: i32, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i6: i32, out_$i7: i32, out_$i48: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i25, out_$i40, out_$i41, out_$i42, out_$i16, out_$i17, out_$i43, out_$i15, out_$i44, out_$i45, out_$i46, out_$i47, out_$i6, out_$i7, out_$i48 := in_$i8, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p18, in_$p19, in_$i20, in_$p22, in_$i23, in_$i24, in_$p26, in_$p27, in_$i28, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i25, in_$i40, in_$i41, in_$i42, in_$i16, in_$i17, in_$i43, in_$i15, in_$i44, in_$i45, in_$i46, in_$i47, in_$i6, in_$i7, in_$i48;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5292;

  $bb24:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i44, out_$i15;
    goto $bb24_dummy;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i15;
    assume true;
    goto $bb24;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i46, out_$i44);
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_5344;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, in_$p1);
    goto corral_source_split_5343;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i6, 1);
    call {:si_unique_call 530} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_5342;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb8;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i43;
    goto $bb8;

  $bb22:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5340;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i25;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    out_$i42 := $ult.i32(out_$i40, out_$i41);
    goto corral_source_split_5318;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p12);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i16, 1);
    call {:si_unique_call 528} {:cexpr "j"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_5316;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5315;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i39;
    goto $bb13;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i17;
    goto $bb13;

  $bb11:
    assume out_$i24 == 1;
    goto corral_source_split_5313;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, out_$i6);
    goto corral_source_split_5311;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_5310;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 16)), $mul.ref(0, 1));
    goto corral_source_split_5309;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i16);
    goto corral_source_split_5307;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_5306;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5305;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i25, out_$i40, out_$i41, out_$i42, out_$i16, out_$i17, out_$i43 := count_ext_compat_loop_$bb9(out_$p11, out_$p12, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i25, out_$i40, out_$i41, out_$i42, out_$i16, out_$i17, out_$i43, out_$i6);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5303;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := 0, out_$i7;
    goto $bb9;

  $bb21:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i40, out_$i25;
    assume false;
    return;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_5301;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i7;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    out_$i14 := $ult.i32(0, out_$i13);
    goto corral_source_split_5299;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_5298;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_5297;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_5296;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_5295;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i6);
    goto corral_source_split_5294;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5338;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i17;
    goto $bb20;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i38;
    goto $bb20;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i17, 1);
    call {:si_unique_call 529} {:cexpr "res"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_5336;

  $bb18:
    assume out_$i37 == 1;
    goto corral_source_split_5335;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_5333;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_5332;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_5331;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5330;

  $bb15:
    assume out_$i33 == 1;
    goto corral_source_split_5329;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, 0);
    goto corral_source_split_5327;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_5326;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_5325;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 16)), $mul.ref(8, 1));
    goto corral_source_split_5324;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    goto corral_source_split_5323;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i16);
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_5321;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p11, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5320;

  $bb12:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb17;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i25, out_$i40, out_$i41, out_$i42, out_$i16, out_$i17, out_$i43, out_$i15, out_$i44, out_$i45, out_$i46, out_$i47, out_$i6, out_$i7, out_$i48 := count_ext_compat_loop_$bb4(in_$p0, in_$p1, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i25, out_$i40, out_$i41, out_$i42, out_$i16, out_$i17, out_$i43, out_$i15, out_$i44, out_$i45, out_$i46, out_$i47, out_$i6, out_$i7, out_$i48);
    return;

  exit:
    return;
}



procedure count_ext_compat_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i32, in_$i25: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i16: i32, in_$i17: i32, in_$i43: i32, in_$i15: i32, in_$i44: i32, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i6: i32, in_$i7: i32, in_$i48: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i32, out_$i25: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i16: i32, out_$i17: i32, out_$i43: i32, out_$i15: i32, out_$i44: i32, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i6: i32, out_$i7: i32, out_$i48: i32);



implementation fill_ext_compat_loop_$bb9(in_$p12: ref, in_$p13: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i8, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p51: ref, in_$i52: i64, in_$p53: ref, in_$p50: ref, in_$i54: i32, in_$i55: i1, in_$i28: i32, in_$p29: ref, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i59: i32, in_$p60: ref, in_$i7: i32, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i8, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p51: ref, out_$i52: i64, out_$p53: ref, out_$p50: ref, out_$i54: i32, out_$i55: i1, out_$i28: i32, out_$p29: ref, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i59: i32, out_$p60: ref, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p51, out_$i52, out_$p53, out_$p50, out_$i54, out_$i55, out_$i28, out_$p29, out_$i56, out_$i57, out_$i58, out_$i18, out_$p19, out_$i20, out_$i59, out_$p60, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25 := in_$p21, in_$p22, in_$i23, in_$p25, in_$i26, in_$i27, in_$p30, in_$p31, in_$i32, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$p51, in_$i52, in_$p53, in_$p50, in_$i54, in_$i55, in_$i28, in_$p29, in_$i56, in_$i57, in_$i58, in_$i18, in_$p19, in_$i20, in_$i59, in_$p60, in_cmdloc_dummy_var_23, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5380;

  $bb25:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$p19, out_$i20 := out_$i56, out_$p29, out_$i28;
    goto $bb25_dummy;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    out_$i59, out_$p60 := out_$i28, out_$p29;
    assume true;
    goto $bb25;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    out_$i58 := $ult.i32(out_$i56, out_$i57);
    goto corral_source_split_5395;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, in_$p13);
    goto corral_source_split_5394;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i18, 1);
    call {:si_unique_call 535} {:cexpr "j"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_5393;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5392;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i28, out_$p29 := out_$i54, out_$p50;
    goto $bb13;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$i28, out_$p29 := out_$i20, out_$p19;
    goto $bb13;

  $bb11:
    assume out_$i27 == 1;
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, in_$i7);
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 16)), $mul.ref(0, 1));
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    goto corral_source_split_5385;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i18);
    goto corral_source_split_5384;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_5383;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p12, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb22:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    out_$i55 := $sgt.i32(out_$i54, 4095);
    goto corral_source_split_5428;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i20, 24);
    call {:si_unique_call 537} {:cexpr "count"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_5427;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5426;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p19, $mul.ref(out_$i52, 1));
    assume {:verifier.code 0} true;
    out_$p50 := out_$p53;
    goto $bb20;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    out_$p50 := out_$p49;
    goto $bb20;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p19, $mul.ref(out_$i48, 1));
    goto corral_source_split_5424;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_23 := $M.0;
    out_cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 536} out_cmdloc_dummy_var_25 := $memcpy.i8(out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_$p45, out_$p47, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_25;
    out_$i48 := $add.i64(out_$i44, 22);
    goto corral_source_split_5423;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p35, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5421;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p42, 1);
    goto corral_source_split_5420;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p19, $mul.ref(out_$i44, 1));
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p19, out_$i43);
    out_$i44 := $add.i64(1, 1);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i32.i8(in_$i7);
    goto corral_source_split_5417;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p19, $mul.ref(1, 1));
    goto corral_source_split_5416;

  $bb18:
    assume out_$i41 == 1;
    goto corral_source_split_5415;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p35, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5407;

  $bb15:
    assume out_$i37 == 1;
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_5404;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_5403;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_5402;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 16)), $mul.ref(8, 1));
    goto corral_source_split_5401;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto corral_source_split_5400;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i18);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_5398;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p12, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5397;

  $bb12:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p51, 1);
    out_$i52 := $add.i64(1, 23);
    goto corral_source_split_5413;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p19, $mul.ref(1, 1));
    goto corral_source_split_5412;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb17;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p51, out_$i52, out_$p53, out_$p50, out_$i54, out_$i55, out_$i28, out_$p29, out_$i56, out_$i57, out_$i58, out_$i18, out_$p19, out_$i20, out_$i59, out_$p60, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25 := fill_ext_compat_loop_$bb9(in_$p12, in_$p13, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p51, out_$i52, out_$p53, out_$p50, out_$i54, out_$i55, out_$i28, out_$p29, out_$i56, out_$i57, out_$i58, out_$i18, out_$p19, out_$i20, out_$i59, out_$p60, in_$i7, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25);
    return;

  exit:
    return;
}



procedure fill_ext_compat_loop_$bb9(in_$p12: ref, in_$p13: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i8, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p51: ref, in_$i52: i64, in_$p53: ref, in_$p50: ref, in_$i54: i32, in_$i55: i1, in_$i28: i32, in_$p29: ref, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i59: i32, in_$p60: ref, in_$i7: i32, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i8, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p51: ref, out_$i52: i64, out_$p53: ref, out_$p50: ref, out_$i54: i32, out_$i55: i1, out_$i28: i32, out_$p29: ref, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i59: i32, out_$p60: ref, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8);
  modifies $M.0;



implementation fill_ext_compat_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i8, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p51: ref, in_$i52: i64, in_$p53: ref, in_$p50: ref, in_$i54: i32, in_$i55: i1, in_$i28: i32, in_$p29: ref, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i59: i32, in_$p60: ref, in_$i16: i32, in_$p17: ref, in_$i61: i32, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i8, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p51: ref, out_$i52: i64, out_$p53: ref, out_$p50: ref, out_$i54: i32, out_$i55: i1, out_$i28: i32, out_$p29: ref, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i59: i32, out_$p60: ref, out_$i16: i32, out_$p17: ref, out_$i61: i32, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8)
{

  entry:
    out_$i9, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p51, out_$i52, out_$p53, out_$p50, out_$i54, out_$i55, out_$i28, out_$p29, out_$i56, out_$i57, out_$i58, out_$i18, out_$p19, out_$i20, out_$i59, out_$p60, out_$i16, out_$p17, out_$i61, out_$i62, out_$i63, out_$i64, out_$p6, out_$i7, out_$i8, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25 := in_$i9, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$p21, in_$p22, in_$i23, in_$p25, in_$i26, in_$i27, in_$p30, in_$p31, in_$i32, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$p51, in_$i52, in_$p53, in_$p50, in_$i54, in_$i55, in_$i28, in_$p29, in_$i56, in_$i57, in_$i58, in_$i18, in_$p19, in_$i20, in_$i59, in_$p60, in_$i16, in_$p17, in_$i61, in_$i62, in_$i63, in_$i64, in_$p6, in_$i7, in_$i8, in_cmdloc_dummy_var_23, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5369;

  $bb28:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$p6, out_$i7, out_$i8 := out_$p17, out_$i61, out_$i16;
    goto $bb28_dummy;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$i64 := $sgt.i32(out_$i63, out_$i61);
    goto corral_source_split_5437;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.0, in_$p2);
    goto corral_source_split_5435;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i7, 1);
    call {:si_unique_call 538} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_5434;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb8;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i59, out_$p60;
    goto $bb8;

  $bb26:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5432;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    out_$i59, out_$p60 := out_$i28, out_$p29;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    out_$i58 := $ult.i32(out_$i56, out_$i57);
    goto corral_source_split_5395;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p13);
    goto corral_source_split_5394;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i18, 1);
    call {:si_unique_call 535} {:cexpr "j"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_5393;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5392;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i28, out_$p29 := out_$i54, out_$p50;
    goto $bb13;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$i28, out_$p29 := out_$i20, out_$p19;
    goto $bb13;

  $bb11:
    assume out_$i27 == 1;
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, out_$i7);
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 16)), $mul.ref(0, 1));
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    goto corral_source_split_5385;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i18);
    goto corral_source_split_5384;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_5383;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p12, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p51, out_$i52, out_$p53, out_$p50, out_$i54, out_$i55, out_$i28, out_$p29, out_$i56, out_$i57, out_$i58, out_$i18, out_$p19, out_$i20, out_$i59, out_$p60, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25 := fill_ext_compat_loop_$bb9(out_$p12, out_$p13, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p51, out_$i52, out_$p53, out_$p50, out_$i54, out_$i55, out_$i28, out_$p29, out_$i56, out_$i57, out_$i58, out_$i18, out_$p19, out_$i20, out_$i59, out_$p60, out_$i7, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    out_$i18, out_$p19, out_$i20 := 0, out_$p6, out_$i8;
    goto $bb9;

  $bb25:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$p19, out_$i20 := out_$i56, out_$p29, out_$i28;
    assume false;
    return;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_5378;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i8, out_$p6;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    out_$i15 := $ult.i32(0, out_$i14);
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_5375;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_5374;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 224)), $mul.ref(96, 1)), $mul.ref(out_$i9, 8));
    goto corral_source_split_5372;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5371;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    out_$i55 := $sgt.i32(out_$i54, 4095);
    goto corral_source_split_5428;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i20, 24);
    call {:si_unique_call 537} {:cexpr "count"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_5427;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5426;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p19, $mul.ref(out_$i52, 1));
    assume {:verifier.code 0} true;
    out_$p50 := out_$p53;
    goto $bb20;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    out_$p50 := out_$p49;
    goto $bb20;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p19, $mul.ref(out_$i48, 1));
    goto corral_source_split_5424;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_23 := $M.0;
    out_cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 536} out_cmdloc_dummy_var_25 := $memcpy.i8(out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_$p45, out_$p47, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_25;
    out_$i48 := $add.i64(out_$i44, 22);
    goto corral_source_split_5423;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p35, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5421;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p42, 1);
    goto corral_source_split_5420;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p19, $mul.ref(out_$i44, 1));
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p19, out_$i43);
    out_$i44 := $add.i64(1, 1);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i32.i8(out_$i7);
    goto corral_source_split_5417;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p19, $mul.ref(1, 1));
    goto corral_source_split_5416;

  $bb18:
    assume out_$i41 == 1;
    goto corral_source_split_5415;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p35, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5407;

  $bb15:
    assume out_$i37 == 1;
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_5404;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_5403;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_5402;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 16)), $mul.ref(8, 1));
    goto corral_source_split_5401;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto corral_source_split_5400;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i18);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_5398;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p12, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5397;

  $bb12:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p51, 1);
    out_$i52 := $add.i64(1, 23);
    goto corral_source_split_5413;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p19, $mul.ref(1, 1));
    goto corral_source_split_5412;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb17;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i9, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p51, out_$i52, out_$p53, out_$p50, out_$i54, out_$i55, out_$i28, out_$p29, out_$i56, out_$i57, out_$i58, out_$i18, out_$p19, out_$i20, out_$i59, out_$p60, out_$i16, out_$p17, out_$i61, out_$i62, out_$i63, out_$i64, out_$p6, out_$i7, out_$i8, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25 := fill_ext_compat_loop_$bb4(in_$p0, in_$p2, out_$i9, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p51, out_$i52, out_$p53, out_$p50, out_$i54, out_$i55, out_$i28, out_$p29, out_$i56, out_$i57, out_$i58, out_$i18, out_$p19, out_$i20, out_$i59, out_$p60, out_$i16, out_$p17, out_$i61, out_$i62, out_$i63, out_$i64, out_$p6, out_$i7, out_$i8, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25);
    return;

  exit:
    return;
}



procedure fill_ext_compat_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i8, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p51: ref, in_$i52: i64, in_$p53: ref, in_$p50: ref, in_$i54: i32, in_$i55: i1, in_$i28: i32, in_$p29: ref, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i59: i32, in_$p60: ref, in_$i16: i32, in_$p17: ref, in_$i61: i32, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i8, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p51: ref, out_$i52: i64, out_$p53: ref, out_$p50: ref, out_$i54: i32, out_$i55: i1, out_$i28: i32, out_$p29: ref, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i59: i32, out_$p60: ref, out_$i16: i32, out_$p17: ref, out_$i61: i32, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8);
  modifies $M.0;



implementation count_ext_prop_loop_$bb4(in_$i1: i32, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i33, out_$i34, out_$i35, out_$i9 := in_$p10, in_$p11, in_$i12, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$i19, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i33, in_$i34, in_$i35, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5451;

  $bb17:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i33;
    goto $bb17_dummy;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    out_$i35 := $ult.i32(out_$i33, out_$i34);
    goto corral_source_split_5465;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, in_$p6);
    goto corral_source_split_5464;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i9, 1);
    call {:si_unique_call 540} {:cexpr "j"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_5463;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_5461;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, in_$i1);
    goto corral_source_split_5459;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_5458;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    goto corral_source_split_5456;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i9);
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_5454;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p5, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5453;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb12;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$p29 := out_$p22;
    assume true;
    goto $bb14;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_5480;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_5478;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p22, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5477;

  $bb10:
    assume out_$i24 == 1;
    goto corral_source_split_5476;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_5474;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_5473;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 16)), $mul.ref(8, 1));
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    goto corral_source_split_5470;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i9);
    goto corral_source_split_5469;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_5468;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p5, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5467;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i33, out_$i34, out_$i35, out_$i9 := count_ext_prop_loop_$bb4(in_$i1, in_$p5, in_$p6, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i33, out_$i34, out_$i35, out_$i9);
    return;

  exit:
    return;
}



procedure count_ext_prop_loop_$bb4(in_$i1: i32, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i9: i32);



implementation len_ext_prop_loop_$bb4(in_$i1: i32, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i32, out_$i33, out_$i34, out_$i9 := in_$p10, in_$p11, in_$i12, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$i19, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$i32, in_$i33, in_$i34, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5500;

  $bb17:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i32;
    goto $bb17_dummy;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    out_$i34 := $ult.i32(out_$i32, out_$i33);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, in_$p6);
    goto corral_source_split_5513;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i9, 1);
    call {:si_unique_call 542} {:cexpr "j"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_5512;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_5510;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, in_$i1);
    goto corral_source_split_5508;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_5506;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i9);
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_5503;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p5, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    out_$p25 := out_$p22;
    assume true;
    goto $bb11;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_5522;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 16)), $mul.ref(8, 1));
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    goto corral_source_split_5519;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i9);
    goto corral_source_split_5518;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_5517;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p5, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5516;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i32, out_$i33, out_$i34, out_$i9 := len_ext_prop_loop_$bb4(in_$i1, in_$p5, in_$p6, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i32, out_$i33, out_$i34, out_$i9);
    return;

  exit:
    return;
}



procedure len_ext_prop_loop_$bb4(in_$i1: i32, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i9: i32);



implementation fill_ext_prop_loop_$bb15(in_$p2: ref, in_$i35: i64, in_$i40: i64, in_$i41: i32, in_$i42: i64, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$p38: ref, in_$p39: ref, in_$p93: ref, in_vslice_dummy_var_67: i32) returns (out_$i40: i64, out_$i41: i32, out_$i42: i64, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$p85: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$p38: ref, out_$p39: ref, out_$p93: ref, out_vslice_dummy_var_67: i32)
{

  entry:
    out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p38, out_$p39, out_$p93, out_vslice_dummy_var_67 := in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p76, in_$p77, in_$i78, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p87, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92, in_$p38, in_$p39, in_$p93, in_vslice_dummy_var_67;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5589;

  $bb48:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$p38, out_$p39 := out_$p88, out_$p85;
    goto $bb48_dummy;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    out_$p93 := out_$p85;
    assume true;
    goto $bb48;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i64(out_$i91, in_$i35);
    goto corral_source_split_5656;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    out_$i91 := $p2i.ref.i64(out_$p90);
    goto corral_source_split_5655;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_5654;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_5653;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_5652;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5651;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p39, $mul.ref(out_$i84, 1));
    goto corral_source_split_5650;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i52);
    goto corral_source_split_5649;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} usb_ext_prop_put_binary(out_$p39, out_$i62, out_$p81, out_$i83);
    goto corral_source_split_5645;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_5644;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5643;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_5642;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5641;

  $bb42:
    assume !(out_$i73 == 1);
    goto corral_source_split_5640;

  $bb39:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i67, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb42;

  $bb28:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i67, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.0, out_$p65);
    goto corral_source_split_5628;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5627;

  $bb25:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i62;
    assume true;
    goto $bb25;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i62, 0);
    goto corral_source_split_5623;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} out_$i62 := usb_ext_prop_put_name(out_$p39, out_$p59, out_$i61);
    call {:si_unique_call 551} {:cexpr "ret"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_5622;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_5621;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_5620;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_5619;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_5618;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} usb_ext_prop_put_type(out_$p39, out_$i57);
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i56);
    goto corral_source_split_5616;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.0, out_$p55);
    goto corral_source_split_5615;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5614;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} usb_ext_prop_put_size(out_$p39, out_$i52);
    goto corral_source_split_5613;

  $bb22:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i53, out_$i52);
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(4086, out_$i44);
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i51, 14);
    call {:si_unique_call 547} {:cexpr "count"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i48, out_$i50);
    goto corral_source_split_5606;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_5604;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_5603;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5602;

  $bb18:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i44, 4085);
    goto corral_source_split_5596;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i32(out_$i41, out_$i43);
    call {:si_unique_call 546} {:cexpr "n"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i64.i32(out_$i42);
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i64.i32(out_$i40);
    goto corral_source_split_5592;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_vslice_dummy_var_67 := usb_ext_prop_put_unicode(out_$p39, out_$i62, out_$p76, out_$i78);
    goto corral_source_split_5638;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    goto corral_source_split_5637;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5636;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_5635;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5634;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i71 == 1;
    goto $bb35;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i73 == 1;
    goto $bb41;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb43:
    assume out_$i74 == 1;
    goto corral_source_split_5647;

  $bb38:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i67, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  $bb33:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i67, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  $bb31:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i67, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  $bb29:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i67, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p38, out_$p39, out_$p93, out_vslice_dummy_var_67 := fill_ext_prop_loop_$bb15(in_$p2, in_$i35, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p38, out_$p39, out_$p93, out_vslice_dummy_var_67);
    return;

  exit:
    return;
}



procedure fill_ext_prop_loop_$bb15(in_$p2: ref, in_$i35: i64, in_$i40: i64, in_$i41: i32, in_$i42: i64, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$p38: ref, in_$p39: ref, in_$p93: ref, in_vslice_dummy_var_67: i32) returns (out_$i40: i64, out_$i41: i32, out_$i42: i64, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$p85: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$p38: ref, out_$p39: ref, out_$p93: ref, out_vslice_dummy_var_67: i32);
  modifies $M.0;



implementation fill_ext_prop_loop_$bb4(in_$i1: i32, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i40: i64, in_$i41: i32, in_$i42: i64, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$p38: ref, in_$p39: ref, in_$p93: ref, in_$p37: ref, in_$p94: ref, in_$p19: ref, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i10: i32, in_$p11: ref, in_vslice_dummy_var_67: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i40: i64, out_$i41: i32, out_$i42: i64, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$p85: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$p38: ref, out_$p39: ref, out_$p93: ref, out_$p37: ref, out_$p94: ref, out_$p19: ref, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i10: i32, out_$p11: ref, out_vslice_dummy_var_67: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p38, out_$p39, out_$p93, out_$p37, out_$p94, out_$p19, out_$i95, out_$i96, out_$i97, out_$i10, out_$p11, out_vslice_dummy_var_67 := in_$p12, in_$p13, in_$i14, in_$p16, in_$i17, in_$i18, in_$p20, in_$p21, in_$i22, in_$p24, in_$p25, in_$i26, in_$i27, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p76, in_$p77, in_$i78, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p87, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92, in_$p38, in_$p39, in_$p93, in_$p37, in_$p94, in_$p19, in_$i95, in_$i96, in_$i97, in_$i10, in_$p11, in_vslice_dummy_var_67;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5551;

  $bb52:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$p11 := out_$i95, out_$p19;
    goto $bb52_dummy;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    out_$i97 := $ult.i32(out_$i95, out_$i96);
    goto corral_source_split_5566;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, in_$p7);
    goto corral_source_split_5565;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i10, 1);
    call {:si_unique_call 545} {:cexpr "j"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_5564;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5563;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p94;
    goto $bb8;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p11;
    goto $bb8;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_5561;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, in_$i1);
    goto corral_source_split_5559;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_5558;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 16)), $mul.ref(0, 1));
    goto corral_source_split_5557;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    goto corral_source_split_5556;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i10);
    goto corral_source_split_5555;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_5554;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p6, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5553;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_5660;

  $bb11:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$p94 := out_$p11;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p94 := out_$p37;
    goto $bb51;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb14;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p93;
    goto $bb14;

  $bb49:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5658;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    out_$p93 := out_$p85;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i64(out_$i91, out_$i35);
    goto corral_source_split_5656;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    out_$i91 := $p2i.ref.i64(out_$p90);
    goto corral_source_split_5655;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_5654;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_5653;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_5652;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5651;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p39, $mul.ref(out_$i84, 1));
    goto corral_source_split_5650;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i52);
    goto corral_source_split_5649;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} usb_ext_prop_put_binary(out_$p39, out_$i62, out_$p81, out_$i83);
    goto corral_source_split_5645;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_5644;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5643;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_5642;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5641;

  $bb42:
    assume !(out_$i73 == 1);
    goto corral_source_split_5640;

  $bb39:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i67, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb42;

  $bb28:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i67, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.0, out_$p65);
    goto corral_source_split_5628;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5627;

  $bb25:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i62;
    assume true;
    goto $bb25;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i62, 0);
    goto corral_source_split_5623;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} out_$i62 := usb_ext_prop_put_name(out_$p39, out_$p59, out_$i61);
    call {:si_unique_call 551} {:cexpr "ret"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_5622;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_5621;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_5620;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_5619;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_5618;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} usb_ext_prop_put_type(out_$p39, out_$i57);
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i56);
    goto corral_source_split_5616;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.0, out_$p55);
    goto corral_source_split_5615;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5614;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} usb_ext_prop_put_size(out_$p39, out_$i52);
    goto corral_source_split_5613;

  $bb22:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i53, out_$i52);
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(4086, out_$i44);
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i51, 14);
    call {:si_unique_call 547} {:cexpr "count"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i48, out_$i50);
    goto corral_source_split_5606;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_5604;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_5603;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5602;

  $bb18:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i44, 4085);
    goto corral_source_split_5596;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i32(out_$i41, out_$i43);
    call {:si_unique_call 546} {:cexpr "n"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i64.i32(out_$i42);
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i64.i32(out_$i40);
    goto corral_source_split_5592;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    call out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p38, out_$p39, out_$p93, out_vslice_dummy_var_67 := fill_ext_prop_loop_$bb15(in_$p2, out_$i35, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p38, out_$p39, out_$p93, out_vslice_dummy_var_67);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5589;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$p38, out_$p39 := out_$p30, out_$p11;
    goto $bb15;

  $bb48:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$p38, out_$p39 := out_$p88, out_$p85;
    assume false;
    return;

  $bb12:
    assume out_$i36 == 1;
    goto corral_source_split_5587;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p11;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i33, out_$i35);
    goto corral_source_split_5585;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_5584;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p25, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_5583;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_5579;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5578;

  $bb10:
    assume out_$i27 == 1;
    goto corral_source_split_5577;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_5575;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_5574;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_5573;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 16)), $mul.ref(8, 1));
    goto corral_source_split_5572;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    goto corral_source_split_5571;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i10);
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_5569;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p6, $mul.ref(0, 200)), $mul.ref(48, 1));
    goto corral_source_split_5568;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_vslice_dummy_var_67 := usb_ext_prop_put_unicode(out_$p39, out_$i62, out_$p76, out_$i78);
    goto corral_source_split_5638;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    goto corral_source_split_5637;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5636;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_5635;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p38, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5634;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i71 == 1;
    goto $bb35;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i73 == 1;
    goto $bb41;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb43:
    assume out_$i74 == 1;
    goto corral_source_split_5647;

  $bb38:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i67, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  $bb33:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i67, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  $bb31:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i67, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  $bb29:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i67, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  $bb52_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p38, out_$p39, out_$p93, out_$p37, out_$p94, out_$p19, out_$i95, out_$i96, out_$i97, out_$i10, out_$p11, out_vslice_dummy_var_67 := fill_ext_prop_loop_$bb4(in_$i1, in_$p2, in_$p6, in_$p7, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p38, out_$p39, out_$p93, out_$p37, out_$p94, out_$p19, out_$i95, out_$i96, out_$i97, out_$i10, out_$p11, out_vslice_dummy_var_67);
    return;

  exit:
    return;
}



procedure fill_ext_prop_loop_$bb4(in_$i1: i32, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i40: i64, in_$i41: i32, in_$i42: i64, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$p38: ref, in_$p39: ref, in_$p93: ref, in_$p37: ref, in_$p94: ref, in_$p19: ref, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i10: i32, in_$p11: ref, in_vslice_dummy_var_67: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i40: i64, out_$i41: i32, out_$i42: i64, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$p85: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$p38: ref, out_$p39: ref, out_$p93: ref, out_$p37: ref, out_$p94: ref, out_$p19: ref, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i10: i32, out_$p11: ref, out_vslice_dummy_var_67: i32);
  modifies $M.0;



implementation collect_langs_loop_$bb9(in_$p1: ref, in_$i8: i16, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i1, in_$p13: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p22: ref) returns (out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i1, out_$p13: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p22: ref)
{

  entry:
    out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p22 := in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p13, in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$p22;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5812;

  $bb15:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p18;
    goto $bb15_dummy;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p18;
    assume true;
    goto $bb15;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.0, out_$p18);
    goto corral_source_split_5831;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p13, $mul.ref(1, 2));
    goto corral_source_split_5830;

  $bb12:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i15, out_$i16);
    goto corral_source_split_5821;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(in_$i8);
    goto corral_source_split_5820;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_5819;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    goto corral_source_split_5818;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume out_$i26 == 1;
    goto corral_source_split_5837;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    out_$p27 := out_$p13;
    assume true;
    goto $bb17;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$i26 := $ugt.i64(out_$i24, out_$i25);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(in_$p1, $mul.ref(126, 2));
    goto corral_source_split_5813;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p22 := collect_langs_loop_$bb9(in_$p1, in_$i8, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p22);
    return;

  exit:
    return;
}



procedure collect_langs_loop_$bb9(in_$p1: ref, in_$i8: i16, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i1, in_$p13: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p22: ref) returns (out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i1, out_$p13: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p22: ref);



implementation collect_langs_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i16, in_$i9: i16, in_$i10: i32, in_$i11: i1, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i1, in_$p13: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p22: ref, in_$p12: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$i8: i16, out_$i9: i16, out_$i10: i32, out_$i11: i1, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i1, out_$p13: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p22: ref, out_$p12: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p5: ref)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p22, out_$p12, out_$p28, out_$p29, out_$i30, out_$i31, out_$p5 := in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p13, in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$p22, in_$p12, in_$p28, in_$p29, in_$i30, in_$i31, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5801;

  $bb20:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p5 := out_$p28;
    goto $bb20_dummy;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_5828;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_5826;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p5, $mul.ref(1, 8));
    goto corral_source_split_5825;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume out_$i17 == 1;
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i15, out_$i16);
    goto corral_source_split_5821;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i8);
    goto corral_source_split_5820;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_5819;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    goto corral_source_split_5818;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume out_$i26 == 1;
    goto corral_source_split_5837;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    out_$p27 := out_$p13;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$i26 := $ugt.i64(out_$i24, out_$i25);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(in_$p1, $mul.ref(126, 2));
    goto corral_source_split_5813;

  $bb9:
    call out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p22 := collect_langs_loop_$bb9(in_$p1, out_$i8, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p22);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$p13 := in_$p1;
    goto $bb9;

  $bb15:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p18;
    assume false;
    return;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p18;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.0, out_$p18);
    goto corral_source_split_5831;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p13, $mul.ref(1, 2));
    goto corral_source_split_5830;

  $bb12:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$p12 := in_$p1;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i9);
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i16($M.0, in_$p1);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i16($M.0, out_$p7);
    call {:si_unique_call 605} {:cexpr "language"} boogie_si_record_i16(out_$i8);
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5804;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_5803;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p12, out_$i8);
    goto corral_source_split_5841;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb8;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p27;
    goto $bb8;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p22;
    goto $bb8;

  $bb16:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5835;

  $bb18:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5839;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p22, out_$p12, out_$p28, out_$p29, out_$i30, out_$i31, out_$p5 := collect_langs_loop_$bb4(in_$p1, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p22, out_$p12, out_$p28, out_$p29, out_$i30, out_$i31, out_$p5);
    return;

  exit:
    return;
}



procedure collect_langs_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i16, in_$i9: i16, in_$i10: i32, in_$i11: i1, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i1, in_$p13: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p22: ref, in_$p12: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$i8: i16, out_$i9: i16, out_$i10: i32, out_$i11: i1, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i1, out_$p13: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p22: ref, out_$p12: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p5: ref);
  modifies $M.0;



implementation lookup_string_loop_$bb4(in_$p1: ref, in_$i2: i16, in_$i3: i32, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$p7: ref)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p7 := in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5854;

  $bb9:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p8;
    goto $bb9_dummy;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_5868;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_5867;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p8);
    goto corral_source_split_5866;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_5864;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i12, out_$i13);
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i16.i32(in_$i2);
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i16.i32(out_$i11);
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i16($M.0, out_$p10);
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p7);
    goto corral_source_split_5857;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p7, $mul.ref(1, 8));
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    assume true;
    goto $bb13;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, 0);
    goto corral_source_split_5873;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} out_$i18 := usb_gadget_get_string(out_$p9, in_$i3, in_$p1);
    call {:si_unique_call 609} {:cexpr "value"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_5872;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p7 := lookup_string_loop_$bb4(in_$p1, in_$i2, in_$i3, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p7);
    return;

  exit:
    return;
}



procedure lookup_string_loop_$bb4(in_$p1: ref, in_$i2: i16, in_$i3: i32, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$p7: ref);
  modifies $M.0;



implementation config_buf_loop_$bb11(in_$i1: i32, in_$i48: i64, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p59: ref, in_$p60: ref, in_$i65: i64, in_$i66: i1, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$p67: ref, in_$i68: i32, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p51: ref, in_$i52: i32, in_$p53: ref, in_$p83: ref) returns (out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p59: ref, out_$p60: ref, out_$i65: i64, out_$i66: i1, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$p67: ref, out_$i68: i32, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p51: ref, out_$i52: i32, out_$p53: ref, out_$p83: ref)
{

  entry:
    out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p61, out_$p62, out_$p63, out_$p64, out_$p59, out_$p60, out_$i65, out_$i66, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p67, out_$i68, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p51, out_$i52, out_$p53, out_$p83 := in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p61, in_$p62, in_$p63, in_$p64, in_$p59, in_$p60, in_$i65, in_$i66, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$p67, in_$i68, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p51, in_$i52, in_$p53, in_$p83;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5940;

  $bb31:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$p51, out_$i52, out_$p53 := out_$p79, out_$i68, out_$p67;
    goto $bb31_dummy;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    out_$p83 := out_$p67;
    assume true;
    goto $bb31;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, in_$i48);
    goto corral_source_split_5966;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_5965;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p78, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_5964;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(out_$p78, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_5961;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(out_$p59, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_5960;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5959;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    out_$p67, out_$i68 := out_$p74, out_$i72;
    goto $bb26;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    out_$p67, out_$i68 := out_$p53, out_$i52;
    goto $bb26;

  $bb24:
    assume out_$i66 == 1;
    goto corral_source_split_5957;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i65, 0);
    goto corral_source_split_5952;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_5951;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5950;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p59, out_$p60 := out_$p51, out_$p64;
    goto $bb21;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    out_$p59, out_$p60 := out_$p51, out_$p58;
    goto $bb21;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    out_$p59, out_$p60 := out_$p51, out_$p62;
    goto $bb21;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_5948;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p51, $mul.ref(0, 200)), $mul.ref(24, 1));
    goto corral_source_split_5947;

  $bb19:
    assume out_$i56 == 1;
    goto corral_source_split_5946;

  $bb14:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(in_$i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(in_$i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_5944;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p51, $mul.ref(0, 200)), $mul.ref(32, 1));
    goto corral_source_split_5943;

  $bb16:
    assume out_$i55 == 1;
    goto corral_source_split_5942;

  $bb15:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(in_$i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_5955;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p51, $mul.ref(0, 200)), $mul.ref(16, 1));
    goto corral_source_split_5954;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb18;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref(out_$p53, $mul.ref(out_$i73, 1));
    goto corral_source_split_5975;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i69);
    goto corral_source_split_5974;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i72 := $sub.i32(out_$i52, out_$i69);
    call {:si_unique_call 618} {:cexpr "len"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_5973;

  $bb29:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i69;
    assume true;
    goto $bb29;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i69, 0);
    goto corral_source_split_5969;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} out_$i69 := usb_descriptor_fillbuf(out_$p53, out_$i52, out_$p60);
    call {:si_unique_call 617} {:cexpr "status"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_5968;

  $bb25:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p61, out_$p62, out_$p63, out_$p64, out_$p59, out_$p60, out_$i65, out_$i66, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p67, out_$i68, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p51, out_$i52, out_$p53, out_$p83 := config_buf_loop_$bb11(in_$i1, in_$i48, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p61, out_$p62, out_$p63, out_$p64, out_$p59, out_$p60, out_$i65, out_$i66, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p67, out_$i68, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p51, out_$i52, out_$p53, out_$p83);
    return;

  exit:
    return;
}



procedure config_buf_loop_$bb11(in_$i1: i32, in_$i48: i64, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p59: ref, in_$p60: ref, in_$i65: i64, in_$i66: i1, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$p67: ref, in_$i68: i32, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p51: ref, in_$i52: i32, in_$p53: ref, in_$p83: ref) returns (out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p59: ref, out_$p60: ref, out_$i65: i64, out_$i66: i1, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$p67: ref, out_$i68: i32, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p51: ref, out_$i52: i32, out_$p53: ref, out_$p83: ref);
  modifies $M.0;



implementation __composite_unbind_loop_$bb7(in_$p4: ref, in_$p19: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1)
{

  entry:
    out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28 := in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb9_dummy;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 0);
    goto corral_source_split_6048;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} out_$i27 := list_empty(in_$p19);
    call {:si_unique_call 633} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_6047;

  SeqInstr_105:
    goto corral_source_split_6046;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} remove_config(in_$p4, out_$p26);
    goto SeqInstr_104;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p25, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_6044;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_6043;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_6042;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28 := __composite_unbind_loop_$bb7(in_$p4, in_$p19, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure __composite_unbind_loop_$bb7(in_$p4: ref, in_$p19: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1);
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation remove_config_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i24, in_$i24: i24, in_$i25: i24, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i24, out_$i24: i24, out_$i25: i24, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41 := in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i41 == 1;
    goto $bb12_dummy;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 0);
    goto corral_source_split_6130;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} out_$i40 := list_empty(in_$p4);
    call {:si_unique_call 649} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_6129;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_111:
    goto corral_source_split_6127;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    call {:si_unique_call 647} devirtbounce.2(out_$p39, in_$p1, out_$p11);
    goto SeqInstr_110;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p10, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(72, 1));
    goto corral_source_split_6126;

  $bb9:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} __dynamic_dev_dbg.ref.ref.ref.ref.ref(in_$p2, out_$p35, .str.17, out_$p37, out_$p11);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p10, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(0, 1));
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6119;

  $bb8:
    assume out_$i32 == 1;
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} out_$i31 := ldv__builtin_expect(out_$i30, 0);
    call {:si_unique_call 645} {:cexpr "tmp"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i64(out_$i29, 1);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i64(out_$i28);
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.28, out_$p27);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, out_$p26, 1);
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, out_$p22, out_$i25);
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$i25 := $or.i24(out_$i24, 858);
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i24(out_$i23, $sub.i24(0, 262144));
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i24($M.27, out_$p22);
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, out_$p20, .str.17);
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p19, .str.12);
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p18, .str.51);
    goto corral_source_split_6098;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6097;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, out_$p17, .str.10);
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6095;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_6091;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_6090;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(72, 1));
    goto corral_source_split_6089;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} list_del(out_$p12);
    goto corral_source_split_6088;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p10, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p10, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_6085;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_6084;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_6083;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41 := remove_config_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p4, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41);
    return;

  exit:
    return;
}



procedure remove_config_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i24, in_$i24: i24, in_$i25: i24, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i24, out_$i24: i24, out_$i25: i24, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1);
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $M.29, $CurrAddr, assertsPassed;



implementation composite_dev_cleanup_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p14: ref, out_$p15: ref)
{

  entry:
    out_$p16, out_$p17, out_$p19, out_$p20, out_$p22, out_$i23, out_$i24, out_$p14, out_$p15 := in_$p16, in_$p17, in_$p19, in_$p20, in_$p22, in_$i23, in_$i24, in_$p14, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6191;

  $bb6:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$p15 := out_$p20, out_$p14;
    goto $bb6_dummy;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i12);
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_6201;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6200;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} kfree(out_$p17);
    goto corral_source_split_6196;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_6195;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} list_del(out_$p16);
    goto corral_source_split_6194;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6193;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p19, out_$p20, out_$p22, out_$i23, out_$i24, out_$p14, out_$p15 := composite_dev_cleanup_loop_$bb4(in_$i12, out_$p16, out_$p17, out_$p19, out_$p20, out_$p22, out_$i23, out_$i24, out_$p14, out_$p15);
    return;

  exit:
    return;
}



procedure composite_dev_cleanup_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p14: ref, out_$p15: ref);



implementation gadget_strings_strings_make_loop_$bb12(in_$p3: ref, in_$i24: i64, in_$p30: ref, in_$i31: i16, in_$i32: i32, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i27: i32, in_$p28: ref, in_$i47: i32) returns (out_$p30: ref, out_$i31: i16, out_$i32: i32, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i27: i32, out_$p28: ref, out_$i47: i32)
{

  entry:
    out_$p30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i27, out_$p28, out_$i47 := in_$p30, in_$i31, in_$i32, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i27, in_$p28, in_$i47;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7049;

  $bb17:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i27, out_$p28 := out_$i38, out_$p43;
    goto $bb17_dummy;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i38;
    assume true;
    goto $bb17;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, in_$i24);
    goto corral_source_split_7068;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p42, $mul.ref($sub.ref(0, 200), 216)), $mul.ref(200, 1));
    goto corral_source_split_7066;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p42, $mul.ref($sub.ref(0, 200), 216));
    goto corral_source_split_7065;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_7064;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.35, out_$p40);
    goto corral_source_split_7063;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_7062;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i27, 1);
    call {:si_unique_call 814} {:cexpr "langs"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_7061;

  $bb15:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i32, out_$i36);
    goto corral_source_split_7057;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i35);
    goto corral_source_split_7056;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    goto corral_source_split_7055;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7054;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i32(out_$i31);
    goto corral_source_split_7053;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i16($M.34, out_$p30);
    goto corral_source_split_7052;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7051;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i27, out_$p28, out_$i47 := gadget_strings_strings_make_loop_$bb12(in_$p3, in_$i24, out_$p30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i27, out_$p28, out_$i47);
    return;

  exit:
    return;
}



procedure gadget_strings_strings_make_loop_$bb12(in_$p3: ref, in_$i24: i64, in_$p30: ref, in_$i31: i16, in_$i32: i32, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i27: i32, in_$p28: ref, in_$i47: i32) returns (out_$p30: ref, out_$i31: i16, out_$i32: i32, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i27: i32, out_$p28: ref, out_$i47: i32);



implementation os_desc_link_loop_$bb4(in_$p7: ref, in_$i17: i64, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p20: ref, in_$p35: ref) returns (out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p20: ref, out_$p35: ref)
{

  entry:
    out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p20, out_$p35 := in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p20, in_$p35;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7163;

  $bb10:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p20 := out_$p31;
    goto $bb10_dummy;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p31;
    assume true;
    goto $bb10;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i17);
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_7183;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p30, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7182;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p30, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7181;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_7179;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_7178;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    out_$p25 := out_$p20;
    assume true;
    goto $bb7;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i64(out_$i22, out_$i23);
    goto corral_source_split_7168;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_7167;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_7166;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p7, $mul.ref(0, 520)), $mul.ref(256, 1));
    goto corral_source_split_7165;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p20, out_$p35 := os_desc_link_loop_$bb4(in_$p7, in_$i17, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p20, out_$p35);
    return;

  exit:
    return;
}



procedure os_desc_link_loop_$bb4(in_$p7: ref, in_$i17: i64, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p20: ref, in_$p35: ref) returns (out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p20: ref, out_$p35: ref);



implementation configfs_composite_bind_loop_$bb59(in_$p164: ref, in_$i233: i64, in_$p237: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$i242: i32, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i252: i64, in_$i253: i1, in_$p235: ref, in_$p236: ref, in_$p162: ref) returns (out_$p237: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$i242: i32, out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i252: i64, out_$i253: i1, out_$p235: ref, out_$p236: ref)
{

  entry:
    out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p235, out_$p236 := in_$p237, in_$i238, in_$i239, in_$p240, in_$p241, in_$i242, in_$p247, in_$p248, in_$p249, in_$p250, in_$p251, in_$i252, in_$i253, in_$p235, in_$p236;
    goto $bb59, exit;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7619;

  $bb65:
    assume out_$i253 == 1;
    assume {:verifier.code 0} true;
    out_$p235, out_$p236 := out_$p250, out_$p235;
    goto $bb65_dummy;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    out_$i253 := $ne.i64(out_$i252, in_$i233);
    goto corral_source_split_7640;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    out_$i252 := $p2i.ref.i64(out_$p251);
    goto corral_source_split_7639;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(out_$p235, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7638;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref(out_$p249, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7637;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    out_$p249 := $bitcast.ref.ref(out_$p248);
    goto corral_source_split_7636;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    out_$p248 := $load.ref($M.0, out_$p247);
    goto corral_source_split_7635;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref($add.ref(out_$p235, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_7634;

  $bb62:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    out_$p240, out_$p241, out_$i242 := in_$p164, out_$p236, out_$i238;
    assume true;
    goto $bb62;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    out_$i239 := $ne.i32(out_$i238, 0);
    goto corral_source_split_7624;

  SeqInstr_153:
    call {:si_unique_call 915} {:cexpr "ret"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_7623;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} out_$i238 := usb_add_function(in_$p162, out_$p236);
    goto SeqInstr_152;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} list_del(out_$p237);
    goto corral_source_split_7622;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p237 := $add.ref($add.ref(out_$p236, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7621;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb65_dummy:
    call {:si_unique_call 1} out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p235, out_$p236 := configfs_composite_bind_loop_$bb59(in_$p164, in_$i233, out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p235, out_$p236, in_$p162);
    return;

  exit:
    return;
}



procedure configfs_composite_bind_loop_$bb59(in_$p164: ref, in_$i233: i64, in_$p237: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$i242: i32, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i252: i64, in_$i253: i1, in_$p235: ref, in_$p236: ref, in_$p162: ref) returns (out_$p237: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$i242: i32, out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i252: i64, out_$i253: i1, out_$p235: ref, out_$p236: ref);
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $CurrAddr, $M.29, assertsPassed;



implementation configfs_composite_bind_loop_$bb47(in_$p163: ref, in_$i176: i64, in_$i182: i64, in_$p184: ref, in_$p185: ref, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$p191: ref, in_$i192: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$i199: i64, in_$i200: i1, in_$p179: ref, in_$i180: i32, in_$i201: i32) returns (out_$i182: i64, out_$p184: ref, out_$p185: ref, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$p191: ref, out_$i192: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$i199: i64, out_$i200: i1, out_$p179: ref, out_$i180: i32, out_$i201: i32)
{

  entry:
    out_$i182, out_$p184, out_$p185, out_$p187, out_$p188, out_$p189, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p179, out_$i180, out_$i201 := in_$i182, in_$p184, in_$p185, in_$p187, in_$p188, in_$p189, in_$p191, in_$i192, in_$p194, in_$p195, in_$p196, in_$p197, in_$p198, in_$i199, in_$i200, in_$p179, in_$i180, in_$i201;
    goto $bb47, exit;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7557;

  $bb49:
    assume out_$i200 == 1;
    assume {:verifier.code 0} true;
    out_$p179, out_$i180 := out_$p197, out_$i192;
    goto $bb49_dummy;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    out_$i201 := out_$i192;
    assume true;
    goto $bb49;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    out_$i200 := $ne.i64(out_$i199, in_$i176);
    goto corral_source_split_7577;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    out_$i199 := $p2i.ref.i64(out_$p198);
    goto corral_source_split_7576;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p196, $mul.ref($sub.ref(0, 152), 168)), $mul.ref(152, 1));
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref(out_$p196, $mul.ref($sub.ref(0, 152), 168));
    goto corral_source_split_7574;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    out_$p196 := $bitcast.ref.ref(out_$p195);
    goto corral_source_split_7573;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    out_$p195 := $load.ref($M.0, out_$p194);
    goto corral_source_split_7572;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref($add.ref(out_$p179, $mul.ref(0, 168)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_7571;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    out_$i192 := $add.i32(out_$i180, 1);
    call {:si_unique_call 906} {:cexpr "i"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_7570;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p191, out_$p189);
    goto corral_source_split_7569;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    out_$p191 := $add.ref($add.ref($add.ref(out_$p179, $mul.ref(0, 168)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7568;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    out_$p189 := $load.ref($M.0, out_$p188);
    goto corral_source_split_7567;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(out_$p179, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_7566;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p187, out_$p185);
    goto corral_source_split_7565;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref($add.ref(out_$p179, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7564;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref(out_$p179, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_7563;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p184, out_$p179);
    goto corral_source_split_7562;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref($add.ref(in_$p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(496, 1)), $mul.ref(out_$i182, 8));
    goto corral_source_split_7561;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    out_$i182 := $zext.i32.i64(out_$i180);
    goto corral_source_split_7560;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7559;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb49_dummy:
    call {:si_unique_call 1} out_$i182, out_$p184, out_$p185, out_$p187, out_$p188, out_$p189, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p179, out_$i180, out_$i201 := configfs_composite_bind_loop_$bb47(in_$p163, in_$i176, out_$i182, out_$p184, out_$p185, out_$p187, out_$p188, out_$p189, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p179, out_$i180, out_$i201);
    return;

  exit:
    return;
}



procedure configfs_composite_bind_loop_$bb47(in_$p163: ref, in_$i176: i64, in_$i182: i64, in_$p184: ref, in_$p185: ref, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$p191: ref, in_$i192: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$i199: i64, in_$i200: i1, in_$p179: ref, in_$i180: i32, in_$i201: i32) returns (out_$i182: i64, out_$p184: ref, out_$p185: ref, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$p191: ref, out_$i192: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$i199: i64, out_$i200: i1, out_$p179: ref, out_$i180: i32, out_$i201: i32);
  modifies $M.0;



implementation configfs_composite_bind_loop_$bb40(in_$p3: ref, in_$i160: i64, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$i174: i64, in_$p175: ref, in_$i176: i64, in_$i177: i1, in_$i182: i64, in_$p184: ref, in_$p185: ref, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$p191: ref, in_$i192: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$i199: i64, in_$i200: i1, in_$p179: ref, in_$i180: i32, in_$i201: i32, in_$i178: i32, in_$i202: i64, in_$p204: ref, in_$p205: ref, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$i210: i1, in_$i211: i8, in_$i212: i1, in_$p213: ref, in_$p217: ref, in_$i218: i8, in_$p219: ref, in_$p221: ref, in_$p222: ref, in_$p223: ref, in_$p224: ref, in_$p226: ref, in_$p227: ref, in_$p228: ref, in_$p229: ref, in_$p230: ref, in_$i231: i64, in_$p232: ref, in_$i233: i64, in_$i234: i1, in_$p237: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$i242: i32, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i252: i64, in_$i253: i1, in_$p235: ref, in_$p236: ref, in_$p254: ref, in_$p255: ref, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$i262: i64, in_$i263: i1, in_$p162: ref) returns (out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$i174: i64, out_$p175: ref, out_$i176: i64, out_$i177: i1, out_$i182: i64, out_$p184: ref, out_$p185: ref, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$p191: ref, out_$i192: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$i199: i64, out_$i200: i1, out_$p179: ref, out_$i180: i32, out_$i201: i32, out_$i178: i32, out_$i202: i64, out_$p204: ref, out_$p205: ref, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$i210: i1, out_$i211: i8, out_$i212: i1, out_$p213: ref, out_$p217: ref, out_$i218: i8, out_$p219: ref, out_$p221: ref, out_$p222: ref, out_$p223: ref, out_$p224: ref, out_$p226: ref, out_$p227: ref, out_$p228: ref, out_$p229: ref, out_$p230: ref, out_$i231: i64, out_$p232: ref, out_$i233: i64, out_$i234: i1, out_$p237: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$i242: i32, out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i252: i64, out_$i253: i1, out_$p235: ref, out_$p236: ref, out_$p254: ref, out_$p255: ref, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$i262: i64, out_$i263: i1, out_$p162: ref)
{

  entry:
    out_$p163, out_$p164, out_$p165, out_$i166, out_$i167, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i182, out_$p184, out_$p185, out_$p187, out_$p188, out_$p189, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p179, out_$i180, out_$i201, out_$i178, out_$i202, out_$p204, out_$p205, out_$p206, out_$p207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p217, out_$i218, out_$p219, out_$p221, out_$p222, out_$p223, out_$p224, out_$p226, out_$p227, out_$p228, out_$p229, out_$p230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p235, out_$p236, out_$p254, out_$p255, out_$p257, out_$p258, out_$p259, out_$p260, out_$p261, out_$i262, out_$i263, out_$p162 := in_$p163, in_$p164, in_$p165, in_$i166, in_$i167, in_$p169, in_$p170, in_$p171, in_$p172, in_$p173, in_$i174, in_$p175, in_$i176, in_$i177, in_$i182, in_$p184, in_$p185, in_$p187, in_$p188, in_$p189, in_$p191, in_$i192, in_$p194, in_$p195, in_$p196, in_$p197, in_$p198, in_$i199, in_$i200, in_$p179, in_$i180, in_$i201, in_$i178, in_$i202, in_$p204, in_$p205, in_$p206, in_$p207, in_$p208, in_$p209, in_$i210, in_$i211, in_$i212, in_$p213, in_$p217, in_$i218, in_$p219, in_$p221, in_$p222, in_$p223, in_$p224, in_$p226, in_$p227, in_$p228, in_$p229, in_$p230, in_$i231, in_$p232, in_$i233, in_$i234, in_$p237, in_$i238, in_$i239, in_$p240, in_$p241, in_$i242, in_$p247, in_$p248, in_$p249, in_$p250, in_$p251, in_$i252, in_$i253, in_$p235, in_$p236, in_$p254, in_$p255, in_$p257, in_$p258, in_$p259, in_$p260, in_$p261, in_$i262, in_$i263, in_$p162;
    goto $bb40, exit;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_7536;

  $bb68:
    assume out_$i263 == 1;
    assume {:verifier.code 0} true;
    out_$p162 := out_$p260;
    goto $bb68_dummy;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    out_$i263 := $ne.i64(out_$i262, in_$i160);
    goto corral_source_split_7653;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    out_$i262 := $p2i.ref.i64(out_$p261);
    goto corral_source_split_7652;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    out_$p261 := $add.ref($add.ref(out_$p259, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7651;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    out_$p260 := $add.ref(out_$p259, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7650;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    out_$p259 := $bitcast.ref.ref(out_$p258);
    goto corral_source_split_7649;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    out_$p258 := $load.ref($M.0, out_$p257);
    goto corral_source_split_7648;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref($add.ref(out_$p162, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_7647;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} usb_ep_autoconfig_reset(out_$p255);
    goto corral_source_split_7646;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    out_$p255 := $load.ref($M.0, out_$p254);
    goto corral_source_split_7645;

  $bb67:
    out_$p254 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1)), $mul.ref(0, 1));
    goto corral_source_split_7644;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i234 == 1);
    goto $bb58;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb66:
    assume !(out_$i253 == 1);
    goto corral_source_split_7642;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    out_$i253 := $ne.i64(out_$i252, out_$i233);
    goto corral_source_split_7640;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    out_$i252 := $p2i.ref.i64(out_$p251);
    goto corral_source_split_7639;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(out_$p235, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7638;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref(out_$p249, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7637;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    out_$p249 := $bitcast.ref.ref(out_$p248);
    goto corral_source_split_7636;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    out_$p248 := $load.ref($M.0, out_$p247);
    goto corral_source_split_7635;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref($add.ref(out_$p235, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_7634;

  $bb62:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    out_$p240, out_$p241, out_$i242 := out_$p164, out_$p236, out_$i238;
    assume true;
    goto $bb62;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    out_$i239 := $ne.i32(out_$i238, 0);
    goto corral_source_split_7624;

  SeqInstr_153:
    call {:si_unique_call 915} {:cexpr "ret"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_7623;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} out_$i238 := usb_add_function(out_$p162, out_$p236);
    goto SeqInstr_152;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} list_del(out_$p237);
    goto corral_source_split_7622;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p237 := $add.ref($add.ref(out_$p236, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7621;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    call out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p235, out_$p236 := configfs_composite_bind_loop_$bb59(out_$p164, out_$i233, out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p235, out_$p236, out_$p162);
    goto $bb59_last;

  $bb59_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7619;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    out_$p235, out_$p236 := out_$p229, out_$p224;
    goto $bb59;

  $bb65:
    assume out_$i253 == 1;
    assume {:verifier.code 0} true;
    out_$p235, out_$p236 := out_$p250, out_$p235;
    assume false;
    return;

  $bb56:
    assume out_$i234 == 1;
    goto corral_source_split_7617;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    out_$i234 := $ne.i64(out_$i231, out_$i233);
    goto corral_source_split_7615;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    out_$i233 := $p2i.ref.i64(out_$p232);
    goto corral_source_split_7614;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref($add.ref(out_$p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(480, 1));
    goto corral_source_split_7613;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    out_$i231 := $p2i.ref.i64(out_$p230);
    goto corral_source_split_7612;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(out_$p223, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_7611;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref(out_$p228, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7610;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    out_$p228 := $bitcast.ref.ref(out_$p227);
    goto corral_source_split_7609;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    out_$p227 := $load.ref($M.0, out_$p226);
    goto corral_source_split_7608;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref($add.ref(out_$p223, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_7607;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    out_$p224 := $add.ref(out_$p223, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7606;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    out_$p223 := $bitcast.ref.ref(out_$p222);
    goto corral_source_split_7605;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    out_$p222 := $load.ref($M.0, out_$p221);
    goto corral_source_split_7604;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_7603;

  $bb43:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p219, out_$i218);
    goto corral_source_split_7601;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(out_$p162, $mul.ref(0, 224)), $mul.ref(41, 1));
    goto corral_source_split_7600;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i8($M.0, out_$p217);
    goto corral_source_split_7599;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(out_$p208, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7598;

  $bb53:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    out_$p213 := out_$p208;
    assume true;
    goto $bb53;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    out_$i212 := $trunc.i8.i1(out_$i211);
    goto corral_source_split_7591;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    out_$i211 := $zext.i1.i8(out_$i210);
    call {:si_unique_call 909} {:cexpr "tmp___7"} boogie_si_record_i8(out_$i211);
    goto corral_source_split_7590;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} out_$i210 := IS_ERR(out_$p209);
    goto corral_source_split_7589;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    out_$p209 := $bitcast.ref.ref(out_$p208);
    goto corral_source_split_7588;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_$p208 := usb_gstrings_attach(out_$p205, out_$p207, 1);
    goto corral_source_split_7587;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    out_$p207 := $bitcast.ref.ref(out_$p206);
    goto corral_source_split_7586;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref(out_$p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(496, 1));
    goto corral_source_split_7585;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(1096, 1));
    goto corral_source_split_7584;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p204, $0.ref);
    goto corral_source_split_7583;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(496, 1)), $mul.ref(out_$i202, 8));
    goto corral_source_split_7582;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i202 := $zext.i32.i64(out_$i178);
    goto corral_source_split_7581;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i177 == 1);
    goto $bb46;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    out_$i178 := out_$i201;
    goto $bb46;

  $bb50:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7579;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    out_$i201 := out_$i192;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    out_$i200 := $ne.i64(out_$i199, out_$i176);
    goto corral_source_split_7577;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    out_$i199 := $p2i.ref.i64(out_$p198);
    goto corral_source_split_7576;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p196, $mul.ref($sub.ref(0, 152), 168)), $mul.ref(152, 1));
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref(out_$p196, $mul.ref($sub.ref(0, 152), 168));
    goto corral_source_split_7574;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    out_$p196 := $bitcast.ref.ref(out_$p195);
    goto corral_source_split_7573;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    out_$p195 := $load.ref($M.0, out_$p194);
    goto corral_source_split_7572;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref($add.ref(out_$p179, $mul.ref(0, 168)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_7571;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    out_$i192 := $add.i32(out_$i180, 1);
    call {:si_unique_call 906} {:cexpr "i"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_7570;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p191, out_$p189);
    goto corral_source_split_7569;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    out_$p191 := $add.ref($add.ref($add.ref(out_$p179, $mul.ref(0, 168)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7568;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    out_$p189 := $load.ref($M.0, out_$p188);
    goto corral_source_split_7567;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(out_$p179, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_7566;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p187, out_$p185);
    goto corral_source_split_7565;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref($add.ref(out_$p179, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7564;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref(out_$p179, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_7563;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p184, out_$p179);
    goto corral_source_split_7562;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(496, 1)), $mul.ref(out_$i182, 8));
    goto corral_source_split_7561;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    out_$i182 := $zext.i32.i64(out_$i180);
    goto corral_source_split_7560;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7559;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    call out_$i182, out_$p184, out_$p185, out_$p187, out_$p188, out_$p189, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p179, out_$i180, out_$i201 := configfs_composite_bind_loop_$bb47(out_$p163, out_$i176, out_$i182, out_$p184, out_$p185, out_$p187, out_$p188, out_$p189, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p179, out_$i180, out_$i201);
    goto $bb47_last;

  $bb47_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7557;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    out_$p179, out_$i180 := out_$p172, 0;
    goto $bb47;

  $bb49:
    assume out_$i200 == 1;
    assume {:verifier.code 0} true;
    out_$p179, out_$i180 := out_$p197, out_$i192;
    assume false;
    return;

  $bb44:
    assume out_$i177 == 1;
    goto corral_source_split_7555;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    out_$i178 := 0;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i64(out_$i174, out_$i176);
    goto corral_source_split_7553;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    out_$i176 := $p2i.ref.i64(out_$p175);
    goto corral_source_split_7552;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(240, 1));
    goto corral_source_split_7551;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    out_$i174 := $p2i.ref.i64(out_$p173);
    goto corral_source_split_7550;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(out_$p171, $mul.ref($sub.ref(0, 152), 168)), $mul.ref(152, 1));
    goto corral_source_split_7549;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref(out_$p171, $mul.ref($sub.ref(0, 152), 168));
    goto corral_source_split_7548;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    out_$p171 := $bitcast.ref.ref(out_$p170);
    goto corral_source_split_7547;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    out_$p170 := $load.ref($M.0, out_$p169);
    goto corral_source_split_7546;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_7545;

  $bb42:
    assume out_$i167 == 1;
    goto corral_source_split_7544;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 0);
    goto corral_source_split_7542;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} out_$i166 := list_empty(out_$p165);
    call {:si_unique_call 905} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_7541;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(out_$p163, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(240, 1));
    goto corral_source_split_7540;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref(out_$p163, $mul.ref($sub.ref(0, 256), 520));
    goto corral_source_split_7539;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p163 := $bitcast.ref.ref(out_$p162);
    goto corral_source_split_7538;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb68_dummy:
    call {:si_unique_call 1} out_$p163, out_$p164, out_$p165, out_$i166, out_$i167, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i182, out_$p184, out_$p185, out_$p187, out_$p188, out_$p189, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p179, out_$i180, out_$i201, out_$i178, out_$i202, out_$p204, out_$p205, out_$p206, out_$p207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p217, out_$i218, out_$p219, out_$p221, out_$p222, out_$p223, out_$p224, out_$p226, out_$p227, out_$p228, out_$p229, out_$p230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p235, out_$p236, out_$p254, out_$p255, out_$p257, out_$p258, out_$p259, out_$p260, out_$p261, out_$i262, out_$i263, out_$p162 := configfs_composite_bind_loop_$bb40(in_$p3, in_$i160, out_$p163, out_$p164, out_$p165, out_$i166, out_$i167, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i182, out_$p184, out_$p185, out_$p187, out_$p188, out_$p189, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p179, out_$i180, out_$i201, out_$i178, out_$i202, out_$p204, out_$p205, out_$p206, out_$p207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p217, out_$i218, out_$p219, out_$p221, out_$p222, out_$p223, out_$p224, out_$p226, out_$p227, out_$p228, out_$p229, out_$p230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p235, out_$p236, out_$p254, out_$p255, out_$p257, out_$p258, out_$p259, out_$p260, out_$p261, out_$i262, out_$i263, out_$p162);
    return;

  exit:
    return;
}



procedure configfs_composite_bind_loop_$bb40(in_$p3: ref, in_$i160: i64, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$i174: i64, in_$p175: ref, in_$i176: i64, in_$i177: i1, in_$i182: i64, in_$p184: ref, in_$p185: ref, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$p191: ref, in_$i192: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$i199: i64, in_$i200: i1, in_$p179: ref, in_$i180: i32, in_$i201: i32, in_$i178: i32, in_$i202: i64, in_$p204: ref, in_$p205: ref, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$i210: i1, in_$i211: i8, in_$i212: i1, in_$p213: ref, in_$p217: ref, in_$i218: i8, in_$p219: ref, in_$p221: ref, in_$p222: ref, in_$p223: ref, in_$p224: ref, in_$p226: ref, in_$p227: ref, in_$p228: ref, in_$p229: ref, in_$p230: ref, in_$i231: i64, in_$p232: ref, in_$i233: i64, in_$i234: i1, in_$p237: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$i242: i32, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i252: i64, in_$i253: i1, in_$p235: ref, in_$p236: ref, in_$p254: ref, in_$p255: ref, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$i262: i64, in_$i263: i1, in_$p162: ref) returns (out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$i174: i64, out_$p175: ref, out_$i176: i64, out_$i177: i1, out_$i182: i64, out_$p184: ref, out_$p185: ref, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$p191: ref, out_$i192: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$i199: i64, out_$i200: i1, out_$p179: ref, out_$i180: i32, out_$i201: i32, out_$i178: i32, out_$i202: i64, out_$p204: ref, out_$p205: ref, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$i210: i1, out_$i211: i8, out_$i212: i1, out_$p213: ref, out_$p217: ref, out_$i218: i8, out_$p219: ref, out_$p221: ref, out_$p222: ref, out_$p223: ref, out_$p224: ref, out_$p226: ref, out_$p227: ref, out_$p228: ref, out_$p229: ref, out_$p230: ref, out_$i231: i64, out_$p232: ref, out_$i233: i64, out_$i234: i1, out_$p237: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$i242: i32, out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i252: i64, out_$i253: i1, out_$p235: ref, out_$p236: ref, out_$p254: ref, out_$p255: ref, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$i262: i64, out_$i263: i1, out_$p162: ref);
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr, $M.29, assertsPassed;



implementation configfs_composite_bind_loop_$bb25(in_$p3: ref, in_$i67: i64, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p94: ref, in_$i95: i32, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$p70: ref, in_$i71: i32, in_$i104: i32) returns (out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p94: ref, out_$i95: i32, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$p70: ref, out_$i71: i32, out_$i104: i32)
{

  entry:
    out_$i73, out_$p75, out_$p76, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p89, out_$p90, out_$p91, out_$p94, out_$i95, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p70, out_$i71, out_$i104 := in_$i73, in_$p75, in_$p76, in_$p79, in_$p80, in_$p81, in_$p84, in_$p85, in_$p86, in_$p89, in_$p90, in_$p91, in_$p94, in_$i95, in_$p97, in_$p98, in_$p99, in_$p100, in_$p101, in_$i102, in_$i103, in_$p70, in_$i71, in_$i104;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7442;

  $bb27:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$p70, out_$i71 := out_$p100, out_$i95;
    goto $bb27_dummy;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i95;
    assume true;
    goto $bb27;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i64(out_$i102, in_$i67);
    goto corral_source_split_7471;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    out_$i102 := $p2i.ref.i64(out_$p101);
    goto corral_source_split_7470;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p99, $mul.ref($sub.ref(0, 200), 216)), $mul.ref(200, 1));
    goto corral_source_split_7469;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref(out_$p99, $mul.ref($sub.ref(0, 200), 216));
    goto corral_source_split_7468;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    out_$p99 := $bitcast.ref.ref(out_$p98);
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_7466;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref(out_$p70, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_7465;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i71, 1);
    call {:si_unique_call 896} {:cexpr "i"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_7464;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p94, out_$p91);
    goto corral_source_split_7463;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref($add.ref(out_$p70, $mul.ref(0, 216)), $mul.ref(16, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_7462;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_7461;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p70, $mul.ref(0, 216)), $mul.ref(80, 1));
    goto corral_source_split_7460;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p89, out_$p86);
    goto corral_source_split_7459;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref($add.ref(out_$p70, $mul.ref(0, 216)), $mul.ref(16, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_7458;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_7457;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p70, $mul.ref(0, 216)), $mul.ref(72, 1));
    goto corral_source_split_7456;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p84, out_$p81);
    goto corral_source_split_7455;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref($add.ref(out_$p70, $mul.ref(0, 216)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7454;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_7453;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p70, $mul.ref(0, 216)), $mul.ref(64, 1));
    goto corral_source_split_7452;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p79, out_$p76);
    goto corral_source_split_7451;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(out_$p70, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7450;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto corral_source_split_7449;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p70, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_7448;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p75, out_$p70);
    goto corral_source_split_7447;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 832), 1336)), $mul.ref(760, 1)), $mul.ref(out_$i73, 8));
    goto corral_source_split_7446;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i32.i64(out_$i71);
    goto corral_source_split_7445;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7444;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i73, out_$p75, out_$p76, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p89, out_$p90, out_$p91, out_$p94, out_$i95, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p70, out_$i71, out_$i104 := configfs_composite_bind_loop_$bb25(in_$p3, in_$i67, out_$i73, out_$p75, out_$p76, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p89, out_$p90, out_$p91, out_$p94, out_$i95, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p70, out_$i71, out_$i104);
    return;

  exit:
    return;
}



procedure configfs_composite_bind_loop_$bb25(in_$p3: ref, in_$i67: i64, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p94: ref, in_$i95: i32, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$p70: ref, in_$i71: i32, in_$i104: i32) returns (out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p94: ref, out_$i95: i32, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$p70: ref, out_$i71: i32, out_$i104: i32);
  modifies $M.0;



implementation configfs_composite_bind_loop_$bb12(in_$i30: i64, in_$p33: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p32: ref) returns (out_$p33: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p32: ref)
{

  entry:
    out_$p33, out_$p35, out_$i36, out_$i37, out_$p38, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p32 := in_$p33, in_$p35, in_$i36, in_$i37, in_$p38, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p32;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7397;

  $bb17:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p32 := out_$p52;
    goto $bb17_dummy;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, in_$i30);
    goto corral_source_split_7421;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p51, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p51, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7418;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_7417;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_7416;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p32, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_7415;

  $bb15:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    out_$p38 := out_$p32;
    assume true;
    goto $bb15;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_7403;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} out_$i36 := list_empty(out_$p35);
    call {:si_unique_call 892} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_7402;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p33, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(480, 1));
    goto corral_source_split_7401;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    goto corral_source_split_7400;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_7399;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p33, out_$p35, out_$i36, out_$i37, out_$p38, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p32 := configfs_composite_bind_loop_$bb12(in_$i30, out_$p33, out_$p35, out_$i36, out_$i37, out_$p38, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p32);
    return;

  exit:
    return;
}



procedure configfs_composite_bind_loop_$bb12(in_$i30: i64, in_$p33: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p32: ref) returns (out_$p33: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p32: ref);



implementation purge_configs_funcs_loop_$bb9(in_$p0: ref, in_$p14: ref, in_$i29: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p31: ref, in_$p32: ref, in_$p13: ref) returns (out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p31: ref, out_$p32: ref)
{

  entry:
    out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32 := in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p31, in_$p32;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7722;

  $bb14:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$p31, out_$p32 := out_$p51, out_$p31;
    goto $bb14_dummy;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, in_$i29);
    goto corral_source_split_7748;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_7747;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p31, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7746;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p50, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7745;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_7744;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_7743;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p31, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_7742;

  $bb12:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_165:
    goto corral_source_split_7740;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    call {:si_unique_call 929} devirtbounce.2(out_$p46, in_$p13, out_$p32);
    goto SeqInstr_164;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p32, $mul.ref(0, 200)), $mul.ref(72, 1));
    goto corral_source_split_7739;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} dev_err.ref.ref.ref.ref(out_$p42, .str.17, out_$p44, out_$p32);
    goto corral_source_split_7738;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_7737;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p32, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_7736;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_7735;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_7734;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(0, 1));
    goto corral_source_split_7733;

  $bb11:
    assume out_$i38 == 1;
    goto corral_source_split_7732;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_7730;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_7729;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_7728;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p32, $mul.ref(0, 200)), $mul.ref(72, 1));
    goto corral_source_split_7727;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} list_move_tail(out_$p33, out_$p34);
    goto corral_source_split_7726;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p14, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(480, 1));
    goto corral_source_split_7725;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7724;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32 := purge_configs_funcs_loop_$bb9(in_$p0, in_$p14, in_$i29, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32, in_$p13);
    return;

  exit:
    return;
}



procedure purge_configs_funcs_loop_$bb9(in_$p0: ref, in_$p14: ref, in_$i29: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p31: ref, in_$p32: ref, in_$p13: ref) returns (out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p31: ref, out_$p32: ref);
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.0, $M.29, $CurrAddr, assertsPassed;



implementation purge_configs_funcs_loop_$bb4(in_$p0: ref, in_$i11: i64, in_$p14: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p31: ref, in_$p32: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i8, in_$i60: i8, in_$p61: ref, in_$i62: i8, in_$i63: i8, in_$p64: ref, in_$i65: i8, in_$i66: i8, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p13: ref, in_cmdloc_dummy_var_44: [ref]i8, in_cmdloc_dummy_var_45: [ref]i8) returns (out_$p14: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p31: ref, out_$p32: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i8, out_$i60: i8, out_$p61: ref, out_$i62: i8, out_$i63: i8, out_$p64: ref, out_$i65: i8, out_$i66: i8, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p13: ref, out_cmdloc_dummy_var_44: [ref]i8, out_cmdloc_dummy_var_45: [ref]i8)
{

  entry:
    out_$p14, out_$p17, out_$p18, out_$p19, out_$p20, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p13, out_cmdloc_dummy_var_44, out_cmdloc_dummy_var_45 := in_$p14, in_$p17, in_$p18, in_$p19, in_$p20, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p31, in_$p32, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p13, in_cmdloc_dummy_var_44, in_cmdloc_dummy_var_45;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7702;

  $bb17:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p71;
    goto $bb17_dummy;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, in_$i11);
    goto corral_source_split_7775;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_7774;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p70, $mul.ref($sub.ref(0, 56), 224)), $mul.ref(56, 1));
    goto corral_source_split_7773;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p70, $mul.ref($sub.ref(0, 56), 224));
    goto corral_source_split_7772;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_7771;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_7770;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 224)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_7769;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p64, out_$i66);
    goto corral_source_split_7768;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i8(out_$i65, $sub.i8(0, 5));
    goto corral_source_split_7767;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.0, out_$p64);
    goto corral_source_split_7766;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p13, $mul.ref(0, 224)), $mul.ref(89, 1));
    goto corral_source_split_7765;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p61, out_$i63);
    goto corral_source_split_7764;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i8(out_$i62, $sub.i8(0, 3));
    goto corral_source_split_7763;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.0, out_$p61);
    goto corral_source_split_7762;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p13, $mul.ref(0, 224)), $mul.ref(89, 1));
    goto corral_source_split_7761;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p58, out_$i60);
    goto corral_source_split_7760;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i8(out_$i59, $sub.i8(0, 2));
    goto corral_source_split_7759;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i8($M.0, out_$p58);
    goto corral_source_split_7758;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p13, $mul.ref(0, 224)), $mul.ref(89, 1));
    goto corral_source_split_7757;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 930} out_cmdloc_dummy_var_45 := $memset.i8(out_cmdloc_dummy_var_44, out_$p57, 0, 128, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_45;
    goto corral_source_split_7756;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_7755;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p13, $mul.ref(0, 224)), $mul.ref(96, 1));
    goto corral_source_split_7754;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p55, 0);
    goto corral_source_split_7753;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p13, $mul.ref(0, 224)), $mul.ref(88, 1));
    goto corral_source_split_7752;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb8;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15:
    assume !(out_$i54 == 1);
    goto corral_source_split_7750;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, out_$i29);
    goto corral_source_split_7748;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_7747;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p31, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7746;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p50, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7745;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_7744;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_7743;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p31, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_7742;

  $bb12:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_165:
    goto corral_source_split_7740;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    call {:si_unique_call 929} devirtbounce.2(out_$p46, out_$p13, out_$p32);
    goto SeqInstr_164;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p32, $mul.ref(0, 200)), $mul.ref(72, 1));
    goto corral_source_split_7739;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} dev_err.ref.ref.ref.ref(out_$p42, .str.17, out_$p44, out_$p32);
    goto corral_source_split_7738;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_7737;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p32, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_7736;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 1584)), $mul.ref(144, 1));
    goto corral_source_split_7735;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_7734;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1336)), $mul.ref(1096, 1)), $mul.ref(0, 1));
    goto corral_source_split_7733;

  $bb11:
    assume out_$i38 == 1;
    goto corral_source_split_7732;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_7730;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_7729;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_7728;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p32, $mul.ref(0, 200)), $mul.ref(72, 1));
    goto corral_source_split_7727;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} list_move_tail(out_$p33, out_$p34);
    goto corral_source_split_7726;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p14, $mul.ref($sub.ref(0, 256), 520)), $mul.ref(480, 1));
    goto corral_source_split_7725;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_7724;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32 := purge_configs_funcs_loop_$bb9(in_$p0, out_$p14, out_$i29, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32, out_$p13);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7722;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    out_$p31, out_$p32 := out_$p25, out_$p20;
    goto $bb9;

  $bb14:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$p31, out_$p32 := out_$p51, out_$p31;
    assume false;
    return;

  $bb6:
    assume out_$i30 == 1;
    goto corral_source_split_7720;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i27, out_$i29);
    goto corral_source_split_7718;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_7717;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p13, $mul.ref(0, 224)), $mul.ref(72, 1));
    goto corral_source_split_7716;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_7715;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p19, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_7714;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7713;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_7712;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_7711;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_7710;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p19, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_7709;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_7708;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_7707;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 224)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_7706;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    goto corral_source_split_7705;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_7704;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p14, out_$p17, out_$p18, out_$p19, out_$p20, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p13, out_cmdloc_dummy_var_44, out_cmdloc_dummy_var_45 := purge_configs_funcs_loop_$bb4(in_$p0, in_$i11, out_$p14, out_$p17, out_$p18, out_$p19, out_$p20, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p13, out_cmdloc_dummy_var_44, out_cmdloc_dummy_var_45);
    return;

  exit:
    return;
}



procedure purge_configs_funcs_loop_$bb4(in_$p0: ref, in_$i11: i64, in_$p14: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p31: ref, in_$p32: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i8, in_$i60: i8, in_$p61: ref, in_$i62: i8, in_$i63: i8, in_$p64: ref, in_$i65: i8, in_$i66: i8, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p13: ref, in_cmdloc_dummy_var_44: [ref]i8, in_cmdloc_dummy_var_45: [ref]i8) returns (out_$p14: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p31: ref, out_$p32: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i8, out_$i60: i8, out_$p61: ref, out_$i62: i8, out_$i63: i8, out_$p64: ref, out_$i65: i8, out_$i66: i8, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p13: ref, out_cmdloc_dummy_var_44: [ref]i8, out_cmdloc_dummy_var_45: [ref]i8);
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed;



implementation config_usb_cfg_link_loop_$bb20(in_$p9: ref, in_$i49: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p51: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p51: ref)
{

  entry:
    out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p51 := in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p51;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8974;

  $bb25:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$p51 := out_$p61;
    goto $bb25_dummy;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, in_$i49);
    goto corral_source_split_8990;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_8989;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p60, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_8988;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p60, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_8987;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_8986;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_8985;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p51, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_8984;

  $bb23:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i64(out_$i54, out_$i55);
    goto corral_source_split_8980;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(in_$p9);
    goto corral_source_split_8979;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_8978;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_8977;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_8976;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p51 := config_usb_cfg_link_loop_$bb20(in_$p9, in_$i49, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p51);
    return;

  exit:
    return;
}



procedure config_usb_cfg_link_loop_$bb20(in_$p9: ref, in_$i49: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p51: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p51: ref);



implementation config_usb_cfg_link_loop_$bb4(in_$p9: ref, in_$i19: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p22: ref, in_$p36: ref) returns (out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p22: ref, out_$p36: ref)
{

  entry:
    out_$i23, out_$i24, out_$i25, out_$p26, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p22, out_$p36 := in_$i23, in_$i24, in_$i25, in_$p26, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p22, in_$p36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8933;

  $bb10:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p22 := out_$p32;
    goto $bb10_dummy;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p32;
    assume true;
    goto $bb10;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, in_$i19);
    goto corral_source_split_8952;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_8951;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p31, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(112, 1));
    goto corral_source_split_8950;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p31, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_8949;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_8948;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_8947;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 152)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_8946;

  $bb7:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p22;
    assume true;
    goto $bb7;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i23, out_$i24);
    goto corral_source_split_8937;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(in_$p9);
    goto corral_source_split_8936;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_8935;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$i25, out_$p26, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p22, out_$p36 := config_usb_cfg_link_loop_$bb4(in_$p9, in_$i19, out_$i23, out_$i24, out_$i25, out_$p26, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p22, out_$p36);
    return;

  exit:
    return;
}



procedure config_usb_cfg_link_loop_$bb4(in_$p9: ref, in_$i19: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p22: ref, in_$p36: ref) returns (out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p22: ref, out_$p36: ref);



implementation config_usb_cfg_unlink_loop_$bb10(in_$p9: ref, in_$i38: i64, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p40: ref) returns (out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p40: ref)
{

  entry:
    out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p40 := in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p40;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9057;

  $bb16:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p40 := out_$p53;
    goto $bb16_dummy;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, in_$i38);
    goto corral_source_split_9078;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_9077;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p52, $mul.ref($sub.ref(0, 168), 200)), $mul.ref(168, 1));
    goto corral_source_split_9076;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p52, $mul.ref($sub.ref(0, 168), 200));
    goto corral_source_split_9075;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_9074;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_9073;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p40, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_9072;

  $bb13:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p40;
    assume true;
    goto $bb13;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i64(out_$i43, out_$i44);
    goto corral_source_split_9063;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(in_$p9);
    goto corral_source_split_9062;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_9061;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_9060;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_9059;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p40 := config_usb_cfg_unlink_loop_$bb10(in_$p9, in_$i38, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p40);
    return;

  exit:
    return;
}



procedure config_usb_cfg_unlink_loop_$bb10(in_$p9: ref, in_$i38: i64, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p40: ref) returns (out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p40: ref);



implementation gadget_config_name_strings_make_loop_$bb12(in_$p3: ref, in_$i24: i64, in_$p30: ref, in_$i31: i16, in_$i32: i32, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i27: i32, in_$p28: ref, in_$i47: i32) returns (out_$p30: ref, out_$i31: i16, out_$i32: i32, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i27: i32, out_$p28: ref, out_$i47: i32)
{

  entry:
    out_$p30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i27, out_$p28, out_$i47 := in_$p30, in_$i31, in_$i32, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i27, in_$p28, in_$i47;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9203;

  $bb17:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i27, out_$p28 := out_$i38, out_$p43;
    goto $bb17_dummy;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i38;
    assume true;
    goto $bb17;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, in_$i24);
    goto corral_source_split_9222;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_9221;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p42, $mul.ref($sub.ref(0, 152), 168)), $mul.ref(152, 1));
    goto corral_source_split_9220;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p42, $mul.ref($sub.ref(0, 152), 168));
    goto corral_source_split_9219;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_9218;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.40, out_$p40);
    goto corral_source_split_9217;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 168)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_9216;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i27, 1);
    call {:si_unique_call 1223} {:cexpr "langs"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_9215;

  $bb15:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i32, out_$i36);
    goto corral_source_split_9211;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i35);
    goto corral_source_split_9210;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    goto corral_source_split_9209;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9208;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i32(out_$i31);
    goto corral_source_split_9207;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i16($M.39, out_$p30);
    goto corral_source_split_9206;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9205;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i27, out_$p28, out_$i47 := gadget_config_name_strings_make_loop_$bb12(in_$p3, in_$i24, out_$p30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i27, out_$p28, out_$i47);
    return;

  exit:
    return;
}



procedure gadget_config_name_strings_make_loop_$bb12(in_$p3: ref, in_$i24: i64, in_$p30: ref, in_$i31: i16, in_$i32: i32, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i27: i32, in_$p28: ref, in_$i47: i32) returns (out_$p30: ref, out_$i31: i16, out_$i32: i32, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i27: i32, out_$p28: ref, out_$i47: i32);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i167: i32, in_$i168: i1, in_$i169: i1, in_$i170: i1, in_$i171: i1, in_$i172: i1, in_$i173: i1, in_$i174: i1, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i1, in_$i179: i1, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$i212: i1, in_$i213: i1, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i64, in_$i219: i32, in_$i220: i1, in_$p221: ref, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i1, in_$i227: i1, in_$i228: i1, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i64, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i1, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$p249: ref, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i1, in_$p263: ref, in_$p264: ref, in_$i265: i64, in_$i267: i32, in_$i268: i1, in_$p269: ref, in_$p270: ref, in_$i271: i64, in_$i273: i32, in_$i274: i1, in_$i276: i32, in_$i277: i32, in_$i278: i32, in_$i279: i1, in_$i280: i32, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i32, in_$i287: i1, in_$p288: ref, in_$p289: ref, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i299: i32, in_$i300: i32, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$p304: ref, in_$i305: i64, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$p310: ref, in_$i311: i64, in_$i313: i32, in_$i314: i1, in_$i316: i32, in_$i317: i32, in_$i318: i32, in_$i319: i1, in_$i320: i32, in_$i321: i1, in_$i322: i1, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$p331: ref, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$p336: ref, in_$i338: i32, in_$i339: i1, in_$p340: ref, in_$i341: i32, in_$i342: i32, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$p346: ref, in_$i348: i32, in_$i349: i1, in_$p350: ref, in_$p351: ref, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$p356: ref, in_$i357: i64, in_$i359: i32, in_$i360: i1, in_$p361: ref, in_$p362: ref, in_$i363: i64, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$p368: ref, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$p373: ref, in_$i375: i32, in_$i376: i1, in_$i378: i32, in_$i379: i32, in_$i380: i32, in_$i381: i1, in_$i382: i32, in_$i383: i1, in_$i384: i1, in_$i385: i1, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$i389: i64, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i395: i32, in_$i396: i1, in_$i397: i32, in_$i398: i1, in_$i399: i1, in_$i400: i1, in_$i401: i1, in_$i402: i1, in_$i403: i1, in_$i404: i1, in_$i405: i1, in_$i406: i32, in_$i407: i1, in_$p408: ref, in_$i409: i32, in_$i410: i1, in_$p411: ref, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$i415: i32, in_$i416: i32, in_$i417: i32, in_$i418: i1, in_$p419: ref, in_$i420: i32, in_$i421: i32, in_$i422: i1, in_$i423: i32, in_$i424: i32, in_$i425: i32, in_$i426: i1, in_$p427: ref, in_$i428: i32, in_$i429: i1, in_$p430: ref, in_$i431: i32, in_$i432: i1, in_$p433: ref, in_$i434: i32, in_$i435: i1, in_$p436: ref, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$i440: i32, in_$i441: i1, in_$p442: ref, in_$i443: i32, in_$i444: i32, in_$i445: i1, in_$i446: i32, in_$i447: i1, in_$p448: ref, in_$i449: i32, in_$i450: i1, in_$i451: i32, in_$i452: i1, in_$i453: i1, in_$i454: i1, in_$i455: i32, in_$i456: i1, in_$p457: ref, in_$i458: i32, in_$i459: i1, in_$p460: ref, in_$i462: i32, in_$i463: i1, in_$i464: i32, in_$i465: i1, in_$i466: i1, in_$i467: i1, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i471: i64, in_$i473: i32, in_$i474: i1, in_$p475: ref, in_$i477: i32, in_$i478: i1, in_$i479: i32, in_$i480: i1, in_$i481: i1, in_$i482: i1, in_$i483: i32, in_$i484: i1, in_$p485: ref, in_$i486: i64, in_$i488: i32, in_$i489: i1, in_$p490: ref, in_$i492: i32, in_$i493: i1, in_$i494: i32, in_$i495: i1, in_$i496: i1, in_$i497: i1, in_$i498: i32, in_$i499: i1, in_$p500: ref, in_$i501: i64, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$i507: i32, in_$i508: i1, in_$i509: i32, in_$i510: i1, in_$i511: i1, in_$i512: i1, in_$i513: i1, in_$i514: i1, in_$i515: i32, in_$i516: i1, in_$p517: ref, in_$p518: ref, in_$i520: i32, in_$i521: i1, in_$p522: ref, in_$p523: ref, in_$i525: i32, in_$i526: i1, in_$p527: ref, in_$i528: i32, in_$i529: i32, in_$i530: i32, in_$i531: i1, in_$p532: ref, in_$p533: ref, in_$i534: i64, in_$i536: i32, in_$i537: i1, in_$p538: ref, in_$p539: ref, in_$i540: i64, in_$i542: i32, in_$i543: i1, in_$i545: i32, in_$i546: i32, in_$i547: i32, in_$i548: i1, in_$i549: i32, in_$i550: i1, in_$i551: i1, in_$i552: i1, in_$i553: i32, in_$i554: i1, in_$p555: ref, in_$i556: i64, in_$i558: i32, in_$i559: i1, in_$p560: ref, in_$i562: i32, in_$i563: i1, in_$i564: i32, in_$i565: i1, in_$i566: i1, in_$i567: i1, in_$i568: i32, in_$i569: i1, in_$p570: ref, in_$i571: i64, in_$i573: i32, in_$i574: i1, in_$p575: ref, in_$i577: i32, in_$i578: i1, in_$i579: i32, in_$i580: i1, in_$i581: i1, in_$i582: i1, in_$i583: i32, in_$i584: i1, in_$p585: ref, in_$i586: i32, in_$i587: i1, in_$p588: ref, in_$i590: i32, in_$i591: i1, in_$i592: i32, in_$i593: i1, in_$i594: i1, in_$i595: i1, in_$i596: i32, in_$i597: i1, in_$p598: ref, in_$i599: i32, in_$i600: i1, in_$p601: ref, in_$i603: i32, in_$i604: i1, in_$i605: i32, in_$i606: i1, in_$i607: i1, in_$i608: i1, in_$i609: i32, in_$i610: i1, in_$p611: ref, in_$i612: i64, in_$i614: i32, in_$i615: i1, in_$p616: ref, in_$i618: i32, in_$i619: i1, in_$i620: i32, in_$i621: i1, in_$i622: i1, in_$i623: i1, in_$i624: i1, in_$i625: i1, in_$i626: i1, in_$i627: i1, in_$i628: i32, in_$i629: i1, in_$p630: ref, in_$p631: ref, in_$i633: i32, in_$i634: i1, in_$p635: ref, in_$p636: ref, in_$i638: i32, in_$i639: i1, in_$p640: ref, in_$i641: i32, in_$i642: i32, in_$i643: i32, in_$i644: i1, in_$p645: ref, in_$p646: ref, in_$i648: i32, in_$i649: i1, in_$p650: ref, in_$p651: ref, in_$i653: i32, in_$i654: i1, in_$p655: ref, in_$p656: ref, in_$i657: i64, in_$i659: i32, in_$i660: i1, in_$p661: ref, in_$p662: ref, in_$i663: i64, in_$i665: i32, in_$i666: i1, in_$p667: ref, in_$p668: ref, in_$i670: i32, in_$i671: i1, in_$p672: ref, in_$p673: ref, in_$i675: i32, in_$i676: i1, in_$i678: i32, in_$i679: i32, in_$i680: i32, in_$i681: i1, in_$i682: i32, in_$i683: i1, in_$i684: i1, in_$i685: i1, in_$i686: i32, in_$i687: i1, in_$p688: ref, in_$i689: i64, in_$i691: i32, in_$i692: i1, in_$p693: ref, in_$i695: i32, in_$i696: i1, in_$i697: i32, in_$i698: i1, in_$i699: i1, in_$i700: i1, in_$i701: i32, in_$i702: i1, in_$p703: ref, in_$i704: i64, in_$i706: i32, in_$i707: i1, in_$p708: ref, in_$i710: i32, in_$i711: i1, in_$i712: i32, in_$i713: i1, in_$i714: i1, in_$i715: i1, in_$i716: i32, in_$i717: i1, in_$p718: ref, in_$i719: i64, in_$i721: i32, in_$i722: i1, in_$p723: ref, in_$i725: i32, in_$i726: i1, in_$i727: i32, in_$i728: i1, in_$i729: i1, in_$i730: i1, in_$i731: i32, in_$i732: i1, in_$p733: ref, in_$i734: i64, in_$i736: i32, in_$i737: i1, in_$p738: ref, in_$i740: i32, in_$i741: i1, in_$i742: i32, in_$i743: i1, in_$i744: i1, in_$i745: i1, in_$i746: i32, in_$i747: i1, in_$i748: i32, in_$i749: i1, in_$i750: i32, in_$i751: i1, in_$i752: i32, in_$i753: i32, in_$i754: i1, in_$i755: i32, in_$i756: i1, in_$i757: i32, in_$i758: i1, in_$i759: i32, in_$i760: i1, in_$i761: i1, in_$i762: i1, in_$i763: i32, in_$i764: i1, in_$p765: ref, in_$i766: i64, in_$i768: i32, in_$i769: i1, in_$p770: ref, in_$i772: i32, in_$i773: i1, in_$i774: i32, in_$i775: i1, in_$i776: i1, in_$i777: i1, in_$i778: i32, in_$i779: i1, in_$p780: ref, in_$i781: i32, in_$i782: i1, in_$p783: ref, in_$i785: i32, in_$i786: i1, in_$i787: i32, in_$i788: i1, in_$i789: i1, in_$i790: i1, in_$i791: i32, in_$i792: i1, in_$p793: ref, in_$i794: i64, in_$i796: i32, in_$i797: i1, in_$p798: ref, in_$i800: i32, in_$i801: i1, in_$i802: i32, in_$i803: i1, in_$i804: i1, in_$i805: i1, in_$i806: i32, in_$i807: i1, in_$p808: ref, in_$i809: i32, in_$i810: i1, in_$p811: ref, in_$i813: i32, in_$i814: i1, in_$i815: i32, in_$i816: i1, in_$i817: i1, in_$i818: i1, in_$i819: i32, in_$i820: i1, in_$p821: ref, in_$i822: i64, in_$i824: i32, in_$i825: i1, in_$p826: ref, in_$i828: i32, in_$i829: i1, in_$i830: i32, in_$i831: i1, in_$i832: i1, in_$i833: i1, in_$i834: i32, in_$i835: i1, in_$p836: ref, in_$i837: i64, in_$i839: i32, in_$i840: i1, in_$p841: ref, in_$i843: i32, in_$i844: i1, in_$i845: i32, in_$i846: i1, in_$i847: i1, in_$i848: i1, in_$i849: i32, in_$i850: i1, in_$p851: ref, in_$i852: i64, in_$i854: i32, in_$i855: i1, in_$p856: ref, in_$i858: i32, in_$i859: i1, in_$i860: i32, in_$i861: i1, in_$i862: i1, in_$i863: i1, in_$i864: i32, in_$i865: i1, in_$p866: ref, in_$i867: i64, in_$i869: i32, in_$i870: i1, in_$p871: ref, in_$i873: i32, in_$i874: i1, in_$i875: i32, in_$i876: i1, in_$i877: i1, in_$i878: i1, in_$i879: i1, in_$i880: i1, in_$i881: i32, in_$i882: i1, in_$p883: ref, in_$p884: ref, in_$i886: i32, in_$i887: i1, in_$p888: ref, in_$p889: ref, in_$i891: i32, in_$i892: i1, in_$p893: ref, in_$i894: i32, in_$i895: i32, in_$i896: i32, in_$i897: i1, in_$p898: ref, in_$p899: ref, in_$i900: i64, in_$i902: i32, in_$i903: i1, in_$p904: ref, in_$p905: ref, in_$i906: i64, in_$i908: i32, in_$i909: i1, in_$i911: i32, in_$i912: i32, in_$i913: i32, in_$i914: i1, in_$i915: i32, in_$i916: i1, in_$i917: i32, in_$i918: i1, in_$i919: i1, in_$i920: i1, in_$i921: i32, in_$i922: i1, in_$p923: ref, in_$i924: i64, in_$i926: i32, in_$i927: i1, in_$p928: ref, in_$i930: i32, in_$i931: i1, in_$i932: i32, in_$i933: i1, in_$i934: i1, in_$i935: i1, in_$i936: i32, in_$i937: i1, in_$p938: ref, in_$i939: i64, in_$i941: i32, in_$i942: i1, in_$p943: ref, in_$i945: i32, in_$i946: i1, in_$i947: i32, in_$i948: i1, in_$i949: i1, in_$i950: i1, in_$i951: i32, in_$i952: i1, in_$p953: ref, in_$i954: i64, in_$i956: i32, in_$i957: i1, in_$p958: ref, in_$i960: i32, in_$i961: i1, in_$i962: i32, in_$i963: i1, in_$i964: i32, in_$i965: i1, in_$i966: i1, in_$i967: i1, in_$i968: i32, in_$i969: i1, in_$p970: ref, in_$i971: i32, in_$i972: i1, in_$p973: ref, in_$i975: i32, in_$i976: i1, in_$i977: i32, in_$i978: i1, in_$i979: i1, in_$i980: i1, in_$i981: i32, in_$i982: i1, in_$p983: ref, in_$p984: ref, in_$i986: i32, in_$i987: i1, in_$p988: ref, in_$p989: ref, in_$i990: i64, in_vslice_dummy_var_118: i64, in_vslice_dummy_var_119: i64, in_vslice_dummy_var_120: i64, in_vslice_dummy_var_121: i64, in_vslice_dummy_var_122: i64, in_vslice_dummy_var_123: i64, in_vslice_dummy_var_124: i64, in_vslice_dummy_var_125: i64, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i64, in_vslice_dummy_var_128: i64, in_vslice_dummy_var_129: i64, in_vslice_dummy_var_130: i64, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i64, in_vslice_dummy_var_133: i64, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i64, in_vslice_dummy_var_137: i64, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i64, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: ref, in_vslice_dummy_var_144: i64, in_vslice_dummy_var_145: i64, in_vslice_dummy_var_146: i64, in_vslice_dummy_var_147: i64, in_vslice_dummy_var_148: i64, in_vslice_dummy_var_149: i64, in_vslice_dummy_var_150: i64, in_vslice_dummy_var_151: i64, in_vslice_dummy_var_152: i64, in_vslice_dummy_var_153: i64, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i64, in_vslice_dummy_var_156: i64, in_vslice_dummy_var_157: i64, in_vslice_dummy_var_158: i64, in_vslice_dummy_var_159: ref, in_vslice_dummy_var_160: ref, in_vslice_dummy_var_161: i64, in_vslice_dummy_var_162: i64, in_vslice_dummy_var_163: i64, in_vslice_dummy_var_164: i64, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i64, in_vslice_dummy_var_168: i64, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i64, in_vslice_dummy_var_173: i64, in_vslice_dummy_var_174: i64, in_vslice_dummy_var_175: i64, in_vslice_dummy_var_176: i64, in_vslice_dummy_var_177: i64, in_vslice_dummy_var_178: i64, in_vslice_dummy_var_179: i64, in_vslice_dummy_var_180: i64, in_vslice_dummy_var_181: i64, in_vslice_dummy_var_182: ref, in_vslice_dummy_var_183: i64, in_vslice_dummy_var_184: i64, in_vslice_dummy_var_185: ref, in_vslice_dummy_var_186: i64, in_vslice_dummy_var_187: i64, in_vslice_dummy_var_188: i64, in_vslice_dummy_var_189: i64, in_vslice_dummy_var_190: i64, in_vslice_dummy_var_191: i64, in_vslice_dummy_var_192: i64, in_vslice_dummy_var_193: i64, in_vslice_dummy_var_194: i64, in_vslice_dummy_var_195: i64, in_vslice_dummy_var_196: i64, in_vslice_dummy_var_197: i64, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: i64, in_vslice_dummy_var_200: i64, in_vslice_dummy_var_201: i64, in_vslice_dummy_var_202: i64, in_vslice_dummy_var_203: i64, in_vslice_dummy_var_204: i64, in_vslice_dummy_var_205: ref, in_vslice_dummy_var_206: i64, in_vslice_dummy_var_207: i64) returns (out_$i167: i32, out_$i168: i1, out_$i169: i1, out_$i170: i1, out_$i171: i1, out_$i172: i1, out_$i173: i1, out_$i174: i1, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i1, out_$i179: i1, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$i212: i1, out_$i213: i1, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i64, out_$i219: i32, out_$i220: i1, out_$p221: ref, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i1, out_$i227: i1, out_$i228: i1, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i64, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i1, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$p249: ref, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i1, out_$p263: ref, out_$p264: ref, out_$i265: i64, out_$i267: i32, out_$i268: i1, out_$p269: ref, out_$p270: ref, out_$i271: i64, out_$i273: i32, out_$i274: i1, out_$i276: i32, out_$i277: i32, out_$i278: i32, out_$i279: i1, out_$i280: i32, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i32, out_$i287: i1, out_$p288: ref, out_$p289: ref, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i299: i32, out_$i300: i32, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$p304: ref, out_$i305: i64, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$p310: ref, out_$i311: i64, out_$i313: i32, out_$i314: i1, out_$i316: i32, out_$i317: i32, out_$i318: i32, out_$i319: i1, out_$i320: i32, out_$i321: i1, out_$i322: i1, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$p331: ref, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$p336: ref, out_$i338: i32, out_$i339: i1, out_$p340: ref, out_$i341: i32, out_$i342: i32, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$p346: ref, out_$i348: i32, out_$i349: i1, out_$p350: ref, out_$p351: ref, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$p356: ref, out_$i357: i64, out_$i359: i32, out_$i360: i1, out_$p361: ref, out_$p362: ref, out_$i363: i64, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$p368: ref, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$p373: ref, out_$i375: i32, out_$i376: i1, out_$i378: i32, out_$i379: i32, out_$i380: i32, out_$i381: i1, out_$i382: i32, out_$i383: i1, out_$i384: i1, out_$i385: i1, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$i389: i64, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i395: i32, out_$i396: i1, out_$i397: i32, out_$i398: i1, out_$i399: i1, out_$i400: i1, out_$i401: i1, out_$i402: i1, out_$i403: i1, out_$i404: i1, out_$i405: i1, out_$i406: i32, out_$i407: i1, out_$p408: ref, out_$i409: i32, out_$i410: i1, out_$p411: ref, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$i415: i32, out_$i416: i32, out_$i417: i32, out_$i418: i1, out_$p419: ref, out_$i420: i32, out_$i421: i32, out_$i422: i1, out_$i423: i32, out_$i424: i32, out_$i425: i32, out_$i426: i1, out_$p427: ref, out_$i428: i32, out_$i429: i1, out_$p430: ref, out_$i431: i32, out_$i432: i1, out_$p433: ref, out_$i434: i32, out_$i435: i1, out_$p436: ref, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$i440: i32, out_$i441: i1, out_$p442: ref, out_$i443: i32, out_$i444: i32, out_$i445: i1, out_$i446: i32, out_$i447: i1, out_$p448: ref, out_$i449: i32, out_$i450: i1, out_$i451: i32, out_$i452: i1, out_$i453: i1, out_$i454: i1, out_$i455: i32, out_$i456: i1, out_$p457: ref, out_$i458: i32, out_$i459: i1, out_$p460: ref, out_$i462: i32, out_$i463: i1, out_$i464: i32, out_$i465: i1, out_$i466: i1, out_$i467: i1, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i471: i64, out_$i473: i32, out_$i474: i1, out_$p475: ref, out_$i477: i32, out_$i478: i1, out_$i479: i32, out_$i480: i1, out_$i481: i1, out_$i482: i1, out_$i483: i32, out_$i484: i1, out_$p485: ref, out_$i486: i64, out_$i488: i32, out_$i489: i1, out_$p490: ref, out_$i492: i32, out_$i493: i1, out_$i494: i32, out_$i495: i1, out_$i496: i1, out_$i497: i1, out_$i498: i32, out_$i499: i1, out_$p500: ref, out_$i501: i64, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$i507: i32, out_$i508: i1, out_$i509: i32, out_$i510: i1, out_$i511: i1, out_$i512: i1, out_$i513: i1, out_$i514: i1, out_$i515: i32, out_$i516: i1, out_$p517: ref, out_$p518: ref, out_$i520: i32, out_$i521: i1, out_$p522: ref, out_$p523: ref, out_$i525: i32, out_$i526: i1, out_$p527: ref, out_$i528: i32, out_$i529: i32, out_$i530: i32, out_$i531: i1, out_$p532: ref, out_$p533: ref, out_$i534: i64, out_$i536: i32, out_$i537: i1, out_$p538: ref, out_$p539: ref, out_$i540: i64, out_$i542: i32, out_$i543: i1, out_$i545: i32, out_$i546: i32, out_$i547: i32, out_$i548: i1, out_$i549: i32, out_$i550: i1, out_$i551: i1, out_$i552: i1, out_$i553: i32, out_$i554: i1, out_$p555: ref, out_$i556: i64, out_$i558: i32, out_$i559: i1, out_$p560: ref, out_$i562: i32, out_$i563: i1, out_$i564: i32, out_$i565: i1, out_$i566: i1, out_$i567: i1, out_$i568: i32, out_$i569: i1, out_$p570: ref, out_$i571: i64, out_$i573: i32, out_$i574: i1, out_$p575: ref, out_$i577: i32, out_$i578: i1, out_$i579: i32, out_$i580: i1, out_$i581: i1, out_$i582: i1, out_$i583: i32, out_$i584: i1, out_$p585: ref, out_$i586: i32, out_$i587: i1, out_$p588: ref, out_$i590: i32, out_$i591: i1, out_$i592: i32, out_$i593: i1, out_$i594: i1, out_$i595: i1, out_$i596: i32, out_$i597: i1, out_$p598: ref, out_$i599: i32, out_$i600: i1, out_$p601: ref, out_$i603: i32, out_$i604: i1, out_$i605: i32, out_$i606: i1, out_$i607: i1, out_$i608: i1, out_$i609: i32, out_$i610: i1, out_$p611: ref, out_$i612: i64, out_$i614: i32, out_$i615: i1, out_$p616: ref, out_$i618: i32, out_$i619: i1, out_$i620: i32, out_$i621: i1, out_$i622: i1, out_$i623: i1, out_$i624: i1, out_$i625: i1, out_$i626: i1, out_$i627: i1, out_$i628: i32, out_$i629: i1, out_$p630: ref, out_$p631: ref, out_$i633: i32, out_$i634: i1, out_$p635: ref, out_$p636: ref, out_$i638: i32, out_$i639: i1, out_$p640: ref, out_$i641: i32, out_$i642: i32, out_$i643: i32, out_$i644: i1, out_$p645: ref, out_$p646: ref, out_$i648: i32, out_$i649: i1, out_$p650: ref, out_$p651: ref, out_$i653: i32, out_$i654: i1, out_$p655: ref, out_$p656: ref, out_$i657: i64, out_$i659: i32, out_$i660: i1, out_$p661: ref, out_$p662: ref, out_$i663: i64, out_$i665: i32, out_$i666: i1, out_$p667: ref, out_$p668: ref, out_$i670: i32, out_$i671: i1, out_$p672: ref, out_$p673: ref, out_$i675: i32, out_$i676: i1, out_$i678: i32, out_$i679: i32, out_$i680: i32, out_$i681: i1, out_$i682: i32, out_$i683: i1, out_$i684: i1, out_$i685: i1, out_$i686: i32, out_$i687: i1, out_$p688: ref, out_$i689: i64, out_$i691: i32, out_$i692: i1, out_$p693: ref, out_$i695: i32, out_$i696: i1, out_$i697: i32, out_$i698: i1, out_$i699: i1, out_$i700: i1, out_$i701: i32, out_$i702: i1, out_$p703: ref, out_$i704: i64, out_$i706: i32, out_$i707: i1, out_$p708: ref, out_$i710: i32, out_$i711: i1, out_$i712: i32, out_$i713: i1, out_$i714: i1, out_$i715: i1, out_$i716: i32, out_$i717: i1, out_$p718: ref, out_$i719: i64, out_$i721: i32, out_$i722: i1, out_$p723: ref, out_$i725: i32, out_$i726: i1, out_$i727: i32, out_$i728: i1, out_$i729: i1, out_$i730: i1, out_$i731: i32, out_$i732: i1, out_$p733: ref, out_$i734: i64, out_$i736: i32, out_$i737: i1, out_$p738: ref, out_$i740: i32, out_$i741: i1, out_$i742: i32, out_$i743: i1, out_$i744: i1, out_$i745: i1, out_$i746: i32, out_$i747: i1, out_$i748: i32, out_$i749: i1, out_$i750: i32, out_$i751: i1, out_$i752: i32, out_$i753: i32, out_$i754: i1, out_$i755: i32, out_$i756: i1, out_$i757: i32, out_$i758: i1, out_$i759: i32, out_$i760: i1, out_$i761: i1, out_$i762: i1, out_$i763: i32, out_$i764: i1, out_$p765: ref, out_$i766: i64, out_$i768: i32, out_$i769: i1, out_$p770: ref, out_$i772: i32, out_$i773: i1, out_$i774: i32, out_$i775: i1, out_$i776: i1, out_$i777: i1, out_$i778: i32, out_$i779: i1, out_$p780: ref, out_$i781: i32, out_$i782: i1, out_$p783: ref, out_$i785: i32, out_$i786: i1, out_$i787: i32, out_$i788: i1, out_$i789: i1, out_$i790: i1, out_$i791: i32, out_$i792: i1, out_$p793: ref, out_$i794: i64, out_$i796: i32, out_$i797: i1, out_$p798: ref, out_$i800: i32, out_$i801: i1, out_$i802: i32, out_$i803: i1, out_$i804: i1, out_$i805: i1, out_$i806: i32, out_$i807: i1, out_$p808: ref, out_$i809: i32, out_$i810: i1, out_$p811: ref, out_$i813: i32, out_$i814: i1, out_$i815: i32, out_$i816: i1, out_$i817: i1, out_$i818: i1, out_$i819: i32, out_$i820: i1, out_$p821: ref, out_$i822: i64, out_$i824: i32, out_$i825: i1, out_$p826: ref, out_$i828: i32, out_$i829: i1, out_$i830: i32, out_$i831: i1, out_$i832: i1, out_$i833: i1, out_$i834: i32, out_$i835: i1, out_$p836: ref, out_$i837: i64, out_$i839: i32, out_$i840: i1, out_$p841: ref, out_$i843: i32, out_$i844: i1, out_$i845: i32, out_$i846: i1, out_$i847: i1, out_$i848: i1, out_$i849: i32, out_$i850: i1, out_$p851: ref, out_$i852: i64, out_$i854: i32, out_$i855: i1, out_$p856: ref, out_$i858: i32, out_$i859: i1, out_$i860: i32, out_$i861: i1, out_$i862: i1, out_$i863: i1, out_$i864: i32, out_$i865: i1, out_$p866: ref, out_$i867: i64, out_$i869: i32, out_$i870: i1, out_$p871: ref, out_$i873: i32, out_$i874: i1, out_$i875: i32, out_$i876: i1, out_$i877: i1, out_$i878: i1, out_$i879: i1, out_$i880: i1, out_$i881: i32, out_$i882: i1, out_$p883: ref, out_$p884: ref, out_$i886: i32, out_$i887: i1, out_$p888: ref, out_$p889: ref, out_$i891: i32, out_$i892: i1, out_$p893: ref, out_$i894: i32, out_$i895: i32, out_$i896: i32, out_$i897: i1, out_$p898: ref, out_$p899: ref, out_$i900: i64, out_$i902: i32, out_$i903: i1, out_$p904: ref, out_$p905: ref, out_$i906: i64, out_$i908: i32, out_$i909: i1, out_$i911: i32, out_$i912: i32, out_$i913: i32, out_$i914: i1, out_$i915: i32, out_$i916: i1, out_$i917: i32, out_$i918: i1, out_$i919: i1, out_$i920: i1, out_$i921: i32, out_$i922: i1, out_$p923: ref, out_$i924: i64, out_$i926: i32, out_$i927: i1, out_$p928: ref, out_$i930: i32, out_$i931: i1, out_$i932: i32, out_$i933: i1, out_$i934: i1, out_$i935: i1, out_$i936: i32, out_$i937: i1, out_$p938: ref, out_$i939: i64, out_$i941: i32, out_$i942: i1, out_$p943: ref, out_$i945: i32, out_$i946: i1, out_$i947: i32, out_$i948: i1, out_$i949: i1, out_$i950: i1, out_$i951: i32, out_$i952: i1, out_$p953: ref, out_$i954: i64, out_$i956: i32, out_$i957: i1, out_$p958: ref, out_$i960: i32, out_$i961: i1, out_$i962: i32, out_$i963: i1, out_$i964: i32, out_$i965: i1, out_$i966: i1, out_$i967: i1, out_$i968: i32, out_$i969: i1, out_$p970: ref, out_$i971: i32, out_$i972: i1, out_$p973: ref, out_$i975: i32, out_$i976: i1, out_$i977: i32, out_$i978: i1, out_$i979: i1, out_$i980: i1, out_$i981: i32, out_$i982: i1, out_$p983: ref, out_$p984: ref, out_$i986: i32, out_$i987: i1, out_$p988: ref, out_$p989: ref, out_$i990: i64, out_vslice_dummy_var_118: i64, out_vslice_dummy_var_119: i64, out_vslice_dummy_var_120: i64, out_vslice_dummy_var_121: i64, out_vslice_dummy_var_122: i64, out_vslice_dummy_var_123: i64, out_vslice_dummy_var_124: i64, out_vslice_dummy_var_125: i64, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i64, out_vslice_dummy_var_128: i64, out_vslice_dummy_var_129: i64, out_vslice_dummy_var_130: i64, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i64, out_vslice_dummy_var_133: i64, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i64, out_vslice_dummy_var_137: i64, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i64, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: ref, out_vslice_dummy_var_144: i64, out_vslice_dummy_var_145: i64, out_vslice_dummy_var_146: i64, out_vslice_dummy_var_147: i64, out_vslice_dummy_var_148: i64, out_vslice_dummy_var_149: i64, out_vslice_dummy_var_150: i64, out_vslice_dummy_var_151: i64, out_vslice_dummy_var_152: i64, out_vslice_dummy_var_153: i64, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i64, out_vslice_dummy_var_156: i64, out_vslice_dummy_var_157: i64, out_vslice_dummy_var_158: i64, out_vslice_dummy_var_159: ref, out_vslice_dummy_var_160: ref, out_vslice_dummy_var_161: i64, out_vslice_dummy_var_162: i64, out_vslice_dummy_var_163: i64, out_vslice_dummy_var_164: i64, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i64, out_vslice_dummy_var_168: i64, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i64, out_vslice_dummy_var_173: i64, out_vslice_dummy_var_174: i64, out_vslice_dummy_var_175: i64, out_vslice_dummy_var_176: i64, out_vslice_dummy_var_177: i64, out_vslice_dummy_var_178: i64, out_vslice_dummy_var_179: i64, out_vslice_dummy_var_180: i64, out_vslice_dummy_var_181: i64, out_vslice_dummy_var_182: ref, out_vslice_dummy_var_183: i64, out_vslice_dummy_var_184: i64, out_vslice_dummy_var_185: ref, out_vslice_dummy_var_186: i64, out_vslice_dummy_var_187: i64, out_vslice_dummy_var_188: i64, out_vslice_dummy_var_189: i64, out_vslice_dummy_var_190: i64, out_vslice_dummy_var_191: i64, out_vslice_dummy_var_192: i64, out_vslice_dummy_var_193: i64, out_vslice_dummy_var_194: i64, out_vslice_dummy_var_195: i64, out_vslice_dummy_var_196: i64, out_vslice_dummy_var_197: i64, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: i64, out_vslice_dummy_var_200: i64, out_vslice_dummy_var_201: i64, out_vslice_dummy_var_202: i64, out_vslice_dummy_var_203: i64, out_vslice_dummy_var_204: i64, out_vslice_dummy_var_205: ref, out_vslice_dummy_var_206: i64, out_vslice_dummy_var_207: i64)
{

  entry:
    out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i219, out_$i220, out_$p221, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i251, out_$i252, out_$p253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p263, out_$p264, out_$i265, out_$i267, out_$i268, out_$p269, out_$p270, out_$i271, out_$i273, out_$i274, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$p288, out_$p289, out_$i291, out_$i292, out_$p293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i311, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$p330, out_$p331, out_$i333, out_$i334, out_$p335, out_$p336, out_$i338, out_$i339, out_$p340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p345, out_$p346, out_$i348, out_$i349, out_$p350, out_$p351, out_$i353, out_$i354, out_$p355, out_$p356, out_$i357, out_$i359, out_$i360, out_$p361, out_$p362, out_$i363, out_$i365, out_$i366, out_$p367, out_$p368, out_$i370, out_$i371, out_$p372, out_$p373, out_$i375, out_$i376, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i391, out_$i392, out_$p393, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$p408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$i418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$p427, out_$i428, out_$i429, out_$p430, out_$i431, out_$i432, out_$p433, out_$i434, out_$i435, out_$p436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$p448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$p457, out_$i458, out_$i459, out_$p460, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i473, out_$i474, out_$p475, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i484, out_$p485, out_$i486, out_$i488, out_$i489, out_$p490, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$p500, out_$i501, out_$i503, out_$i504, out_$p505, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$p517, out_$p518, out_$i520, out_$i521, out_$p522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i528, out_$i529, out_$i530, out_$i531, out_$p532, out_$p533, out_$i534, out_$i536, out_$i537, out_$p538, out_$p539, out_$i540, out_$i542, out_$i543, out_$i545, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$i551, out_$i552, out_$i553, out_$i554, out_$p555, out_$i556, out_$i558, out_$i559, out_$p560, out_$i562, out_$i563, out_$i564, out_$i565, out_$i566, out_$i567, out_$i568, out_$i569, out_$p570, out_$i571, out_$i573, out_$i574, out_$p575, out_$i577, out_$i578, out_$i579, out_$i580, out_$i581, out_$i582, out_$i583, out_$i584, out_$p585, out_$i586, out_$i587, out_$p588, out_$i590, out_$i591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$p598, out_$i599, out_$i600, out_$p601, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$p611, out_$i612, out_$i614, out_$i615, out_$p616, out_$i618, out_$i619, out_$i620, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i626, out_$i627, out_$i628, out_$i629, out_$p630, out_$p631, out_$i633, out_$i634, out_$p635, out_$p636, out_$i638, out_$i639, out_$p640, out_$i641, out_$i642, out_$i643, out_$i644, out_$p645, out_$p646, out_$i648, out_$i649, out_$p650, out_$p651, out_$i653, out_$i654, out_$p655, out_$p656, out_$i657, out_$i659, out_$i660, out_$p661, out_$p662, out_$i663, out_$i665, out_$i666, out_$p667, out_$p668, out_$i670, out_$i671, out_$p672, out_$p673, out_$i675, out_$i676, out_$i678, out_$i679, out_$i680, out_$i681, out_$i682, out_$i683, out_$i684, out_$i685, out_$i686, out_$i687, out_$p688, out_$i689, out_$i691, out_$i692, out_$p693, out_$i695, out_$i696, out_$i697, out_$i698, out_$i699, out_$i700, out_$i701, out_$i702, out_$p703, out_$i704, out_$i706, out_$i707, out_$p708, out_$i710, out_$i711, out_$i712, out_$i713, out_$i714, out_$i715, out_$i716, out_$i717, out_$p718, out_$i719, out_$i721, out_$i722, out_$p723, out_$i725, out_$i726, out_$i727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$p733, out_$i734, out_$i736, out_$i737, out_$p738, out_$i740, out_$i741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i763, out_$i764, out_$p765, out_$i766, out_$i768, out_$i769, out_$p770, out_$i772, out_$i773, out_$i774, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$p780, out_$i781, out_$i782, out_$p783, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$i792, out_$p793, out_$i794, out_$i796, out_$i797, out_$p798, out_$i800, out_$i801, out_$i802, out_$i803, out_$i804, out_$i805, out_$i806, out_$i807, out_$p808, out_$i809, out_$i810, out_$p811, out_$i813, out_$i814, out_$i815, out_$i816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$i822, out_$i824, out_$i825, out_$p826, out_$i828, out_$i829, out_$i830, out_$i831, out_$i832, out_$i833, out_$i834, out_$i835, out_$p836, out_$i837, out_$i839, out_$i840, out_$p841, out_$i843, out_$i844, out_$i845, out_$i846, out_$i847, out_$i848, out_$i849, out_$i850, out_$p851, out_$i852, out_$i854, out_$i855, out_$p856, out_$i858, out_$i859, out_$i860, out_$i861, out_$i862, out_$i863, out_$i864, out_$i865, out_$p866, out_$i867, out_$i869, out_$i870, out_$p871, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p884, out_$i886, out_$i887, out_$p888, out_$p889, out_$i891, out_$i892, out_$p893, out_$i894, out_$i895, out_$i896, out_$i897, out_$p898, out_$p899, out_$i900, out_$i902, out_$i903, out_$p904, out_$p905, out_$i906, out_$i908, out_$i909, out_$i911, out_$i912, out_$i913, out_$i914, out_$i915, out_$i916, out_$i917, out_$i918, out_$i919, out_$i920, out_$i921, out_$i922, out_$p923, out_$i924, out_$i926, out_$i927, out_$p928, out_$i930, out_$i931, out_$i932, out_$i933, out_$i934, out_$i935, out_$i936, out_$i937, out_$p938, out_$i939, out_$i941, out_$i942, out_$p943, out_$i945, out_$i946, out_$i947, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$i954, out_$i956, out_$i957, out_$p958, out_$i960, out_$i961, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$i967, out_$i968, out_$i969, out_$p970, out_$i971, out_$i972, out_$p973, out_$i975, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$i981, out_$i982, out_$p983, out_$p984, out_$i986, out_$i987, out_$p988, out_$p989, out_$i990, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207 := in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$p216, in_$i217, in_$i219, in_$i220, in_$p221, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$p231, in_$i232, in_$i234, in_$i235, in_$p236, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$p248, in_$p249, in_$i251, in_$i252, in_$p253, in_$p254, in_$i256, in_$i257, in_$p258, in_$i259, in_$i260, in_$i261, in_$i262, in_$p263, in_$p264, in_$i265, in_$i267, in_$i268, in_$p269, in_$p270, in_$i271, in_$i273, in_$i274, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$p288, in_$p289, in_$i291, in_$i292, in_$p293, in_$p294, in_$i296, in_$i297, in_$p298, in_$i299, in_$i300, in_$i301, in_$i302, in_$p303, in_$p304, in_$i305, in_$i307, in_$i308, in_$p309, in_$p310, in_$i311, in_$i313, in_$i314, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$p330, in_$p331, in_$i333, in_$i334, in_$p335, in_$p336, in_$i338, in_$i339, in_$p340, in_$i341, in_$i342, in_$i343, in_$i344, in_$p345, in_$p346, in_$i348, in_$i349, in_$p350, in_$p351, in_$i353, in_$i354, in_$p355, in_$p356, in_$i357, in_$i359, in_$i360, in_$p361, in_$p362, in_$i363, in_$i365, in_$i366, in_$p367, in_$p368, in_$i370, in_$i371, in_$p372, in_$p373, in_$i375, in_$i376, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$i384, in_$i385, in_$i386, in_$i387, in_$p388, in_$i389, in_$i391, in_$i392, in_$p393, in_$i395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$i402, in_$i403, in_$i404, in_$i405, in_$i406, in_$i407, in_$p408, in_$i409, in_$i410, in_$p411, in_$i412, in_$i413, in_$p414, in_$i415, in_$i416, in_$i417, in_$i418, in_$p419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$i425, in_$i426, in_$p427, in_$i428, in_$i429, in_$p430, in_$i431, in_$i432, in_$p433, in_$i434, in_$i435, in_$p436, in_$i437, in_$i438, in_$p439, in_$i440, in_$i441, in_$p442, in_$i443, in_$i444, in_$i445, in_$i446, in_$i447, in_$p448, in_$i449, in_$i450, in_$i451, in_$i452, in_$i453, in_$i454, in_$i455, in_$i456, in_$p457, in_$i458, in_$i459, in_$p460, in_$i462, in_$i463, in_$i464, in_$i465, in_$i466, in_$i467, in_$i468, in_$i469, in_$p470, in_$i471, in_$i473, in_$i474, in_$p475, in_$i477, in_$i478, in_$i479, in_$i480, in_$i481, in_$i482, in_$i483, in_$i484, in_$p485, in_$i486, in_$i488, in_$i489, in_$p490, in_$i492, in_$i493, in_$i494, in_$i495, in_$i496, in_$i497, in_$i498, in_$i499, in_$p500, in_$i501, in_$i503, in_$i504, in_$p505, in_$i507, in_$i508, in_$i509, in_$i510, in_$i511, in_$i512, in_$i513, in_$i514, in_$i515, in_$i516, in_$p517, in_$p518, in_$i520, in_$i521, in_$p522, in_$p523, in_$i525, in_$i526, in_$p527, in_$i528, in_$i529, in_$i530, in_$i531, in_$p532, in_$p533, in_$i534, in_$i536, in_$i537, in_$p538, in_$p539, in_$i540, in_$i542, in_$i543, in_$i545, in_$i546, in_$i547, in_$i548, in_$i549, in_$i550, in_$i551, in_$i552, in_$i553, in_$i554, in_$p555, in_$i556, in_$i558, in_$i559, in_$p560, in_$i562, in_$i563, in_$i564, in_$i565, in_$i566, in_$i567, in_$i568, in_$i569, in_$p570, in_$i571, in_$i573, in_$i574, in_$p575, in_$i577, in_$i578, in_$i579, in_$i580, in_$i581, in_$i582, in_$i583, in_$i584, in_$p585, in_$i586, in_$i587, in_$p588, in_$i590, in_$i591, in_$i592, in_$i593, in_$i594, in_$i595, in_$i596, in_$i597, in_$p598, in_$i599, in_$i600, in_$p601, in_$i603, in_$i604, in_$i605, in_$i606, in_$i607, in_$i608, in_$i609, in_$i610, in_$p611, in_$i612, in_$i614, in_$i615, in_$p616, in_$i618, in_$i619, in_$i620, in_$i621, in_$i622, in_$i623, in_$i624, in_$i625, in_$i626, in_$i627, in_$i628, in_$i629, in_$p630, in_$p631, in_$i633, in_$i634, in_$p635, in_$p636, in_$i638, in_$i639, in_$p640, in_$i641, in_$i642, in_$i643, in_$i644, in_$p645, in_$p646, in_$i648, in_$i649, in_$p650, in_$p651, in_$i653, in_$i654, in_$p655, in_$p656, in_$i657, in_$i659, in_$i660, in_$p661, in_$p662, in_$i663, in_$i665, in_$i666, in_$p667, in_$p668, in_$i670, in_$i671, in_$p672, in_$p673, in_$i675, in_$i676, in_$i678, in_$i679, in_$i680, in_$i681, in_$i682, in_$i683, in_$i684, in_$i685, in_$i686, in_$i687, in_$p688, in_$i689, in_$i691, in_$i692, in_$p693, in_$i695, in_$i696, in_$i697, in_$i698, in_$i699, in_$i700, in_$i701, in_$i702, in_$p703, in_$i704, in_$i706, in_$i707, in_$p708, in_$i710, in_$i711, in_$i712, in_$i713, in_$i714, in_$i715, in_$i716, in_$i717, in_$p718, in_$i719, in_$i721, in_$i722, in_$p723, in_$i725, in_$i726, in_$i727, in_$i728, in_$i729, in_$i730, in_$i731, in_$i732, in_$p733, in_$i734, in_$i736, in_$i737, in_$p738, in_$i740, in_$i741, in_$i742, in_$i743, in_$i744, in_$i745, in_$i746, in_$i747, in_$i748, in_$i749, in_$i750, in_$i751, in_$i752, in_$i753, in_$i754, in_$i755, in_$i756, in_$i757, in_$i758, in_$i759, in_$i760, in_$i761, in_$i762, in_$i763, in_$i764, in_$p765, in_$i766, in_$i768, in_$i769, in_$p770, in_$i772, in_$i773, in_$i774, in_$i775, in_$i776, in_$i777, in_$i778, in_$i779, in_$p780, in_$i781, in_$i782, in_$p783, in_$i785, in_$i786, in_$i787, in_$i788, in_$i789, in_$i790, in_$i791, in_$i792, in_$p793, in_$i794, in_$i796, in_$i797, in_$p798, in_$i800, in_$i801, in_$i802, in_$i803, in_$i804, in_$i805, in_$i806, in_$i807, in_$p808, in_$i809, in_$i810, in_$p811, in_$i813, in_$i814, in_$i815, in_$i816, in_$i817, in_$i818, in_$i819, in_$i820, in_$p821, in_$i822, in_$i824, in_$i825, in_$p826, in_$i828, in_$i829, in_$i830, in_$i831, in_$i832, in_$i833, in_$i834, in_$i835, in_$p836, in_$i837, in_$i839, in_$i840, in_$p841, in_$i843, in_$i844, in_$i845, in_$i846, in_$i847, in_$i848, in_$i849, in_$i850, in_$p851, in_$i852, in_$i854, in_$i855, in_$p856, in_$i858, in_$i859, in_$i860, in_$i861, in_$i862, in_$i863, in_$i864, in_$i865, in_$p866, in_$i867, in_$i869, in_$i870, in_$p871, in_$i873, in_$i874, in_$i875, in_$i876, in_$i877, in_$i878, in_$i879, in_$i880, in_$i881, in_$i882, in_$p883, in_$p884, in_$i886, in_$i887, in_$p888, in_$p889, in_$i891, in_$i892, in_$p893, in_$i894, in_$i895, in_$i896, in_$i897, in_$p898, in_$p899, in_$i900, in_$i902, in_$i903, in_$p904, in_$p905, in_$i906, in_$i908, in_$i909, in_$i911, in_$i912, in_$i913, in_$i914, in_$i915, in_$i916, in_$i917, in_$i918, in_$i919, in_$i920, in_$i921, in_$i922, in_$p923, in_$i924, in_$i926, in_$i927, in_$p928, in_$i930, in_$i931, in_$i932, in_$i933, in_$i934, in_$i935, in_$i936, in_$i937, in_$p938, in_$i939, in_$i941, in_$i942, in_$p943, in_$i945, in_$i946, in_$i947, in_$i948, in_$i949, in_$i950, in_$i951, in_$i952, in_$p953, in_$i954, in_$i956, in_$i957, in_$p958, in_$i960, in_$i961, in_$i962, in_$i963, in_$i964, in_$i965, in_$i966, in_$i967, in_$i968, in_$i969, in_$p970, in_$i971, in_$i972, in_$p973, in_$i975, in_$i976, in_$i977, in_$i978, in_$i979, in_$i980, in_$i981, in_$i982, in_$p983, in_$p984, in_$i986, in_$i987, in_$p988, in_$p989, in_$i990, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147, in_vslice_dummy_var_148, in_vslice_dummy_var_149, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175, in_vslice_dummy_var_176, in_vslice_dummy_var_177, in_vslice_dummy_var_178, in_vslice_dummy_var_179, in_vslice_dummy_var_180, in_vslice_dummy_var_181, in_vslice_dummy_var_182, in_vslice_dummy_var_183, in_vslice_dummy_var_184, in_vslice_dummy_var_185, in_vslice_dummy_var_186, in_vslice_dummy_var_187, in_vslice_dummy_var_188, in_vslice_dummy_var_189, in_vslice_dummy_var_190, in_vslice_dummy_var_191, in_vslice_dummy_var_192, in_vslice_dummy_var_193, in_vslice_dummy_var_194, in_vslice_dummy_var_195, in_vslice_dummy_var_196, in_vslice_dummy_var_197, in_vslice_dummy_var_198, in_vslice_dummy_var_199, in_vslice_dummy_var_200, in_vslice_dummy_var_201, in_vslice_dummy_var_202, in_vslice_dummy_var_203, in_vslice_dummy_var_204, in_vslice_dummy_var_205, in_vslice_dummy_var_206, in_vslice_dummy_var_207;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1492} out_$i167 := __VERIFIER_nondet_int();
    call {:si_unique_call 1493} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i167);
    call {:si_unique_call 1494} {:cexpr "tmp___71"} boogie_si_record_i32(out_$i167);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb104_dummy;

  $bb1013:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb1011:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb991:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb971:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb968:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb948:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb928:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb908:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb905:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb869:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb849:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb829:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb809:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb789:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb769:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb729:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb709:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb679:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb659:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb639:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb547:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb527:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb507:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb467:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb85:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb95:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_9951;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} out_vslice_dummy_var_118 := gadget_dev_desc_bMaxPacketSize0_store(out_$p216, in_$p30, out_$i217);
    goto corral_source_split_9950;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i64($M.41, in_$p0);
    goto corral_source_split_9949;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    out_$p216 := $M.85;
    goto corral_source_split_9948;

  $bb94:
    assume out_$i215 == 1;
    goto corral_source_split_9947;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 1);
    goto corral_source_split_9945;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    out_$i214 := $M.93;
    goto corral_source_split_9944;

  $bb92:
    assume out_$i213 == 1;
    goto corral_source_split_9943;

  $bb87:
    assume out_$i211 == 1;
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i210, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i211 := $slt.i32(out_$i210, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_9937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1495} out_$i210 := __VERIFIER_nondet_int();
    call {:si_unique_call 1496} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i210);
    call {:si_unique_call 1497} {:cexpr "tmp___72"} boogie_si_record_i32(out_$i210);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb84:
    assume out_$i209 == 1;
    goto corral_source_split_9937;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    out_$i209 := $ne.i32(out_$i208, 0);
    goto corral_source_split_9935;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    out_$i208 := $M.93;
    goto corral_source_split_9934;

  $bb82:
    assume out_$i207 == 1;
    goto corral_source_split_9933;

  $bb80:
    assume out_$i206 == 1;
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i167, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb76:
    assume out_$i204 == 1;
    assume {:verifier.code 0} true;
    out_$i206 := $slt.i32(out_$i167, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb66:
    assume out_$i199 == 1;
    assume {:verifier.code 0} true;
    out_$i204 := $slt.i32(out_$i167, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb46:
    assume out_$i189 == 1;
    assume {:verifier.code 0} true;
    out_$i199 := $slt.i32(out_$i167, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb3:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i189 := $slt.i32(out_$i167, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i168 := $slt.i32(out_$i167, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb99:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_9956;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} out_vslice_dummy_var_119 := gadget_dev_desc_bMaxPacketSize0_show(out_$p221, in_$p29);
    goto corral_source_split_9955;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    out_$p221 := $M.85;
    goto corral_source_split_9954;

  $bb98:
    assume out_$i220 == 1;
    goto corral_source_split_9953;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 1);
    goto corral_source_split_9941;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    out_$i219 := $M.93;
    goto corral_source_split_9940;

  $bb89:
    assume out_$i212 == 1;
    goto corral_source_split_9939;

  $bb88:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i210, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_stop();
    goto corral_source_split_9958;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(out_$i212 == 1);
    goto $bb91;

  $bb93:
    assume {:verifier.code 0} true;
    assume !(out_$i213 == 1);
    goto $bb91;

  $bb106:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb116:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1507} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_9974;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} out_vslice_dummy_var_120 := gadget_dev_desc_idVendor_store(out_$p231, in_$p32, out_$i232);
    goto corral_source_split_9973;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i64($M.41, in_$p1);
    goto corral_source_split_9972;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    out_$p231 := $M.72;
    goto corral_source_split_9971;

  $bb115:
    assume out_$i230 == 1;
    goto corral_source_split_9970;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 1);
    goto corral_source_split_9968;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    out_$i229 := $M.94;
    goto corral_source_split_9967;

  $bb113:
    assume out_$i228 == 1;
    goto corral_source_split_9966;

  $bb108:
    assume out_$i226 == 1;
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i225, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i226 := $slt.i32(out_$i225, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_9960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1503} out_$i225 := __VERIFIER_nondet_int();
    call {:si_unique_call 1504} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i225);
    call {:si_unique_call 1505} {:cexpr "tmp___73"} boogie_si_record_i32(out_$i225);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb105:
    assume out_$i224 == 1;
    goto corral_source_split_9960;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    out_$i224 := $ne.i32(out_$i223, 0);
    goto corral_source_split_9931;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    out_$i223 := $M.94;
    goto corral_source_split_9930;

  $bb81:
    assume !(out_$i206 == 1);
    goto corral_source_split_9929;

  $bb120:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1509} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_9979;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} out_vslice_dummy_var_121 := gadget_dev_desc_idVendor_show(out_$p236, in_$p31);
    goto corral_source_split_9978;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    out_$p236 := $M.72;
    goto corral_source_split_9977;

  $bb119:
    assume out_$i235 == 1;
    goto corral_source_split_9976;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 1);
    goto corral_source_split_9964;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    out_$i234 := $M.94;
    goto corral_source_split_9963;

  $bb110:
    assume out_$i227 == 1;
    goto corral_source_split_9962;

  $bb109:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i225, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_stop();
    goto corral_source_split_9981;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb111:
    assume {:verifier.code 0} true;
    assume !(out_$i227 == 1);
    goto $bb112;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(out_$i228 == 1);
    goto $bb112;

  $bb126:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb143:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1517} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_10014;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} out_vslice_dummy_var_123 := gadget_config_name_attr_show(out_$p253, out_$p254, in_$p33);
    goto corral_source_split_10013;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    out_$p254 := $M.87;
    goto corral_source_split_10012;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    out_$p253 := $M.88;
    goto corral_source_split_10011;

  $bb142:
    assume out_$i252 == 1;
    goto corral_source_split_10010;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i251, 2);
    goto corral_source_split_10008;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i251 := $M.95;
    goto corral_source_split_10007;

  $bb140:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1515} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_10005;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} out_vslice_dummy_var_122 := gadget_config_name_attr_show(out_$p248, out_$p249, in_$p33);
    goto corral_source_split_10004;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    out_$p249 := $M.87;
    goto corral_source_split_10003;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    out_$p248 := $M.88;
    goto corral_source_split_10002;

  $bb139:
    assume out_$i247 == 1;
    goto corral_source_split_10001;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 1);
    goto corral_source_split_9999;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    out_$i246 := $M.95;
    goto corral_source_split_9998;

  $bb137:
    assume out_$i245 == 1;
    goto corral_source_split_9997;

  $bb135:
    assume out_$i244 == 1;
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i240, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb128:
    assume out_$i241 == 1;
    assume {:verifier.code 0} true;
    out_$i244 := $slt.i32(out_$i240, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i241 := $slt.i32(out_$i240, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_9983:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1511} out_$i240 := __VERIFIER_nondet_int();
    call {:si_unique_call 1512} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i240);
    call {:si_unique_call 1513} {:cexpr "tmp___74"} boogie_si_record_i32(out_$i240);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb125:
    assume out_$i239 == 1;
    goto corral_source_split_9983;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    out_$i239 := $ne.i32(out_$i238, 0);
    goto corral_source_split_9923;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    out_$i238 := $M.95;
    goto corral_source_split_9922;

  $bb78:
    assume out_$i205 == 1;
    goto corral_source_split_9921;

  $bb77:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    out_$i205 := $slt.i32(out_$i167, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb147:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $M.45 := out_$i260;
    call {:si_unique_call 1520} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i260);
    goto corral_source_split_10022;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    out_$i260 := $sub.i32(out_$i259, 1);
    goto corral_source_split_10021;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    out_$i259 := $M.45;
    goto corral_source_split_10020;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1519} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_10019;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} gadget_config_name_attr_release(out_$p258);
    goto corral_source_split_10018;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    out_$p258 := $M.88;
    goto corral_source_split_10017;

  $bb146:
    assume out_$i257 == 1;
    goto corral_source_split_10016;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 2);
    goto corral_source_split_9995;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    out_$i256 := $M.95;
    goto corral_source_split_9994;

  $bb136:
    assume !(out_$i244 == 1);
    goto corral_source_split_9993;

  $bb153:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_10039;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} out_vslice_dummy_var_125 := gadget_config_name_attr_store(out_$p269, out_$p270, in_$p34, out_$i271);
    goto corral_source_split_10038;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i64($M.41, in_$p2);
    goto corral_source_split_10037;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    out_$p270 := $M.87;
    goto corral_source_split_10036;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    out_$p269 := $M.88;
    goto corral_source_split_10035;

  $bb152:
    assume out_$i268 == 1;
    goto corral_source_split_10034;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i267, 2);
    goto corral_source_split_10032;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i267 := $M.95;
    goto corral_source_split_10031;

  $bb150:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1522} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_10029;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} out_vslice_dummy_var_124 := gadget_config_name_attr_store(out_$p263, out_$p264, in_$p34, out_$i265);
    goto corral_source_split_10028;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    out_$i265 := $load.i64($M.41, in_$p2);
    goto corral_source_split_10027;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    out_$p264 := $M.87;
    goto corral_source_split_10026;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    out_$p263 := $M.88;
    goto corral_source_split_10025;

  $bb149:
    assume out_$i262 == 1;
    goto corral_source_split_10024;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 1);
    goto corral_source_split_9987;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    out_$i261 := $M.95;
    goto corral_source_split_9986;

  $bb130:
    assume out_$i242 == 1;
    goto corral_source_split_9985;

  $bb129:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    out_$i242 := $slt.i32(out_$i240, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb156:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $M.45 := out_$i277;
    call {:si_unique_call 1527} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i277);
    goto corral_source_split_10046;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    out_$i277 := $add.i32(out_$i276, 1);
    goto corral_source_split_10045;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    out_$i276 := $M.45;
    goto corral_source_split_10044;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1526} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_10043;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} out_vslice_dummy_var_126 := ldv_probe_21();
    goto corral_source_split_10042;

  $bb155:
    assume out_$i274 == 1;
    goto corral_source_split_10041;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 1);
    goto corral_source_split_9991;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    out_$i273 := $M.95;
    goto corral_source_split_9990;

  $bb132:
    assume out_$i243 == 1;
    goto corral_source_split_9989;

  $bb131:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i240, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_stop();
    goto corral_source_split_10048;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb133:
    assume {:verifier.code 0} true;
    assume !(out_$i243 == 1);
    goto $bb134;

  $bb138:
    assume {:verifier.code 0} true;
    assume !(out_$i245 == 1);
    goto $bb134;

  $bb162:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb179:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1535} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10081;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} out_vslice_dummy_var_128 := usb_os_desc_ext_prop_attr_show(out_$p293, out_$p294, in_$p35);
    goto corral_source_split_10080;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    out_$p294 := $M.67;
    goto corral_source_split_10079;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    out_$p293 := $M.68;
    goto corral_source_split_10078;

  $bb178:
    assume out_$i292 == 1;
    goto corral_source_split_10077;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 2);
    goto corral_source_split_10075;

  $bb177:
    assume {:verifier.code 0} true;
    out_$i291 := $M.96;
    goto corral_source_split_10074;

  $bb176:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1533} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10072;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} out_vslice_dummy_var_127 := usb_os_desc_ext_prop_attr_show(out_$p288, out_$p289, in_$p35);
    goto corral_source_split_10071;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    out_$p289 := $M.67;
    goto corral_source_split_10070;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    out_$p288 := $M.68;
    goto corral_source_split_10069;

  $bb175:
    assume out_$i287 == 1;
    goto corral_source_split_10068;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i286, 1);
    goto corral_source_split_10066;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    out_$i286 := $M.96;
    goto corral_source_split_10065;

  $bb173:
    assume out_$i285 == 1;
    goto corral_source_split_10064;

  $bb171:
    assume out_$i284 == 1;
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i280, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb164:
    assume out_$i281 == 1;
    assume {:verifier.code 0} true;
    out_$i284 := $slt.i32(out_$i280, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i281 := $slt.i32(out_$i280, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_10050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1529} out_$i280 := __VERIFIER_nondet_int();
    call {:si_unique_call 1530} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i280);
    call {:si_unique_call 1531} {:cexpr "tmp___75"} boogie_si_record_i32(out_$i280);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume out_$i279 == 1;
    goto corral_source_split_10050;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    out_$i279 := $ne.i32(out_$i278, 0);
    goto corral_source_split_9927;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    out_$i278 := $M.96;
    goto corral_source_split_9926;

  $bb79:
    assume !(out_$i205 == 1);
    goto corral_source_split_9925;

  $bb183:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $M.45 := out_$i300;
    call {:si_unique_call 1538} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i300);
    goto corral_source_split_10089;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    out_$i300 := $sub.i32(out_$i299, 1);
    goto corral_source_split_10088;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    out_$i299 := $M.45;
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1537} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10086;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} usb_os_desc_ext_prop_release(out_$p298);
    goto corral_source_split_10085;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    out_$p298 := $M.68;
    goto corral_source_split_10084;

  $bb182:
    assume out_$i297 == 1;
    goto corral_source_split_10083;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 2);
    goto corral_source_split_10062;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    out_$i296 := $M.96;
    goto corral_source_split_10061;

  $bb172:
    assume !(out_$i284 == 1);
    goto corral_source_split_10060;

  $bb189:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10106;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} out_vslice_dummy_var_130 := usb_os_desc_ext_prop_attr_store(out_$p309, out_$p310, in_$p36, out_$i311);
    goto corral_source_split_10105;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    out_$i311 := $load.i64($M.41, in_$p3);
    goto corral_source_split_10104;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    out_$p310 := $M.67;
    goto corral_source_split_10103;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    out_$p309 := $M.68;
    goto corral_source_split_10102;

  $bb188:
    assume out_$i308 == 1;
    goto corral_source_split_10101;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i307, 2);
    goto corral_source_split_10099;

  $bb187:
    assume {:verifier.code 0} true;
    out_$i307 := $M.96;
    goto corral_source_split_10098;

  $bb186:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10096;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_vslice_dummy_var_129 := usb_os_desc_ext_prop_attr_store(out_$p303, out_$p304, in_$p36, out_$i305);
    goto corral_source_split_10095;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    out_$i305 := $load.i64($M.41, in_$p3);
    goto corral_source_split_10094;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    out_$p304 := $M.67;
    goto corral_source_split_10093;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    out_$p303 := $M.68;
    goto corral_source_split_10092;

  $bb185:
    assume out_$i302 == 1;
    goto corral_source_split_10091;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 1);
    goto corral_source_split_10054;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    out_$i301 := $M.96;
    goto corral_source_split_10053;

  $bb166:
    assume out_$i282 == 1;
    goto corral_source_split_10052;

  $bb165:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    out_$i282 := $slt.i32(out_$i280, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb192:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $M.45 := out_$i317;
    call {:si_unique_call 1545} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i317);
    goto corral_source_split_10113;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    out_$i317 := $add.i32(out_$i316, 1);
    goto corral_source_split_10112;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    out_$i316 := $M.45;
    goto corral_source_split_10111;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10110;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} out_vslice_dummy_var_131 := ldv_probe_7();
    goto corral_source_split_10109;

  $bb191:
    assume out_$i314 == 1;
    goto corral_source_split_10108;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, 1);
    goto corral_source_split_10058;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    out_$i313 := $M.96;
    goto corral_source_split_10057;

  $bb168:
    assume out_$i283 == 1;
    goto corral_source_split_10056;

  $bb167:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    out_$i283 := $eq.i32(out_$i280, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_stop();
    goto corral_source_split_10115;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb169:
    assume {:verifier.code 0} true;
    assume !(out_$i283 == 1);
    goto $bb170;

  $bb174:
    assume {:verifier.code 0} true;
    assume !(out_$i285 == 1);
    goto $bb170;

  $bb198:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb219:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $M.97 := 2;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_10156;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} out_vslice_dummy_var_133 := config_usb_cfg_attr_show(out_$p335, out_$p336, in_$p37);
    goto corral_source_split_10155;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    out_$p336 := $M.54;
    goto corral_source_split_10154;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    out_$p335 := $M.55;
    goto corral_source_split_10153;

  $bb218:
    assume out_$i334 == 1;
    goto corral_source_split_10152;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 2);
    goto corral_source_split_10150;

  $bb217:
    assume {:verifier.code 0} true;
    out_$i333 := $M.97;
    goto corral_source_split_10149;

  $bb216:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10147;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} out_vslice_dummy_var_132 := config_usb_cfg_attr_show(out_$p330, out_$p331, in_$p37);
    goto corral_source_split_10146;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    out_$p331 := $M.54;
    goto corral_source_split_10145;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    out_$p330 := $M.55;
    goto corral_source_split_10144;

  $bb215:
    assume out_$i329 == 1;
    goto corral_source_split_10143;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    out_$i329 := $eq.i32(out_$i328, 1);
    goto corral_source_split_10141;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    out_$i328 := $M.97;
    goto corral_source_split_10140;

  $bb213:
    assume out_$i327 == 1;
    goto corral_source_split_10139;

  $bb209:
    assume out_$i325 == 1;
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i320, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb200:
    assume out_$i321 == 1;
    assume {:verifier.code 0} true;
    out_$i325 := $slt.i32(out_$i320, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i321 := $slt.i32(out_$i320, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_10117:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1547} out_$i320 := __VERIFIER_nondet_int();
    call {:si_unique_call 1548} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i320);
    call {:si_unique_call 1549} {:cexpr "tmp___76"} boogie_si_record_i32(out_$i320);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb197:
    assume out_$i319 == 1;
    goto corral_source_split_10117;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    out_$i319 := $ne.i32(out_$i318, 0);
    goto corral_source_split_9915;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    out_$i318 := $M.97;
    goto corral_source_split_9914;

  $bb74:
    assume out_$i203 == 1;
    goto corral_source_split_9913;

  $bb68:
    assume out_$i200 == 1;
    assume {:verifier.code 0} true;
    out_$i203 := $slt.i32(out_$i167, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb67:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    out_$i200 := $slt.i32(out_$i167, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb223:
    assume !(out_$i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $M.45 := out_$i342;
    call {:si_unique_call 1556} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i342);
    goto corral_source_split_10164;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    out_$i342 := $sub.i32(out_$i341, 1);
    goto corral_source_split_10163;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    out_$i341 := $M.45;
    goto corral_source_split_10162;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10161;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} gadget_config_attr_release(out_$p340);
    goto corral_source_split_10160;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    out_$p340 := $M.55;
    goto corral_source_split_10159;

  $bb222:
    assume out_$i339 == 1;
    goto corral_source_split_10158;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    out_$i339 := $eq.i32(out_$i338, 2);
    goto corral_source_split_10133;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    out_$i338 := $M.97;
    goto corral_source_split_10132;

  $bb211:
    assume out_$i326 == 1;
    goto corral_source_split_10131;

  $bb210:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    out_$i326 := $slt.i32(out_$i320, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb229:
    assume !(out_$i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $M.97 := 2;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_10179;

  SeqInstr_210:
    goto corral_source_split_10178;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} out_vslice_dummy_var_135 := config_usb_cfg_unlink(out_$p350, out_$p351);
    goto SeqInstr_209;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    out_$p351 := $M.53;
    goto corral_source_split_10177;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    out_$p350 := $M.55;
    goto corral_source_split_10176;

  $bb228:
    assume out_$i349 == 1;
    goto corral_source_split_10175;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    out_$i349 := $eq.i32(out_$i348, 2);
    goto corral_source_split_10173;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i348 := $M.97;
    goto corral_source_split_10172;

  $bb226:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1558} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10170;

  SeqInstr_207:
    goto corral_source_split_10169;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} out_vslice_dummy_var_134 := config_usb_cfg_unlink(out_$p345, out_$p346);
    goto SeqInstr_206;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    out_$p346 := $M.53;
    goto corral_source_split_10168;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    out_$p345 := $M.55;
    goto corral_source_split_10167;

  $bb225:
    assume out_$i344 == 1;
    goto corral_source_split_10166;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i343, 1);
    goto corral_source_split_10137;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    out_$i343 := $M.97;
    goto corral_source_split_10136;

  $bb212:
    assume !(out_$i326 == 1);
    goto corral_source_split_10135;

  $bb235:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $M.97 := 2;
    call {:si_unique_call 1564} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_10196;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} out_vslice_dummy_var_137 := config_usb_cfg_attr_store(out_$p361, out_$p362, in_$p38, out_$i363);
    goto corral_source_split_10195;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    out_$i363 := $load.i64($M.41, in_$p4);
    goto corral_source_split_10194;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    out_$p362 := $M.54;
    goto corral_source_split_10193;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    out_$p361 := $M.55;
    goto corral_source_split_10192;

  $bb234:
    assume out_$i360 == 1;
    goto corral_source_split_10191;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    out_$i360 := $eq.i32(out_$i359, 2);
    goto corral_source_split_10189;

  $bb233:
    assume {:verifier.code 0} true;
    out_$i359 := $M.97;
    goto corral_source_split_10188;

  $bb232:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1562} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10186;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} out_vslice_dummy_var_136 := config_usb_cfg_attr_store(out_$p355, out_$p356, in_$p38, out_$i357);
    goto corral_source_split_10185;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    out_$i357 := $load.i64($M.41, in_$p4);
    goto corral_source_split_10184;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    out_$p356 := $M.54;
    goto corral_source_split_10183;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    out_$p355 := $M.55;
    goto corral_source_split_10182;

  $bb231:
    assume out_$i354 == 1;
    goto corral_source_split_10181;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 1);
    goto corral_source_split_10121;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    out_$i353 := $M.97;
    goto corral_source_split_10120;

  $bb202:
    assume out_$i322 == 1;
    goto corral_source_split_10119;

  $bb201:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    out_$i322 := $slt.i32(out_$i320, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb241:
    assume !(out_$i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $M.97 := 2;
    call {:si_unique_call 1568} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_10211;

  SeqInstr_216:
    goto corral_source_split_10210;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} out_vslice_dummy_var_139 := config_usb_cfg_link(out_$p372, out_$p373);
    goto SeqInstr_215;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    out_$p373 := $M.53;
    goto corral_source_split_10209;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    out_$p372 := $M.55;
    goto corral_source_split_10208;

  $bb240:
    assume out_$i371 == 1;
    goto corral_source_split_10207;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i370, 2);
    goto corral_source_split_10205;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i370 := $M.97;
    goto corral_source_split_10204;

  $bb238:
    assume !(out_$i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1566} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10202;

  SeqInstr_213:
    goto corral_source_split_10201;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} out_vslice_dummy_var_138 := config_usb_cfg_link(out_$p367, out_$p368);
    goto SeqInstr_212;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    out_$p368 := $M.53;
    goto corral_source_split_10200;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    out_$p367 := $M.55;
    goto corral_source_split_10199;

  $bb237:
    assume out_$i366 == 1;
    goto corral_source_split_10198;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    out_$i366 := $eq.i32(out_$i365, 1);
    goto corral_source_split_10125;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    out_$i365 := $M.97;
    goto corral_source_split_10124;

  $bb204:
    assume out_$i323 == 1;
    goto corral_source_split_10123;

  $bb203:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    out_$i323 := $slt.i32(out_$i320, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb244:
    assume !(out_$i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $M.45 := out_$i379;
    call {:si_unique_call 1571} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i379);
    goto corral_source_split_10218;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    out_$i379 := $add.i32(out_$i378, 1);
    goto corral_source_split_10217;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    out_$i378 := $M.45;
    goto corral_source_split_10216;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $M.97 := 2;
    call {:si_unique_call 1570} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_10215;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} out_vslice_dummy_var_140 := ldv_probe_26();
    goto corral_source_split_10214;

  $bb243:
    assume out_$i376 == 1;
    goto corral_source_split_10213;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    out_$i376 := $eq.i32(out_$i375, 1);
    goto corral_source_split_10129;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    out_$i375 := $M.97;
    goto corral_source_split_10128;

  $bb206:
    assume out_$i324 == 1;
    goto corral_source_split_10127;

  $bb205:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    out_$i324 := $eq.i32(out_$i320, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} ldv_stop();
    goto corral_source_split_10220;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb207:
    assume {:verifier.code 0} true;
    assume !(out_$i324 == 1);
    goto $bb208;

  $bb214:
    assume {:verifier.code 0} true;
    assume !(out_$i327 == 1);
    goto $bb208;

  $bb250:
    assume !(out_$i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb260:
    assume !(out_$i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_10236;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} out_vslice_dummy_var_141 := gadget_strings_product_store(out_$p388, in_$p39, out_$i389);
    goto corral_source_split_10235;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    out_$i389 := $load.i64($M.41, in_$p5);
    goto corral_source_split_10234;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    out_$p388 := $M.71;
    goto corral_source_split_10233;

  $bb259:
    assume out_$i387 == 1;
    goto corral_source_split_10232;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    out_$i387 := $eq.i32(out_$i386, 1);
    goto corral_source_split_10230;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    out_$i386 := $M.98;
    goto corral_source_split_10229;

  $bb257:
    assume out_$i385 == 1;
    goto corral_source_split_10228;

  $bb252:
    assume out_$i383 == 1;
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i382, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb251:
    assume {:verifier.code 0} true;
    out_$i383 := $slt.i32(out_$i382, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_10222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1573} out_$i382 := __VERIFIER_nondet_int();
    call {:si_unique_call 1574} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i382);
    call {:si_unique_call 1575} {:cexpr "tmp___77"} boogie_si_record_i32(out_$i382);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb249:
    assume out_$i381 == 1;
    goto corral_source_split_10222;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    out_$i381 := $ne.i32(out_$i380, 0);
    goto corral_source_split_9919;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    out_$i380 := $M.98;
    goto corral_source_split_9918;

  $bb75:
    assume !(out_$i203 == 1);
    goto corral_source_split_9917;

  $bb264:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_10241;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} out_vslice_dummy_var_142 := gadget_strings_product_show(out_$p393, in_$p40);
    goto corral_source_split_10240;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    out_$p393 := $M.71;
    goto corral_source_split_10239;

  $bb263:
    assume out_$i392 == 1;
    goto corral_source_split_10238;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 1);
    goto corral_source_split_10226;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    out_$i391 := $M.98;
    goto corral_source_split_10225;

  $bb254:
    assume out_$i384 == 1;
    goto corral_source_split_10224;

  $bb253:
    assume !(out_$i383 == 1);
    assume {:verifier.code 0} true;
    out_$i384 := $eq.i32(out_$i382, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} ldv_stop();
    goto corral_source_split_10243;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb255:
    assume {:verifier.code 0} true;
    assume !(out_$i384 == 1);
    goto $bb256;

  $bb258:
    assume {:verifier.code 0} true;
    assume !(out_$i385 == 1);
    goto $bb256;

  $bb270:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb293:
    assume !(out_$i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1587} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10286;

  SeqInstr_222:
    goto corral_source_split_10285;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} composite_disconnect(out_$p411);
    goto SeqInstr_221;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    out_$p411 := $M.73;
    goto corral_source_split_10284;

  $bb292:
    assume out_$i410 == 1;
    goto corral_source_split_10283;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    out_$i410 := $eq.i32(out_$i409, 3);
    goto corral_source_split_10281;

  $bb291:
    assume {:verifier.code 0} true;
    out_$i409 := $M.99;
    goto corral_source_split_10280;

  $bb290:
    assume !(out_$i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10278;

  SeqInstr_219:
    goto corral_source_split_10277;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} composite_disconnect(out_$p408);
    goto SeqInstr_218;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    out_$p408 := $M.73;
    goto corral_source_split_10276;

  $bb289:
    assume out_$i407 == 1;
    goto corral_source_split_10275;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    out_$i407 := $eq.i32(out_$i406, 4);
    goto corral_source_split_10273;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    out_$i406 := $M.99;
    goto corral_source_split_10272;

  $bb287:
    assume out_$i405 == 1;
    goto corral_source_split_10271;

  $bb283:
    assume out_$i403 == 1;
    assume {:verifier.code 0} true;
    out_$i405 := $eq.i32(out_$i397, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb272:
    assume out_$i398 == 1;
    assume {:verifier.code 0} true;
    out_$i403 := $slt.i32(out_$i397, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb271:
    assume {:verifier.code 0} true;
    out_$i398 := $slt.i32(out_$i397, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_10245:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1581} out_$i397 := __VERIFIER_nondet_int();
    call {:si_unique_call 1582} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i397);
    call {:si_unique_call 1583} {:cexpr "tmp___78"} boogie_si_record_i32(out_$i397);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb269:
    assume out_$i396 == 1;
    goto corral_source_split_10245;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    out_$i396 := $ne.i32(out_$i395, 0);
    goto corral_source_split_9903;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    out_$i395 := $M.99;
    goto corral_source_split_9902;

  $bb70:
    assume out_$i201 == 1;
    goto corral_source_split_9901;

  $bb69:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    out_$i201 := $slt.i32(out_$i167, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb297:
    assume !(out_$i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $M.45 := out_$i416;
    call {:si_unique_call 1590} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i416);
    goto corral_source_split_10294;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    out_$i416 := $sub.i32(out_$i415, 1);
    goto corral_source_split_10293;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    out_$i415 := $M.45;
    goto corral_source_split_10292;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10291;

  SeqInstr_225:
    goto corral_source_split_10290;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} configfs_composite_unbind(out_$p414);
    goto SeqInstr_224;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    out_$p414 := $M.73;
    goto corral_source_split_10289;

  $bb296:
    assume out_$i413 == 1;
    goto corral_source_split_10288;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    out_$i413 := $eq.i32(out_$i412, 2);
    goto corral_source_split_10265;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    out_$i412 := $M.99;
    goto corral_source_split_10264;

  $bb285:
    assume out_$i404 == 1;
    goto corral_source_split_10263;

  $bb284:
    assume !(out_$i403 == 1);
    assume {:verifier.code 0} true;
    out_$i404 := $slt.i32(out_$i397, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb300:
    assume !(out_$i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb302:
    assume !(out_$i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $M.45 := out_$i424;
    call {:si_unique_call 1594} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i424);
    goto corral_source_split_10307;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    out_$i424 := $add.i32(out_$i423, 1);
    goto corral_source_split_10306;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    out_$i423 := $M.45;
    goto corral_source_split_10305;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1593} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10304;

  $bb301:
    assume out_$i422 == 1;
    goto corral_source_split_10303;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    out_$i422 := $eq.i32(out_$i421, 0);
    goto corral_source_split_10301;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    out_$i421 := $M.130;
    goto corral_source_split_10300;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $M.130 := out_$i420;
    call {:si_unique_call 1592} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i420);
    goto corral_source_split_10299;

  SeqInstr_228:
    goto corral_source_split_10298;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} out_$i420 := configfs_composite_bind(out_$p419, in_$p44);
    goto SeqInstr_227;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    out_$p419 := $M.73;
    goto corral_source_split_10297;

  $bb299:
    assume out_$i418 == 1;
    goto corral_source_split_10296;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    out_$i418 := $eq.i32(out_$i417, 1);
    goto corral_source_split_10269;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    out_$i417 := $M.99;
    goto corral_source_split_10268;

  $bb286:
    assume !(out_$i404 == 1);
    goto corral_source_split_10267;

  $bb315:
    assume !(out_$i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10336;

  SeqInstr_240:
    goto corral_source_split_10335;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} composite_disconnect(out_$p436);
    goto SeqInstr_239;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    out_$p436 := $M.73;
    goto corral_source_split_10334;

  $bb314:
    assume out_$i435 == 1;
    goto corral_source_split_10333;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    out_$i435 := $eq.i32(out_$i434, 2);
    goto corral_source_split_10331;

  $bb313:
    assume {:verifier.code 0} true;
    out_$i434 := $M.99;
    goto corral_source_split_10330;

  $bb312:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $M.99 := 3;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10328;

  SeqInstr_237:
    goto corral_source_split_10327;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} composite_disconnect(out_$p433);
    goto SeqInstr_236;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    out_$p433 := $M.73;
    goto corral_source_split_10326;

  $bb311:
    assume out_$i432 == 1;
    goto corral_source_split_10325;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    out_$i432 := $eq.i32(out_$i431, 3);
    goto corral_source_split_10323;

  $bb310:
    assume {:verifier.code 0} true;
    out_$i431 := $M.99;
    goto corral_source_split_10322;

  $bb309:
    assume !(out_$i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10320;

  SeqInstr_234:
    goto corral_source_split_10319;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} composite_disconnect(out_$p430);
    goto SeqInstr_233;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    out_$p430 := $M.73;
    goto corral_source_split_10318;

  $bb308:
    assume out_$i429 == 1;
    goto corral_source_split_10317;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    out_$i429 := $eq.i32(out_$i428, 1);
    goto corral_source_split_10315;

  $bb307:
    assume {:verifier.code 0} true;
    out_$i428 := $M.99;
    goto corral_source_split_10314;

  $bb306:
    assume !(out_$i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $M.99 := 4;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10312;

  SeqInstr_231:
    goto corral_source_split_10311;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} composite_disconnect(out_$p427);
    goto SeqInstr_230;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    out_$p427 := $M.73;
    goto corral_source_split_10310;

  $bb305:
    assume out_$i426 == 1;
    goto corral_source_split_10309;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    out_$i426 := $eq.i32(out_$i425, 4);
    goto corral_source_split_10257;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    out_$i425 := $M.99;
    goto corral_source_split_10256;

  $bb281:
    assume out_$i402 == 1;
    goto corral_source_split_10255;

  $bb274:
    assume out_$i399 == 1;
    assume {:verifier.code 0} true;
    out_$i402 := $slt.i32(out_$i397, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb273:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    out_$i399 := $slt.i32(out_$i397, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb318:
    assume !(out_$i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $M.99 := 4;
    call {:si_unique_call 1604} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10341;

  SeqInstr_243:
    goto corral_source_split_10340;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} composite_suspend(out_$p439);
    goto SeqInstr_242;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    out_$p439 := $M.73;
    goto corral_source_split_10339;

  $bb317:
    assume out_$i438 == 1;
    goto corral_source_split_10338;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    out_$i438 := $eq.i32(out_$i437, 3);
    goto corral_source_split_10261;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    out_$i437 := $M.99;
    goto corral_source_split_10260;

  $bb282:
    assume !(out_$i402 == 1);
    goto corral_source_split_10259;

  $bb321:
    assume !(out_$i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb323:
    assume !(out_$i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $M.99 := 3;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10351;

  $bb322:
    assume out_$i445 == 1;
    goto corral_source_split_10350;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    out_$i445 := $eq.i32(out_$i444, 0);
    goto corral_source_split_10348;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    out_$i444 := $M.131;
    goto corral_source_split_10347;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $M.131 := out_$i443;
    call {:si_unique_call 1606} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i443);
    goto corral_source_split_10346;

  SeqInstr_246:
    goto corral_source_split_10345;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} out_$i443 := composite_setup(out_$p442, in_$p42);
    goto SeqInstr_245;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    out_$p442 := $M.73;
    goto corral_source_split_10344;

  $bb320:
    assume out_$i441 == 1;
    goto corral_source_split_10343;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    out_$i441 := $eq.i32(out_$i440, 2);
    goto corral_source_split_10249;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    out_$i440 := $M.99;
    goto corral_source_split_10248;

  $bb276:
    assume out_$i400 == 1;
    goto corral_source_split_10247;

  $bb275:
    assume !(out_$i399 == 1);
    assume {:verifier.code 0} true;
    out_$i400 := $slt.i32(out_$i397, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb327:
    assume !(out_$i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $M.99 := 3;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10356;

  SeqInstr_249:
    goto corral_source_split_10355;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} composite_resume(out_$p448);
    goto SeqInstr_248;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    out_$p448 := $M.73;
    goto corral_source_split_10354;

  $bb326:
    assume out_$i447 == 1;
    goto corral_source_split_10353;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    out_$i447 := $eq.i32(out_$i446, 4);
    goto corral_source_split_10253;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    out_$i446 := $M.99;
    goto corral_source_split_10252;

  $bb278:
    assume out_$i401 == 1;
    goto corral_source_split_10251;

  $bb277:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    out_$i401 := $eq.i32(out_$i397, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} ldv_stop();
    goto corral_source_split_10358;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb279:
    assume {:verifier.code 0} true;
    assume !(out_$i401 == 1);
    goto $bb280;

  $bb288:
    assume {:verifier.code 0} true;
    assume !(out_$i405 == 1);
    goto $bb280;

  $bb333:
    assume !(out_$i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb343:
    assume !(out_$i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10373;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} gadgets_drop(out_$p457, in_$p46);
    goto corral_source_split_10372;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    out_$p457 := $M.82;
    goto corral_source_split_10371;

  $bb342:
    assume out_$i456 == 1;
    goto corral_source_split_10370;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    out_$i456 := $eq.i32(out_$i455, 1);
    goto corral_source_split_10368;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    out_$i455 := $M.100;
    goto corral_source_split_10367;

  $bb340:
    assume out_$i454 == 1;
    goto corral_source_split_10366;

  $bb335:
    assume out_$i452 == 1;
    assume {:verifier.code 0} true;
    out_$i454 := $eq.i32(out_$i451, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb334:
    assume {:verifier.code 0} true;
    out_$i452 := $slt.i32(out_$i451, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_10360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1611} out_$i451 := __VERIFIER_nondet_int();
    call {:si_unique_call 1612} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i451);
    call {:si_unique_call 1613} {:cexpr "tmp___79"} boogie_si_record_i32(out_$i451);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb332:
    assume out_$i450 == 1;
    goto corral_source_split_10360;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    out_$i450 := $ne.i32(out_$i449, 0);
    goto corral_source_split_9907;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    out_$i449 := $M.100;
    goto corral_source_split_9906;

  $bb72:
    assume out_$i202 == 1;
    goto corral_source_split_9905;

  $bb71:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    out_$i202 := $slt.i32(out_$i167, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb347:
    assume !(out_$i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10378;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} out_vslice_dummy_var_143 := gadgets_make(out_$p460, in_$p47);
    goto corral_source_split_10377;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    out_$p460 := $M.82;
    goto corral_source_split_10376;

  $bb346:
    assume out_$i459 == 1;
    goto corral_source_split_10375;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    out_$i459 := $eq.i32(out_$i458, 1);
    goto corral_source_split_10364;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    out_$i458 := $M.100;
    goto corral_source_split_10363;

  $bb337:
    assume out_$i453 == 1;
    goto corral_source_split_10362;

  $bb336:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    out_$i453 := $eq.i32(out_$i451, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} ldv_stop();
    goto corral_source_split_10380;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb338:
    assume {:verifier.code 0} true;
    assume !(out_$i453 == 1);
    goto $bb339;

  $bb341:
    assume {:verifier.code 0} true;
    assume !(out_$i454 == 1);
    goto $bb339;

  $bb353:
    assume !(out_$i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb363:
    assume !(out_$i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_10396;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} out_vslice_dummy_var_144 := gadget_strings_manufacturer_store(out_$p470, in_$p48, out_$i471);
    goto corral_source_split_10395;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    out_$i471 := $load.i64($M.41, in_$p6);
    goto corral_source_split_10394;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    out_$p470 := $M.89;
    goto corral_source_split_10393;

  $bb362:
    assume out_$i469 == 1;
    goto corral_source_split_10392;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    out_$i469 := $eq.i32(out_$i468, 1);
    goto corral_source_split_10390;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    out_$i468 := $M.101;
    goto corral_source_split_10389;

  $bb360:
    assume out_$i467 == 1;
    goto corral_source_split_10388;

  $bb355:
    assume out_$i465 == 1;
    assume {:verifier.code 0} true;
    out_$i467 := $eq.i32(out_$i464, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb354:
    assume {:verifier.code 0} true;
    out_$i465 := $slt.i32(out_$i464, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  corral_source_split_10382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1619} out_$i464 := __VERIFIER_nondet_int();
    call {:si_unique_call 1620} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i464);
    call {:si_unique_call 1621} {:cexpr "tmp___80"} boogie_si_record_i32(out_$i464);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb352:
    assume out_$i463 == 1;
    goto corral_source_split_10382;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    out_$i463 := $ne.i32(out_$i462, 0);
    goto corral_source_split_9911;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    out_$i462 := $M.101;
    goto corral_source_split_9910;

  $bb73:
    assume !(out_$i202 == 1);
    goto corral_source_split_9909;

  $bb367:
    assume !(out_$i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_10401;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} out_vslice_dummy_var_145 := gadget_strings_manufacturer_show(out_$p475, in_$p49);
    goto corral_source_split_10400;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    out_$p475 := $M.89;
    goto corral_source_split_10399;

  $bb366:
    assume out_$i474 == 1;
    goto corral_source_split_10398;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    out_$i474 := $eq.i32(out_$i473, 1);
    goto corral_source_split_10386;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    out_$i473 := $M.101;
    goto corral_source_split_10385;

  $bb357:
    assume out_$i466 == 1;
    goto corral_source_split_10384;

  $bb356:
    assume !(out_$i465 == 1);
    assume {:verifier.code 0} true;
    out_$i466 := $eq.i32(out_$i464, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb357, $bb358;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_stop();
    goto corral_source_split_10403;

  $bb359:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb358:
    assume {:verifier.code 0} true;
    assume !(out_$i466 == 1);
    goto $bb359;

  $bb361:
    assume {:verifier.code 0} true;
    assume !(out_$i467 == 1);
    goto $bb359;

  $bb373:
    assume !(out_$i478 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb383:
    assume !(out_$i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_10419;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} out_vslice_dummy_var_146 := gadget_dev_desc_bcdDevice_store(out_$p485, in_$p50, out_$i486);
    goto corral_source_split_10418;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    out_$i486 := $load.i64($M.41, in_$p7);
    goto corral_source_split_10417;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    out_$p485 := $M.56;
    goto corral_source_split_10416;

  $bb382:
    assume out_$i484 == 1;
    goto corral_source_split_10415;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    out_$i484 := $eq.i32(out_$i483, 1);
    goto corral_source_split_10413;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    out_$i483 := $M.102;
    goto corral_source_split_10412;

  $bb380:
    assume out_$i482 == 1;
    goto corral_source_split_10411;

  $bb375:
    assume out_$i480 == 1;
    assume {:verifier.code 0} true;
    out_$i482 := $eq.i32(out_$i479, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb374:
    assume {:verifier.code 0} true;
    out_$i480 := $slt.i32(out_$i479, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  corral_source_split_10405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1627} out_$i479 := __VERIFIER_nondet_int();
    call {:si_unique_call 1628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i479);
    call {:si_unique_call 1629} {:cexpr "tmp___81"} boogie_si_record_i32(out_$i479);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb372:
    assume out_$i478 == 1;
    goto corral_source_split_10405;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    out_$i478 := $ne.i32(out_$i477, 0);
    goto corral_source_split_9895;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    out_$i477 := $M.102;
    goto corral_source_split_9894;

  $bb64:
    assume out_$i198 == 1;
    goto corral_source_split_9893;

  $bb58:
    assume out_$i195 == 1;
    assume {:verifier.code 0} true;
    out_$i198 := $slt.i32(out_$i167, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb48:
    assume out_$i190 == 1;
    assume {:verifier.code 0} true;
    out_$i195 := $slt.i32(out_$i167, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb47:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    out_$i190 := $slt.i32(out_$i167, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb387:
    assume !(out_$i489 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_10424;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} out_vslice_dummy_var_147 := gadget_dev_desc_bcdDevice_show(out_$p490, in_$p51);
    goto corral_source_split_10423;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    out_$p490 := $M.56;
    goto corral_source_split_10422;

  $bb386:
    assume out_$i489 == 1;
    goto corral_source_split_10421;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    out_$i489 := $eq.i32(out_$i488, 1);
    goto corral_source_split_10409;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    out_$i488 := $M.102;
    goto corral_source_split_10408;

  $bb377:
    assume out_$i481 == 1;
    goto corral_source_split_10407;

  $bb376:
    assume !(out_$i480 == 1);
    assume {:verifier.code 0} true;
    out_$i481 := $eq.i32(out_$i479, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} ldv_stop();
    goto corral_source_split_10426;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb378:
    assume {:verifier.code 0} true;
    assume !(out_$i481 == 1);
    goto $bb379;

  $bb381:
    assume {:verifier.code 0} true;
    assume !(out_$i482 == 1);
    goto $bb379;

  $bb393:
    assume !(out_$i493 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb408:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb403:
    assume !(out_$i499 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $M.103 := 1;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_10442;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} out_vslice_dummy_var_148 := gadget_strings_serialnumber_store(out_$p500, in_$p53, out_$i501);
    goto corral_source_split_10441;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    out_$i501 := $load.i64($M.41, in_$p8);
    goto corral_source_split_10440;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    out_$p500 := $M.70;
    goto corral_source_split_10439;

  $bb402:
    assume out_$i499 == 1;
    goto corral_source_split_10438;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    out_$i499 := $eq.i32(out_$i498, 1);
    goto corral_source_split_10436;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    out_$i498 := $M.103;
    goto corral_source_split_10435;

  $bb400:
    assume out_$i497 == 1;
    goto corral_source_split_10434;

  $bb395:
    assume out_$i495 == 1;
    assume {:verifier.code 0} true;
    out_$i497 := $eq.i32(out_$i494, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb394:
    assume {:verifier.code 0} true;
    out_$i495 := $slt.i32(out_$i494, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  corral_source_split_10428:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} out_$i494 := __VERIFIER_nondet_int();
    call {:si_unique_call 1636} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i494);
    call {:si_unique_call 1637} {:cexpr "tmp___82"} boogie_si_record_i32(out_$i494);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb392:
    assume out_$i493 == 1;
    goto corral_source_split_10428;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    out_$i493 := $ne.i32(out_$i492, 0);
    goto corral_source_split_9899;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    out_$i492 := $M.103;
    goto corral_source_split_9898;

  $bb65:
    assume !(out_$i198 == 1);
    goto corral_source_split_9897;

  $bb407:
    assume !(out_$i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb408;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    goto $bb408;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $M.103 := 1;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_10447;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} out_vslice_dummy_var_149 := gadget_strings_serialnumber_show(out_$p505, in_$p52);
    goto corral_source_split_10446;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    out_$p505 := $M.70;
    goto corral_source_split_10445;

  $bb406:
    assume out_$i504 == 1;
    goto corral_source_split_10444;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    out_$i504 := $eq.i32(out_$i503, 1);
    goto corral_source_split_10432;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    out_$i503 := $M.103;
    goto corral_source_split_10431;

  $bb397:
    assume out_$i496 == 1;
    goto corral_source_split_10430;

  $bb396:
    assume !(out_$i495 == 1);
    assume {:verifier.code 0} true;
    out_$i496 := $eq.i32(out_$i494, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} ldv_stop();
    goto corral_source_split_10449;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb398:
    assume {:verifier.code 0} true;
    assume !(out_$i496 == 1);
    goto $bb399;

  $bb401:
    assume {:verifier.code 0} true;
    assume !(out_$i497 == 1);
    goto $bb399;

  $bb413:
    assume !(out_$i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb432:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb430:
    assume !(out_$i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb431;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    goto $bb431;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $M.104 := 2;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(2);
    goto corral_source_split_10482;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} out_vslice_dummy_var_151 := gadget_info_attr_show(out_$p522, out_$p523, in_$p55);
    goto corral_source_split_10481;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    out_$p523 := $M.59;
    goto corral_source_split_10480;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    out_$p522 := $M.60;
    goto corral_source_split_10479;

  $bb429:
    assume out_$i521 == 1;
    goto corral_source_split_10478;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    out_$i521 := $eq.i32(out_$i520, 2);
    goto corral_source_split_10476;

  $bb428:
    assume {:verifier.code 0} true;
    out_$i520 := $M.104;
    goto corral_source_split_10475;

  $bb427:
    assume !(out_$i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $M.104 := 1;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_10473;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} out_vslice_dummy_var_150 := gadget_info_attr_show(out_$p517, out_$p518, in_$p55);
    goto corral_source_split_10472;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    out_$p518 := $M.59;
    goto corral_source_split_10471;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    out_$p517 := $M.60;
    goto corral_source_split_10470;

  $bb426:
    assume out_$i516 == 1;
    goto corral_source_split_10469;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    out_$i516 := $eq.i32(out_$i515, 1);
    goto corral_source_split_10467;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    out_$i515 := $M.104;
    goto corral_source_split_10466;

  $bb424:
    assume out_$i514 == 1;
    goto corral_source_split_10465;

  $bb422:
    assume out_$i513 == 1;
    assume {:verifier.code 0} true;
    out_$i514 := $eq.i32(out_$i509, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  $bb415:
    assume out_$i510 == 1;
    assume {:verifier.code 0} true;
    out_$i513 := $slt.i32(out_$i509, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422, $bb423;

  $bb414:
    assume {:verifier.code 0} true;
    out_$i510 := $slt.i32(out_$i509, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  corral_source_split_10451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1643} out_$i509 := __VERIFIER_nondet_int();
    call {:si_unique_call 1644} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i509);
    call {:si_unique_call 1645} {:cexpr "tmp___83"} boogie_si_record_i32(out_$i509);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb412:
    assume out_$i508 == 1;
    goto corral_source_split_10451;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    out_$i508 := $ne.i32(out_$i507, 0);
    goto corral_source_split_9883;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    out_$i507 := $M.104;
    goto corral_source_split_9882;

  $bb60:
    assume out_$i196 == 1;
    goto corral_source_split_9881;

  $bb59:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    out_$i196 := $slt.i32(out_$i167, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb434:
    assume !(out_$i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $M.45 := out_$i529;
    call {:si_unique_call 1652} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i529);
    goto corral_source_split_10490;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    out_$i529 := $sub.i32(out_$i528, 1);
    goto corral_source_split_10489;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    out_$i528 := $M.45;
    goto corral_source_split_10488;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $M.104 := 1;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_10487;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} gadget_info_attr_release(out_$p527);
    goto corral_source_split_10486;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    out_$p527 := $M.60;
    goto corral_source_split_10485;

  $bb433:
    assume out_$i526 == 1;
    goto corral_source_split_10484;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    out_$i526 := $eq.i32(out_$i525, 2);
    goto corral_source_split_10463;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    out_$i525 := $M.104;
    goto corral_source_split_10462;

  $bb423:
    assume !(out_$i513 == 1);
    goto corral_source_split_10461;

  $bb440:
    assume !(out_$i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    goto $bb441;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $M.104 := 2;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(2);
    goto corral_source_split_10507;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} out_vslice_dummy_var_153 := gadget_info_attr_store(out_$p538, out_$p539, in_$p54, out_$i540);
    goto corral_source_split_10506;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    out_$i540 := $load.i64($M.41, in_$p9);
    goto corral_source_split_10505;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    out_$p539 := $M.59;
    goto corral_source_split_10504;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    out_$p538 := $M.60;
    goto corral_source_split_10503;

  $bb439:
    assume out_$i537 == 1;
    goto corral_source_split_10502;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb439, $bb440;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    out_$i537 := $eq.i32(out_$i536, 2);
    goto corral_source_split_10500;

  $bb438:
    assume {:verifier.code 0} true;
    out_$i536 := $M.104;
    goto corral_source_split_10499;

  $bb437:
    assume !(out_$i531 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    goto $bb438;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $M.104 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_10497;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} out_vslice_dummy_var_152 := gadget_info_attr_store(out_$p532, out_$p533, in_$p54, out_$i534);
    goto corral_source_split_10496;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    out_$i534 := $load.i64($M.41, in_$p9);
    goto corral_source_split_10495;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    out_$p533 := $M.59;
    goto corral_source_split_10494;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    out_$p532 := $M.60;
    goto corral_source_split_10493;

  $bb436:
    assume out_$i531 == 1;
    goto corral_source_split_10492;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    out_$i531 := $eq.i32(out_$i530, 1);
    goto corral_source_split_10455;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    out_$i530 := $M.104;
    goto corral_source_split_10454;

  $bb417:
    assume out_$i511 == 1;
    goto corral_source_split_10453;

  $bb416:
    assume !(out_$i510 == 1);
    assume {:verifier.code 0} true;
    out_$i511 := $slt.i32(out_$i509, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  $bb443:
    assume !(out_$i543 == 1);
    assume {:verifier.code 0} true;
    goto $bb444;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    goto $bb444;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $M.45 := out_$i546;
    call {:si_unique_call 1659} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i546);
    goto corral_source_split_10514;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    out_$i546 := $add.i32(out_$i545, 1);
    goto corral_source_split_10513;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    out_$i545 := $M.45;
    goto corral_source_split_10512;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $M.104 := 2;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(2);
    goto corral_source_split_10511;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} out_vslice_dummy_var_154 := ldv_probe_27();
    goto corral_source_split_10510;

  $bb442:
    assume out_$i543 == 1;
    goto corral_source_split_10509;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    out_$i543 := $eq.i32(out_$i542, 1);
    goto corral_source_split_10459;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    out_$i542 := $M.104;
    goto corral_source_split_10458;

  $bb419:
    assume out_$i512 == 1;
    goto corral_source_split_10457;

  $bb418:
    assume !(out_$i511 == 1);
    assume {:verifier.code 0} true;
    out_$i512 := $eq.i32(out_$i509, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_stop();
    goto corral_source_split_10516;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb420:
    assume {:verifier.code 0} true;
    assume !(out_$i512 == 1);
    goto $bb421;

  $bb425:
    assume {:verifier.code 0} true;
    assume !(out_$i514 == 1);
    goto $bb421;

  $bb449:
    assume !(out_$i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb460:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb459:
    assume !(out_$i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    goto $bb460;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_10532;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} out_vslice_dummy_var_155 := gadget_config_desc_MaxPower_store(out_$p555, in_$p56, out_$i556);
    goto corral_source_split_10531;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    out_$i556 := $load.i64($M.41, in_$p10);
    goto corral_source_split_10530;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    out_$p555 := $M.83;
    goto corral_source_split_10529;

  $bb458:
    assume out_$i554 == 1;
    goto corral_source_split_10528;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    out_$i554 := $eq.i32(out_$i553, 1);
    goto corral_source_split_10526;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    out_$i553 := $M.105;
    goto corral_source_split_10525;

  $bb456:
    assume out_$i552 == 1;
    goto corral_source_split_10524;

  $bb451:
    assume out_$i550 == 1;
    assume {:verifier.code 0} true;
    out_$i552 := $eq.i32(out_$i549, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb450:
    assume {:verifier.code 0} true;
    out_$i550 := $slt.i32(out_$i549, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  corral_source_split_10518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1661} out_$i549 := __VERIFIER_nondet_int();
    call {:si_unique_call 1662} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i549);
    call {:si_unique_call 1663} {:cexpr "tmp___84"} boogie_si_record_i32(out_$i549);
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb448:
    assume out_$i548 == 1;
    goto corral_source_split_10518;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb448, $bb449;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    out_$i548 := $ne.i32(out_$i547, 0);
    goto corral_source_split_9887;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    out_$i547 := $M.105;
    goto corral_source_split_9886;

  $bb62:
    assume out_$i197 == 1;
    goto corral_source_split_9885;

  $bb61:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    out_$i197 := $slt.i32(out_$i167, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb463:
    assume !(out_$i559 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    goto $bb464;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_10537;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} out_vslice_dummy_var_156 := gadget_config_desc_MaxPower_show(out_$p560, in_$p57);
    goto corral_source_split_10536;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    out_$p560 := $M.83;
    goto corral_source_split_10535;

  $bb462:
    assume out_$i559 == 1;
    goto corral_source_split_10534;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    out_$i559 := $eq.i32(out_$i558, 1);
    goto corral_source_split_10522;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    out_$i558 := $M.105;
    goto corral_source_split_10521;

  $bb453:
    assume out_$i551 == 1;
    goto corral_source_split_10520;

  $bb452:
    assume !(out_$i550 == 1);
    assume {:verifier.code 0} true;
    out_$i551 := $eq.i32(out_$i549, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_stop();
    goto corral_source_split_10539;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb454:
    assume {:verifier.code 0} true;
    assume !(out_$i551 == 1);
    goto $bb455;

  $bb457:
    assume {:verifier.code 0} true;
    assume !(out_$i552 == 1);
    goto $bb455;

  $bb469:
    assume !(out_$i563 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb481:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb486:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb480:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb479:
    assume !(out_$i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb480;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    goto $bb480;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $M.106 := 1;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_10555;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} out_vslice_dummy_var_157 := gadget_dev_desc_UDC_store(out_$p570, in_$p58, out_$i571);
    goto corral_source_split_10554;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    out_$i571 := $load.i64($M.41, in_$p11);
    goto corral_source_split_10553;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    out_$p570 := $M.69;
    goto corral_source_split_10552;

  $bb478:
    assume out_$i569 == 1;
    goto corral_source_split_10551;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    out_$i569 := $eq.i32(out_$i568, 1);
    goto corral_source_split_10549;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    out_$i568 := $M.106;
    goto corral_source_split_10548;

  $bb476:
    assume out_$i567 == 1;
    goto corral_source_split_10547;

  $bb471:
    assume out_$i565 == 1;
    assume {:verifier.code 0} true;
    out_$i567 := $eq.i32(out_$i564, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  $bb470:
    assume {:verifier.code 0} true;
    out_$i565 := $slt.i32(out_$i564, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  corral_source_split_10541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1669} out_$i564 := __VERIFIER_nondet_int();
    call {:si_unique_call 1670} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i564);
    call {:si_unique_call 1671} {:cexpr "tmp___85"} boogie_si_record_i32(out_$i564);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb468:
    assume out_$i563 == 1;
    goto corral_source_split_10541;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    out_$i563 := $ne.i32(out_$i562, 0);
    goto corral_source_split_9891;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    out_$i562 := $M.106;
    goto corral_source_split_9890;

  $bb63:
    assume !(out_$i197 == 1);
    goto corral_source_split_9889;

  $bb483:
    assume !(out_$i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $M.106 := 1;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_10560;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} out_vslice_dummy_var_158 := gadget_dev_desc_UDC_show(out_$p575, in_$p59);
    goto corral_source_split_10559;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    out_$p575 := $M.69;
    goto corral_source_split_10558;

  $bb482:
    assume out_$i574 == 1;
    goto corral_source_split_10557;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    out_$i574 := $eq.i32(out_$i573, 1);
    goto corral_source_split_10545;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    out_$i573 := $M.106;
    goto corral_source_split_10544;

  $bb473:
    assume out_$i566 == 1;
    goto corral_source_split_10543;

  $bb472:
    assume !(out_$i565 == 1);
    assume {:verifier.code 0} true;
    out_$i566 := $eq.i32(out_$i564, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} ldv_stop();
    goto corral_source_split_10562;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb474:
    assume {:verifier.code 0} true;
    assume !(out_$i566 == 1);
    goto $bb475;

  $bb477:
    assume {:verifier.code 0} true;
    assume !(out_$i567 == 1);
    goto $bb475;

  $bb489:
    assume !(out_$i578 == 1);
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb504:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb499:
    assume !(out_$i584 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    goto $bb500;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_10577;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} gadget_config_name_strings_drop(out_$p585, in_$p61);
    goto corral_source_split_10576;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    out_$p585 := $M.57;
    goto corral_source_split_10575;

  $bb498:
    assume out_$i584 == 1;
    goto corral_source_split_10574;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    out_$i584 := $eq.i32(out_$i583, 1);
    goto corral_source_split_10572;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    out_$i583 := $M.107;
    goto corral_source_split_10571;

  $bb496:
    assume out_$i582 == 1;
    goto corral_source_split_10570;

  $bb491:
    assume out_$i580 == 1;
    assume {:verifier.code 0} true;
    out_$i582 := $eq.i32(out_$i579, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  $bb490:
    assume {:verifier.code 0} true;
    out_$i580 := $slt.i32(out_$i579, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  corral_source_split_10564:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1677} out_$i579 := __VERIFIER_nondet_int();
    call {:si_unique_call 1678} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i579);
    call {:si_unique_call 1679} {:cexpr "tmp___86"} boogie_si_record_i32(out_$i579);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb488:
    assume out_$i578 == 1;
    goto corral_source_split_10564;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    out_$i578 := $ne.i32(out_$i577, 0);
    goto corral_source_split_9875;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    out_$i577 := $M.107;
    goto corral_source_split_9874;

  $bb56:
    assume out_$i194 == 1;
    goto corral_source_split_9873;

  $bb50:
    assume out_$i191 == 1;
    assume {:verifier.code 0} true;
    out_$i194 := $slt.i32(out_$i167, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb49:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    out_$i191 := $slt.i32(out_$i167, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb503:
    assume !(out_$i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    goto $bb504;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_10582;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_vslice_dummy_var_159 := gadget_config_name_strings_make(out_$p588, in_$p62);
    goto corral_source_split_10581;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    out_$p588 := $M.57;
    goto corral_source_split_10580;

  $bb502:
    assume out_$i587 == 1;
    goto corral_source_split_10579;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb502, $bb503;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    out_$i587 := $eq.i32(out_$i586, 1);
    goto corral_source_split_10568;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    out_$i586 := $M.107;
    goto corral_source_split_10567;

  $bb493:
    assume out_$i581 == 1;
    goto corral_source_split_10566;

  $bb492:
    assume !(out_$i580 == 1);
    assume {:verifier.code 0} true;
    out_$i581 := $eq.i32(out_$i579, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb493, $bb494;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} ldv_stop();
    goto corral_source_split_10584;

  $bb495:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb494:
    assume {:verifier.code 0} true;
    assume !(out_$i581 == 1);
    goto $bb495;

  $bb497:
    assume {:verifier.code 0} true;
    assume !(out_$i582 == 1);
    goto $bb495;

  $bb509:
    assume !(out_$i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb524:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb519:
    assume !(out_$i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    goto $bb520;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_10599;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} gadget_strings_strings_drop(out_$p598, in_$p64);
    goto corral_source_split_10598;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    out_$p598 := $M.91;
    goto corral_source_split_10597;

  $bb518:
    assume out_$i597 == 1;
    goto corral_source_split_10596;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    out_$i597 := $eq.i32(out_$i596, 1);
    goto corral_source_split_10594;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    out_$i596 := $M.108;
    goto corral_source_split_10593;

  $bb516:
    assume out_$i595 == 1;
    goto corral_source_split_10592;

  $bb511:
    assume out_$i593 == 1;
    assume {:verifier.code 0} true;
    out_$i595 := $eq.i32(out_$i592, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  $bb510:
    assume {:verifier.code 0} true;
    out_$i593 := $slt.i32(out_$i592, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb511, $bb512;

  corral_source_split_10586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1685} out_$i592 := __VERIFIER_nondet_int();
    call {:si_unique_call 1686} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i592);
    call {:si_unique_call 1687} {:cexpr "tmp___87"} boogie_si_record_i32(out_$i592);
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb508:
    assume out_$i591 == 1;
    goto corral_source_split_10586;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb508, $bb509;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    out_$i591 := $ne.i32(out_$i590, 0);
    goto corral_source_split_9879;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    out_$i590 := $M.108;
    goto corral_source_split_9878;

  $bb57:
    assume !(out_$i194 == 1);
    goto corral_source_split_9877;

  $bb523:
    assume !(out_$i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb524;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    goto $bb524;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_10604;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} out_vslice_dummy_var_160 := gadget_strings_strings_make(out_$p601, in_$p65);
    goto corral_source_split_10603;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    out_$p601 := $M.91;
    goto corral_source_split_10602;

  $bb522:
    assume out_$i600 == 1;
    goto corral_source_split_10601;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    out_$i600 := $eq.i32(out_$i599, 1);
    goto corral_source_split_10590;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    out_$i599 := $M.108;
    goto corral_source_split_10589;

  $bb513:
    assume out_$i594 == 1;
    goto corral_source_split_10588;

  $bb512:
    assume !(out_$i593 == 1);
    assume {:verifier.code 0} true;
    out_$i594 := $eq.i32(out_$i592, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_stop();
    goto corral_source_split_10606;

  $bb515:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb514:
    assume {:verifier.code 0} true;
    assume !(out_$i594 == 1);
    goto $bb515;

  $bb517:
    assume {:verifier.code 0} true;
    assume !(out_$i595 == 1);
    goto $bb515;

  $bb529:
    assume !(out_$i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb544:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb540:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb539:
    assume !(out_$i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb540;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    goto $bb540;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $M.109 := 1;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_10622;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} out_vslice_dummy_var_161 := gadget_config_desc_bmAttributes_store(out_$p611, in_$p67, out_$i612);
    goto corral_source_split_10621;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    out_$i612 := $load.i64($M.41, in_$p12);
    goto corral_source_split_10620;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    out_$p611 := $M.58;
    goto corral_source_split_10619;

  $bb538:
    assume out_$i610 == 1;
    goto corral_source_split_10618;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb538, $bb539;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    out_$i610 := $eq.i32(out_$i609, 1);
    goto corral_source_split_10616;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    out_$i609 := $M.109;
    goto corral_source_split_10615;

  $bb536:
    assume out_$i608 == 1;
    goto corral_source_split_10614;

  $bb531:
    assume out_$i606 == 1;
    assume {:verifier.code 0} true;
    out_$i608 := $eq.i32(out_$i605, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb536, $bb537;

  $bb530:
    assume {:verifier.code 0} true;
    out_$i606 := $slt.i32(out_$i605, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  corral_source_split_10608:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1693} out_$i605 := __VERIFIER_nondet_int();
    call {:si_unique_call 1694} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i605);
    call {:si_unique_call 1695} {:cexpr "tmp___88"} boogie_si_record_i32(out_$i605);
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb528:
    assume out_$i604 == 1;
    goto corral_source_split_10608;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    out_$i604 := $ne.i32(out_$i603, 0);
    goto corral_source_split_9863;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    out_$i603 := $M.109;
    goto corral_source_split_9862;

  $bb52:
    assume out_$i192 == 1;
    goto corral_source_split_9861;

  $bb51:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    out_$i192 := $slt.i32(out_$i167, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb543:
    assume !(out_$i615 == 1);
    assume {:verifier.code 0} true;
    goto $bb544;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    goto $bb544;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $M.109 := 1;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_10627;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} out_vslice_dummy_var_162 := gadget_config_desc_bmAttributes_show(out_$p616, in_$p66);
    goto corral_source_split_10626;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    out_$p616 := $M.58;
    goto corral_source_split_10625;

  $bb542:
    assume out_$i615 == 1;
    goto corral_source_split_10624;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb542, $bb543;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    out_$i615 := $eq.i32(out_$i614, 1);
    goto corral_source_split_10612;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    out_$i614 := $M.109;
    goto corral_source_split_10611;

  $bb533:
    assume out_$i607 == 1;
    goto corral_source_split_10610;

  $bb532:
    assume !(out_$i606 == 1);
    assume {:verifier.code 0} true;
    out_$i607 := $eq.i32(out_$i605, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} ldv_stop();
    goto corral_source_split_10629;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb534:
    assume {:verifier.code 0} true;
    assume !(out_$i607 == 1);
    goto $bb535;

  $bb537:
    assume {:verifier.code 0} true;
    assume !(out_$i608 == 1);
    goto $bb535;

  $bb549:
    assume !(out_$i619 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb572:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb598:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb593:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb587:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb581:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb575:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb570:
    assume !(out_$i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb571;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    goto $bb571;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $M.110 := 2;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10670;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} out_vslice_dummy_var_164 := os_desc_attr_show(out_$p635, out_$p636, in_$p69);
    goto corral_source_split_10669;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    out_$p636 := $M.76;
    goto corral_source_split_10668;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    out_$p635 := $M.77;
    goto corral_source_split_10667;

  $bb569:
    assume out_$i634 == 1;
    goto corral_source_split_10666;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb569, $bb570;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    out_$i634 := $eq.i32(out_$i633, 2);
    goto corral_source_split_10664;

  $bb568:
    assume {:verifier.code 0} true;
    out_$i633 := $M.110;
    goto corral_source_split_10663;

  $bb567:
    assume !(out_$i629 == 1);
    assume {:verifier.code 0} true;
    goto $bb568;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    goto $bb568;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10661;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} out_vslice_dummy_var_163 := os_desc_attr_show(out_$p630, out_$p631, in_$p69);
    goto corral_source_split_10660;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    out_$p631 := $M.76;
    goto corral_source_split_10659;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    out_$p630 := $M.77;
    goto corral_source_split_10658;

  $bb566:
    assume out_$i629 == 1;
    goto corral_source_split_10657;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb566, $bb567;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    out_$i629 := $eq.i32(out_$i628, 1);
    goto corral_source_split_10655;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    out_$i628 := $M.110;
    goto corral_source_split_10654;

  $bb564:
    assume out_$i627 == 1;
    goto corral_source_split_10653;

  $bb560:
    assume out_$i625 == 1;
    assume {:verifier.code 0} true;
    out_$i627 := $eq.i32(out_$i620, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  $bb551:
    assume out_$i621 == 1;
    assume {:verifier.code 0} true;
    out_$i625 := $slt.i32(out_$i620, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb560, $bb561;

  $bb550:
    assume {:verifier.code 0} true;
    out_$i621 := $slt.i32(out_$i620, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb551, $bb552;

  corral_source_split_10631:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1701} out_$i620 := __VERIFIER_nondet_int();
    call {:si_unique_call 1702} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i620);
    call {:si_unique_call 1703} {:cexpr "tmp___89"} boogie_si_record_i32(out_$i620);
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb548:
    assume out_$i619 == 1;
    goto corral_source_split_10631;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb548, $bb549;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    out_$i619 := $ne.i32(out_$i618, 0);
    goto corral_source_split_9867;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    out_$i618 := $M.110;
    goto corral_source_split_9866;

  $bb54:
    assume out_$i193 == 1;
    goto corral_source_split_9865;

  $bb53:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    out_$i193 := $slt.i32(out_$i167, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb574:
    assume !(out_$i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb575;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    goto $bb575;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $M.45 := out_$i642;
    call {:si_unique_call 1710} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i642);
    goto corral_source_split_10678;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    out_$i642 := $sub.i32(out_$i641, 1);
    goto corral_source_split_10677;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$i641 := $M.45;
    goto corral_source_split_10676;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10675;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} os_desc_attr_release(out_$p640);
    goto corral_source_split_10674;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    out_$p640 := $M.77;
    goto corral_source_split_10673;

  $bb573:
    assume out_$i639 == 1;
    goto corral_source_split_10672;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    out_$i639 := $eq.i32(out_$i638, 2);
    goto corral_source_split_10647;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    out_$i638 := $M.110;
    goto corral_source_split_10646;

  $bb562:
    assume out_$i626 == 1;
    goto corral_source_split_10645;

  $bb561:
    assume !(out_$i625 == 1);
    assume {:verifier.code 0} true;
    out_$i626 := $slt.i32(out_$i620, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  $bb580:
    assume !(out_$i649 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    goto $bb581;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $M.110 := 2;
    call {:si_unique_call 1714} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10693;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} out_vslice_dummy_var_166 := os_desc_unlink(out_$p650, out_$p651);
    goto corral_source_split_10692;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    out_$p651 := $M.75;
    goto corral_source_split_10691;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    out_$p650 := $M.77;
    goto corral_source_split_10690;

  $bb579:
    assume out_$i649 == 1;
    goto corral_source_split_10689;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    out_$i649 := $eq.i32(out_$i648, 2);
    goto corral_source_split_10687;

  $bb578:
    assume {:verifier.code 0} true;
    out_$i648 := $M.110;
    goto corral_source_split_10686;

  $bb577:
    assume !(out_$i644 == 1);
    assume {:verifier.code 0} true;
    goto $bb578;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    goto $bb578;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1712} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10684;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} out_vslice_dummy_var_165 := os_desc_unlink(out_$p645, out_$p646);
    goto corral_source_split_10683;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    out_$p646 := $M.75;
    goto corral_source_split_10682;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    out_$p645 := $M.77;
    goto corral_source_split_10681;

  $bb576:
    assume out_$i644 == 1;
    goto corral_source_split_10680;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb576, $bb577;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    out_$i644 := $eq.i32(out_$i643, 1);
    goto corral_source_split_10651;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    out_$i643 := $M.110;
    goto corral_source_split_10650;

  $bb563:
    assume !(out_$i626 == 1);
    goto corral_source_split_10649;

  $bb586:
    assume !(out_$i660 == 1);
    assume {:verifier.code 0} true;
    goto $bb587;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    goto $bb587;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $M.110 := 2;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10710;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} out_vslice_dummy_var_168 := os_desc_attr_store(out_$p661, out_$p662, in_$p68, out_$i663);
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    out_$i663 := $load.i64($M.41, in_$p13);
    goto corral_source_split_10708;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    out_$p662 := $M.76;
    goto corral_source_split_10707;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    out_$p661 := $M.77;
    goto corral_source_split_10706;

  $bb585:
    assume out_$i660 == 1;
    goto corral_source_split_10705;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb585, $bb586;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    out_$i660 := $eq.i32(out_$i659, 2);
    goto corral_source_split_10703;

  $bb584:
    assume {:verifier.code 0} true;
    out_$i659 := $M.110;
    goto corral_source_split_10702;

  $bb583:
    assume !(out_$i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb584;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb584;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1716} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10700;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} out_vslice_dummy_var_167 := os_desc_attr_store(out_$p655, out_$p656, in_$p68, out_$i657);
    goto corral_source_split_10699;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    out_$i657 := $load.i64($M.41, in_$p13);
    goto corral_source_split_10698;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    out_$p656 := $M.76;
    goto corral_source_split_10697;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    out_$p655 := $M.77;
    goto corral_source_split_10696;

  $bb582:
    assume out_$i654 == 1;
    goto corral_source_split_10695;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb582, $bb583;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    out_$i654 := $eq.i32(out_$i653, 1);
    goto corral_source_split_10635;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    out_$i653 := $M.110;
    goto corral_source_split_10634;

  $bb553:
    assume out_$i622 == 1;
    goto corral_source_split_10633;

  $bb552:
    assume !(out_$i621 == 1);
    assume {:verifier.code 0} true;
    out_$i622 := $slt.i32(out_$i620, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb553, $bb554;

  $bb592:
    assume !(out_$i671 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    goto $bb593;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $M.110 := 2;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10725;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} out_vslice_dummy_var_170 := os_desc_link(out_$p672, out_$p673);
    goto corral_source_split_10724;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    out_$p673 := $M.75;
    goto corral_source_split_10723;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    out_$p672 := $M.77;
    goto corral_source_split_10722;

  $bb591:
    assume out_$i671 == 1;
    goto corral_source_split_10721;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb591, $bb592;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    out_$i671 := $eq.i32(out_$i670, 2);
    goto corral_source_split_10719;

  $bb590:
    assume {:verifier.code 0} true;
    out_$i670 := $M.110;
    goto corral_source_split_10718;

  $bb589:
    assume !(out_$i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    goto $bb590;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10716;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} out_vslice_dummy_var_169 := os_desc_link(out_$p667, out_$p668);
    goto corral_source_split_10715;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    out_$p668 := $M.75;
    goto corral_source_split_10714;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    out_$p667 := $M.77;
    goto corral_source_split_10713;

  $bb588:
    assume out_$i666 == 1;
    goto corral_source_split_10712;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    out_$i666 := $eq.i32(out_$i665, 1);
    goto corral_source_split_10639;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    out_$i665 := $M.110;
    goto corral_source_split_10638;

  $bb555:
    assume out_$i623 == 1;
    goto corral_source_split_10637;

  $bb554:
    assume !(out_$i622 == 1);
    assume {:verifier.code 0} true;
    out_$i623 := $slt.i32(out_$i620, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  $bb595:
    assume !(out_$i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb596;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    goto $bb596;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $M.45 := out_$i679;
    call {:si_unique_call 1725} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i679);
    goto corral_source_split_10732;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    out_$i679 := $add.i32(out_$i678, 1);
    goto corral_source_split_10731;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    out_$i678 := $M.45;
    goto corral_source_split_10730;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $M.110 := 2;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10729;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} out_vslice_dummy_var_171 := ldv_probe_10();
    goto corral_source_split_10728;

  $bb594:
    assume out_$i676 == 1;
    goto corral_source_split_10727;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594, $bb595;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    out_$i676 := $eq.i32(out_$i675, 1);
    goto corral_source_split_10643;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    out_$i675 := $M.110;
    goto corral_source_split_10642;

  $bb557:
    assume out_$i624 == 1;
    goto corral_source_split_10641;

  $bb556:
    assume !(out_$i623 == 1);
    assume {:verifier.code 0} true;
    out_$i624 := $eq.i32(out_$i620, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb557, $bb558;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} ldv_stop();
    goto corral_source_split_10734;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb558:
    assume {:verifier.code 0} true;
    assume !(out_$i624 == 1);
    goto $bb559;

  $bb565:
    assume {:verifier.code 0} true;
    assume !(out_$i627 == 1);
    goto $bb559;

  $bb601:
    assume !(out_$i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb613:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb618:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb612:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb611:
    assume !(out_$i687 == 1);
    assume {:verifier.code 0} true;
    goto $bb612;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    goto $bb612;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $M.111 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_10750;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} out_vslice_dummy_var_172 := gadget_dev_desc_idProduct_store(out_$p688, in_$p70, out_$i689);
    goto corral_source_split_10749;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    out_$i689 := $load.i64($M.41, in_$p14);
    goto corral_source_split_10748;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    out_$p688 := $M.92;
    goto corral_source_split_10747;

  $bb610:
    assume out_$i687 == 1;
    goto corral_source_split_10746;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb610, $bb611;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    out_$i687 := $eq.i32(out_$i686, 1);
    goto corral_source_split_10744;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    out_$i686 := $M.111;
    goto corral_source_split_10743;

  $bb608:
    assume out_$i685 == 1;
    goto corral_source_split_10742;

  $bb603:
    assume out_$i683 == 1;
    assume {:verifier.code 0} true;
    out_$i685 := $eq.i32(out_$i682, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb608, $bb609;

  $bb602:
    assume {:verifier.code 0} true;
    out_$i683 := $slt.i32(out_$i682, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb603, $bb604;

  corral_source_split_10736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1727} out_$i682 := __VERIFIER_nondet_int();
    call {:si_unique_call 1728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i682);
    call {:si_unique_call 1729} {:cexpr "tmp___90"} boogie_si_record_i32(out_$i682);
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb600:
    assume out_$i681 == 1;
    goto corral_source_split_10736;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600, $bb601;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    out_$i681 := $ne.i32(out_$i680, 0);
    goto corral_source_split_9871;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    out_$i680 := $M.111;
    goto corral_source_split_9870;

  $bb55:
    assume !(out_$i193 == 1);
    goto corral_source_split_9869;

  $bb615:
    assume !(out_$i692 == 1);
    assume {:verifier.code 0} true;
    goto $bb616;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    goto $bb616;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $M.111 := 1;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_10755;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} out_vslice_dummy_var_173 := gadget_dev_desc_idProduct_show(out_$p693, in_$p71);
    goto corral_source_split_10754;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    out_$p693 := $M.92;
    goto corral_source_split_10753;

  $bb614:
    assume out_$i692 == 1;
    goto corral_source_split_10752;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb614, $bb615;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    out_$i692 := $eq.i32(out_$i691, 1);
    goto corral_source_split_10740;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    out_$i691 := $M.111;
    goto corral_source_split_10739;

  $bb605:
    assume out_$i684 == 1;
    goto corral_source_split_10738;

  $bb604:
    assume !(out_$i683 == 1);
    assume {:verifier.code 0} true;
    out_$i684 := $eq.i32(out_$i682, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb605, $bb606;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_stop();
    goto corral_source_split_10757;

  $bb607:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb606:
    assume {:verifier.code 0} true;
    assume !(out_$i684 == 1);
    goto $bb607;

  $bb609:
    assume {:verifier.code 0} true;
    assume !(out_$i685 == 1);
    goto $bb607;

  $bb621:
    assume !(out_$i696 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb633:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb638:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb636:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb632:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb631:
    assume !(out_$i702 == 1);
    assume {:verifier.code 0} true;
    goto $bb632;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    goto $bb632;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $M.112 := 1;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(1);
    goto corral_source_split_10773;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} out_vslice_dummy_var_174 := gadget_dev_desc_bDeviceSubClass_store(out_$p703, in_$p73, out_$i704);
    goto corral_source_split_10772;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    out_$i704 := $load.i64($M.41, in_$p15);
    goto corral_source_split_10771;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    out_$p703 := $M.90;
    goto corral_source_split_10770;

  $bb630:
    assume out_$i702 == 1;
    goto corral_source_split_10769;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb630, $bb631;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    out_$i702 := $eq.i32(out_$i701, 1);
    goto corral_source_split_10767;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    out_$i701 := $M.112;
    goto corral_source_split_10766;

  $bb628:
    assume out_$i700 == 1;
    goto corral_source_split_10765;

  $bb623:
    assume out_$i698 == 1;
    assume {:verifier.code 0} true;
    out_$i700 := $eq.i32(out_$i697, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb628, $bb629;

  $bb622:
    assume {:verifier.code 0} true;
    out_$i698 := $slt.i32(out_$i697, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb623, $bb624;

  corral_source_split_10759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1735} out_$i697 := __VERIFIER_nondet_int();
    call {:si_unique_call 1736} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i697);
    call {:si_unique_call 1737} {:cexpr "tmp___91"} boogie_si_record_i32(out_$i697);
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb620:
    assume out_$i696 == 1;
    goto corral_source_split_10759;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb620, $bb621;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    out_$i696 := $ne.i32(out_$i695, 0);
    goto corral_source_split_9855;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    out_$i695 := $M.112;
    goto corral_source_split_9854;

  $bb44:
    assume out_$i188 == 1;
    goto corral_source_split_9853;

  $bb38:
    assume out_$i185 == 1;
    assume {:verifier.code 0} true;
    out_$i188 := $slt.i32(out_$i167, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb28:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i185 := $slt.i32(out_$i167, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb5:
    assume out_$i169 == 1;
    assume {:verifier.code 0} true;
    out_$i180 := $slt.i32(out_$i167, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb4:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    out_$i169 := $slt.i32(out_$i167, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb635:
    assume !(out_$i707 == 1);
    assume {:verifier.code 0} true;
    goto $bb636;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    goto $bb636;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $M.112 := 1;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(1);
    goto corral_source_split_10778;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} out_vslice_dummy_var_175 := gadget_dev_desc_bDeviceSubClass_show(out_$p708, in_$p72);
    goto corral_source_split_10777;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    out_$p708 := $M.90;
    goto corral_source_split_10776;

  $bb634:
    assume out_$i707 == 1;
    goto corral_source_split_10775;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb634, $bb635;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    out_$i707 := $eq.i32(out_$i706, 1);
    goto corral_source_split_10763;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i706 := $M.112;
    goto corral_source_split_10762;

  $bb625:
    assume out_$i699 == 1;
    goto corral_source_split_10761;

  $bb624:
    assume !(out_$i698 == 1);
    assume {:verifier.code 0} true;
    out_$i699 := $eq.i32(out_$i697, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb625, $bb626;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} ldv_stop();
    goto corral_source_split_10780;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb626:
    assume {:verifier.code 0} true;
    assume !(out_$i699 == 1);
    goto $bb627;

  $bb629:
    assume {:verifier.code 0} true;
    assume !(out_$i700 == 1);
    goto $bb627;

  $bb641:
    assume !(out_$i711 == 1);
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb658:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb656:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb652:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb651:
    assume !(out_$i717 == 1);
    assume {:verifier.code 0} true;
    goto $bb652;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    goto $bb652;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $M.113 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_10796;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} out_vslice_dummy_var_176 := os_desc_qw_sign_store(out_$p718, in_$p74, out_$i719);
    goto corral_source_split_10795;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    out_$i719 := $load.i64($M.41, in_$p16);
    goto corral_source_split_10794;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    out_$p718 := $M.79;
    goto corral_source_split_10793;

  $bb650:
    assume out_$i717 == 1;
    goto corral_source_split_10792;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb650, $bb651;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    out_$i717 := $eq.i32(out_$i716, 1);
    goto corral_source_split_10790;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    out_$i716 := $M.113;
    goto corral_source_split_10789;

  $bb648:
    assume out_$i715 == 1;
    goto corral_source_split_10788;

  $bb643:
    assume out_$i713 == 1;
    assume {:verifier.code 0} true;
    out_$i715 := $eq.i32(out_$i712, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb648, $bb649;

  $bb642:
    assume {:verifier.code 0} true;
    out_$i713 := $slt.i32(out_$i712, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb643, $bb644;

  corral_source_split_10782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1743} out_$i712 := __VERIFIER_nondet_int();
    call {:si_unique_call 1744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i712);
    call {:si_unique_call 1745} {:cexpr "tmp___92"} boogie_si_record_i32(out_$i712);
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb640:
    assume out_$i711 == 1;
    goto corral_source_split_10782;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb640, $bb641;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    out_$i711 := $ne.i32(out_$i710, 0);
    goto corral_source_split_9859;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    out_$i710 := $M.113;
    goto corral_source_split_9858;

  $bb45:
    assume !(out_$i188 == 1);
    goto corral_source_split_9857;

  $bb655:
    assume !(out_$i722 == 1);
    assume {:verifier.code 0} true;
    goto $bb656;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    goto $bb656;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $M.113 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_10801;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} out_vslice_dummy_var_177 := os_desc_qw_sign_show(out_$p723, in_$p75);
    goto corral_source_split_10800;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    out_$p723 := $M.79;
    goto corral_source_split_10799;

  $bb654:
    assume out_$i722 == 1;
    goto corral_source_split_10798;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb654, $bb655;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    out_$i722 := $eq.i32(out_$i721, 1);
    goto corral_source_split_10786;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    out_$i721 := $M.113;
    goto corral_source_split_10785;

  $bb645:
    assume out_$i714 == 1;
    goto corral_source_split_10784;

  $bb644:
    assume !(out_$i713 == 1);
    assume {:verifier.code 0} true;
    out_$i714 := $eq.i32(out_$i712, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb645, $bb646;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} ldv_stop();
    goto corral_source_split_10803;

  $bb647:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb646:
    assume {:verifier.code 0} true;
    assume !(out_$i714 == 1);
    goto $bb647;

  $bb649:
    assume {:verifier.code 0} true;
    assume !(out_$i715 == 1);
    goto $bb647;

  $bb661:
    assume !(out_$i726 == 1);
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb673:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb678:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb676:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb672:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb671:
    assume !(out_$i732 == 1);
    assume {:verifier.code 0} true;
    goto $bb672;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    goto $bb672;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $M.114 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_10819;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} out_vslice_dummy_var_178 := gadget_config_name_configuration_store(out_$p733, in_$p76, out_$i734);
    goto corral_source_split_10818;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    out_$i734 := $load.i64($M.41, in_$p17);
    goto corral_source_split_10817;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    out_$p733 := $M.50;
    goto corral_source_split_10816;

  $bb670:
    assume out_$i732 == 1;
    goto corral_source_split_10815;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb670, $bb671;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    out_$i732 := $eq.i32(out_$i731, 1);
    goto corral_source_split_10813;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    out_$i731 := $M.114;
    goto corral_source_split_10812;

  $bb668:
    assume out_$i730 == 1;
    goto corral_source_split_10811;

  $bb663:
    assume out_$i728 == 1;
    assume {:verifier.code 0} true;
    out_$i730 := $eq.i32(out_$i727, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb668, $bb669;

  $bb662:
    assume {:verifier.code 0} true;
    out_$i728 := $slt.i32(out_$i727, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb663, $bb664;

  corral_source_split_10805:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1751} out_$i727 := __VERIFIER_nondet_int();
    call {:si_unique_call 1752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i727);
    call {:si_unique_call 1753} {:cexpr "tmp___93"} boogie_si_record_i32(out_$i727);
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb660:
    assume out_$i726 == 1;
    goto corral_source_split_10805;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb660, $bb661;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    out_$i726 := $ne.i32(out_$i725, 0);
    goto corral_source_split_9843;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    out_$i725 := $M.114;
    goto corral_source_split_9842;

  $bb40:
    assume out_$i186 == 1;
    goto corral_source_split_9841;

  $bb39:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    out_$i186 := $slt.i32(out_$i167, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb675:
    assume !(out_$i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb676;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    goto $bb676;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $M.114 := 1;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_10824;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} out_vslice_dummy_var_179 := gadget_config_name_configuration_show(out_$p738, in_$p77);
    goto corral_source_split_10823;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    out_$p738 := $M.50;
    goto corral_source_split_10822;

  $bb674:
    assume out_$i737 == 1;
    goto corral_source_split_10821;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb674, $bb675;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    out_$i737 := $eq.i32(out_$i736, 1);
    goto corral_source_split_10809;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    out_$i736 := $M.114;
    goto corral_source_split_10808;

  $bb665:
    assume out_$i729 == 1;
    goto corral_source_split_10807;

  $bb664:
    assume !(out_$i728 == 1);
    assume {:verifier.code 0} true;
    out_$i729 := $eq.i32(out_$i727, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb665, $bb666;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_stop();
    goto corral_source_split_10826;

  $bb667:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb666:
    assume {:verifier.code 0} true;
    assume !(out_$i729 == 1);
    goto $bb667;

  $bb669:
    assume {:verifier.code 0} true;
    assume !(out_$i730 == 1);
    goto $bb667;

  $bb681:
    assume !(out_$i741 == 1);
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb697:
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb708:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb706:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb696:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb692:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb691:
    assume {:verifier.code 0} true;
    assume !(out_$i747 == 1);
    goto $bb692;

  $bb694:
    assume {:verifier.code 0} true;
    assume !(out_$i749 == 1);
    goto $bb692;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb694;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    out_$i749 := $eq.i32(out_$i748, 0);
    goto corral_source_split_10840;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    out_$i748 := $M.45;
    goto corral_source_split_10839;

  $bb690:
    assume out_$i747 == 1;
    goto corral_source_split_10838;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb690, $bb691;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    out_$i747 := $eq.i32(out_$i746, 2);
    goto corral_source_split_10836;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    out_$i746 := $M.115;
    goto corral_source_split_10835;

  $bb688:
    assume out_$i745 == 1;
    goto corral_source_split_10834;

  $bb683:
    assume out_$i743 == 1;
    assume {:verifier.code 0} true;
    out_$i745 := $eq.i32(out_$i742, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb688, $bb689;

  $bb682:
    assume {:verifier.code 0} true;
    out_$i743 := $slt.i32(out_$i742, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb683, $bb684;

  corral_source_split_10828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1759} out_$i742 := __VERIFIER_nondet_int();
    call {:si_unique_call 1760} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i742);
    call {:si_unique_call 1761} {:cexpr "tmp___94"} boogie_si_record_i32(out_$i742);
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb680:
    assume out_$i741 == 1;
    goto corral_source_split_10828;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb680, $bb681;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    out_$i741 := $ne.i32(out_$i740, 0);
    goto corral_source_split_9847;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    out_$i740 := $M.115;
    goto corral_source_split_9846;

  $bb42:
    assume out_$i187 == 1;
    goto corral_source_split_9845;

  $bb41:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    out_$i187 := $slt.i32(out_$i167, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb699:
    assume !(out_$i751 == 1);
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb705:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb704:
    assume !(out_$i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb705;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    goto $bb705;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} ldv_initialize_gadget_info_attribute_33();
    goto corral_source_split_10936;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1842} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_10935;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} ldv_initialize_gadget_info_attribute_32();
    goto corral_source_split_10934;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1840} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_10933;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} ldv_initialize_configfs_item_operations_21();
    goto corral_source_split_10932;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1838} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_10931;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} ldv_initialize_configfs_item_operations_7();
    goto corral_source_split_10930;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10929;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} ldv_initialize_configfs_item_operations_26();
    goto corral_source_split_10928;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1834} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_10927;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} ldv_initialize_gadget_strings_attribute_17();
    goto corral_source_split_10926;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_10925;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} ldv_initialize_usb_gadget_driver_2();
    goto corral_source_split_10924;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1830} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10923;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} ldv_initialize_configfs_group_operations_1();
    goto corral_source_split_10922;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1828} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10921;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} ldv_initialize_gadget_strings_attribute_18();
    goto corral_source_split_10920;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_10919;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} ldv_initialize_gadget_info_attribute_30();
    goto corral_source_split_10918;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1824} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_10917;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} ldv_initialize_gadget_strings_attribute_16();
    goto corral_source_split_10916;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $M.103 := 1;
    call {:si_unique_call 1822} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_10915;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} ldv_initialize_configfs_item_operations_27();
    goto corral_source_split_10914;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $M.104 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_10913;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} ldv_initialize_config_usb_cfg_attribute_25();
    goto corral_source_split_10912;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_10911;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} ldv_initialize_gadget_info_attribute_28();
    goto corral_source_split_10910;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $M.106 := 1;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_10909;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} ldv_initialize_configfs_group_operations_20();
    goto corral_source_split_10908;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_10907;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} ldv_initialize_configfs_group_operations_14();
    goto corral_source_split_10906;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_10905;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} ldv_initialize_config_usb_cfg_attribute_24();
    goto corral_source_split_10904;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $M.109 := 1;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_10903;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} ldv_initialize_configfs_item_operations_10();
    goto corral_source_split_10902;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10901;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} ldv_initialize_gadget_info_attribute_31();
    goto corral_source_split_10900;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $M.111 := 1;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_10899;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} ldv_initialize_gadget_info_attribute_35();
    goto corral_source_split_10898;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $M.112 := 1;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(1);
    goto corral_source_split_10897;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} ldv_initialize_os_desc_attribute_11();
    goto corral_source_split_10896;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $M.113 := 1;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_10895;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} ldv_initialize_gadget_config_name_attribute_22();
    goto corral_source_split_10894;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $M.114 := 1;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_10893;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} ldv_initialize_os_desc_attribute_13();
    goto corral_source_split_10892;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $M.116 := 1;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_10891;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} ldv_initialize_configfs_group_operations_23();
    goto corral_source_split_10890;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $M.117 := 1;
    call {:si_unique_call 1796} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_10889;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} ldv_initialize_gadget_info_attribute_29();
    goto corral_source_split_10888;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1794} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_10887;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} ldv_initialize_configfs_group_operations_6();
    goto corral_source_split_10886;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1792} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10885;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} ldv_initialize_gadget_info_attribute_36();
    goto corral_source_split_10884;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(1);
    goto corral_source_split_10883;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} ldv_initialize_usb_os_desc_attribute_3();
    goto corral_source_split_10882;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $M.121 := 1;
    call {:si_unique_call 1788} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10881;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} ldv_initialize_usb_os_desc_ext_prop_attribute_9();
    goto corral_source_split_10880;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $M.122 := 1;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_10879;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} ldv_initialize_os_desc_attribute_12();
    goto corral_source_split_10878;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1784} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_10877;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} ldv_initialize_configfs_item_operations_15();
    goto corral_source_split_10876;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_10875;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(1);
    goto corral_source_split_10874;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} ldv_initialize_usb_os_desc_ext_prop_attribute_8();
    goto corral_source_split_10873;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_10872;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} ldv_initialize_usb_os_desc_attribute_4();
    goto corral_source_split_10871;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $M.126 := 1;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10870;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} ldv_initialize_gadget_info_attribute_34();
    goto corral_source_split_10869;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(1);
    goto corral_source_split_10868;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} ldv_initialize_usb_gadget_driver_37();
    goto corral_source_split_10867;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(1);
    goto corral_source_split_10866;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} ldv_initialize_configfs_group_operations_19();
    goto corral_source_split_10865;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_10864;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} ldv_initialize_configfs_item_operations_5();
    goto corral_source_split_10863;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $M.129 := 1;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10862;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $M.115 := 2;
    call {:si_unique_call 1768} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10861;

  $bb703:
    assume out_$i756 == 1;
    goto corral_source_split_10860;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb703, $bb704;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    out_$i756 := $eq.i32(out_$i755, 0);
    goto corral_source_split_10858;

  $bb702:
    assume {:verifier.code 0} true;
    out_$i755 := $M.132;
    goto corral_source_split_10857;

  $bb701:
    assume !(out_$i754 == 1);
    assume {:verifier.code 0} true;
    goto $bb702;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb701;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    out_$i754 := $ne.i32(out_$i753, 0);
    goto corral_source_split_10852;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    out_$i753 := $M.132;
    goto corral_source_split_10851;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $M.132 := out_$i752;
    call {:si_unique_call 1766} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i752);
    goto corral_source_split_10850;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} out_$i752 := gadget_cfs_init();
    goto corral_source_split_10849;

  $bb698:
    assume out_$i751 == 1;
    goto corral_source_split_10848;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb698, $bb699;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    out_$i751 := $eq.i32(out_$i750, 1);
    goto corral_source_split_10832;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    out_$i750 := $M.115;
    goto corral_source_split_10831;

  $bb685:
    assume out_$i744 == 1;
    goto corral_source_split_10830;

  $bb684:
    assume !(out_$i743 == 1);
    assume {:verifier.code 0} true;
    out_$i744 := $eq.i32(out_$i742, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb685, $bb686;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} ldv_stop();
    goto corral_source_split_10938;

  $bb687:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb686:
    assume {:verifier.code 0} true;
    assume !(out_$i744 == 1);
    goto $bb687;

  $bb689:
    assume {:verifier.code 0} true;
    assume !(out_$i745 == 1);
    goto $bb687;

  $bb711:
    assume !(out_$i758 == 1);
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb723:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb728:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb726:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb722:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb721:
    assume !(out_$i764 == 1);
    assume {:verifier.code 0} true;
    goto $bb722;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    goto $bb722;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $M.116 := 1;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_10954;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} out_vslice_dummy_var_180 := os_desc_use_store(out_$p765, in_$p78, out_$i766);
    goto corral_source_split_10953;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    out_$i766 := $load.i64($M.41, in_$p18);
    goto corral_source_split_10952;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    out_$p765 := $M.86;
    goto corral_source_split_10951;

  $bb720:
    assume out_$i764 == 1;
    goto corral_source_split_10950;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb720, $bb721;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    out_$i764 := $eq.i32(out_$i763, 1);
    goto corral_source_split_10948;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    out_$i763 := $M.116;
    goto corral_source_split_10947;

  $bb718:
    assume out_$i762 == 1;
    goto corral_source_split_10946;

  $bb713:
    assume out_$i760 == 1;
    assume {:verifier.code 0} true;
    out_$i762 := $eq.i32(out_$i759, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb718, $bb719;

  $bb712:
    assume {:verifier.code 0} true;
    out_$i760 := $slt.i32(out_$i759, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb713, $bb714;

  corral_source_split_10940:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1845} out_$i759 := __VERIFIER_nondet_int();
    call {:si_unique_call 1846} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i759);
    call {:si_unique_call 1847} {:cexpr "tmp___95"} boogie_si_record_i32(out_$i759);
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb710:
    assume out_$i758 == 1;
    goto corral_source_split_10940;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb710, $bb711;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    out_$i758 := $ne.i32(out_$i757, 0);
    goto corral_source_split_9851;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    out_$i757 := $M.116;
    goto corral_source_split_9850;

  $bb43:
    assume !(out_$i187 == 1);
    goto corral_source_split_9849;

  $bb725:
    assume !(out_$i769 == 1);
    assume {:verifier.code 0} true;
    goto $bb726;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    goto $bb726;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $M.116 := 1;
    call {:si_unique_call 1851} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_10959;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} out_vslice_dummy_var_181 := os_desc_use_show(out_$p770, in_$p79);
    goto corral_source_split_10958;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    out_$p770 := $M.86;
    goto corral_source_split_10957;

  $bb724:
    assume out_$i769 == 1;
    goto corral_source_split_10956;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb724, $bb725;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    out_$i769 := $eq.i32(out_$i768, 1);
    goto corral_source_split_10944;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    out_$i768 := $M.116;
    goto corral_source_split_10943;

  $bb715:
    assume out_$i761 == 1;
    goto corral_source_split_10942;

  $bb714:
    assume !(out_$i760 == 1);
    assume {:verifier.code 0} true;
    out_$i761 := $eq.i32(out_$i759, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb715, $bb716;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} ldv_stop();
    goto corral_source_split_10961;

  $bb717:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb716:
    assume {:verifier.code 0} true;
    assume !(out_$i761 == 1);
    goto $bb717;

  $bb719:
    assume {:verifier.code 0} true;
    assume !(out_$i762 == 1);
    goto $bb717;

  $bb731:
    assume !(out_$i773 == 1);
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb743:
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb748:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb746:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb742:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb741:
    assume !(out_$i779 == 1);
    assume {:verifier.code 0} true;
    goto $bb742;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    goto $bb742;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $M.117 := 1;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_10976;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} function_drop(out_$p780, in_$p82);
    goto corral_source_split_10975;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    out_$p780 := $M.81;
    goto corral_source_split_10974;

  $bb740:
    assume out_$i779 == 1;
    goto corral_source_split_10973;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb740, $bb741;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    out_$i779 := $eq.i32(out_$i778, 1);
    goto corral_source_split_10971;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    out_$i778 := $M.117;
    goto corral_source_split_10970;

  $bb738:
    assume out_$i777 == 1;
    goto corral_source_split_10969;

  $bb733:
    assume out_$i775 == 1;
    assume {:verifier.code 0} true;
    out_$i777 := $eq.i32(out_$i774, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb738, $bb739;

  $bb732:
    assume {:verifier.code 0} true;
    out_$i775 := $slt.i32(out_$i774, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb733, $bb734;

  corral_source_split_10963:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1853} out_$i774 := __VERIFIER_nondet_int();
    call {:si_unique_call 1854} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i774);
    call {:si_unique_call 1855} {:cexpr "tmp___96"} boogie_si_record_i32(out_$i774);
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb730:
    assume out_$i773 == 1;
    goto corral_source_split_10963;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb730, $bb731;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    out_$i773 := $ne.i32(out_$i772, 0);
    goto corral_source_split_9835;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    out_$i772 := $M.117;
    goto corral_source_split_9834;

  $bb36:
    assume out_$i184 == 1;
    goto corral_source_split_9833;

  $bb30:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    out_$i184 := $slt.i32(out_$i167, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb29:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i167, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb745:
    assume !(out_$i782 == 1);
    assume {:verifier.code 0} true;
    goto $bb746;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    goto $bb746;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $M.117 := 1;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_10981;

  SeqInstr_255:
    goto corral_source_split_10980;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} out_vslice_dummy_var_182 := function_make(out_$p783, in_$p80);
    goto SeqInstr_254;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    out_$p783 := $M.81;
    goto corral_source_split_10979;

  $bb744:
    assume out_$i782 == 1;
    goto corral_source_split_10978;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb744, $bb745;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    out_$i782 := $eq.i32(out_$i781, 1);
    goto corral_source_split_10967;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    out_$i781 := $M.117;
    goto corral_source_split_10966;

  $bb735:
    assume out_$i776 == 1;
    goto corral_source_split_10965;

  $bb734:
    assume !(out_$i775 == 1);
    assume {:verifier.code 0} true;
    out_$i776 := $eq.i32(out_$i774, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb735, $bb736;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} ldv_stop();
    goto corral_source_split_10983;

  $bb737:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb736:
    assume {:verifier.code 0} true;
    assume !(out_$i776 == 1);
    goto $bb737;

  $bb739:
    assume {:verifier.code 0} true;
    assume !(out_$i777 == 1);
    goto $bb737;

  $bb751:
    assume !(out_$i786 == 1);
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb763:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb768:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb766:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb762:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb761:
    assume !(out_$i792 == 1);
    assume {:verifier.code 0} true;
    goto $bb762;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    goto $bb762;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1865} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_10999;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} out_vslice_dummy_var_183 := gadget_dev_desc_bcdUSB_store(out_$p793, in_$p84, out_$i794);
    goto corral_source_split_10998;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    out_$i794 := $load.i64($M.41, in_$p19);
    goto corral_source_split_10997;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    out_$p793 := $M.48;
    goto corral_source_split_10996;

  $bb760:
    assume out_$i792 == 1;
    goto corral_source_split_10995;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb760, $bb761;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    out_$i792 := $eq.i32(out_$i791, 1);
    goto corral_source_split_10993;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    out_$i791 := $M.118;
    goto corral_source_split_10992;

  $bb758:
    assume out_$i790 == 1;
    goto corral_source_split_10991;

  $bb753:
    assume out_$i788 == 1;
    assume {:verifier.code 0} true;
    out_$i790 := $eq.i32(out_$i787, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb758, $bb759;

  $bb752:
    assume {:verifier.code 0} true;
    out_$i788 := $slt.i32(out_$i787, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb753, $bb754;

  corral_source_split_10985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1861} out_$i787 := __VERIFIER_nondet_int();
    call {:si_unique_call 1862} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i787);
    call {:si_unique_call 1863} {:cexpr "tmp___97"} boogie_si_record_i32(out_$i787);
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb750:
    assume out_$i786 == 1;
    goto corral_source_split_10985;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb750, $bb751;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    out_$i786 := $ne.i32(out_$i785, 0);
    goto corral_source_split_9839;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    out_$i785 := $M.118;
    goto corral_source_split_9838;

  $bb37:
    assume !(out_$i184 == 1);
    goto corral_source_split_9837;

  $bb765:
    assume !(out_$i797 == 1);
    assume {:verifier.code 0} true;
    goto $bb766;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    goto $bb766;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1867} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_11004;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} out_vslice_dummy_var_184 := gadget_dev_desc_bcdUSB_show(out_$p798, in_$p83);
    goto corral_source_split_11003;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    out_$p798 := $M.48;
    goto corral_source_split_11002;

  $bb764:
    assume out_$i797 == 1;
    goto corral_source_split_11001;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb764, $bb765;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    out_$i797 := $eq.i32(out_$i796, 1);
    goto corral_source_split_10989;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    out_$i796 := $M.118;
    goto corral_source_split_10988;

  $bb755:
    assume out_$i789 == 1;
    goto corral_source_split_10987;

  $bb754:
    assume !(out_$i788 == 1);
    assume {:verifier.code 0} true;
    out_$i789 := $eq.i32(out_$i787, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb755, $bb756;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} ldv_stop();
    goto corral_source_split_11006;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb756:
    assume {:verifier.code 0} true;
    assume !(out_$i789 == 1);
    goto $bb757;

  $bb759:
    assume {:verifier.code 0} true;
    assume !(out_$i790 == 1);
    goto $bb757;

  $bb771:
    assume !(out_$i801 == 1);
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb783:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb788:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb786:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb782:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb781:
    assume !(out_$i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb782;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    goto $bb782;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1873} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11021;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} ext_prop_drop(out_$p808, in_$p87);
    goto corral_source_split_11020;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    out_$p808 := $M.74;
    goto corral_source_split_11019;

  $bb780:
    assume out_$i807 == 1;
    goto corral_source_split_11018;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb780, $bb781;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    out_$i807 := $eq.i32(out_$i806, 1);
    goto corral_source_split_11016;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    out_$i806 := $M.119;
    goto corral_source_split_11015;

  $bb778:
    assume out_$i805 == 1;
    goto corral_source_split_11014;

  $bb773:
    assume out_$i803 == 1;
    assume {:verifier.code 0} true;
    out_$i805 := $eq.i32(out_$i802, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb778, $bb779;

  $bb772:
    assume {:verifier.code 0} true;
    out_$i803 := $slt.i32(out_$i802, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb773, $bb774;

  corral_source_split_11008:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1869} out_$i802 := __VERIFIER_nondet_int();
    call {:si_unique_call 1870} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i802);
    call {:si_unique_call 1871} {:cexpr "tmp___98"} boogie_si_record_i32(out_$i802);
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb770:
    assume out_$i801 == 1;
    goto corral_source_split_11008;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb770, $bb771;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    out_$i801 := $ne.i32(out_$i800, 0);
    goto corral_source_split_9823;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    out_$i800 := $M.119;
    goto corral_source_split_9822;

  $bb32:
    assume out_$i182 == 1;
    goto corral_source_split_9821;

  $bb31:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    out_$i182 := $slt.i32(out_$i167, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb785:
    assume !(out_$i810 == 1);
    assume {:verifier.code 0} true;
    goto $bb786;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    goto $bb786;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1875} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11026;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} out_vslice_dummy_var_185 := ext_prop_make(out_$p811, in_$p85);
    goto corral_source_split_11025;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    out_$p811 := $M.74;
    goto corral_source_split_11024;

  $bb784:
    assume out_$i810 == 1;
    goto corral_source_split_11023;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb784, $bb785;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    out_$i810 := $eq.i32(out_$i809, 1);
    goto corral_source_split_11012;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    out_$i809 := $M.119;
    goto corral_source_split_11011;

  $bb775:
    assume out_$i804 == 1;
    goto corral_source_split_11010;

  $bb774:
    assume !(out_$i803 == 1);
    assume {:verifier.code 0} true;
    out_$i804 := $eq.i32(out_$i802, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb775, $bb776;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} ldv_stop();
    goto corral_source_split_11028;

  $bb777:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb776:
    assume {:verifier.code 0} true;
    assume !(out_$i804 == 1);
    goto $bb777;

  $bb779:
    assume {:verifier.code 0} true;
    assume !(out_$i805 == 1);
    goto $bb777;

  $bb791:
    assume !(out_$i814 == 1);
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb803:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb808:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb802:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb801:
    assume !(out_$i820 == 1);
    assume {:verifier.code 0} true;
    goto $bb802;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    goto $bb802;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1881} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(1);
    goto corral_source_split_11044;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} out_vslice_dummy_var_186 := gadget_dev_desc_bDeviceClass_store(out_$p821, in_$p88, out_$i822);
    goto corral_source_split_11043;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    out_$i822 := $load.i64($M.41, in_$p20);
    goto corral_source_split_11042;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    out_$p821 := $M.52;
    goto corral_source_split_11041;

  $bb800:
    assume out_$i820 == 1;
    goto corral_source_split_11040;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb800, $bb801;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    out_$i820 := $eq.i32(out_$i819, 1);
    goto corral_source_split_11038;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    out_$i819 := $M.120;
    goto corral_source_split_11037;

  $bb798:
    assume out_$i818 == 1;
    goto corral_source_split_11036;

  $bb793:
    assume out_$i816 == 1;
    assume {:verifier.code 0} true;
    out_$i818 := $eq.i32(out_$i815, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb798, $bb799;

  $bb792:
    assume {:verifier.code 0} true;
    out_$i816 := $slt.i32(out_$i815, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb793, $bb794;

  corral_source_split_11030:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1877} out_$i815 := __VERIFIER_nondet_int();
    call {:si_unique_call 1878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i815);
    call {:si_unique_call 1879} {:cexpr "tmp___99"} boogie_si_record_i32(out_$i815);
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb790:
    assume out_$i814 == 1;
    goto corral_source_split_11030;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb790, $bb791;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    out_$i814 := $ne.i32(out_$i813, 0);
    goto corral_source_split_9827;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    out_$i813 := $M.120;
    goto corral_source_split_9826;

  $bb34:
    assume out_$i183 == 1;
    goto corral_source_split_9825;

  $bb33:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    out_$i183 := $slt.i32(out_$i167, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb805:
    assume !(out_$i825 == 1);
    assume {:verifier.code 0} true;
    goto $bb806;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    goto $bb806;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1883} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(1);
    goto corral_source_split_11049;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} out_vslice_dummy_var_187 := gadget_dev_desc_bDeviceClass_show(out_$p826, in_$p89);
    goto corral_source_split_11048;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    out_$p826 := $M.52;
    goto corral_source_split_11047;

  $bb804:
    assume out_$i825 == 1;
    goto corral_source_split_11046;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb804, $bb805;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    out_$i825 := $eq.i32(out_$i824, 1);
    goto corral_source_split_11034;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    out_$i824 := $M.120;
    goto corral_source_split_11033;

  $bb795:
    assume out_$i817 == 1;
    goto corral_source_split_11032;

  $bb794:
    assume !(out_$i816 == 1);
    assume {:verifier.code 0} true;
    out_$i817 := $eq.i32(out_$i815, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb795, $bb796;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} ldv_stop();
    goto corral_source_split_11051;

  $bb797:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb796:
    assume {:verifier.code 0} true;
    assume !(out_$i817 == 1);
    goto $bb797;

  $bb799:
    assume {:verifier.code 0} true;
    assume !(out_$i818 == 1);
    goto $bb797;

  $bb811:
    assume !(out_$i829 == 1);
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb823:
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb828:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb826:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb822:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb821:
    assume !(out_$i835 == 1);
    assume {:verifier.code 0} true;
    goto $bb822;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    goto $bb822;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $M.121 := 1;
    call {:si_unique_call 1889} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11067;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} out_vslice_dummy_var_188 := interf_grp_sub_compatible_id_store(out_$p836, in_$p90, out_$i837);
    goto corral_source_split_11066;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    out_$i837 := $load.i64($M.41, in_$p21);
    goto corral_source_split_11065;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    out_$p836 := $M.84;
    goto corral_source_split_11064;

  $bb820:
    assume out_$i835 == 1;
    goto corral_source_split_11063;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb820, $bb821;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    out_$i835 := $eq.i32(out_$i834, 1);
    goto corral_source_split_11061;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    out_$i834 := $M.121;
    goto corral_source_split_11060;

  $bb818:
    assume out_$i833 == 1;
    goto corral_source_split_11059;

  $bb813:
    assume out_$i831 == 1;
    assume {:verifier.code 0} true;
    out_$i833 := $eq.i32(out_$i830, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb818, $bb819;

  $bb812:
    assume {:verifier.code 0} true;
    out_$i831 := $slt.i32(out_$i830, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb813, $bb814;

  corral_source_split_11053:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1885} out_$i830 := __VERIFIER_nondet_int();
    call {:si_unique_call 1886} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i830);
    call {:si_unique_call 1887} {:cexpr "tmp___100"} boogie_si_record_i32(out_$i830);
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb810:
    assume out_$i829 == 1;
    goto corral_source_split_11053;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb810, $bb811;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    out_$i829 := $ne.i32(out_$i828, 0);
    goto corral_source_split_9831;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    out_$i828 := $M.121;
    goto corral_source_split_9830;

  $bb35:
    assume !(out_$i183 == 1);
    goto corral_source_split_9829;

  $bb825:
    assume !(out_$i840 == 1);
    assume {:verifier.code 0} true;
    goto $bb826;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    goto $bb826;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $M.121 := 1;
    call {:si_unique_call 1891} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11072;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} out_vslice_dummy_var_189 := interf_grp_sub_compatible_id_show(out_$p841, in_$p91);
    goto corral_source_split_11071;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    out_$p841 := $M.84;
    goto corral_source_split_11070;

  $bb824:
    assume out_$i840 == 1;
    goto corral_source_split_11069;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb824, $bb825;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    out_$i840 := $eq.i32(out_$i839, 1);
    goto corral_source_split_11057;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    out_$i839 := $M.121;
    goto corral_source_split_11056;

  $bb815:
    assume out_$i832 == 1;
    goto corral_source_split_11055;

  $bb814:
    assume !(out_$i831 == 1);
    assume {:verifier.code 0} true;
    out_$i832 := $eq.i32(out_$i830, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb815, $bb816;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} ldv_stop();
    goto corral_source_split_11074;

  $bb817:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb816:
    assume {:verifier.code 0} true;
    assume !(out_$i832 == 1);
    goto $bb817;

  $bb819:
    assume {:verifier.code 0} true;
    assume !(out_$i833 == 1);
    goto $bb817;

  $bb831:
    assume !(out_$i844 == 1);
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb843:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb848:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb846:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb842:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb841:
    assume !(out_$i850 == 1);
    assume {:verifier.code 0} true;
    goto $bb842;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    goto $bb842;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $M.122 := 1;
    call {:si_unique_call 1897} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_11090;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} out_vslice_dummy_var_190 := ext_prop_type_store(out_$p851, in_$p92, out_$i852);
    goto corral_source_split_11089;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    out_$i852 := $load.i64($M.41, in_$p22);
    goto corral_source_split_11088;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    out_$p851 := $M.49;
    goto corral_source_split_11087;

  $bb840:
    assume out_$i850 == 1;
    goto corral_source_split_11086;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb840, $bb841;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    out_$i850 := $eq.i32(out_$i849, 1);
    goto corral_source_split_11084;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    out_$i849 := $M.122;
    goto corral_source_split_11083;

  $bb838:
    assume out_$i848 == 1;
    goto corral_source_split_11082;

  $bb833:
    assume out_$i846 == 1;
    assume {:verifier.code 0} true;
    out_$i848 := $eq.i32(out_$i845, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb838, $bb839;

  $bb832:
    assume {:verifier.code 0} true;
    out_$i846 := $slt.i32(out_$i845, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb833, $bb834;

  corral_source_split_11076:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1893} out_$i845 := __VERIFIER_nondet_int();
    call {:si_unique_call 1894} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i845);
    call {:si_unique_call 1895} {:cexpr "tmp___101"} boogie_si_record_i32(out_$i845);
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb830:
    assume out_$i844 == 1;
    goto corral_source_split_11076;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb830, $bb831;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    out_$i844 := $ne.i32(out_$i843, 0);
    goto corral_source_split_9815;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    out_$i843 := $M.122;
    goto corral_source_split_9814;

  $bb26:
    assume out_$i179 == 1;
    goto corral_source_split_9813;

  $bb20:
    assume out_$i176 == 1;
    assume {:verifier.code 0} true;
    out_$i179 := $slt.i32(out_$i167, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb7:
    assume out_$i170 == 1;
    assume {:verifier.code 0} true;
    out_$i176 := $slt.i32(out_$i167, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb6:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    out_$i170 := $slt.i32(out_$i167, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb845:
    assume !(out_$i855 == 1);
    assume {:verifier.code 0} true;
    goto $bb846;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    goto $bb846;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $M.122 := 1;
    call {:si_unique_call 1899} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_11095;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} out_vslice_dummy_var_191 := ext_prop_type_show(out_$p856, in_$p93);
    goto corral_source_split_11094;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    out_$p856 := $M.49;
    goto corral_source_split_11093;

  $bb844:
    assume out_$i855 == 1;
    goto corral_source_split_11092;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb844, $bb845;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    out_$i855 := $eq.i32(out_$i854, 1);
    goto corral_source_split_11080;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    out_$i854 := $M.122;
    goto corral_source_split_11079;

  $bb835:
    assume out_$i847 == 1;
    goto corral_source_split_11078;

  $bb834:
    assume !(out_$i846 == 1);
    assume {:verifier.code 0} true;
    out_$i847 := $eq.i32(out_$i845, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb835, $bb836;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} ldv_stop();
    goto corral_source_split_11097;

  $bb837:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb836:
    assume {:verifier.code 0} true;
    assume !(out_$i847 == 1);
    goto $bb837;

  $bb839:
    assume {:verifier.code 0} true;
    assume !(out_$i848 == 1);
    goto $bb837;

  $bb851:
    assume !(out_$i859 == 1);
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb863:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb868:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb866:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb862:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb861:
    assume !(out_$i865 == 1);
    assume {:verifier.code 0} true;
    goto $bb862;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    goto $bb862;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1905} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_11113;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} out_vslice_dummy_var_192 := os_desc_b_vendor_code_store(out_$p866, in_$p95, out_$i867);
    goto corral_source_split_11112;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    out_$i867 := $load.i64($M.41, in_$p23);
    goto corral_source_split_11111;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    out_$p866 := $M.78;
    goto corral_source_split_11110;

  $bb860:
    assume out_$i865 == 1;
    goto corral_source_split_11109;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb860, $bb861;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    out_$i865 := $eq.i32(out_$i864, 1);
    goto corral_source_split_11107;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    out_$i864 := $M.123;
    goto corral_source_split_11106;

  $bb858:
    assume out_$i863 == 1;
    goto corral_source_split_11105;

  $bb853:
    assume out_$i861 == 1;
    assume {:verifier.code 0} true;
    out_$i863 := $eq.i32(out_$i860, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb858, $bb859;

  $bb852:
    assume {:verifier.code 0} true;
    out_$i861 := $slt.i32(out_$i860, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb853, $bb854;

  corral_source_split_11099:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1901} out_$i860 := __VERIFIER_nondet_int();
    call {:si_unique_call 1902} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i860);
    call {:si_unique_call 1903} {:cexpr "tmp___102"} boogie_si_record_i32(out_$i860);
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb850:
    assume out_$i859 == 1;
    goto corral_source_split_11099;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb850, $bb851;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    out_$i859 := $ne.i32(out_$i858, 0);
    goto corral_source_split_9819;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    out_$i858 := $M.123;
    goto corral_source_split_9818;

  $bb27:
    assume !(out_$i179 == 1);
    goto corral_source_split_9817;

  $bb865:
    assume !(out_$i870 == 1);
    assume {:verifier.code 0} true;
    goto $bb866;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    goto $bb866;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1907} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_11118;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} out_vslice_dummy_var_193 := os_desc_b_vendor_code_show(out_$p871, in_$p94);
    goto corral_source_split_11117;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    out_$p871 := $M.78;
    goto corral_source_split_11116;

  $bb864:
    assume out_$i870 == 1;
    goto corral_source_split_11115;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb864, $bb865;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    out_$i870 := $eq.i32(out_$i869, 1);
    goto corral_source_split_11103;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    out_$i869 := $M.123;
    goto corral_source_split_11102;

  $bb855:
    assume out_$i862 == 1;
    goto corral_source_split_11101;

  $bb854:
    assume !(out_$i861 == 1);
    assume {:verifier.code 0} true;
    out_$i862 := $eq.i32(out_$i860, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb855, $bb856;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_stop();
    goto corral_source_split_11120;

  $bb857:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb856:
    assume {:verifier.code 0} true;
    assume !(out_$i862 == 1);
    goto $bb857;

  $bb859:
    assume {:verifier.code 0} true;
    assume !(out_$i863 == 1);
    goto $bb857;

  $bb871:
    assume !(out_$i874 == 1);
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb890:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb904:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb902:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb899:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb893:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb889:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb888:
    assume !(out_$i887 == 1);
    assume {:verifier.code 0} true;
    goto $bb889;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    goto $bb889;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $M.124 := 2;
    call {:si_unique_call 1915} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_11153;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} out_vslice_dummy_var_195 := gadget_strings_attr_show(out_$p888, out_$p889, in_$p97);
    goto corral_source_split_11152;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    out_$p889 := $M.65;
    goto corral_source_split_11151;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    out_$p888 := $M.66;
    goto corral_source_split_11150;

  $bb887:
    assume out_$i887 == 1;
    goto corral_source_split_11149;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb887, $bb888;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    out_$i887 := $eq.i32(out_$i886, 2);
    goto corral_source_split_11147;

  $bb886:
    assume {:verifier.code 0} true;
    out_$i886 := $M.124;
    goto corral_source_split_11146;

  $bb885:
    assume !(out_$i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb886;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    goto $bb886;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1913} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11144;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} out_vslice_dummy_var_194 := gadget_strings_attr_show(out_$p883, out_$p884, in_$p97);
    goto corral_source_split_11143;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    out_$p884 := $M.65;
    goto corral_source_split_11142;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    out_$p883 := $M.66;
    goto corral_source_split_11141;

  $bb884:
    assume out_$i882 == 1;
    goto corral_source_split_11140;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb884, $bb885;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    out_$i882 := $eq.i32(out_$i881, 1);
    goto corral_source_split_11138;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    out_$i881 := $M.124;
    goto corral_source_split_11137;

  $bb882:
    assume out_$i880 == 1;
    goto corral_source_split_11136;

  $bb880:
    assume out_$i879 == 1;
    assume {:verifier.code 0} true;
    out_$i880 := $eq.i32(out_$i875, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb882, $bb883;

  $bb873:
    assume out_$i876 == 1;
    assume {:verifier.code 0} true;
    out_$i879 := $slt.i32(out_$i875, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb880, $bb881;

  $bb872:
    assume {:verifier.code 0} true;
    out_$i876 := $slt.i32(out_$i875, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb873, $bb874;

  corral_source_split_11122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1909} out_$i875 := __VERIFIER_nondet_int();
    call {:si_unique_call 1910} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i875);
    call {:si_unique_call 1911} {:cexpr "tmp___103"} boogie_si_record_i32(out_$i875);
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb870:
    assume out_$i874 == 1;
    goto corral_source_split_11122;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb870, $bb871;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    out_$i874 := $ne.i32(out_$i873, 0);
    goto corral_source_split_9803;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    out_$i873 := $M.124;
    goto corral_source_split_9802;

  $bb22:
    assume out_$i177 == 1;
    goto corral_source_split_9801;

  $bb21:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    out_$i177 := $slt.i32(out_$i167, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb892:
    assume !(out_$i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb893;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    goto $bb893;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $M.45 := out_$i895;
    call {:si_unique_call 1918} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i895);
    goto corral_source_split_11161;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    out_$i895 := $sub.i32(out_$i894, 1);
    goto corral_source_split_11160;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    out_$i894 := $M.45;
    goto corral_source_split_11159;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1917} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11158;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} gadget_strings_attr_release(out_$p893);
    goto corral_source_split_11157;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    out_$p893 := $M.66;
    goto corral_source_split_11156;

  $bb891:
    assume out_$i892 == 1;
    goto corral_source_split_11155;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb891, $bb892;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    out_$i892 := $eq.i32(out_$i891, 2);
    goto corral_source_split_11134;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    out_$i891 := $M.124;
    goto corral_source_split_11133;

  $bb881:
    assume !(out_$i879 == 1);
    goto corral_source_split_11132;

  $bb898:
    assume !(out_$i903 == 1);
    assume {:verifier.code 0} true;
    goto $bb899;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    goto $bb899;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $M.124 := 2;
    call {:si_unique_call 1922} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_11178;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} out_vslice_dummy_var_197 := gadget_strings_attr_store(out_$p904, out_$p905, in_$p96, out_$i906);
    goto corral_source_split_11177;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    out_$i906 := $load.i64($M.41, in_$p24);
    goto corral_source_split_11176;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    out_$p905 := $M.65;
    goto corral_source_split_11175;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    out_$p904 := $M.66;
    goto corral_source_split_11174;

  $bb897:
    assume out_$i903 == 1;
    goto corral_source_split_11173;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb897, $bb898;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    out_$i903 := $eq.i32(out_$i902, 2);
    goto corral_source_split_11171;

  $bb896:
    assume {:verifier.code 0} true;
    out_$i902 := $M.124;
    goto corral_source_split_11170;

  $bb895:
    assume !(out_$i897 == 1);
    assume {:verifier.code 0} true;
    goto $bb896;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    goto $bb896;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1920} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11168;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} out_vslice_dummy_var_196 := gadget_strings_attr_store(out_$p898, out_$p899, in_$p96, out_$i900);
    goto corral_source_split_11167;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    out_$i900 := $load.i64($M.41, in_$p24);
    goto corral_source_split_11166;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    out_$p899 := $M.65;
    goto corral_source_split_11165;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    out_$p898 := $M.66;
    goto corral_source_split_11164;

  $bb894:
    assume out_$i897 == 1;
    goto corral_source_split_11163;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb894, $bb895;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    out_$i897 := $eq.i32(out_$i896, 1);
    goto corral_source_split_11126;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    out_$i896 := $M.124;
    goto corral_source_split_11125;

  $bb875:
    assume out_$i877 == 1;
    goto corral_source_split_11124;

  $bb874:
    assume !(out_$i876 == 1);
    assume {:verifier.code 0} true;
    out_$i877 := $slt.i32(out_$i875, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb875, $bb876;

  $bb901:
    assume !(out_$i909 == 1);
    assume {:verifier.code 0} true;
    goto $bb902;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    goto $bb902;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $M.45 := out_$i912;
    call {:si_unique_call 1925} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i912);
    goto corral_source_split_11185;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    out_$i912 := $add.i32(out_$i911, 1);
    goto corral_source_split_11184;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    out_$i911 := $M.45;
    goto corral_source_split_11183;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $M.124 := 2;
    call {:si_unique_call 1924} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_11182;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} out_vslice_dummy_var_198 := ldv_probe_15();
    goto corral_source_split_11181;

  $bb900:
    assume out_$i909 == 1;
    goto corral_source_split_11180;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb900, $bb901;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    out_$i909 := $eq.i32(out_$i908, 1);
    goto corral_source_split_11130;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    out_$i908 := $M.124;
    goto corral_source_split_11129;

  $bb877:
    assume out_$i878 == 1;
    goto corral_source_split_11128;

  $bb876:
    assume !(out_$i877 == 1);
    assume {:verifier.code 0} true;
    out_$i878 := $eq.i32(out_$i875, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb877, $bb878;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} ldv_stop();
    goto corral_source_split_11187;

  $bb879:
    assume {:verifier.code 0} true;
    goto $bb903;

  $bb878:
    assume {:verifier.code 0} true;
    assume !(out_$i878 == 1);
    goto $bb879;

  $bb883:
    assume {:verifier.code 0} true;
    assume !(out_$i880 == 1);
    goto $bb879;

  $bb907:
    assume !(out_$i914 == 1);
    assume {:verifier.code 0} true;
    goto $bb908;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    goto $bb908;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} ldv_main_exported_38();
    goto corral_source_split_11190;

  $bb906:
    assume out_$i914 == 1;
    goto corral_source_split_11189;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb906, $bb907;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    out_$i914 := $ne.i32(out_$i913, 0);
    goto corral_source_split_9807;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    out_$i913 := $M.43;
    goto corral_source_split_9806;

  $bb24:
    assume out_$i178 == 1;
    goto corral_source_split_9805;

  $bb23:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    out_$i178 := $slt.i32(out_$i167, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb910:
    assume !(out_$i916 == 1);
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb922:
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb927:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb925:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb921:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb920:
    assume !(out_$i922 == 1);
    assume {:verifier.code 0} true;
    goto $bb921;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    goto $bb921;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 1932} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11206;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} out_vslice_dummy_var_199 := ext_prop_data_store(out_$p923, in_$p98, out_$i924);
    goto corral_source_split_11205;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    out_$i924 := $load.i64($M.41, in_$p25);
    goto corral_source_split_11204;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    out_$p923 := $M.80;
    goto corral_source_split_11203;

  $bb919:
    assume out_$i922 == 1;
    goto corral_source_split_11202;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb919, $bb920;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    out_$i922 := $eq.i32(out_$i921, 1);
    goto corral_source_split_11200;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    out_$i921 := $M.125;
    goto corral_source_split_11199;

  $bb917:
    assume out_$i920 == 1;
    goto corral_source_split_11198;

  $bb912:
    assume out_$i918 == 1;
    assume {:verifier.code 0} true;
    out_$i920 := $eq.i32(out_$i917, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb917, $bb918;

  $bb911:
    assume {:verifier.code 0} true;
    out_$i918 := $slt.i32(out_$i917, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb912, $bb913;

  corral_source_split_11192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1928} out_$i917 := __VERIFIER_nondet_int();
    call {:si_unique_call 1929} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i917);
    call {:si_unique_call 1930} {:cexpr "tmp___104"} boogie_si_record_i32(out_$i917);
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb909:
    assume out_$i916 == 1;
    goto corral_source_split_11192;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb909, $bb910;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    out_$i916 := $ne.i32(out_$i915, 0);
    goto corral_source_split_9811;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    out_$i915 := $M.125;
    goto corral_source_split_9810;

  $bb25:
    assume !(out_$i178 == 1);
    goto corral_source_split_9809;

  $bb924:
    assume !(out_$i927 == 1);
    assume {:verifier.code 0} true;
    goto $bb925;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    goto $bb925;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 1934} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11211;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} out_vslice_dummy_var_200 := ext_prop_data_show(out_$p928, in_$p99);
    goto corral_source_split_11210;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    out_$p928 := $M.80;
    goto corral_source_split_11209;

  $bb923:
    assume out_$i927 == 1;
    goto corral_source_split_11208;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb923, $bb924;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    out_$i927 := $eq.i32(out_$i926, 1);
    goto corral_source_split_11196;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    out_$i926 := $M.125;
    goto corral_source_split_11195;

  $bb914:
    assume out_$i919 == 1;
    goto corral_source_split_11194;

  $bb913:
    assume !(out_$i918 == 1);
    assume {:verifier.code 0} true;
    out_$i919 := $eq.i32(out_$i917, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb914, $bb915;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} ldv_stop();
    goto corral_source_split_11213;

  $bb916:
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb915:
    assume {:verifier.code 0} true;
    assume !(out_$i919 == 1);
    goto $bb916;

  $bb918:
    assume {:verifier.code 0} true;
    assume !(out_$i920 == 1);
    goto $bb916;

  $bb930:
    assume !(out_$i931 == 1);
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb942:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb947:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb945:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb941:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb940:
    assume !(out_$i937 == 1);
    assume {:verifier.code 0} true;
    goto $bb941;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    goto $bb941;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $M.126 := 1;
    call {:si_unique_call 1940} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11229;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} out_vslice_dummy_var_201 := interf_grp_compatible_id_store(out_$p938, in_$p101, out_$i939);
    goto corral_source_split_11228;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    out_$i939 := $load.i64($M.41, in_$p26);
    goto corral_source_split_11227;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    out_$p938 := $M.61;
    goto corral_source_split_11226;

  $bb939:
    assume out_$i937 == 1;
    goto corral_source_split_11225;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb939, $bb940;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    out_$i937 := $eq.i32(out_$i936, 1);
    goto corral_source_split_11223;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    out_$i936 := $M.126;
    goto corral_source_split_11222;

  $bb937:
    assume out_$i935 == 1;
    goto corral_source_split_11221;

  $bb932:
    assume out_$i933 == 1;
    assume {:verifier.code 0} true;
    out_$i935 := $eq.i32(out_$i932, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb937, $bb938;

  $bb931:
    assume {:verifier.code 0} true;
    out_$i933 := $slt.i32(out_$i932, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb932, $bb933;

  corral_source_split_11215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1936} out_$i932 := __VERIFIER_nondet_int();
    call {:si_unique_call 1937} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i932);
    call {:si_unique_call 1938} {:cexpr "tmp___105"} boogie_si_record_i32(out_$i932);
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb929:
    assume out_$i931 == 1;
    goto corral_source_split_11215;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb929, $bb930;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    out_$i931 := $ne.i32(out_$i930, 0);
    goto corral_source_split_9795;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    out_$i930 := $M.126;
    goto corral_source_split_9794;

  $bb18:
    assume out_$i175 == 1;
    goto corral_source_split_9793;

  $bb9:
    assume out_$i171 == 1;
    assume {:verifier.code 0} true;
    out_$i175 := $slt.i32(out_$i167, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb8:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    out_$i171 := $slt.i32(out_$i167, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb944:
    assume !(out_$i942 == 1);
    assume {:verifier.code 0} true;
    goto $bb945;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    goto $bb945;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $M.126 := 1;
    call {:si_unique_call 1942} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11234;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} out_vslice_dummy_var_202 := interf_grp_compatible_id_show(out_$p943, in_$p100);
    goto corral_source_split_11233;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    out_$p943 := $M.61;
    goto corral_source_split_11232;

  $bb943:
    assume out_$i942 == 1;
    goto corral_source_split_11231;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb943, $bb944;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    out_$i942 := $eq.i32(out_$i941, 1);
    goto corral_source_split_11219;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    out_$i941 := $M.126;
    goto corral_source_split_11218;

  $bb934:
    assume out_$i934 == 1;
    goto corral_source_split_11217;

  $bb933:
    assume !(out_$i933 == 1);
    assume {:verifier.code 0} true;
    out_$i934 := $eq.i32(out_$i932, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb934, $bb935;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} ldv_stop();
    goto corral_source_split_11236;

  $bb936:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb935:
    assume {:verifier.code 0} true;
    assume !(out_$i934 == 1);
    goto $bb936;

  $bb938:
    assume {:verifier.code 0} true;
    assume !(out_$i935 == 1);
    goto $bb936;

  $bb950:
    assume !(out_$i946 == 1);
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb962:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb967:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb965:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb961:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb960:
    assume !(out_$i952 == 1);
    assume {:verifier.code 0} true;
    goto $bb961;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    goto $bb961;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1948} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(1);
    goto corral_source_split_11252;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} out_vslice_dummy_var_203 := gadget_dev_desc_bDeviceProtocol_store(out_$p953, in_$p102, out_$i954);
    goto corral_source_split_11251;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    out_$i954 := $load.i64($M.41, in_$p27);
    goto corral_source_split_11250;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    out_$p953 := $M.51;
    goto corral_source_split_11249;

  $bb959:
    assume out_$i952 == 1;
    goto corral_source_split_11248;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb959, $bb960;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    out_$i952 := $eq.i32(out_$i951, 1);
    goto corral_source_split_11246;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    out_$i951 := $M.127;
    goto corral_source_split_11245;

  $bb957:
    assume out_$i950 == 1;
    goto corral_source_split_11244;

  $bb952:
    assume out_$i948 == 1;
    assume {:verifier.code 0} true;
    out_$i950 := $eq.i32(out_$i947, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb957, $bb958;

  $bb951:
    assume {:verifier.code 0} true;
    out_$i948 := $slt.i32(out_$i947, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb952, $bb953;

  corral_source_split_11238:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1944} out_$i947 := __VERIFIER_nondet_int();
    call {:si_unique_call 1945} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i947);
    call {:si_unique_call 1946} {:cexpr "tmp___106"} boogie_si_record_i32(out_$i947);
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb949:
    assume out_$i946 == 1;
    goto corral_source_split_11238;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb949, $bb950;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    out_$i946 := $ne.i32(out_$i945, 0);
    goto corral_source_split_9799;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    out_$i945 := $M.127;
    goto corral_source_split_9798;

  $bb19:
    assume !(out_$i175 == 1);
    goto corral_source_split_9797;

  $bb964:
    assume !(out_$i957 == 1);
    assume {:verifier.code 0} true;
    goto $bb965;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    goto $bb965;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1950} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(1);
    goto corral_source_split_11257;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} out_vslice_dummy_var_204 := gadget_dev_desc_bDeviceProtocol_show(out_$p958, in_$p103);
    goto corral_source_split_11256;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    out_$p958 := $M.51;
    goto corral_source_split_11255;

  $bb963:
    assume out_$i957 == 1;
    goto corral_source_split_11254;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb963, $bb964;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    out_$i957 := $eq.i32(out_$i956, 1);
    goto corral_source_split_11242;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    out_$i956 := $M.127;
    goto corral_source_split_11241;

  $bb954:
    assume out_$i949 == 1;
    goto corral_source_split_11240;

  $bb953:
    assume !(out_$i948 == 1);
    assume {:verifier.code 0} true;
    out_$i949 := $eq.i32(out_$i947, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb954, $bb955;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} ldv_stop();
    goto corral_source_split_11259;

  $bb956:
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb955:
    assume {:verifier.code 0} true;
    assume !(out_$i949 == 1);
    goto $bb956;

  $bb958:
    assume {:verifier.code 0} true;
    assume !(out_$i950 == 1);
    goto $bb956;

  $bb970:
    assume !(out_$i961 == 1);
    assume {:verifier.code 0} true;
    goto $bb971;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    goto $bb971;

  SeqInstr_258:
    goto corral_source_split_11262;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} ldv_main_exported_37();
    goto SeqInstr_257;

  $bb969:
    assume out_$i961 == 1;
    goto corral_source_split_11261;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb969, $bb970;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    out_$i961 := $ne.i32(out_$i960, 0);
    goto corral_source_split_9783;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    out_$i960 := $M.44;
    goto corral_source_split_9782;

  $bb11:
    assume out_$i172 == 1;
    goto corral_source_split_9781;

  $bb10:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    out_$i172 := $slt.i32(out_$i167, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb973:
    assume !(out_$i963 == 1);
    assume {:verifier.code 0} true;
    goto $bb991;

  $bb985:
    assume {:verifier.code 0} true;
    goto $bb991;

  $bb990:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb988:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb984:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb983:
    assume !(out_$i969 == 1);
    assume {:verifier.code 0} true;
    goto $bb984;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    goto $bb984;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1957} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11277;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} config_desc_drop(out_$p970, in_$p105);
    goto corral_source_split_11276;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    out_$p970 := $M.62;
    goto corral_source_split_11275;

  $bb982:
    assume out_$i969 == 1;
    goto corral_source_split_11274;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb982, $bb983;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    out_$i969 := $eq.i32(out_$i968, 1);
    goto corral_source_split_11272;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    out_$i968 := $M.128;
    goto corral_source_split_11271;

  $bb980:
    assume out_$i967 == 1;
    goto corral_source_split_11270;

  $bb975:
    assume out_$i965 == 1;
    assume {:verifier.code 0} true;
    out_$i967 := $eq.i32(out_$i964, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb980, $bb981;

  $bb974:
    assume {:verifier.code 0} true;
    out_$i965 := $slt.i32(out_$i964, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb975, $bb976;

  corral_source_split_11264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1953} out_$i964 := __VERIFIER_nondet_int();
    call {:si_unique_call 1954} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i964);
    call {:si_unique_call 1955} {:cexpr "tmp___107"} boogie_si_record_i32(out_$i964);
    assume {:verifier.code 0} true;
    goto $bb974;

  $bb972:
    assume out_$i963 == 1;
    goto corral_source_split_11264;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb972, $bb973;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    out_$i963 := $ne.i32(out_$i962, 0);
    goto corral_source_split_9787;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    out_$i962 := $M.128;
    goto corral_source_split_9786;

  $bb13:
    assume out_$i173 == 1;
    goto corral_source_split_9785;

  $bb12:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    out_$i173 := $slt.i32(out_$i167, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb987:
    assume !(out_$i972 == 1);
    assume {:verifier.code 0} true;
    goto $bb988;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    goto $bb988;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1959} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11282;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} out_vslice_dummy_var_205 := config_desc_make(out_$p973, in_$p106);
    goto corral_source_split_11281;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    out_$p973 := $M.62;
    goto corral_source_split_11280;

  $bb986:
    assume out_$i972 == 1;
    goto corral_source_split_11279;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb986, $bb987;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    out_$i972 := $eq.i32(out_$i971, 1);
    goto corral_source_split_11268;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    out_$i971 := $M.128;
    goto corral_source_split_11267;

  $bb977:
    assume out_$i966 == 1;
    goto corral_source_split_11266;

  $bb976:
    assume !(out_$i965 == 1);
    assume {:verifier.code 0} true;
    out_$i966 := $eq.i32(out_$i964, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb977, $bb978;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    goto $bb990;

  $bb989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} ldv_stop();
    goto corral_source_split_11284;

  $bb979:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb978:
    assume {:verifier.code 0} true;
    assume !(out_$i966 == 1);
    goto $bb979;

  $bb981:
    assume {:verifier.code 0} true;
    assume !(out_$i967 == 1);
    goto $bb979;

  $bb993:
    assume !(out_$i976 == 1);
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb1005:
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb1010:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1008:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1004:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1003:
    assume !(out_$i982 == 1);
    assume {:verifier.code 0} true;
    goto $bb1004;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    goto $bb1004;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $M.129 := 1;
    call {:si_unique_call 1965} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11300;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} out_vslice_dummy_var_206 := usb_os_desc_attr_show(out_$p983, out_$p984, in_$p108);
    goto corral_source_split_11299;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    out_$p984 := $M.63;
    goto corral_source_split_11298;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    out_$p983 := $M.64;
    goto corral_source_split_11297;

  $bb1002:
    assume out_$i982 == 1;
    goto corral_source_split_11296;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1002, $bb1003;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    out_$i982 := $eq.i32(out_$i981, 1);
    goto corral_source_split_11294;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    out_$i981 := $M.129;
    goto corral_source_split_11293;

  $bb1000:
    assume out_$i980 == 1;
    goto corral_source_split_11292;

  $bb995:
    assume out_$i978 == 1;
    assume {:verifier.code 0} true;
    out_$i980 := $eq.i32(out_$i977, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1000, $bb1001;

  $bb994:
    assume {:verifier.code 0} true;
    out_$i978 := $slt.i32(out_$i977, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb995, $bb996;

  corral_source_split_11286:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1961} out_$i977 := __VERIFIER_nondet_int();
    call {:si_unique_call 1962} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i977);
    call {:si_unique_call 1963} {:cexpr "tmp___108"} boogie_si_record_i32(out_$i977);
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb992:
    assume out_$i976 == 1;
    goto corral_source_split_11286;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb992, $bb993;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    out_$i976 := $ne.i32(out_$i975, 0);
    goto corral_source_split_9791;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    out_$i975 := $M.129;
    goto corral_source_split_9790;

  $bb15:
    assume out_$i174 == 1;
    goto corral_source_split_9789;

  $bb14:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i167, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb1007:
    assume !(out_$i987 == 1);
    assume {:verifier.code 0} true;
    goto $bb1008;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    goto $bb1008;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $M.129 := 1;
    call {:si_unique_call 1967} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11307;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} out_vslice_dummy_var_207 := usb_os_desc_attr_store(out_$p988, out_$p989, in_$p107, out_$i990);
    goto corral_source_split_11306;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    out_$i990 := $load.i64($M.41, in_$p28);
    goto corral_source_split_11305;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    out_$p989 := $M.63;
    goto corral_source_split_11304;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    out_$p988 := $M.64;
    goto corral_source_split_11303;

  $bb1006:
    assume out_$i987 == 1;
    goto corral_source_split_11302;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1006, $bb1007;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    out_$i987 := $eq.i32(out_$i986, 1);
    goto corral_source_split_11290;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    out_$i986 := $M.129;
    goto corral_source_split_11289;

  $bb997:
    assume out_$i979 == 1;
    goto corral_source_split_11288;

  $bb996:
    assume !(out_$i978 == 1);
    assume {:verifier.code 0} true;
    out_$i979 := $eq.i32(out_$i977, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb997, $bb998;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    goto $bb1010;

  $bb1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} ldv_stop();
    goto corral_source_split_11309;

  $bb999:
    assume {:verifier.code 0} true;
    goto $bb1009;

  $bb998:
    assume {:verifier.code 0} true;
    assume !(out_$i979 == 1);
    goto $bb999;

  $bb1001:
    assume {:verifier.code 0} true;
    assume !(out_$i980 == 1);
    goto $bb999;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    goto $bb1013;

  $bb1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ldv_stop();
    goto corral_source_split_11311;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb1012;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i174 == 1);
    goto $bb17;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i207 == 1);
    goto $bb17;

  $bb104_dummy:
    call {:si_unique_call 1} out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i219, out_$i220, out_$p221, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i251, out_$i252, out_$p253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p263, out_$p264, out_$i265, out_$i267, out_$i268, out_$p269, out_$p270, out_$i271, out_$i273, out_$i274, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$p288, out_$p289, out_$i291, out_$i292, out_$p293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i311, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$p330, out_$p331, out_$i333, out_$i334, out_$p335, out_$p336, out_$i338, out_$i339, out_$p340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p345, out_$p346, out_$i348, out_$i349, out_$p350, out_$p351, out_$i353, out_$i354, out_$p355, out_$p356, out_$i357, out_$i359, out_$i360, out_$p361, out_$p362, out_$i363, out_$i365, out_$i366, out_$p367, out_$p368, out_$i370, out_$i371, out_$p372, out_$p373, out_$i375, out_$i376, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i391, out_$i392, out_$p393, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$p408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$i418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$p427, out_$i428, out_$i429, out_$p430, out_$i431, out_$i432, out_$p433, out_$i434, out_$i435, out_$p436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$p448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$p457, out_$i458, out_$i459, out_$p460, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i473, out_$i474, out_$p475, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i484, out_$p485, out_$i486, out_$i488, out_$i489, out_$p490, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$p500, out_$i501, out_$i503, out_$i504, out_$p505, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$p517, out_$p518, out_$i520, out_$i521, out_$p522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i528, out_$i529, out_$i530, out_$i531, out_$p532, out_$p533, out_$i534, out_$i536, out_$i537, out_$p538, out_$p539, out_$i540, out_$i542, out_$i543, out_$i545, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$i551, out_$i552, out_$i553, out_$i554, out_$p555, out_$i556, out_$i558, out_$i559, out_$p560, out_$i562, out_$i563, out_$i564, out_$i565, out_$i566, out_$i567, out_$i568, out_$i569, out_$p570, out_$i571, out_$i573, out_$i574, out_$p575, out_$i577, out_$i578, out_$i579, out_$i580, out_$i581, out_$i582, out_$i583, out_$i584, out_$p585, out_$i586, out_$i587, out_$p588, out_$i590, out_$i591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$p598, out_$i599, out_$i600, out_$p601, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$p611, out_$i612, out_$i614, out_$i615, out_$p616, out_$i618, out_$i619, out_$i620, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i626, out_$i627, out_$i628, out_$i629, out_$p630, out_$p631, out_$i633, out_$i634, out_$p635, out_$p636, out_$i638, out_$i639, out_$p640, out_$i641, out_$i642, out_$i643, out_$i644, out_$p645, out_$p646, out_$i648, out_$i649, out_$p650, out_$p651, out_$i653, out_$i654, out_$p655, out_$p656, out_$i657, out_$i659, out_$i660, out_$p661, out_$p662, out_$i663, out_$i665, out_$i666, out_$p667, out_$p668, out_$i670, out_$i671, out_$p672, out_$p673, out_$i675, out_$i676, out_$i678, out_$i679, out_$i680, out_$i681, out_$i682, out_$i683, out_$i684, out_$i685, out_$i686, out_$i687, out_$p688, out_$i689, out_$i691, out_$i692, out_$p693, out_$i695, out_$i696, out_$i697, out_$i698, out_$i699, out_$i700, out_$i701, out_$i702, out_$p703, out_$i704, out_$i706, out_$i707, out_$p708, out_$i710, out_$i711, out_$i712, out_$i713, out_$i714, out_$i715, out_$i716, out_$i717, out_$p718, out_$i719, out_$i721, out_$i722, out_$p723, out_$i725, out_$i726, out_$i727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$p733, out_$i734, out_$i736, out_$i737, out_$p738, out_$i740, out_$i741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i763, out_$i764, out_$p765, out_$i766, out_$i768, out_$i769, out_$p770, out_$i772, out_$i773, out_$i774, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$p780, out_$i781, out_$i782, out_$p783, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$i792, out_$p793, out_$i794, out_$i796, out_$i797, out_$p798, out_$i800, out_$i801, out_$i802, out_$i803, out_$i804, out_$i805, out_$i806, out_$i807, out_$p808, out_$i809, out_$i810, out_$p811, out_$i813, out_$i814, out_$i815, out_$i816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$i822, out_$i824, out_$i825, out_$p826, out_$i828, out_$i829, out_$i830, out_$i831, out_$i832, out_$i833, out_$i834, out_$i835, out_$p836, out_$i837, out_$i839, out_$i840, out_$p841, out_$i843, out_$i844, out_$i845, out_$i846, out_$i847, out_$i848, out_$i849, out_$i850, out_$p851, out_$i852, out_$i854, out_$i855, out_$p856, out_$i858, out_$i859, out_$i860, out_$i861, out_$i862, out_$i863, out_$i864, out_$i865, out_$p866, out_$i867, out_$i869, out_$i870, out_$p871, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p884, out_$i886, out_$i887, out_$p888, out_$p889, out_$i891, out_$i892, out_$p893, out_$i894, out_$i895, out_$i896, out_$i897, out_$p898, out_$p899, out_$i900, out_$i902, out_$i903, out_$p904, out_$p905, out_$i906, out_$i908, out_$i909, out_$i911, out_$i912, out_$i913, out_$i914, out_$i915, out_$i916, out_$i917, out_$i918, out_$i919, out_$i920, out_$i921, out_$i922, out_$p923, out_$i924, out_$i926, out_$i927, out_$p928, out_$i930, out_$i931, out_$i932, out_$i933, out_$i934, out_$i935, out_$i936, out_$i937, out_$p938, out_$i939, out_$i941, out_$i942, out_$p943, out_$i945, out_$i946, out_$i947, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$i954, out_$i956, out_$i957, out_$p958, out_$i960, out_$i961, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$i967, out_$i968, out_$i969, out_$p970, out_$i971, out_$i972, out_$p973, out_$i975, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$i981, out_$i982, out_$p983, out_$p984, out_$i986, out_$i987, out_$p988, out_$p989, out_$i990, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p42, in_$p44, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p61, in_$p62, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p82, in_$p83, in_$p84, in_$p85, in_$p87, in_$p88, in_$p89, in_$p90, in_$p91, in_$p92, in_$p93, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p105, in_$p106, in_$p107, in_$p108, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i219, out_$i220, out_$p221, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i251, out_$i252, out_$p253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p263, out_$p264, out_$i265, out_$i267, out_$i268, out_$p269, out_$p270, out_$i271, out_$i273, out_$i274, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$p288, out_$p289, out_$i291, out_$i292, out_$p293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i311, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$p330, out_$p331, out_$i333, out_$i334, out_$p335, out_$p336, out_$i338, out_$i339, out_$p340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p345, out_$p346, out_$i348, out_$i349, out_$p350, out_$p351, out_$i353, out_$i354, out_$p355, out_$p356, out_$i357, out_$i359, out_$i360, out_$p361, out_$p362, out_$i363, out_$i365, out_$i366, out_$p367, out_$p368, out_$i370, out_$i371, out_$p372, out_$p373, out_$i375, out_$i376, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i391, out_$i392, out_$p393, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$p408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$i418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$p427, out_$i428, out_$i429, out_$p430, out_$i431, out_$i432, out_$p433, out_$i434, out_$i435, out_$p436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$p448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$p457, out_$i458, out_$i459, out_$p460, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i473, out_$i474, out_$p475, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i484, out_$p485, out_$i486, out_$i488, out_$i489, out_$p490, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$p500, out_$i501, out_$i503, out_$i504, out_$p505, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$p517, out_$p518, out_$i520, out_$i521, out_$p522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i528, out_$i529, out_$i530, out_$i531, out_$p532, out_$p533, out_$i534, out_$i536, out_$i537, out_$p538, out_$p539, out_$i540, out_$i542, out_$i543, out_$i545, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$i551, out_$i552, out_$i553, out_$i554, out_$p555, out_$i556, out_$i558, out_$i559, out_$p560, out_$i562, out_$i563, out_$i564, out_$i565, out_$i566, out_$i567, out_$i568, out_$i569, out_$p570, out_$i571, out_$i573, out_$i574, out_$p575, out_$i577, out_$i578, out_$i579, out_$i580, out_$i581, out_$i582, out_$i583, out_$i584, out_$p585, out_$i586, out_$i587, out_$p588, out_$i590, out_$i591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$p598, out_$i599, out_$i600, out_$p601, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$p611, out_$i612, out_$i614, out_$i615, out_$p616, out_$i618, out_$i619, out_$i620, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i626, out_$i627, out_$i628, out_$i629, out_$p630, out_$p631, out_$i633, out_$i634, out_$p635, out_$p636, out_$i638, out_$i639, out_$p640, out_$i641, out_$i642, out_$i643, out_$i644, out_$p645, out_$p646, out_$i648, out_$i649, out_$p650, out_$p651, out_$i653, out_$i654, out_$p655, out_$p656, out_$i657, out_$i659, out_$i660, out_$p661, out_$p662, out_$i663, out_$i665, out_$i666, out_$p667, out_$p668, out_$i670, out_$i671, out_$p672, out_$p673, out_$i675, out_$i676, out_$i678, out_$i679, out_$i680, out_$i681, out_$i682, out_$i683, out_$i684, out_$i685, out_$i686, out_$i687, out_$p688, out_$i689, out_$i691, out_$i692, out_$p693, out_$i695, out_$i696, out_$i697, out_$i698, out_$i699, out_$i700, out_$i701, out_$i702, out_$p703, out_$i704, out_$i706, out_$i707, out_$p708, out_$i710, out_$i711, out_$i712, out_$i713, out_$i714, out_$i715, out_$i716, out_$i717, out_$p718, out_$i719, out_$i721, out_$i722, out_$p723, out_$i725, out_$i726, out_$i727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$p733, out_$i734, out_$i736, out_$i737, out_$p738, out_$i740, out_$i741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i763, out_$i764, out_$p765, out_$i766, out_$i768, out_$i769, out_$p770, out_$i772, out_$i773, out_$i774, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$p780, out_$i781, out_$i782, out_$p783, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$i792, out_$p793, out_$i794, out_$i796, out_$i797, out_$p798, out_$i800, out_$i801, out_$i802, out_$i803, out_$i804, out_$i805, out_$i806, out_$i807, out_$p808, out_$i809, out_$i810, out_$p811, out_$i813, out_$i814, out_$i815, out_$i816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$i822, out_$i824, out_$i825, out_$p826, out_$i828, out_$i829, out_$i830, out_$i831, out_$i832, out_$i833, out_$i834, out_$i835, out_$p836, out_$i837, out_$i839, out_$i840, out_$p841, out_$i843, out_$i844, out_$i845, out_$i846, out_$i847, out_$i848, out_$i849, out_$i850, out_$p851, out_$i852, out_$i854, out_$i855, out_$p856, out_$i858, out_$i859, out_$i860, out_$i861, out_$i862, out_$i863, out_$i864, out_$i865, out_$p866, out_$i867, out_$i869, out_$i870, out_$p871, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p884, out_$i886, out_$i887, out_$p888, out_$p889, out_$i891, out_$i892, out_$p893, out_$i894, out_$i895, out_$i896, out_$i897, out_$p898, out_$p899, out_$i900, out_$i902, out_$i903, out_$p904, out_$p905, out_$i906, out_$i908, out_$i909, out_$i911, out_$i912, out_$i913, out_$i914, out_$i915, out_$i916, out_$i917, out_$i918, out_$i919, out_$i920, out_$i921, out_$i922, out_$p923, out_$i924, out_$i926, out_$i927, out_$p928, out_$i930, out_$i931, out_$i932, out_$i933, out_$i934, out_$i935, out_$i936, out_$i937, out_$p938, out_$i939, out_$i941, out_$i942, out_$p943, out_$i945, out_$i946, out_$i947, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$i954, out_$i956, out_$i957, out_$p958, out_$i960, out_$i961, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$i967, out_$i968, out_$i969, out_$p970, out_$i971, out_$i972, out_$p973, out_$i975, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$i981, out_$i982, out_$p983, out_$p984, out_$i986, out_$i987, out_$p988, out_$p989, out_$i990, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i167: i32, in_$i168: i1, in_$i169: i1, in_$i170: i1, in_$i171: i1, in_$i172: i1, in_$i173: i1, in_$i174: i1, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i1, in_$i179: i1, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$i212: i1, in_$i213: i1, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i64, in_$i219: i32, in_$i220: i1, in_$p221: ref, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i1, in_$i227: i1, in_$i228: i1, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i64, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i1, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$p249: ref, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i1, in_$p263: ref, in_$p264: ref, in_$i265: i64, in_$i267: i32, in_$i268: i1, in_$p269: ref, in_$p270: ref, in_$i271: i64, in_$i273: i32, in_$i274: i1, in_$i276: i32, in_$i277: i32, in_$i278: i32, in_$i279: i1, in_$i280: i32, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i32, in_$i287: i1, in_$p288: ref, in_$p289: ref, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i299: i32, in_$i300: i32, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$p304: ref, in_$i305: i64, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$p310: ref, in_$i311: i64, in_$i313: i32, in_$i314: i1, in_$i316: i32, in_$i317: i32, in_$i318: i32, in_$i319: i1, in_$i320: i32, in_$i321: i1, in_$i322: i1, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$p331: ref, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$p336: ref, in_$i338: i32, in_$i339: i1, in_$p340: ref, in_$i341: i32, in_$i342: i32, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$p346: ref, in_$i348: i32, in_$i349: i1, in_$p350: ref, in_$p351: ref, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$p356: ref, in_$i357: i64, in_$i359: i32, in_$i360: i1, in_$p361: ref, in_$p362: ref, in_$i363: i64, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$p368: ref, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$p373: ref, in_$i375: i32, in_$i376: i1, in_$i378: i32, in_$i379: i32, in_$i380: i32, in_$i381: i1, in_$i382: i32, in_$i383: i1, in_$i384: i1, in_$i385: i1, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$i389: i64, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i395: i32, in_$i396: i1, in_$i397: i32, in_$i398: i1, in_$i399: i1, in_$i400: i1, in_$i401: i1, in_$i402: i1, in_$i403: i1, in_$i404: i1, in_$i405: i1, in_$i406: i32, in_$i407: i1, in_$p408: ref, in_$i409: i32, in_$i410: i1, in_$p411: ref, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$i415: i32, in_$i416: i32, in_$i417: i32, in_$i418: i1, in_$p419: ref, in_$i420: i32, in_$i421: i32, in_$i422: i1, in_$i423: i32, in_$i424: i32, in_$i425: i32, in_$i426: i1, in_$p427: ref, in_$i428: i32, in_$i429: i1, in_$p430: ref, in_$i431: i32, in_$i432: i1, in_$p433: ref, in_$i434: i32, in_$i435: i1, in_$p436: ref, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$i440: i32, in_$i441: i1, in_$p442: ref, in_$i443: i32, in_$i444: i32, in_$i445: i1, in_$i446: i32, in_$i447: i1, in_$p448: ref, in_$i449: i32, in_$i450: i1, in_$i451: i32, in_$i452: i1, in_$i453: i1, in_$i454: i1, in_$i455: i32, in_$i456: i1, in_$p457: ref, in_$i458: i32, in_$i459: i1, in_$p460: ref, in_$i462: i32, in_$i463: i1, in_$i464: i32, in_$i465: i1, in_$i466: i1, in_$i467: i1, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i471: i64, in_$i473: i32, in_$i474: i1, in_$p475: ref, in_$i477: i32, in_$i478: i1, in_$i479: i32, in_$i480: i1, in_$i481: i1, in_$i482: i1, in_$i483: i32, in_$i484: i1, in_$p485: ref, in_$i486: i64, in_$i488: i32, in_$i489: i1, in_$p490: ref, in_$i492: i32, in_$i493: i1, in_$i494: i32, in_$i495: i1, in_$i496: i1, in_$i497: i1, in_$i498: i32, in_$i499: i1, in_$p500: ref, in_$i501: i64, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$i507: i32, in_$i508: i1, in_$i509: i32, in_$i510: i1, in_$i511: i1, in_$i512: i1, in_$i513: i1, in_$i514: i1, in_$i515: i32, in_$i516: i1, in_$p517: ref, in_$p518: ref, in_$i520: i32, in_$i521: i1, in_$p522: ref, in_$p523: ref, in_$i525: i32, in_$i526: i1, in_$p527: ref, in_$i528: i32, in_$i529: i32, in_$i530: i32, in_$i531: i1, in_$p532: ref, in_$p533: ref, in_$i534: i64, in_$i536: i32, in_$i537: i1, in_$p538: ref, in_$p539: ref, in_$i540: i64, in_$i542: i32, in_$i543: i1, in_$i545: i32, in_$i546: i32, in_$i547: i32, in_$i548: i1, in_$i549: i32, in_$i550: i1, in_$i551: i1, in_$i552: i1, in_$i553: i32, in_$i554: i1, in_$p555: ref, in_$i556: i64, in_$i558: i32, in_$i559: i1, in_$p560: ref, in_$i562: i32, in_$i563: i1, in_$i564: i32, in_$i565: i1, in_$i566: i1, in_$i567: i1, in_$i568: i32, in_$i569: i1, in_$p570: ref, in_$i571: i64, in_$i573: i32, in_$i574: i1, in_$p575: ref, in_$i577: i32, in_$i578: i1, in_$i579: i32, in_$i580: i1, in_$i581: i1, in_$i582: i1, in_$i583: i32, in_$i584: i1, in_$p585: ref, in_$i586: i32, in_$i587: i1, in_$p588: ref, in_$i590: i32, in_$i591: i1, in_$i592: i32, in_$i593: i1, in_$i594: i1, in_$i595: i1, in_$i596: i32, in_$i597: i1, in_$p598: ref, in_$i599: i32, in_$i600: i1, in_$p601: ref, in_$i603: i32, in_$i604: i1, in_$i605: i32, in_$i606: i1, in_$i607: i1, in_$i608: i1, in_$i609: i32, in_$i610: i1, in_$p611: ref, in_$i612: i64, in_$i614: i32, in_$i615: i1, in_$p616: ref, in_$i618: i32, in_$i619: i1, in_$i620: i32, in_$i621: i1, in_$i622: i1, in_$i623: i1, in_$i624: i1, in_$i625: i1, in_$i626: i1, in_$i627: i1, in_$i628: i32, in_$i629: i1, in_$p630: ref, in_$p631: ref, in_$i633: i32, in_$i634: i1, in_$p635: ref, in_$p636: ref, in_$i638: i32, in_$i639: i1, in_$p640: ref, in_$i641: i32, in_$i642: i32, in_$i643: i32, in_$i644: i1, in_$p645: ref, in_$p646: ref, in_$i648: i32, in_$i649: i1, in_$p650: ref, in_$p651: ref, in_$i653: i32, in_$i654: i1, in_$p655: ref, in_$p656: ref, in_$i657: i64, in_$i659: i32, in_$i660: i1, in_$p661: ref, in_$p662: ref, in_$i663: i64, in_$i665: i32, in_$i666: i1, in_$p667: ref, in_$p668: ref, in_$i670: i32, in_$i671: i1, in_$p672: ref, in_$p673: ref, in_$i675: i32, in_$i676: i1, in_$i678: i32, in_$i679: i32, in_$i680: i32, in_$i681: i1, in_$i682: i32, in_$i683: i1, in_$i684: i1, in_$i685: i1, in_$i686: i32, in_$i687: i1, in_$p688: ref, in_$i689: i64, in_$i691: i32, in_$i692: i1, in_$p693: ref, in_$i695: i32, in_$i696: i1, in_$i697: i32, in_$i698: i1, in_$i699: i1, in_$i700: i1, in_$i701: i32, in_$i702: i1, in_$p703: ref, in_$i704: i64, in_$i706: i32, in_$i707: i1, in_$p708: ref, in_$i710: i32, in_$i711: i1, in_$i712: i32, in_$i713: i1, in_$i714: i1, in_$i715: i1, in_$i716: i32, in_$i717: i1, in_$p718: ref, in_$i719: i64, in_$i721: i32, in_$i722: i1, in_$p723: ref, in_$i725: i32, in_$i726: i1, in_$i727: i32, in_$i728: i1, in_$i729: i1, in_$i730: i1, in_$i731: i32, in_$i732: i1, in_$p733: ref, in_$i734: i64, in_$i736: i32, in_$i737: i1, in_$p738: ref, in_$i740: i32, in_$i741: i1, in_$i742: i32, in_$i743: i1, in_$i744: i1, in_$i745: i1, in_$i746: i32, in_$i747: i1, in_$i748: i32, in_$i749: i1, in_$i750: i32, in_$i751: i1, in_$i752: i32, in_$i753: i32, in_$i754: i1, in_$i755: i32, in_$i756: i1, in_$i757: i32, in_$i758: i1, in_$i759: i32, in_$i760: i1, in_$i761: i1, in_$i762: i1, in_$i763: i32, in_$i764: i1, in_$p765: ref, in_$i766: i64, in_$i768: i32, in_$i769: i1, in_$p770: ref, in_$i772: i32, in_$i773: i1, in_$i774: i32, in_$i775: i1, in_$i776: i1, in_$i777: i1, in_$i778: i32, in_$i779: i1, in_$p780: ref, in_$i781: i32, in_$i782: i1, in_$p783: ref, in_$i785: i32, in_$i786: i1, in_$i787: i32, in_$i788: i1, in_$i789: i1, in_$i790: i1, in_$i791: i32, in_$i792: i1, in_$p793: ref, in_$i794: i64, in_$i796: i32, in_$i797: i1, in_$p798: ref, in_$i800: i32, in_$i801: i1, in_$i802: i32, in_$i803: i1, in_$i804: i1, in_$i805: i1, in_$i806: i32, in_$i807: i1, in_$p808: ref, in_$i809: i32, in_$i810: i1, in_$p811: ref, in_$i813: i32, in_$i814: i1, in_$i815: i32, in_$i816: i1, in_$i817: i1, in_$i818: i1, in_$i819: i32, in_$i820: i1, in_$p821: ref, in_$i822: i64, in_$i824: i32, in_$i825: i1, in_$p826: ref, in_$i828: i32, in_$i829: i1, in_$i830: i32, in_$i831: i1, in_$i832: i1, in_$i833: i1, in_$i834: i32, in_$i835: i1, in_$p836: ref, in_$i837: i64, in_$i839: i32, in_$i840: i1, in_$p841: ref, in_$i843: i32, in_$i844: i1, in_$i845: i32, in_$i846: i1, in_$i847: i1, in_$i848: i1, in_$i849: i32, in_$i850: i1, in_$p851: ref, in_$i852: i64, in_$i854: i32, in_$i855: i1, in_$p856: ref, in_$i858: i32, in_$i859: i1, in_$i860: i32, in_$i861: i1, in_$i862: i1, in_$i863: i1, in_$i864: i32, in_$i865: i1, in_$p866: ref, in_$i867: i64, in_$i869: i32, in_$i870: i1, in_$p871: ref, in_$i873: i32, in_$i874: i1, in_$i875: i32, in_$i876: i1, in_$i877: i1, in_$i878: i1, in_$i879: i1, in_$i880: i1, in_$i881: i32, in_$i882: i1, in_$p883: ref, in_$p884: ref, in_$i886: i32, in_$i887: i1, in_$p888: ref, in_$p889: ref, in_$i891: i32, in_$i892: i1, in_$p893: ref, in_$i894: i32, in_$i895: i32, in_$i896: i32, in_$i897: i1, in_$p898: ref, in_$p899: ref, in_$i900: i64, in_$i902: i32, in_$i903: i1, in_$p904: ref, in_$p905: ref, in_$i906: i64, in_$i908: i32, in_$i909: i1, in_$i911: i32, in_$i912: i32, in_$i913: i32, in_$i914: i1, in_$i915: i32, in_$i916: i1, in_$i917: i32, in_$i918: i1, in_$i919: i1, in_$i920: i1, in_$i921: i32, in_$i922: i1, in_$p923: ref, in_$i924: i64, in_$i926: i32, in_$i927: i1, in_$p928: ref, in_$i930: i32, in_$i931: i1, in_$i932: i32, in_$i933: i1, in_$i934: i1, in_$i935: i1, in_$i936: i32, in_$i937: i1, in_$p938: ref, in_$i939: i64, in_$i941: i32, in_$i942: i1, in_$p943: ref, in_$i945: i32, in_$i946: i1, in_$i947: i32, in_$i948: i1, in_$i949: i1, in_$i950: i1, in_$i951: i32, in_$i952: i1, in_$p953: ref, in_$i954: i64, in_$i956: i32, in_$i957: i1, in_$p958: ref, in_$i960: i32, in_$i961: i1, in_$i962: i32, in_$i963: i1, in_$i964: i32, in_$i965: i1, in_$i966: i1, in_$i967: i1, in_$i968: i32, in_$i969: i1, in_$p970: ref, in_$i971: i32, in_$i972: i1, in_$p973: ref, in_$i975: i32, in_$i976: i1, in_$i977: i32, in_$i978: i1, in_$i979: i1, in_$i980: i1, in_$i981: i32, in_$i982: i1, in_$p983: ref, in_$p984: ref, in_$i986: i32, in_$i987: i1, in_$p988: ref, in_$p989: ref, in_$i990: i64, in_vslice_dummy_var_118: i64, in_vslice_dummy_var_119: i64, in_vslice_dummy_var_120: i64, in_vslice_dummy_var_121: i64, in_vslice_dummy_var_122: i64, in_vslice_dummy_var_123: i64, in_vslice_dummy_var_124: i64, in_vslice_dummy_var_125: i64, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i64, in_vslice_dummy_var_128: i64, in_vslice_dummy_var_129: i64, in_vslice_dummy_var_130: i64, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i64, in_vslice_dummy_var_133: i64, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i64, in_vslice_dummy_var_137: i64, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i64, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: ref, in_vslice_dummy_var_144: i64, in_vslice_dummy_var_145: i64, in_vslice_dummy_var_146: i64, in_vslice_dummy_var_147: i64, in_vslice_dummy_var_148: i64, in_vslice_dummy_var_149: i64, in_vslice_dummy_var_150: i64, in_vslice_dummy_var_151: i64, in_vslice_dummy_var_152: i64, in_vslice_dummy_var_153: i64, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i64, in_vslice_dummy_var_156: i64, in_vslice_dummy_var_157: i64, in_vslice_dummy_var_158: i64, in_vslice_dummy_var_159: ref, in_vslice_dummy_var_160: ref, in_vslice_dummy_var_161: i64, in_vslice_dummy_var_162: i64, in_vslice_dummy_var_163: i64, in_vslice_dummy_var_164: i64, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i64, in_vslice_dummy_var_168: i64, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i64, in_vslice_dummy_var_173: i64, in_vslice_dummy_var_174: i64, in_vslice_dummy_var_175: i64, in_vslice_dummy_var_176: i64, in_vslice_dummy_var_177: i64, in_vslice_dummy_var_178: i64, in_vslice_dummy_var_179: i64, in_vslice_dummy_var_180: i64, in_vslice_dummy_var_181: i64, in_vslice_dummy_var_182: ref, in_vslice_dummy_var_183: i64, in_vslice_dummy_var_184: i64, in_vslice_dummy_var_185: ref, in_vslice_dummy_var_186: i64, in_vslice_dummy_var_187: i64, in_vslice_dummy_var_188: i64, in_vslice_dummy_var_189: i64, in_vslice_dummy_var_190: i64, in_vslice_dummy_var_191: i64, in_vslice_dummy_var_192: i64, in_vslice_dummy_var_193: i64, in_vslice_dummy_var_194: i64, in_vslice_dummy_var_195: i64, in_vslice_dummy_var_196: i64, in_vslice_dummy_var_197: i64, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: i64, in_vslice_dummy_var_200: i64, in_vslice_dummy_var_201: i64, in_vslice_dummy_var_202: i64, in_vslice_dummy_var_203: i64, in_vslice_dummy_var_204: i64, in_vslice_dummy_var_205: ref, in_vslice_dummy_var_206: i64, in_vslice_dummy_var_207: i64) returns (out_$i167: i32, out_$i168: i1, out_$i169: i1, out_$i170: i1, out_$i171: i1, out_$i172: i1, out_$i173: i1, out_$i174: i1, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i1, out_$i179: i1, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$i212: i1, out_$i213: i1, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i64, out_$i219: i32, out_$i220: i1, out_$p221: ref, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i1, out_$i227: i1, out_$i228: i1, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i64, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i1, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$p249: ref, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i1, out_$p263: ref, out_$p264: ref, out_$i265: i64, out_$i267: i32, out_$i268: i1, out_$p269: ref, out_$p270: ref, out_$i271: i64, out_$i273: i32, out_$i274: i1, out_$i276: i32, out_$i277: i32, out_$i278: i32, out_$i279: i1, out_$i280: i32, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i32, out_$i287: i1, out_$p288: ref, out_$p289: ref, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i299: i32, out_$i300: i32, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$p304: ref, out_$i305: i64, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$p310: ref, out_$i311: i64, out_$i313: i32, out_$i314: i1, out_$i316: i32, out_$i317: i32, out_$i318: i32, out_$i319: i1, out_$i320: i32, out_$i321: i1, out_$i322: i1, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$p331: ref, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$p336: ref, out_$i338: i32, out_$i339: i1, out_$p340: ref, out_$i341: i32, out_$i342: i32, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$p346: ref, out_$i348: i32, out_$i349: i1, out_$p350: ref, out_$p351: ref, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$p356: ref, out_$i357: i64, out_$i359: i32, out_$i360: i1, out_$p361: ref, out_$p362: ref, out_$i363: i64, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$p368: ref, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$p373: ref, out_$i375: i32, out_$i376: i1, out_$i378: i32, out_$i379: i32, out_$i380: i32, out_$i381: i1, out_$i382: i32, out_$i383: i1, out_$i384: i1, out_$i385: i1, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$i389: i64, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i395: i32, out_$i396: i1, out_$i397: i32, out_$i398: i1, out_$i399: i1, out_$i400: i1, out_$i401: i1, out_$i402: i1, out_$i403: i1, out_$i404: i1, out_$i405: i1, out_$i406: i32, out_$i407: i1, out_$p408: ref, out_$i409: i32, out_$i410: i1, out_$p411: ref, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$i415: i32, out_$i416: i32, out_$i417: i32, out_$i418: i1, out_$p419: ref, out_$i420: i32, out_$i421: i32, out_$i422: i1, out_$i423: i32, out_$i424: i32, out_$i425: i32, out_$i426: i1, out_$p427: ref, out_$i428: i32, out_$i429: i1, out_$p430: ref, out_$i431: i32, out_$i432: i1, out_$p433: ref, out_$i434: i32, out_$i435: i1, out_$p436: ref, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$i440: i32, out_$i441: i1, out_$p442: ref, out_$i443: i32, out_$i444: i32, out_$i445: i1, out_$i446: i32, out_$i447: i1, out_$p448: ref, out_$i449: i32, out_$i450: i1, out_$i451: i32, out_$i452: i1, out_$i453: i1, out_$i454: i1, out_$i455: i32, out_$i456: i1, out_$p457: ref, out_$i458: i32, out_$i459: i1, out_$p460: ref, out_$i462: i32, out_$i463: i1, out_$i464: i32, out_$i465: i1, out_$i466: i1, out_$i467: i1, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i471: i64, out_$i473: i32, out_$i474: i1, out_$p475: ref, out_$i477: i32, out_$i478: i1, out_$i479: i32, out_$i480: i1, out_$i481: i1, out_$i482: i1, out_$i483: i32, out_$i484: i1, out_$p485: ref, out_$i486: i64, out_$i488: i32, out_$i489: i1, out_$p490: ref, out_$i492: i32, out_$i493: i1, out_$i494: i32, out_$i495: i1, out_$i496: i1, out_$i497: i1, out_$i498: i32, out_$i499: i1, out_$p500: ref, out_$i501: i64, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$i507: i32, out_$i508: i1, out_$i509: i32, out_$i510: i1, out_$i511: i1, out_$i512: i1, out_$i513: i1, out_$i514: i1, out_$i515: i32, out_$i516: i1, out_$p517: ref, out_$p518: ref, out_$i520: i32, out_$i521: i1, out_$p522: ref, out_$p523: ref, out_$i525: i32, out_$i526: i1, out_$p527: ref, out_$i528: i32, out_$i529: i32, out_$i530: i32, out_$i531: i1, out_$p532: ref, out_$p533: ref, out_$i534: i64, out_$i536: i32, out_$i537: i1, out_$p538: ref, out_$p539: ref, out_$i540: i64, out_$i542: i32, out_$i543: i1, out_$i545: i32, out_$i546: i32, out_$i547: i32, out_$i548: i1, out_$i549: i32, out_$i550: i1, out_$i551: i1, out_$i552: i1, out_$i553: i32, out_$i554: i1, out_$p555: ref, out_$i556: i64, out_$i558: i32, out_$i559: i1, out_$p560: ref, out_$i562: i32, out_$i563: i1, out_$i564: i32, out_$i565: i1, out_$i566: i1, out_$i567: i1, out_$i568: i32, out_$i569: i1, out_$p570: ref, out_$i571: i64, out_$i573: i32, out_$i574: i1, out_$p575: ref, out_$i577: i32, out_$i578: i1, out_$i579: i32, out_$i580: i1, out_$i581: i1, out_$i582: i1, out_$i583: i32, out_$i584: i1, out_$p585: ref, out_$i586: i32, out_$i587: i1, out_$p588: ref, out_$i590: i32, out_$i591: i1, out_$i592: i32, out_$i593: i1, out_$i594: i1, out_$i595: i1, out_$i596: i32, out_$i597: i1, out_$p598: ref, out_$i599: i32, out_$i600: i1, out_$p601: ref, out_$i603: i32, out_$i604: i1, out_$i605: i32, out_$i606: i1, out_$i607: i1, out_$i608: i1, out_$i609: i32, out_$i610: i1, out_$p611: ref, out_$i612: i64, out_$i614: i32, out_$i615: i1, out_$p616: ref, out_$i618: i32, out_$i619: i1, out_$i620: i32, out_$i621: i1, out_$i622: i1, out_$i623: i1, out_$i624: i1, out_$i625: i1, out_$i626: i1, out_$i627: i1, out_$i628: i32, out_$i629: i1, out_$p630: ref, out_$p631: ref, out_$i633: i32, out_$i634: i1, out_$p635: ref, out_$p636: ref, out_$i638: i32, out_$i639: i1, out_$p640: ref, out_$i641: i32, out_$i642: i32, out_$i643: i32, out_$i644: i1, out_$p645: ref, out_$p646: ref, out_$i648: i32, out_$i649: i1, out_$p650: ref, out_$p651: ref, out_$i653: i32, out_$i654: i1, out_$p655: ref, out_$p656: ref, out_$i657: i64, out_$i659: i32, out_$i660: i1, out_$p661: ref, out_$p662: ref, out_$i663: i64, out_$i665: i32, out_$i666: i1, out_$p667: ref, out_$p668: ref, out_$i670: i32, out_$i671: i1, out_$p672: ref, out_$p673: ref, out_$i675: i32, out_$i676: i1, out_$i678: i32, out_$i679: i32, out_$i680: i32, out_$i681: i1, out_$i682: i32, out_$i683: i1, out_$i684: i1, out_$i685: i1, out_$i686: i32, out_$i687: i1, out_$p688: ref, out_$i689: i64, out_$i691: i32, out_$i692: i1, out_$p693: ref, out_$i695: i32, out_$i696: i1, out_$i697: i32, out_$i698: i1, out_$i699: i1, out_$i700: i1, out_$i701: i32, out_$i702: i1, out_$p703: ref, out_$i704: i64, out_$i706: i32, out_$i707: i1, out_$p708: ref, out_$i710: i32, out_$i711: i1, out_$i712: i32, out_$i713: i1, out_$i714: i1, out_$i715: i1, out_$i716: i32, out_$i717: i1, out_$p718: ref, out_$i719: i64, out_$i721: i32, out_$i722: i1, out_$p723: ref, out_$i725: i32, out_$i726: i1, out_$i727: i32, out_$i728: i1, out_$i729: i1, out_$i730: i1, out_$i731: i32, out_$i732: i1, out_$p733: ref, out_$i734: i64, out_$i736: i32, out_$i737: i1, out_$p738: ref, out_$i740: i32, out_$i741: i1, out_$i742: i32, out_$i743: i1, out_$i744: i1, out_$i745: i1, out_$i746: i32, out_$i747: i1, out_$i748: i32, out_$i749: i1, out_$i750: i32, out_$i751: i1, out_$i752: i32, out_$i753: i32, out_$i754: i1, out_$i755: i32, out_$i756: i1, out_$i757: i32, out_$i758: i1, out_$i759: i32, out_$i760: i1, out_$i761: i1, out_$i762: i1, out_$i763: i32, out_$i764: i1, out_$p765: ref, out_$i766: i64, out_$i768: i32, out_$i769: i1, out_$p770: ref, out_$i772: i32, out_$i773: i1, out_$i774: i32, out_$i775: i1, out_$i776: i1, out_$i777: i1, out_$i778: i32, out_$i779: i1, out_$p780: ref, out_$i781: i32, out_$i782: i1, out_$p783: ref, out_$i785: i32, out_$i786: i1, out_$i787: i32, out_$i788: i1, out_$i789: i1, out_$i790: i1, out_$i791: i32, out_$i792: i1, out_$p793: ref, out_$i794: i64, out_$i796: i32, out_$i797: i1, out_$p798: ref, out_$i800: i32, out_$i801: i1, out_$i802: i32, out_$i803: i1, out_$i804: i1, out_$i805: i1, out_$i806: i32, out_$i807: i1, out_$p808: ref, out_$i809: i32, out_$i810: i1, out_$p811: ref, out_$i813: i32, out_$i814: i1, out_$i815: i32, out_$i816: i1, out_$i817: i1, out_$i818: i1, out_$i819: i32, out_$i820: i1, out_$p821: ref, out_$i822: i64, out_$i824: i32, out_$i825: i1, out_$p826: ref, out_$i828: i32, out_$i829: i1, out_$i830: i32, out_$i831: i1, out_$i832: i1, out_$i833: i1, out_$i834: i32, out_$i835: i1, out_$p836: ref, out_$i837: i64, out_$i839: i32, out_$i840: i1, out_$p841: ref, out_$i843: i32, out_$i844: i1, out_$i845: i32, out_$i846: i1, out_$i847: i1, out_$i848: i1, out_$i849: i32, out_$i850: i1, out_$p851: ref, out_$i852: i64, out_$i854: i32, out_$i855: i1, out_$p856: ref, out_$i858: i32, out_$i859: i1, out_$i860: i32, out_$i861: i1, out_$i862: i1, out_$i863: i1, out_$i864: i32, out_$i865: i1, out_$p866: ref, out_$i867: i64, out_$i869: i32, out_$i870: i1, out_$p871: ref, out_$i873: i32, out_$i874: i1, out_$i875: i32, out_$i876: i1, out_$i877: i1, out_$i878: i1, out_$i879: i1, out_$i880: i1, out_$i881: i32, out_$i882: i1, out_$p883: ref, out_$p884: ref, out_$i886: i32, out_$i887: i1, out_$p888: ref, out_$p889: ref, out_$i891: i32, out_$i892: i1, out_$p893: ref, out_$i894: i32, out_$i895: i32, out_$i896: i32, out_$i897: i1, out_$p898: ref, out_$p899: ref, out_$i900: i64, out_$i902: i32, out_$i903: i1, out_$p904: ref, out_$p905: ref, out_$i906: i64, out_$i908: i32, out_$i909: i1, out_$i911: i32, out_$i912: i32, out_$i913: i32, out_$i914: i1, out_$i915: i32, out_$i916: i1, out_$i917: i32, out_$i918: i1, out_$i919: i1, out_$i920: i1, out_$i921: i32, out_$i922: i1, out_$p923: ref, out_$i924: i64, out_$i926: i32, out_$i927: i1, out_$p928: ref, out_$i930: i32, out_$i931: i1, out_$i932: i32, out_$i933: i1, out_$i934: i1, out_$i935: i1, out_$i936: i32, out_$i937: i1, out_$p938: ref, out_$i939: i64, out_$i941: i32, out_$i942: i1, out_$p943: ref, out_$i945: i32, out_$i946: i1, out_$i947: i32, out_$i948: i1, out_$i949: i1, out_$i950: i1, out_$i951: i32, out_$i952: i1, out_$p953: ref, out_$i954: i64, out_$i956: i32, out_$i957: i1, out_$p958: ref, out_$i960: i32, out_$i961: i1, out_$i962: i32, out_$i963: i1, out_$i964: i32, out_$i965: i1, out_$i966: i1, out_$i967: i1, out_$i968: i32, out_$i969: i1, out_$p970: ref, out_$i971: i32, out_$i972: i1, out_$p973: ref, out_$i975: i32, out_$i976: i1, out_$i977: i32, out_$i978: i1, out_$i979: i1, out_$i980: i1, out_$i981: i32, out_$i982: i1, out_$p983: ref, out_$p984: ref, out_$i986: i32, out_$i987: i1, out_$p988: ref, out_$p989: ref, out_$i990: i64, out_vslice_dummy_var_118: i64, out_vslice_dummy_var_119: i64, out_vslice_dummy_var_120: i64, out_vslice_dummy_var_121: i64, out_vslice_dummy_var_122: i64, out_vslice_dummy_var_123: i64, out_vslice_dummy_var_124: i64, out_vslice_dummy_var_125: i64, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i64, out_vslice_dummy_var_128: i64, out_vslice_dummy_var_129: i64, out_vslice_dummy_var_130: i64, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i64, out_vslice_dummy_var_133: i64, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i64, out_vslice_dummy_var_137: i64, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i64, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: ref, out_vslice_dummy_var_144: i64, out_vslice_dummy_var_145: i64, out_vslice_dummy_var_146: i64, out_vslice_dummy_var_147: i64, out_vslice_dummy_var_148: i64, out_vslice_dummy_var_149: i64, out_vslice_dummy_var_150: i64, out_vslice_dummy_var_151: i64, out_vslice_dummy_var_152: i64, out_vslice_dummy_var_153: i64, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i64, out_vslice_dummy_var_156: i64, out_vslice_dummy_var_157: i64, out_vslice_dummy_var_158: i64, out_vslice_dummy_var_159: ref, out_vslice_dummy_var_160: ref, out_vslice_dummy_var_161: i64, out_vslice_dummy_var_162: i64, out_vslice_dummy_var_163: i64, out_vslice_dummy_var_164: i64, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i64, out_vslice_dummy_var_168: i64, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i64, out_vslice_dummy_var_173: i64, out_vslice_dummy_var_174: i64, out_vslice_dummy_var_175: i64, out_vslice_dummy_var_176: i64, out_vslice_dummy_var_177: i64, out_vslice_dummy_var_178: i64, out_vslice_dummy_var_179: i64, out_vslice_dummy_var_180: i64, out_vslice_dummy_var_181: i64, out_vslice_dummy_var_182: ref, out_vslice_dummy_var_183: i64, out_vslice_dummy_var_184: i64, out_vslice_dummy_var_185: ref, out_vslice_dummy_var_186: i64, out_vslice_dummy_var_187: i64, out_vslice_dummy_var_188: i64, out_vslice_dummy_var_189: i64, out_vslice_dummy_var_190: i64, out_vslice_dummy_var_191: i64, out_vslice_dummy_var_192: i64, out_vslice_dummy_var_193: i64, out_vslice_dummy_var_194: i64, out_vslice_dummy_var_195: i64, out_vslice_dummy_var_196: i64, out_vslice_dummy_var_197: i64, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: i64, out_vslice_dummy_var_200: i64, out_vslice_dummy_var_201: i64, out_vslice_dummy_var_202: i64, out_vslice_dummy_var_203: i64, out_vslice_dummy_var_204: i64, out_vslice_dummy_var_205: ref, out_vslice_dummy_var_206: i64, out_vslice_dummy_var_207: i64);
  modifies $M.93, $M.0, $CurrAddr, $M.94, $M.95, $M.45, $M.96, $M.97, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.98, $M.99, $M.130, $M.131, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.85, $M.72, $M.87, $M.88, $M.67, $M.68, $M.53, $M.54, $M.55, $M.71, $M.73, $M.82, $M.89, $M.56, $M.70, $M.59, $M.60, $M.83, $M.69, $M.57, $M.91, $M.58, $M.75, $M.76, $M.77, $M.92, $M.90, $M.79, $M.50, $M.86, $M.116, $M.81, $M.117, $M.48, $M.118, $M.74, $M.119, $M.52, $M.120, $M.84, $M.121, $M.49, $M.122, $M.78, $M.123, $M.65, $M.66, $M.124, $M.43, $M.80, $M.125, $M.61, $M.126, $M.51, $M.127, $M.42, $M.44, $M.62, $M.128, $M.63, $M.64, $M.129, $M.115, $M.132, $M.46, $M.47;


