var $M.0: [ref]i8;

var $M.1: [ref]i64;

var $M.2: [ref]i8;

var $M.3: [ref]i16;

var $M.4: [ref]i16;

var $M.5: [ref]ref;

var $M.6: [ref]i16;

var $M.7: i32;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i24;

var $M.13: [ref]i8;

var $M.14: i32;

var $M.15: i32;

var $M.16: ref;

var $M.17: i32;

var $M.18: ref;

var $M.19: i32;

var $M.20: ref;

var $M.21: i32;

var $M.22: ref;

var $M.23: [ref]i32;

var $M.24: i32;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]i64;

var $M.29: [ref]i8;

var $M.30: [ref]ref;

var $M.31: [ref]i32;

var $M.32: [ref]i8;

var $M.33: ref;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: ref;

var $M.39: ref;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: ref;

var $M.53: ref;

var $M.54: ref;

var $M.55: ref;

var $M.56: ref;

var $M.57: ref;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.85: [ref]i8;

var $M.86: [ref]i8;

var $M.87: [ref]i8;

var $M.88: [ref]i8;

var $M.117: [ref]i8;

var $M.118: [ref]ref;

var $M.123: [ref]i8;

var $M.124: [ref]i8;

var $M.125: [ref]i8;

var $M.126: [ref]i8;

var $M.127: [ref]i8;

var $M.128: [ref]i8;

var $M.129: [ref]i8;

var $M.130: [ref]i8;

var $M.131: [ref]i8;

var $M.132: [ref]i8;

var $M.133: [ref]i8;

var $M.134: [ref]i8;

var $M.135: [ref]i8;

var $M.136: [ref]i8;

var $M.137: [ref]i8;

var $M.138: [ref]i8;

var $M.139: [ref]i8;

var $M.140: [ref]i8;

var $M.141: [ref]i8;

var $M.142: [ref]i8;

var $M.143: [ref]i8;

var $M.144: [ref]i8;

var $M.145: [ref]i8;

var $M.146: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 414980);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const dev_attr_otg_pin_enable_group0: ref;

axiom dev_attr_otg_pin_enable_group0 == $sub.ref(0, 2060);

const dev_attr_otg_pin_enable_group1: ref;

axiom dev_attr_otg_pin_enable_group1 == $sub.ref(0, 3092);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 4120);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 5152);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 6180);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 7212);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 8240);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 9272);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 10300);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 11332);

const dev_attr_high_impedance_enable_group0: ref;

axiom dev_attr_high_impedance_enable_group0 == $sub.ref(0, 12364);

const dev_attr_high_impedance_enable_group1: ref;

axiom dev_attr_high_impedance_enable_group1 == $sub.ref(0, 13396);

const dev_attr_battery_regulation_voltage_group0: ref;

axiom dev_attr_battery_regulation_voltage_group0 == $sub.ref(0, 14428);

const dev_attr_battery_regulation_voltage_group1: ref;

axiom dev_attr_battery_regulation_voltage_group1 == $sub.ref(0, 15460);

const dev_attr_charge_termination_enable_group0: ref;

axiom dev_attr_charge_termination_enable_group0 == $sub.ref(0, 16492);

const dev_attr_charge_termination_enable_group1: ref;

axiom dev_attr_charge_termination_enable_group1 == $sub.ref(0, 17524);

const dev_attr_charge_current_group0: ref;

axiom dev_attr_charge_current_group0 == $sub.ref(0, 18556);

const dev_attr_charge_current_group1: ref;

axiom dev_attr_charge_current_group1 == $sub.ref(0, 19588);

const dev_attr_stat_pin_enable_group0: ref;

axiom dev_attr_stat_pin_enable_group0 == $sub.ref(0, 20620);

const dev_attr_stat_pin_enable_group1: ref;

axiom dev_attr_stat_pin_enable_group1 == $sub.ref(0, 21652);

const dev_attr_current_limit_group0: ref;

axiom dev_attr_current_limit_group0 == $sub.ref(0, 22684);

const dev_attr_current_limit_group1: ref;

axiom dev_attr_current_limit_group1 == $sub.ref(0, 23716);

const dev_attr_mode_group0: ref;

axiom dev_attr_mode_group0 == $sub.ref(0, 24748);

const dev_attr_mode_group1: ref;

axiom dev_attr_mode_group1 == $sub.ref(0, 25780);

const dev_attr_termination_current_group0: ref;

axiom dev_attr_termination_current_group0 == $sub.ref(0, 26812);

const dev_attr_termination_current_group1: ref;

axiom dev_attr_termination_current_group1 == $sub.ref(0, 27844);

const bq2415x_driver_group0: ref;

axiom bq2415x_driver_group0 == $sub.ref(0, 28876);

const dev_attr_timer_group0: ref;

axiom dev_attr_timer_group0 == $sub.ref(0, 29908);

const dev_attr_timer_group1: ref;

axiom dev_attr_timer_group1 == $sub.ref(0, 30940);

const dev_attr_registers_group0: ref;

axiom dev_attr_registers_group0 == $sub.ref(0, 31972);

const dev_attr_registers_group1: ref;

axiom dev_attr_registers_group1 == $sub.ref(0, 33004);

const dev_attr_weak_battery_voltage_group0: ref;

axiom dev_attr_weak_battery_voltage_group0 == $sub.ref(0, 34036);

const dev_attr_weak_battery_voltage_group1: ref;

axiom dev_attr_weak_battery_voltage_group1 == $sub.ref(0, 35068);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 36096);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 37124);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 38152);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 39180);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 40208);

const ldv_state_variable_18: ref;

axiom ldv_state_variable_18 == $sub.ref(0, 41236);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 42264);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 43292);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 44320);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 45348);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 46376);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 47404);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 48432);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 49460);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 50488);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 51516);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 52544);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 53572);

const ldv_state_variable_19: ref;

axiom ldv_state_variable_19 == $sub.ref(0, 54600);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 55628);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 56656);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 57684);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 58712);

const {:count 14} __mod_i2c__bq2415x_i2c_id_table_device_table: ref;

axiom __mod_i2c__bq2415x_i2c_id_table_device_table == $sub.ref(0, 60184);

const {:count 14} __mod_acpi__bq2415x_i2c_acpi_match_device_table: ref;

axiom __mod_acpi__bq2415x_i2c_acpi_match_device_table == $sub.ref(0, 61544);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 62572);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 63600);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 64628);

const ldv_mutex_bq2415x_timer_mutex: ref;

axiom ldv_mutex_bq2415x_timer_mutex == $sub.ref(0, 65656);

const ldv_mutex_bq2415x_id_mutex: ref;

axiom ldv_mutex_bq2415x_id_mutex == $sub.ref(0, 66684);

const ldv_mutex_bq2415x_i2c_mutex: ref;

axiom ldv_mutex_bq2415x_i2c_mutex == $sub.ref(0, 67712);

const {:count 14} bq2415x_i2c_id_table: ref;

axiom bq2415x_i2c_id_table == $sub.ref(0, 69184);

const {:count 14} bq2415x_i2c_acpi_match: ref;

axiom bq2415x_i2c_acpi_match == $sub.ref(0, 70544);

const bq2415x_driver: ref;

axiom bq2415x_driver == $sub.ref(0, 71784);

const dev_attr_fault_status: ref;

axiom dev_attr_fault_status == $sub.ref(0, 72856);

const dev_attr_boost_status: ref;

axiom dev_attr_boost_status == $sub.ref(0, 73928);

const dev_attr_charge_status: ref;

axiom dev_attr_charge_status == $sub.ref(0, 75000);

const dev_attr_otg_status: ref;

axiom dev_attr_otg_status == $sub.ref(0, 76072);

const dev_attr_registers: ref;

axiom dev_attr_registers == $sub.ref(0, 77144);

const dev_attr_timer: ref;

axiom dev_attr_timer == $sub.ref(0, 78216);

const dev_attr_mode: ref;

axiom dev_attr_mode == $sub.ref(0, 79288);

const dev_attr_reported_mode: ref;

axiom dev_attr_reported_mode == $sub.ref(0, 80360);

const dev_attr_stat_pin_enable: ref;

axiom dev_attr_stat_pin_enable == $sub.ref(0, 81432);

const dev_attr_otg_pin_enable: ref;

axiom dev_attr_otg_pin_enable == $sub.ref(0, 82504);

const dev_attr_high_impedance_enable: ref;

axiom dev_attr_high_impedance_enable == $sub.ref(0, 83576);

const dev_attr_charge_termination_enable: ref;

axiom dev_attr_charge_termination_enable == $sub.ref(0, 84648);

const dev_attr_termination_current: ref;

axiom dev_attr_termination_current == $sub.ref(0, 85720);

const dev_attr_charge_current: ref;

axiom dev_attr_charge_current == $sub.ref(0, 86792);

const dev_attr_battery_regulation_voltage: ref;

axiom dev_attr_battery_regulation_voltage == $sub.ref(0, 87864);

const dev_attr_weak_battery_voltage: ref;

axiom dev_attr_weak_battery_voltage == $sub.ref(0, 88936);

const dev_attr_current_limit: ref;

axiom dev_attr_current_limit == $sub.ref(0, 90008);

const {:count 18} bq2415x_sysfs_attributes: ref;

axiom bq2415x_sysfs_attributes == $sub.ref(0, 91176);

const bq2415x_sysfs_attr_group: ref;

axiom bq2415x_sysfs_attr_group == $sub.ref(0, 92232);

const {:count 13} bq2415x_chip_name: ref;

axiom bq2415x_chip_name == $sub.ref(0, 93360);

const {:count 2} bq2415x_power_supply_props: ref;

axiom bq2415x_power_supply_props == $sub.ref(0, 94392);

const bq2415x_id: ref;

axiom bq2415x_id == $sub.ref(0, 95528);

const bq2415x_id_mutex: ref;

axiom bq2415x_id_mutex == $sub.ref(0, 96712);

const bq2415x_timer_mutex: ref;

axiom bq2415x_timer_mutex == $sub.ref(0, 97896);

const bq2415x_i2c_mutex: ref;

axiom bq2415x_i2c_mutex == $sub.ref(0, 99080);

const {:count 28} .str.21: ref;

axiom .str.21 == $sub.ref(0, 100132);

const {:count 18} .str.22: ref;

axiom .str.22 == $sub.ref(0, 101174);

const {:count 30} .str.25: ref;

axiom .str.25 == $sub.ref(0, 102228);

const {:count 20} .str.26: ref;

axiom .str.26 == $sub.ref(0, 103272);

const {:count 27} .str.60: ref;

axiom .str.60 == $sub.ref(0, 104323);

const {:count 17} .str.61: ref;

axiom .str.61 == $sub.ref(0, 105364);

const {:count 16} .str.62: ref;

axiom .str.62 == $sub.ref(0, 106404);

const {:count 8} .str.63: ref;

axiom .str.63 == $sub.ref(0, 107436);

const {:count 8} .str.67: ref;

axiom .str.67 == $sub.ref(0, 108468);

const {:count 9} .str.68: ref;

axiom .str.68 == $sub.ref(0, 109501);

const {:count 8} .str.69: ref;

axiom .str.69 == $sub.ref(0, 110533);

const {:count 9} .str.70: ref;

axiom .str.70 == $sub.ref(0, 111566);

const {:count 8} .str.71: ref;

axiom .str.71 == $sub.ref(0, 112598);

const {:count 8} .str.72: ref;

axiom .str.72 == $sub.ref(0, 113630);

const {:count 9} .str.73: ref;

axiom .str.73 == $sub.ref(0, 114663);

const {:count 8} .str.74: ref;

axiom .str.74 == $sub.ref(0, 115695);

const {:count 8} .str.75: ref;

axiom .str.75 == $sub.ref(0, 116727);

const {:count 9} .str.76: ref;

axiom .str.76 == $sub.ref(0, 117760);

const {:count 9} .str.77: ref;

axiom .str.77 == $sub.ref(0, 118793);

const {:count 8} .str.78: ref;

axiom .str.78 == $sub.ref(0, 119825);

const {:count 14} .str.35: ref;

axiom .str.35 == $sub.ref(0, 120863);

const {:count 21} .str.36: ref;

axiom .str.36 == $sub.ref(0, 121908);

const {:count 27} .str.37: ref;

axiom .str.37 == $sub.ref(0, 122959);

const {:count 15} .str.38: ref;

axiom .str.38 == $sub.ref(0, 123998);

const {:count 20} .str.39: ref;

axiom .str.39 == $sub.ref(0, 125042);

const {:count 4} .str.31: ref;

axiom .str.31 == $sub.ref(0, 126070);

const {:count 26} .str.27: ref;

axiom .str.27 == $sub.ref(0, 127120);

const {:count 22} .str.28: ref;

axiom .str.28 == $sub.ref(0, 128166);

const {:count 15} .str.29: ref;

axiom .str.29 == $sub.ref(0, 129205);

const {:count 16} .str.30: ref;

axiom .str.30 == $sub.ref(0, 130245);

const .str: ref;

axiom .str == $sub.ref(0, 131283);

const {:count 5} .str.99: ref;

axiom .str.99 == $sub.ref(0, 132312);

const {:count 6} .str.100: ref;

axiom .str.100 == $sub.ref(0, 133342);

const {:count 6} .str.101: ref;

axiom .str.101 == $sub.ref(0, 134372);

const {:count 11} .str.102: ref;

axiom .str.102 == $sub.ref(0, 135407);

const {:count 7} .str.103: ref;

axiom .str.103 == $sub.ref(0, 136438);

const {:count 5} .str.20: ref;

axiom .str.20 == $sub.ref(0, 137467);

const {:count 5} .str.88: ref;

axiom .str.88 == $sub.ref(0, 138496);

const {:count 4} .str.89: ref;

axiom .str.89 == $sub.ref(0, 139524);

const {:count 5} .str.90: ref;

axiom .str.90 == $sub.ref(0, 140553);

const {:count 5} .str.91: ref;

axiom .str.91 == $sub.ref(0, 141582);

const {:count 10} .str.92: ref;

axiom .str.92 == $sub.ref(0, 142616);

const {:count 6} .str.93: ref;

axiom .str.93 == $sub.ref(0, 143646);

const {:count 6} .str.94: ref;

axiom .str.94 == $sub.ref(0, 144676);

const {:count 16} .str.12: ref;

axiom .str.12 == $sub.ref(0, 145716);

const {:count 17} .str.13: ref;

axiom .str.13 == $sub.ref(0, 146757);

const {:count 210} .str.14: ref;

axiom .str.14 == $sub.ref(0, 147991);

const {:count 27} .str.15: ref;

axiom .str.15 == $sub.ref(0, 149042);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 150089);

const {:count 36} .str.17: ref;

axiom .str.17 == $sub.ref(0, 151149);

const {:count 37} .str.18: ref;

axiom .str.18 == $sub.ref(0, 152210);

const {:count 25} .str.19: ref;

axiom .str.19 == $sub.ref(0, 153259);

const {:count 7} .str.95: ref;

axiom .str.95 == $sub.ref(0, 154290);

const {:count 2} .str.96: ref;

axiom .str.96 == $sub.ref(0, 155316);

const {:count 2} .str.97: ref;

axiom .str.97 == $sub.ref(0, 156342);

const {:count 6} .str.23: ref;

axiom .str.23 == $sub.ref(0, 157372);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 4} .str.24: ref;

axiom .str.24 == $sub.ref(0, 158400);

const {:count 6} .str.98: ref;

axiom .str.98 == $sub.ref(0, 159430);

const {:count 10} .str.79: ref;

axiom .str.79 == $sub.ref(0, 160464);

const {:count 6} .str.32: ref;

axiom .str.32 == $sub.ref(0, 161494);

const {:count 16} .str.33: ref;

axiom .str.33 == $sub.ref(0, 162534);

const {:count 13} .str.34: ref;

axiom .str.34 == $sub.ref(0, 163571);

const {:count 11} .str.80: ref;

axiom .str.80 == $sub.ref(0, 164606);

const {:count 14} .str.81: ref;

axiom .str.81 == $sub.ref(0, 165644);

const {:count 13} .str.82: ref;

axiom .str.82 == $sub.ref(0, 166681);

const {:count 13} .str.83: ref;

axiom .str.83 == $sub.ref(0, 167718);

const {:count 16} .str.87: ref;

axiom .str.87 == $sub.ref(0, 168758);

const {:count 21} .str.86: ref;

axiom .str.86 == $sub.ref(0, 169803);

const {:count 57} .str.40: ref;

axiom .str.40 == $sub.ref(0, 170884);

const {:count 6} .str.41: ref;

axiom .str.41 == $sub.ref(0, 171914);

const {:count 32} .str.42: ref;

axiom .str.42 == $sub.ref(0, 172970);

const {:count 25} .str.43: ref;

axiom .str.43 == $sub.ref(0, 174019);

const {:count 50} .str.44: ref;

axiom .str.44 == $sub.ref(0, 175093);

const {:count 17} .str.45: ref;

axiom .str.45 == $sub.ref(0, 176134);

const {:count 24} .str.46: ref;

axiom .str.46 == $sub.ref(0, 177182);

const {:count 30} .str.47: ref;

axiom .str.47 == $sub.ref(0, 178236);

const {:count 18} .str.48: ref;

axiom .str.48 == $sub.ref(0, 179278);

const {:count 23} .str.49: ref;

axiom .str.49 == $sub.ref(0, 180325);

const {:count 18} .str.50: ref;

axiom .str.50 == $sub.ref(0, 181367);

const {:count 37} .str.51: ref;

axiom .str.51 == $sub.ref(0, 182428);

const {:count 36} .str.52: ref;

axiom .str.52 == $sub.ref(0, 183488);

const {:count 34} .str.53: ref;

axiom .str.53 == $sub.ref(0, 184546);

const {:count 28} .str.54: ref;

axiom .str.54 == $sub.ref(0, 185598);

const {:count 18} .str.55: ref;

axiom .str.55 == $sub.ref(0, 186640);

const {:count 24} .str.56: ref;

axiom .str.56 == $sub.ref(0, 187688);

const {:count 21} .str.57: ref;

axiom .str.57 == $sub.ref(0, 188733);

const {:count 22} .str.58: ref;

axiom .str.58 == $sub.ref(0, 189779);

const {:count 19} .str.59: ref;

axiom .str.59 == $sub.ref(0, 190822);

const {:count 23} .str.1: ref;

axiom .str.1 == $sub.ref(0, 191869);

const {:count 14} .str.2: ref;

axiom .str.2 == $sub.ref(0, 192907);

const {:count 15} .str.3: ref;

axiom .str.3 == $sub.ref(0, 193946);

const {:count 24} .str.4: ref;

axiom .str.4 == $sub.ref(0, 194994);

const {:count 36} .str.5: ref;

axiom .str.5 == $sub.ref(0, 196054);

const {:count 9} .str.6: ref;

axiom .str.6 == $sub.ref(0, 197087);

const {:count 31} .str.7: ref;

axiom .str.7 == $sub.ref(0, 198142);

const {:count 27} .str.8: ref;

axiom .str.8 == $sub.ref(0, 199193);

const {:count 12} .str.9: ref;

axiom .str.9 == $sub.ref(0, 200229);

const {:count 19} .str.10: ref;

axiom .str.10 == $sub.ref(0, 201272);

const {:count 12} .str.11: ref;

axiom .str.11 == $sub.ref(0, 202308);

const {:count 22} .str.84: ref;

axiom .str.84 == $sub.ref(0, 203354);

const {:count 26} .str.85: ref;

axiom .str.85 == $sub.ref(0, 204404);

const {:count 5} .str.64: ref;

axiom .str.64 == $sub.ref(0, 205433);

const {:count 39} .str.65: ref;

axiom .str.65 == $sub.ref(0, 206496);

const {:count 31} .str.66: ref;

axiom .str.66 == $sub.ref(0, 207551);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 208583);

const {:count 3} .str.1.218: ref;

axiom .str.1.218 == $sub.ref(0, 209610);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 210648);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 211676);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 212708);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 213740);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const bq2415x_sysfs_show_limit: ref;

axiom bq2415x_sysfs_show_limit == $sub.ref(0, 214772);

procedure bq2415x_sysfs_show_limit($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_sysfs_show_limit($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i34: i32;
  var $i27: i32;
  var $i20: i32;
  var $i13: i32;
  var $i42: i1;
  var $i43: i64;
  var $i44: i32;
  var $i45: i64;
  var $i41: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p5 := power_supply_get_drvdata($p4);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i10 := strcmp($p9, .str.35);
    call {:si_unique_call 4} {:cexpr "tmp___5"} boogie_si_record_i32($i10);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i17 := strcmp($p16, .str.36);
    call {:si_unique_call 8} {:cexpr "tmp___4"} boogie_si_record_i32($i17);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i24 := strcmp($p23, .str.37);
    call {:si_unique_call 12} {:cexpr "tmp___3"} boogie_si_record_i32($i24);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i31 := strcmp($p30, .str.38);
    call {:si_unique_call 16} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i38 := strcmp($p37, .str.39);
    call {:si_unique_call 20} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i41 := $sub.i64(0, 22);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i40 := bq2415x_get_termination_current($p6);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 22} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i34 := $i40;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i27 := $i34;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i13, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i44 := sprintf.ref.ref.i32($p2, .str.31, $i13);
    call {:si_unique_call 24} {:cexpr "tmp___6"} boogie_si_record_i32($i44);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i41 := $i45;
    goto $bb16;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i13);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i41 := $i43;
    goto $bb16;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i33 := bq2415x_get_charge_current($p6);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 18} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb12;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i26 := bq2415x_get_battery_regulation_voltage($p6);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 14} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb9;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i19 := bq2415x_get_weak_battery_voltage($p6);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 10} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb6;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i12 := bq2415x_get_current_limit($p6);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 6} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const bq2415x_sysfs_set_limit: ref;

axiom bq2415x_sysfs_set_limit == $sub.ref(0, 215804);

procedure bq2415x_sysfs_set_limit($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $CurrAddr, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, assertsPassed;



implementation bq2415x_sysfs_set_limit($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i32;
  var $i19: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $i27: i32;
  var $i28: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i64;
  var $i36: i32;
  var $i37: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $i45: i32;
  var $i46: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i64;
  var $i54: i32;
  var $i55: i32;
  var $i47: i32;
  var $i38: i32;
  var $i29: i32;
  var $i20: i32;
  var $i56: i1;
  var $i57: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 26} {:cexpr "bq2415x_sysfs_set_limit:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p7 := power_supply_get_drvdata($p6);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i9 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 30} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i15 := strcmp($p14, .str.35);
    call {:si_unique_call 32} {:cexpr "tmp___6"} boogie_si_record_i32($i15);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i24 := strcmp($p23, .str.36);
    call {:si_unique_call 36} {:cexpr "tmp___5"} boogie_si_record_i32($i24);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i33 := strcmp($p32, .str.37);
    call {:si_unique_call 40} {:cexpr "tmp___4"} boogie_si_record_i32($i33);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i42 := strcmp($p41, .str.38);
    call {:si_unique_call 44} {:cexpr "tmp___3"} boogie_si_record_i32($i42);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i51 := strcmp($p50, .str.39);
    call {:si_unique_call 48} {:cexpr "tmp___2"} boogie_si_record_i32($i51);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i52 == 1);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb17:
    assume $i52 == 1;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.1, $p4);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i64.i32($i53);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i55 := bq2415x_set_termination_current($p8, $i54);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 50} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i47 := $i55;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i38 := $i47;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i29 := $i38;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i20 := $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i20, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i11 := $i3;
    goto $bb3;

  $bb20:
    assume $i56 == 1;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i20);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i11 := $i57;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.1, $p4);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i46 := bq2415x_set_charge_current($p8, $i45);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 46} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb16;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p4);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i37 := bq2415x_set_battery_regulation_voltage($p8, $i36);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 42} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb13;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.1, $p4);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i28 := bq2415x_set_weak_battery_voltage($p8, $i27);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 38} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb10;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.1, $p4);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i19 := bq2415x_set_current_limit($p8, $i18);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 34} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 216836);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const power_supply_get_drvdata: ref;

axiom power_supply_get_drvdata == $sub.ref(0, 217868);

procedure power_supply_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation power_supply_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p1 := external_alloc();
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const kstrtol: ref;

axiom kstrtol == $sub.ref(0, 218900);

procedure kstrtol($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtol($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "kstrtol:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i3 := kstrtoll($p0, $i1, $p2);
    call {:si_unique_call 54} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 219932);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const bq2415x_set_current_limit: ref;

axiom bq2415x_set_current_limit == $sub.ref(0, 220964);

procedure bq2415x_set_current_limit($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_set_current_limit($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i4: i1;
  var $i6: i1;
  var $i7: i32;
  var $i5: i32;
  var $i3: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} {:cexpr "bq2415x_set_current_limit:arg:mA"} boogie_si_record_i32($i1);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 100);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i1, 500);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i1, 800);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 3;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i3);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i11 := bq2415x_i2c_write_mask($p0, 1, $i10, $sub.i8(0, 64), 6);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 57} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb9;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const bq2415x_set_weak_battery_voltage: ref;

axiom bq2415x_set_weak_battery_voltage == $sub.ref(0, 221996);

procedure bq2415x_set_weak_battery_voltage($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_set_weak_battery_voltage($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i4: i1;
  var $i6: i1;
  var $i7: i32;
  var $i5: i32;
  var $i3: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} {:cexpr "bq2415x_set_weak_battery_voltage:arg:mV"} boogie_si_record_i32($i1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 3450);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i1, 3550);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i1, 3650);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 3;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i3);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i11 := bq2415x_i2c_write_mask($p0, 1, $i10, 48, 4);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 60} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb9;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const bq2415x_set_battery_regulation_voltage: ref;

axiom bq2415x_set_battery_regulation_voltage == $sub.ref(0, 223028);

procedure bq2415x_set_battery_regulation_voltage($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_set_battery_regulation_voltage($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} {:cexpr "bq2415x_set_battery_regulation_voltage:arg:mV"} boogie_si_record_i32($i1);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i2 := $sdiv.i32($i1, 10);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 350));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i4 := $sdiv.i32($i3, 2);
    call {:si_unique_call 62} {:cexpr "val"} boogie_si_record_i32($i4);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i4, 47);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i6);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i12 := bq2415x_i2c_write_mask($p0, 2, $i11, $sub.i8(0, 4), 2);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 64} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const bq2415x_set_charge_current: ref;

axiom bq2415x_set_charge_current == $sub.ref(0, 224060);

procedure bq2415x_set_charge_current($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_set_charge_current($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $i16: i32;
  var $i14: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} {:cexpr "bq2415x_set_charge_current:arg:mA"} boogie_si_record_i32($i1);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i4, 0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, $i1);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $sub.i32(0, 37400));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i12 := $sdiv.i32($i11, 6800);
    call {:si_unique_call 66} {:cexpr "val"} boogie_si_record_i32($i12);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i12, 7);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i12;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i14);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i20 := bq2415x_i2c_write_mask($p0, 4, $i19, $sub.i8(0, 16), 4);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 68} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i6 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i16 := 7;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const bq2415x_set_termination_current: ref;

axiom bq2415x_set_termination_current == $sub.ref(0, 225092);

procedure bq2415x_set_termination_current($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_set_termination_current($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $i16: i32;
  var $i14: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} {:cexpr "bq2415x_set_termination_current:arg:mA"} boogie_si_record_i32($i1);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i4, 0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, $i1);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $sub.i32(0, 3400));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i12 := $sdiv.i32($i11, 3400);
    call {:si_unique_call 70} {:cexpr "val"} boogie_si_record_i32($i12);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i12, 7);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i12;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i14);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i20 := bq2415x_i2c_write_mask($p0, 4, $i19, $sub.i8(0, 121), 0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 72} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i6 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i16 := 7;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const bq2415x_i2c_write_mask: ref;

axiom bq2415x_i2c_write_mask == $sub.ref(0, 226124);

procedure bq2415x_i2c_write_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_i2c_write_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} {:cexpr "bq2415x_i2c_write_mask:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 74} {:cexpr "bq2415x_i2c_write_mask:arg:val"} boogie_si_record_i8($i2);
    call {:si_unique_call 75} {:cexpr "bq2415x_i2c_write_mask:arg:mask"} boogie_si_record_i8($i3);
    call {:si_unique_call 76} {:cexpr "bq2415x_i2c_write_mask:arg:shift"} boogie_si_record_i8($i4);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 8);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i10 := bq2415x_i2c_read($p0, $i9);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 78} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i3);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i13 := $xor.i32($i12, $sub.i32(0, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $i10);
    call {:si_unique_call 79} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i2);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i4);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i15, $i16);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, $i14);
    call {:si_unique_call 80} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i1);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i18);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i24 := bq2415x_i2c_write($p0, $i20, $i23);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 82} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i7 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const bq2415x_i2c_read: ref;

axiom bq2415x_i2c_read == $sub.ref(0, 227156);

procedure bq2415x_i2c_read($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_i2c_read($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i16;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i40: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p2, $i1);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(24, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(2, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.3 := $store.i16($M.3, $p17, $i15);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p19, 0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p21, $p2);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p23, 1);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(2, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $M.3 := $store.i16($M.3, $p27, $i25);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p29, 1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p31, $p4);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p33, 1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} ldv_mutex_lock_17(bq2415x_i2c_mutex);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(24, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p3);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i37 := i2c_transfer($p35, $p36, 2);
    call {:si_unique_call 88} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} ldv_mutex_unlock_18(bq2415x_i2c_mutex);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.2, $p4);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i13 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i38 == 1;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i13 := $i37;
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb3;
}



const bq2415x_i2c_write: ref;

axiom bq2415x_i2c_write == $sub.ref(0, 228188);

procedure bq2415x_i2c_write($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.7, assertsPassed;



implementation bq2415x_i2c_write($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $p14: ref;
  var $p16: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i28: i1;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 92} {:cexpr "bq2415x_i2c_write:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 93} {:cexpr "bq2415x_i2c_write:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p9, $i1);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p10, $i2);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(2, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $M.3 := $store.i16($M.3, $p14, $i12);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p16, 0);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, $p4);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p21, 2);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} ldv_mutex_lock_19(bq2415x_i2c_mutex);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(24, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i25 := i2c_transfer($p23, $p24, 1);
    call {:si_unique_call 96} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} ldv_mutex_unlock_20(bq2415x_i2c_mutex);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i25, 1);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb3;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_19: ref;

axiom ldv_mutex_lock_19 == $sub.ref(0, 229220);

procedure ldv_mutex_lock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_mutex_lock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ldv_mutex_lock_bq2415x_i2c_mutex($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} mutex_lock($p0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const i2c_transfer: ref;

axiom i2c_transfer == $sub.ref(0, 230252);

procedure i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} {:cexpr "i2c_transfer:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 101} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_unlock_20: ref;

axiom ldv_mutex_unlock_20 == $sub.ref(0, 231284);

procedure ldv_mutex_unlock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_mutex_unlock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} ldv_mutex_unlock_bq2415x_i2c_mutex($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} mutex_unlock($p0);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_bq2415x_i2c_mutex: ref;

axiom ldv_mutex_unlock_bq2415x_i2c_mutex == $sub.ref(0, 232316);

procedure ldv_mutex_unlock_bq2415x_i2c_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_mutex_unlock_bq2415x_i2c_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i1 := $M.7;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 106} {:cexpr "ldv_mutex_bq2415x_i2c_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} ldv_error();
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 233348);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 234380);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 107} __VERIFIER_error();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_bq2415x_i2c_mutex: ref;

axiom ldv_mutex_lock_bq2415x_i2c_mutex == $sub.ref(0, 235412);

procedure ldv_mutex_lock_bq2415x_i2c_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_mutex_lock_bq2415x_i2c_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i1 := $M.7;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.7 := 2;
    call {:si_unique_call 109} {:cexpr "ldv_mutex_bq2415x_i2c_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} ldv_error();
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 236444);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_17: ref;

axiom ldv_mutex_lock_17 == $sub.ref(0, 237476);

procedure ldv_mutex_lock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_mutex_lock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} ldv_mutex_lock_bq2415x_i2c_mutex($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} mutex_lock($p0);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_18: ref;

axiom ldv_mutex_unlock_18 == $sub.ref(0, 238508);

procedure ldv_mutex_unlock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_mutex_unlock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} ldv_mutex_unlock_bq2415x_i2c_mutex($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} mutex_unlock($p0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const kstrtoll: ref;

axiom kstrtoll == $sub.ref(0, 239540);

procedure kstrtoll($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoll($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 114} {:cexpr "kstrtoll:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 1} true;
    call {:si_unique_call 115} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 116} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 240572);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 117} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 118} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const bq2415x_get_current_limit: ref;

axiom bq2415x_get_current_limit == $sub.ref(0, 241604);

procedure bq2415x_get_current_limit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_get_current_limit($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i1 := bq2415x_i2c_read_mask($p0, 1, $sub.i8(0, 64), 6);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 120} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 1);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 2);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i6 == 1);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 3);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i3 := 1800;
    goto $bb3;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i3 := 800;
    goto $bb3;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i3 := 500;
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i3 := 100;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const bq2415x_get_weak_battery_voltage: ref;

axiom bq2415x_get_weak_battery_voltage == $sub.ref(0, 242636);

procedure bq2415x_get_weak_battery_voltage($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_get_weak_battery_voltage($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i1 := bq2415x_i2c_read_mask($p0, 1, 48, 4);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 122} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 100);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 3400);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const bq2415x_get_battery_regulation_voltage: ref;

axiom bq2415x_get_battery_regulation_voltage == $sub.ref(0, 243668);

procedure bq2415x_get_battery_regulation_voltage($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_get_battery_regulation_voltage($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i1 := bq2415x_i2c_read_mask($p0, 2, $sub.i8(0, 4), 2);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 124} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 20);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 3500);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const bq2415x_get_charge_current: ref;

axiom bq2415x_get_charge_current == $sub.ref(0, 244700);

procedure bq2415x_get_charge_current($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_get_charge_current($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i6 := bq2415x_i2c_read_mask($p0, 4, 112, 4);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 126} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i6, 6800);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 37400);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i13 := $sdiv.i32($i9, $i12);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const bq2415x_get_termination_current: ref;

axiom bq2415x_get_termination_current == $sub.ref(0, 245732);

procedure bq2415x_get_termination_current($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_get_termination_current($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i6 := bq2415x_i2c_read_mask($p0, 4, 7, 0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 128} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i6, 1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i8, 3400);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i13 := $sdiv.i32($i9, $i12);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 246764);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const bq2415x_i2c_read_mask: ref;

axiom bq2415x_i2c_read_mask == $sub.ref(0, 247796);

procedure bq2415x_i2c_read_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_i2c_read_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} {:cexpr "bq2415x_i2c_read_mask:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 130} {:cexpr "bq2415x_i2c_read_mask:arg:mask"} boogie_si_record_i8($i2);
    call {:si_unique_call 131} {:cexpr "bq2415x_i2c_read_mask:arg:shift"} boogie_si_record_i8($i3);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 8);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i9 := bq2415x_i2c_read($p0, $i8);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 133} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i2);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, $i9);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i3);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i14 := $ashr.i32($i12, $i13);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const bq2415x_sysfs_show_enable: ref;

axiom bq2415x_sysfs_show_enable == $sub.ref(0, 248828);

procedure bq2415x_sysfs_show_enable($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_sysfs_show_enable($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i24: i32;
  var $i18: i32;
  var $i12: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i64;
  var $i34: i32;
  var $i35: i64;
  var $i30: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p5 := power_supply_get_drvdata($p4);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $i10 := strcmp($p9, .str.27);
    call {:si_unique_call 137} {:cexpr "tmp___4"} boogie_si_record_i32($i10);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i16 := strcmp($p15, .str.28);
    call {:si_unique_call 139} {:cexpr "tmp___3"} boogie_si_record_i32($i16);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i22 := strcmp($p21, .str.29);
    call {:si_unique_call 143} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i28 := strcmp($p27, .str.30);
    call {:si_unique_call 145} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := 2;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i18 := $i24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i12 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i31 := bq2415x_exec_command($p6, $i12);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 141} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i34 := sprintf.ref.ref.i32($p2, .str.31, $i31);
    call {:si_unique_call 147} {:cexpr "tmp___5"} boogie_si_record_i32($i34);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i30 := $i35;
    goto $bb13;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i31);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i30 := $i33;
    goto $bb13;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i24 := 23;
    goto $bb9;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i18 := 14;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i12 := 8;
    goto $bb3;
}



const bq2415x_sysfs_set_enable: ref;

axiom bq2415x_sysfs_set_enable == $sub.ref(0, 249860);

procedure bq2415x_sysfs_set_enable($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.7, assertsPassed;



implementation bq2415x_sysfs_set_enable($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i38: i32;
  var $i29: i32;
  var $i20: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 149} {:cexpr "bq2415x_sysfs_set_enable:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $p7 := power_supply_get_drvdata($p6);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i9 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 153} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i15 := strcmp($p14, .str.27);
    call {:si_unique_call 155} {:cexpr "tmp___5"} boogie_si_record_i32($i15);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i24 := strcmp($p23, .str.28);
    call {:si_unique_call 158} {:cexpr "tmp___4"} boogie_si_record_i32($i24);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i33 := strcmp($p32, .str.29);
    call {:si_unique_call 163} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i42 := strcmp($p41, .str.30);
    call {:si_unique_call 166} {:cexpr "tmp___2"} boogie_si_record_i32($i42);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.1, $p4);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i46 := (if $i45 == 1 then 3 else 4);
    call {:si_unique_call 167} {:cexpr "command"} boogie_si_record_i32($i46);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $i46;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i29 := $i38;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i20 := $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i47 := bq2415x_exec_command($p8, $i20);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 160} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i11 := $i3;
    goto $bb3;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i47);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i11 := $i49;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p4);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 24 else 25);
    call {:si_unique_call 164} {:cexpr "command"} boogie_si_record_i32($i37);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb13;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.1, $p4);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i28 := (if $i27 == 1 then 15 else 16);
    call {:si_unique_call 161} {:cexpr "command"} boogie_si_record_i32($i28);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.1, $p4);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i19 := (if $i18 == 1 then 9 else 10);
    call {:si_unique_call 156} {:cexpr "command"} boogie_si_record_i32($i19);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;
}



const bq2415x_exec_command: ref;

axiom bq2415x_exec_command == $sub.ref(0, 250892);

procedure bq2415x_exec_command($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_exec_command($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i33: i32;

  $bb0:
    call {:si_unique_call 168} {:cexpr "bq2415x_exec_command:arg:command"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 25);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 27);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 28);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 28);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb12:
    assume $i7 == 1;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i64 := bq2415x_i2c_read_mask($p0, 3, 7, 0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 172} {:cexpr "tmp___26"} boogie_si_record_i32($i64);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i33 := $i64;
    goto $bb63;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i63 := bq2415x_i2c_read_mask($p0, 3, 24, 3);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 170} {:cexpr "tmp___25"} boogie_si_record_i32($i63);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i33 := $i63;
    goto $bb63;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 26);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i62 := bq2415x_i2c_read_mask($p0, 3, $sub.i8(0, 32), 5);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 176} {:cexpr "tmp___24"} boogie_si_record_i32($i62);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i33 := $i62;
    goto $bb63;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i61 := bq2415x_i2c_write_bit($p0, 2, 0, 0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 174} {:cexpr "tmp___23"} boogie_si_record_i32($i61);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i33 := $i61;
    goto $bb63;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 23);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 24);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i60 := bq2415x_i2c_write_bit($p0, 2, 1, 0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 180} {:cexpr "tmp___22"} boogie_si_record_i32($i60);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i33 := $i60;
    goto $bb63;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i59 := bq2415x_i2c_read_bit($p0, 2, 0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 178} {:cexpr "tmp___21"} boogie_si_record_i32($i59);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i33 := $i59;
    goto $bb63;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 22);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i58 := bq2415x_i2c_write_bit($p0, 2, 0, 1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 184} {:cexpr "tmp___20"} boogie_si_record_i32($i58);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i33 := $i58;
    goto $bb63;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i11 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i57 := bq2415x_i2c_write_bit($p0, 2, 1, 1);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 182} {:cexpr "tmp___19"} boogie_si_record_i32($i57);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i33 := $i57;
    goto $bb63;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 19);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i14 == 1);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i56 := bq2415x_i2c_read_bit($p0, 2, 1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 188} {:cexpr "tmp___18"} boogie_si_record_i32($i56);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i33 := $i56;
    goto $bb63;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i55 := bq2415x_i2c_write_bit($p0, 1, 0, 0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 186} {:cexpr "tmp___17"} boogie_si_record_i32($i55);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i33 := $i55;
    goto $bb63;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i15 == 1);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i54 := bq2415x_i2c_write_bit($p0, 1, 1, 0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i54);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i33 := $i54;
    goto $bb63;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i15 == 1;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i53 := bq2415x_i2c_read_bit($p0, 1, 0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 190} {:cexpr "tmp___15"} boogie_si_record_i32($i53);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i33 := $i53;
    goto $bb63;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i17 == 1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i52 := bq2415x_i2c_write_bit($p0, 1, 0, 1);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 198} {:cexpr "tmp___14"} boogie_si_record_i32($i52);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i33 := $i52;
    goto $bb63;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i17 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i51 := bq2415x_i2c_write_bit($p0, 1, 1, 1);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 196} {:cexpr "tmp___13"} boogie_si_record_i32($i51);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i33 := $i51;
    goto $bb63;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i16 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i50 := bq2415x_i2c_read_bit($p0, 1, 1);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 194} {:cexpr "tmp___12"} boogie_si_record_i32($i50);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i33 := $i50;
    goto $bb63;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i1, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i21 == 1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i49 := bq2415x_i2c_write_bit($p0, 1, 1, 2);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 202} {:cexpr "tmp___11"} boogie_si_record_i32($i49);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i33 := $i49;
    goto $bb63;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i21 == 1;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i48 := bq2415x_i2c_write_bit($p0, 1, 0, 2);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 200} {:cexpr "tmp___10"} boogie_si_record_i32($i48);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i33 := $i48;
    goto $bb63;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i22 == 1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i44 := bq2415x_i2c_read_bit($p0, 1, 2);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 206} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i46 := $sle.i32($i44, 0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i33 := $i47;
    goto $bb63;

  $bb64:
    assume $i45 == 1;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i33 := $i44;
    goto $bb63;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i22 == 1;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i43 := bq2415x_i2c_write_bit($p0, 1, 0, 3);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 204} {:cexpr "tmp___9"} boogie_si_record_i32($i43);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i33 := $i43;
    goto $bb63;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i24 == 1);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i42 := bq2415x_i2c_write_bit($p0, 1, 1, 3);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 212} {:cexpr "tmp___8"} boogie_si_record_i32($i42);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i33 := $i42;
    goto $bb63;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i24 == 1;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i41 := bq2415x_i2c_read_bit($p0, 1, 3);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 210} {:cexpr "tmp___7"} boogie_si_record_i32($i41);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i33 := $i41;
    goto $bb63;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i23 == 1;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i40 := bq2415x_i2c_read_mask($p0, 0, 7, 0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 208} {:cexpr "tmp___6"} boogie_si_record_i32($i40);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i33 := $i40;
    goto $bb63;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i27 == 1);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i39 := bq2415x_i2c_read_bit($p0, 0, 3);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 216} {:cexpr "tmp___5"} boogie_si_record_i32($i39);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i33 := $i39;
    goto $bb63;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i27 == 1;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i38 := bq2415x_i2c_read_mask($p0, 0, 48, 4);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 214} {:cexpr "tmp___4"} boogie_si_record_i32($i38);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i33 := $i38;
    goto $bb63;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i28 == 1);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i37 := bq2415x_i2c_write_bit($p0, 0, 0, 6);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 220} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i33 := $i37;
    goto $bb63;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i28 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i36 := bq2415x_i2c_write_bit($p0, 0, 1, 6);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 218} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i33 := $i36;
    goto $bb63;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i30 == 1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i35 := bq2415x_i2c_read_bit($p0, 0, 6);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 224} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i33 := $i35;
    goto $bb63;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i30 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i34 := bq2415x_i2c_read_bit($p0, 0, 7);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 222} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i33 := $i34;
    goto $bb63;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb14;

  $bb61:
    assume $i31 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i32 := bq2415x_i2c_write_bit($p0, 0, 1, 7);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 226} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb63;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const bq2415x_i2c_write_bit: ref;

axiom bq2415x_i2c_write_bit == $sub.ref(0, 251924);

procedure bq2415x_i2c_write_bit($p0: ref, $i1: i8, $i2: i1, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_i2c_write_bit($p0: ref, $i1: i8, $i2: i1, $i3: i8) returns ($r: i32)
{
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} {:cexpr "bq2415x_i2c_write_bit:arg:reg"} boogie_si_record_i8($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 228} {:cexpr "bq2415x_i2c_write_bit:arg:val"} boogie_si_record_i1($i2);
    call {:si_unique_call 229} {:cexpr "bq2415x_i2c_write_bit:arg:bit"} boogie_si_record_i8($i3);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i3);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 8);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i4);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i3);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i15 := $shl.i64(1, $i14);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i8($i15);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i3);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i21 := bq2415x_i2c_write_mask($p0, $i9, $i12, $i18, $i20);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 231} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const bq2415x_i2c_read_bit: ref;

axiom bq2415x_i2c_read_bit == $sub.ref(0, 252956);

procedure bq2415x_i2c_read_bit($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_i2c_read_bit($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i8;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} {:cexpr "bq2415x_i2c_read_bit:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 233} {:cexpr "bq2415x_i2c_read_bit:arg:bit"} boogie_si_record_i8($i2);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, 8);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i2);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i10 := $shl.i64(1, $i9);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i8($i10);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i2);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i16 := bq2415x_i2c_read_mask($p0, $i7, $i13, $i15);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 235} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const bq2415x_sysfs_show_reported_mode: ref;

axiom bq2415x_sysfs_show_reported_mode == $sub.ref(0, 253988);

procedure bq2415x_sysfs_show_reported_mode($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation bq2415x_sysfs_show_reported_mode($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i23: i32;
  var $i24: i64;
  var $i25: i32;
  var $i26: i64;
  var $i27: i32;
  var $i28: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p5 := power_supply_get_drvdata($p4);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 440)), $mul.ref(384, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i12, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i27 := sprintf.ref.ref($p2, .str.103);
    call {:si_unique_call 243} {:cexpr "tmp___5"} boogie_si_record_i32($i27);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i10 := $i28;
    goto $bb3;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i25 := sprintf.ref.ref($p2, .str.102);
    call {:si_unique_call 241} {:cexpr "tmp___4"} boogie_si_record_i32($i25);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i10 := $i26;
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i23 := sprintf.ref.ref($p2, .str.101);
    call {:si_unique_call 239} {:cexpr "tmp___3"} boogie_si_record_i32($i23);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i17 == 1);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i21 := sprintf.ref.ref($p2, .str.100);
    call {:si_unique_call 245} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb3;

  $bb15:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i19 := sprintf.ref.ref($p2, .str.99);
    call {:si_unique_call 247} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i10 := $i20;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 22);
    goto $bb3;
}



const bq2415x_sysfs_show_mode: ref;

axiom bq2415x_sysfs_show_mode == $sub.ref(0, 255020);

procedure bq2415x_sysfs_show_mode($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation bq2415x_sysfs_show_mode($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i27: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $p5 := power_supply_get_drvdata($p4);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 440)), $mul.ref(388, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i16, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i16, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i16, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i27 := $i14;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i46 := $sgt.i32($i45, 0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i27;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p2, $mul.ref($i51, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i53 := sprintf.ref.ref($p52, .str.97);
    call {:si_unique_call 272} {:cexpr "tmp___8"} boogie_si_record_i32($i53);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, $i51);
    call {:si_unique_call 273} {:cexpr "ret"} boogie_si_record_i64($i55);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p2, $mul.ref($i27, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i48 := sprintf.ref.ref($p47, .str.96);
    call {:si_unique_call 269} {:cexpr "tmp___7"} boogie_si_record_i32($i48);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, $i27);
    call {:si_unique_call 270} {:cexpr "ret"} boogie_si_record_i64($i50);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb22;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p2, $mul.ref($i14, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i41 := sprintf.ref.ref($p40, .str.93);
    call {:si_unique_call 260} {:cexpr "tmp___6"} boogie_si_record_i32($i41);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, $i14);
    call {:si_unique_call 261} {:cexpr "ret"} boogie_si_record_i64($i43);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i27 := $i43;
    goto $bb18;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p2, $mul.ref($i14, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i37 := sprintf.ref.ref($p36, .str.92);
    call {:si_unique_call 257} {:cexpr "tmp___5"} boogie_si_record_i32($i37);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, $i14);
    call {:si_unique_call 258} {:cexpr "ret"} boogie_si_record_i64($i39);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i27 := $i39;
    goto $bb18;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p2, $mul.ref($i14, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i33 := sprintf.ref.ref($p32, .str.91);
    call {:si_unique_call 254} {:cexpr "tmp___4"} boogie_si_record_i32($i33);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, $i14);
    call {:si_unique_call 255} {:cexpr "ret"} boogie_si_record_i64($i35);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i27 := $i35;
    goto $bb18;

  $bb5:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i16, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p2, $mul.ref($i14, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i29 := sprintf.ref.ref($p28, .str.90);
    call {:si_unique_call 263} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, $i14);
    call {:si_unique_call 264} {:cexpr "ret"} boogie_si_record_i64($i31);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i27 := $i31;
    goto $bb18;

  $bb14:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i16, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p2, $mul.ref($i14, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i24 := sprintf.ref.ref($p23, .str.89);
    call {:si_unique_call 266} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, $i14);
    call {:si_unique_call 267} {:cexpr "ret"} boogie_si_record_i64($i26);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb18;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref(0, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i11 := sprintf.ref.ref($p10, .str.95);
    call {:si_unique_call 251} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 0);
    call {:si_unique_call 252} {:cexpr "ret"} boogie_si_record_i64($i13);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const bq2415x_sysfs_set_mode: ref;

axiom bq2415x_sysfs_set_mode == $sub.ref(0, 256052);

procedure bq2415x_sysfs_set_mode($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_sysfs_set_mode($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i52: i32;
  var $i45: i32;
  var $i38: i32;
  var $i31: i32;
  var $i24: i32;
  var $i17: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i64;
  var $i13: i64;
  var vslice_dummy_var_10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} {:cexpr "bq2415x_sysfs_set_mode:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p4 := dev_get_drvdata($p0);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $p6 := power_supply_get_drvdata($p5);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i8 := strncmp($p2, .str.88, 4);
    call {:si_unique_call 278} {:cexpr "tmp___7"} boogie_si_record_i32($i8);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i18 := strncmp($p2, .str.89, 3);
    call {:si_unique_call 280} {:cexpr "tmp___6"} boogie_si_record_i32($i18);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i25 := strncmp($p2, .str.90, 4);
    call {:si_unique_call 285} {:cexpr "tmp___5"} boogie_si_record_i32($i25);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i32 := strncmp($p2, .str.91, 4);
    call {:si_unique_call 287} {:cexpr "tmp___4"} boogie_si_record_i32($i32);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i39 := strncmp($p2, .str.92, 9);
    call {:si_unique_call 289} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i46 := strncmp($p2, .str.93, 5);
    call {:si_unique_call 291} {:cexpr "tmp___2"} boogie_si_record_i32($i46);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i47 == 1);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i53 := strncmp($p2, .str.94, 5);
    call {:si_unique_call 293} {:cexpr "tmp___1"} boogie_si_record_i32($i53);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i54 == 1);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb38:
    assume $i54 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} bq2415x_reset_chip($p7);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_10 := bq2415x_set_defaults($p7);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i58 := $sle.i32($i57, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 1);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(384, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    call {:si_unique_call 296} {:cexpr "mode"} boogie_si_record_i32($i61);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i52 := $i61;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i45 := $i52;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i38 := $i45;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i31 := $i38;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i24 := $i31;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i62 := bq2415x_set_mode($p7, $i17);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 283} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 0);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb5;

  $bb44:
    assume $i63 == 1;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i62);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i13 := $i64;
    goto $bb5;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i58 == 1;
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb5;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i47 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, 0);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i52 := 4;
    goto $bb37;

  $bb34:
    assume $i50 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 0);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i45 := 3;
    goto $bb31;

  $bb28:
    assume $i43 == 1;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, 0);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i38 := 2;
    goto $bb25;

  $bb22:
    assume $i36 == 1;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 0);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i31 := 1;
    goto $bb19;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb13;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 1);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 440)), $mul.ref(384, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 281} {:cexpr "mode"} boogie_si_record_i32($i16);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb5;
}



const strncmp: ref;

axiom strncmp == $sub.ref(0, 257084);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const bq2415x_reset_chip: ref;

axiom bq2415x_reset_chip == $sub.ref(0, 258116);

procedure bq2415x_reset_chip($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.7, assertsPassed;



implementation bq2415x_reset_chip($p0: ref)
{
  var $p5: ref;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} vslice_dummy_var_11 := bq2415x_i2c_write($p0, 4, $sub.i8(0, 119));
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} vslice_dummy_var_12 := bq2415x_i2c_write($p0, 2, 10);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} vslice_dummy_var_13 := bq2415x_i2c_write($p0, 1, 48);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} vslice_dummy_var_14 := bq2415x_i2c_write($p0, 0, 64);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(400, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const bq2415x_set_defaults: ref;

axiom bq2415x_set_defaults == $sub.ref(0, 259148);

procedure bq2415x_set_defaults($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_set_defaults($p0: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i14: i32;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vslice_dummy_var_15 := bq2415x_exec_command($p0, 19);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} vslice_dummy_var_16 := bq2415x_exec_command($p0, 13);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_17 := bq2415x_exec_command($p0, 10);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, $sub.i32(0, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, $sub.i32(0, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, $sub.i32(0, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, 0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_19 := bq2415x_exec_command($p0, 12);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, $sub.i32(0, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, $sub.i32(0, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_18 := bq2415x_exec_command($p0, 9);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i58 == 1;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i14 := $i57;
    goto $bb6;

  $bb28:
    assume $i52 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i56 := bq2415x_set_termination_current($p0, $i55);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 313} {:cexpr "ret___3"} boogie_si_record_i32($i56);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb30;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i48 == 1;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i14 := $i47;
    goto $bb6;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i46 := bq2415x_set_charge_current($p0, $i45);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 311} {:cexpr "ret___2"} boogie_si_record_i32($i46);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb24;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i14 := $i33;
    goto $bb6;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i32 := bq2415x_set_battery_regulation_voltage($p0, $i31);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 309} {:cexpr "ret___1"} boogie_si_record_i32($i32);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb16;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i14 := $i23;
    goto $bb6;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i22 := bq2415x_set_weak_battery_voltage($p0, $i21);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 307} {:cexpr "ret___0"} boogie_si_record_i32($i22);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb10;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i11 := bq2415x_set_current_limit($p0, $i10);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 305} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const bq2415x_set_mode: ref;

axiom bq2415x_set_mode == $sub.ref(0, 260180);

procedure bq2415x_set_mode($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_set_mode($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i10: i1;
  var $i11: i32;
  var $i8: i32;
  var $i9: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i24;
  var $i91: i24;
  var $i92: i24;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i24;
  var $i110: i24;
  var $i111: i24;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i64;
  var $i116: i64;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i45: i32;
  var $i122: i1;
  var $i123: i1;
  var $i124: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i125: i32;
  var $i129: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p154: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 321} {:cexpr "bq2415x_set_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 4);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i1, 0);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 0);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i8, 0);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i14;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i45 := $i17;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i45, 0);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i9, 0);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i123 == 1);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i8, 0);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i128 := $i45;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i125 := $i128;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i125, 0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, $sub.i32(0, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i138 := 0;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i139 := $slt.i32($i138, 0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, $sub.i32(0, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i148 := 0;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i148, 0);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(388, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, $i1);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(40, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p152, $mul.ref(0, 1944)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} sysfs_notify($p154, $0.ref, .str.20);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb69:
    assume $i149 == 1;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i19 := $i148;
    goto $bb15;

  $bb66:
    assume $i143 == 1;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i147 := bq2415x_set_battery_regulation_voltage($p0, $i146);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    call {:si_unique_call 358} {:cexpr "ret___1"} boogie_si_record_i32($i147);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i148 := $i147;
    goto $bb68;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i139 == 1;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i19 := $i138;
    goto $bb15;

  $bb60:
    assume $i133 == 1;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i137 := bq2415x_set_weak_battery_voltage($p0, $i136);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 356} {:cexpr "ret___0"} boogie_si_record_i32($i137);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i138 := $i137;
    goto $bb62;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i129 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i19 := $i125;
    goto $bb15;

  $bb54:
    assume $i126 == 1;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i127 := bq2415x_exec_command($p0, 18);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 354} {:cexpr "ret"} boogie_si_record_i32($i127);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i128 := $i127;
    goto $bb56;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i123 == 1;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i124 := bq2415x_exec_command($p0, 12);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 352} {:cexpr "ret"} boogie_si_record_i32($i124);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i125 := $i124;
    goto $bb53;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i122 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i19 := $i45;
    goto $bb15;

  $bb24:
    assume $i23 == 1;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p103, .str.12);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p104, .str.13);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p105, .str.14);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p106, .str.19);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i109 := $load.i24($M.12, $p108);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i110 := $and.i24($i109, $sub.i24(0, 262144));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i111 := $or.i24($i110, 769);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p108, $i111);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p112, 1);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.13, $p113);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i64($i114);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i116 := $and.i64($i115, 1);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i117 := ldv__builtin_expect($i116, 0);
    call {:si_unique_call 331} {:cexpr "tmp___3"} boogie_si_record_i64($i117);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i121 := bq2415x_set_current_limit($p0, 100);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 350} {:cexpr "ret"} boogie_si_record_i32($i121);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i45 := $i121;
    goto $bb34;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i118 == 1;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} __dynamic_dev_dbg.ref.ref.ref($p6, $p120, .str.19);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb22:
    assume $i22 == 1;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p84, .str.12);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p85, .str.13);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p86, .str.14);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p87, .str.18);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i90 := $load.i24($M.12, $p89);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i91 := $and.i24($i90, $sub.i24(0, 262144));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i92 := $or.i24($i91, 765);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p89, $i92);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p93, 1);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.13, $p94);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i64($i95);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i97 := $and.i64($i96, 1);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i98 := ldv__builtin_expect($i97, 0);
    call {:si_unique_call 329} {:cexpr "tmp___2"} boogie_si_record_i64($i98);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i102 := bq2415x_set_current_limit($p0, 1800);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    call {:si_unique_call 347} {:cexpr "ret"} boogie_si_record_i32($i102);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i45 := $i102;
    goto $bb34;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i99 == 1;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} __dynamic_dev_dbg.ref.ref.ref($p5, $p101, .str.18);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb20:
    assume $i21 == 1;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p65, .str.12);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p66, .str.13);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p67, .str.14);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p68, .str.17);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.12, $p70);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 761);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p70, $i73);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p74, 1);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.13, $p75);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 327} {:cexpr "tmp___1"} boogie_si_record_i64($i79);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i83 := bq2415x_set_current_limit($p0, 500);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 344} {:cexpr "ret"} boogie_si_record_i32($i83);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i45 := $i83;
    goto $bb34;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i80 == 1;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} __dynamic_dev_dbg.ref.ref.ref($p4, $p82, .str.17);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb18:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i24 == 1);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p46, .str.12);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p47, .str.13);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p48, .str.14);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p49, .str.16);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.12, $p51);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i53 := $and.i24($i52, $sub.i24(0, 262144));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i54 := $or.i24($i53, 757);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p51, $i54);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p55, 1);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.13, $p56);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 1);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 333} {:cexpr "tmp___0"} boogie_si_record_i64($i60);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i64 := bq2415x_set_current_limit($p0, 100);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 341} {:cexpr "ret"} boogie_si_record_i32($i64);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i45 := $i64;
    goto $bb34;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i61 == 1;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} __dynamic_dev_dbg.ref.ref.ref($p3, $p63, .str.16);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb27:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb26;

  $bb29:
    assume $i25 == 1;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p26, .str.12);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p27, .str.13);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p28, .str.14);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p29, .str.15);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.12, $p31);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 753);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p31, $i34);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p35, 1);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.13, $p36);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 335} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i44 := bq2415x_set_current_limit($p0, 100);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    call {:si_unique_call 338} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb34;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i41 == 1;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} __dynamic_dev_dbg.ref.ref.ref($p2, $p43, .str.15);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb15;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i16 := bq2415x_exec_command($p0, 19);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    call {:si_unique_call 325} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb12;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i13 := bq2415x_exec_command($p0, 13);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 323} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb9;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i8, $i9 := 1, 0;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 261212);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 361} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 262244);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_notify: ref;

axiom sysfs_notify == $sub.ref(0, 263276);

procedure sysfs_notify($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation sysfs_notify($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    return;
}



const bq2415x_sysfs_show_timer: ref;

axiom bq2415x_sysfs_show_timer == $sub.ref(0, 264308);

procedure bq2415x_sysfs_show_timer($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation bq2415x_sysfs_show_timer($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p5 := power_supply_get_drvdata($p4);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 440)), $mul.ref(400, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 440)), $mul.ref(424, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i21 := sprintf.ref.ref($p2, .str.99);
    call {:si_unique_call 369} {:cexpr "tmp___3"} boogie_si_record_i32($i21);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i15 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i19 := sprintf.ref.ref($p2, .str.98);
    call {:si_unique_call 367} {:cexpr "tmp___2"} boogie_si_record_i32($i19);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i15 := $i20;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 440)), $mul.ref(400, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i13 := sprintf.ref.ref.ref($p2, .str.24, $p12);
    call {:si_unique_call 365} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const bq2415x_sysfs_set_timer: ref;

axiom bq2415x_sysfs_set_timer == $sub.ref(0, 265340);

procedure bq2415x_sysfs_set_timer($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.7, $CurrAddr, assertsPassed, $M.14, $M.15, $M.17, $M.19, $M.21, $M.16, $M.18, $M.20, $M.22;



implementation bq2415x_sysfs_set_timer($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i13: i32;
  var $i10: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} {:cexpr "bq2415x_sysfs_set_timer:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $p4 := dev_get_drvdata($p0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p6 := power_supply_get_drvdata($p5);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i8 := strncmp($p2, .str.88, 4);
    call {:si_unique_call 374} {:cexpr "tmp___2"} boogie_si_record_i32($i8);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i11 := strncmp($p2, .str.89, 3);
    call {:si_unique_call 377} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i14 := bq2415x_exec_command($p7, 0);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 380} {:cexpr "ret"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $i3;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i10);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb9;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} bq2415x_set_autotimer($p7, 0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} bq2415x_set_autotimer($p7, 1);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const bq2415x_set_autotimer: ref;

axiom bq2415x_set_autotimer == $sub.ref(0, 266372);

procedure bq2415x_set_autotimer($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.14, $CurrAddr, assertsPassed, $M.15, $M.17, $M.19, $M.21, $M.16, $M.18, $M.20, $M.22;



implementation bq2415x_set_autotimer($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_20: i1;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} {:cexpr "bq2415x_set_autotimer:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} ldv_mutex_lock_21(bq2415x_timer_mutex);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(424, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i1);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(424, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i1);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(128, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_22 := ldv_cancel_delayed_work_sync_23($p11);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} ldv_mutex_unlock_24(bq2415x_timer_mutex);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(128, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_20 := schedule_delayed_work($p7, 2500);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_21 := bq2415x_exec_command($p0, 0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(400, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} ldv_mutex_unlock_22(bq2415x_timer_mutex);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_21: ref;

axiom ldv_mutex_lock_21 == $sub.ref(0, 267404);

procedure ldv_mutex_lock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_lock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} ldv_mutex_lock_bq2415x_timer_mutex($p0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} mutex_lock($p0);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_22: ref;

axiom ldv_mutex_unlock_22 == $sub.ref(0, 268436);

procedure ldv_mutex_unlock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_unlock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} ldv_mutex_unlock_bq2415x_timer_mutex($p0);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} mutex_unlock($p0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 269468);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.16, $M.15, $M.18, $M.17, $M.20, $M.19, $M.22, $M.21;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 394} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_cancel_delayed_work_sync_23: ref;

axiom ldv_cancel_delayed_work_sync_23 == $sub.ref(0, 270500);

procedure ldv_cancel_delayed_work_sync_23($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.15, $M.17, $M.19, $M.21;



implementation ldv_cancel_delayed_work_sync_23($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 396} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 397} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} disable_work_1($p5);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mutex_unlock_24: ref;

axiom ldv_mutex_unlock_24 == $sub.ref(0, 271532);

procedure ldv_mutex_unlock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_unlock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} ldv_mutex_unlock_bq2415x_timer_mutex($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} mutex_unlock($p0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_bq2415x_timer_mutex: ref;

axiom ldv_mutex_unlock_bq2415x_timer_mutex == $sub.ref(0, 272564);

procedure ldv_mutex_unlock_bq2415x_timer_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_unlock_bq2415x_timer_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i1 := $M.14;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 402} {:cexpr "ldv_mutex_bq2415x_timer_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} ldv_error();
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 273596);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 403} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 404} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 274628);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.15, $M.17, $M.19, $M.21;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i1 := $M.15;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i3 := $M.15;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.17;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i11 := $M.17;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.19;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i19 := $M.19;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.21;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i27 := $M.21;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.22;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 408} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.20;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 407} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.18;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 406} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.16;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 405} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 275660);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.16, $M.15, $M.18, $M.17, $M.20, $M.19, $M.22, $M.21;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i3 := ldv_queue_delayed_work_on_6(8192, $p0, $p1, $i2);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 411} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_6: ref;

axiom ldv_queue_delayed_work_on_6 == $sub.ref(0, 276692);

procedure ldv_queue_delayed_work_on_6($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.16, $M.15, $M.18, $M.17, $M.20, $M.19, $M.22, $M.21;



implementation ldv_queue_delayed_work_on_6($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} {:cexpr "ldv_queue_delayed_work_on_6:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 413} {:cexpr "ldv_queue_delayed_work_on_6:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 415} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 416} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} activate_work_1($p8, 2);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 277724);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 418} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 419} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 420} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 421} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 278756);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.16, $M.15, $M.18, $M.17, $M.20, $M.19, $M.22, $M.21;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i2 := $M.15;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.17;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.19;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.21;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $M.22 := $p0;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.21 := $i1;
    call {:si_unique_call 426} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $M.20 := $p0;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $M.19 := $i1;
    call {:si_unique_call 425} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.18 := $p0;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $M.17 := $i1;
    call {:si_unique_call 424} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.15 := $i1;
    call {:si_unique_call 423} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_bq2415x_timer_mutex: ref;

axiom ldv_mutex_lock_bq2415x_timer_mutex == $sub.ref(0, 279788);

procedure ldv_mutex_lock_bq2415x_timer_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_lock_bq2415x_timer_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i1 := $M.14;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 428} {:cexpr "ldv_mutex_bq2415x_timer_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} ldv_error();
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const bq2415x_sysfs_show_registers: ref;

axiom bq2415x_sysfs_show_registers == $sub.ref(0, 280820);

procedure bq2415x_sysfs_show_registers($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_sysfs_show_registers($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $p5 := power_supply_get_drvdata($p4);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(0, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i8 := bq2415x_sysfs_print_reg($p6, 0, $p7);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 432} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 0);
    call {:si_unique_call 433} {:cexpr "ret"} boogie_si_record_i64($i9);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref($i9, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i11 := bq2415x_sysfs_print_reg($p6, 1, $p10);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    call {:si_unique_call 435} {:cexpr "tmp___2"} boogie_si_record_i64($i11);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, $i9);
    call {:si_unique_call 436} {:cexpr "ret"} boogie_si_record_i64($i12);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref($i12, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i14 := bq2415x_sysfs_print_reg($p6, 2, $p13);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    call {:si_unique_call 438} {:cexpr "tmp___3"} boogie_si_record_i64($i14);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, $i12);
    call {:si_unique_call 439} {:cexpr "ret"} boogie_si_record_i64($i15);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref($i15, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i17 := bq2415x_sysfs_print_reg($p6, 3, $p16);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    call {:si_unique_call 441} {:cexpr "tmp___4"} boogie_si_record_i64($i17);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, $i15);
    call {:si_unique_call 442} {:cexpr "ret"} boogie_si_record_i64($i18);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref($i18, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i20 := bq2415x_sysfs_print_reg($p6, 4, $p19);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    call {:si_unique_call 444} {:cexpr "tmp___5"} boogie_si_record_i64($i20);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, $i18);
    call {:si_unique_call 445} {:cexpr "ret"} boogie_si_record_i64($i21);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const bq2415x_sysfs_set_registers: ref;

axiom bq2415x_sysfs_set_registers == $sub.ref(0, 281852);

procedure bq2415x_sysfs_set_registers($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.7, assertsPassed;



implementation bq2415x_sysfs_set_registers($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i64;
  var $i27: i1;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 448} {:cexpr "bq2415x_sysfs_set_registers:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $p6 := dev_get_drvdata($p0);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p8 := power_supply_get_drvdata($p7);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i10 := sscanf.ref.ref.ref.ref($p2, .str.32, $p4, $p5);
    call {:si_unique_call 452} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 2);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.23, $p4);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, 4);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.23, $p5);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 255);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.23, $p4);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.23, $p5);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i25 := bq2415x_i2c_write($p9, $i20, $i24);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 454} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    call {:si_unique_call 455} {:cexpr "ret"} boogie_si_record_i64($i26);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i27 := $slt.i64($i26, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i12 := $i26;
    goto $bb3;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;
}



const sscanf: ref;

axiom sscanf == $sub.ref(0, 282884);

procedure sscanf.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);



const bq2415x_sysfs_print_reg: ref;

axiom bq2415x_sysfs_print_reg == $sub.ref(0, 283916);

procedure bq2415x_sysfs_print_reg($p0: ref, $i1: i8, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_sysfs_print_reg($p0: ref, $i1: i8, $p2: ref) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} {:cexpr "bq2415x_sysfs_print_reg:arg:reg"} boogie_si_record_i8($i1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i5 := bq2415x_i2c_read($p0, $i4);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    call {:si_unique_call 458} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i12 := sprintf.ref.ref.i32.i32($p2, .str.34, $i11, $i5);
    call {:si_unique_call 462} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i8 := sprintf.ref.ref.i32.i32($p2, .str.33, $i7, $i5);
    call {:si_unique_call 460} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const bq2415x_sysfs_show_status: ref;

axiom bq2415x_sysfs_show_status == $sub.ref(0, 284948);

procedure bq2415x_sysfs_show_status($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_sysfs_show_status($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i24: i32;
  var $i18: i32;
  var $i12: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i64;
  var $i34: i32;
  var $i35: i64;
  var $i30: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p5 := power_supply_get_drvdata($p4);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i10 := strcmp($p9, .str.80);
    call {:si_unique_call 466} {:cexpr "tmp___4"} boogie_si_record_i32($i10);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i16 := strcmp($p15, .str.81);
    call {:si_unique_call 468} {:cexpr "tmp___3"} boogie_si_record_i32($i16);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i22 := strcmp($p21, .str.82);
    call {:si_unique_call 472} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i28 := strcmp($p27, .str.83);
    call {:si_unique_call 474} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := 7;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i18 := $i24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i12 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i31 := bq2415x_exec_command($p6, $i12);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 470} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i34 := sprintf.ref.ref.i32($p2, .str.31, $i31);
    call {:si_unique_call 476} {:cexpr "tmp___5"} boogie_si_record_i32($i34);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i30 := $i35;
    goto $bb13;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i31);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i30 := $i33;
    goto $bb13;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i24 := 6;
    goto $bb9;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i18 := 5;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;
}



const bq2415x_probe: ref;

axiom bq2415x_probe == $sub.ref(0, 285980);

procedure bq2415x_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.24, $M.25, $M.26, $M.27, $M.28, $M.7, $CurrAddr, assertsPassed, $M.15, $M.17, $M.19, $M.21, $M.14, $M.16, $M.18, $M.20, $M.22;



implementation bq2415x_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p33: ref;
  var $p34: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i1;
  var $i72: i8;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $i102: i64;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i64;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $p139: ref;
  var $p140: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $p184: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i64;
  var $i189: i1;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p202: ref;
  var $i203: i32;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p212: ref;
  var $p213: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p221: ref;
  var $p224: ref;
  var $p227: ref;
  var $p229: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i64;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i185: i32;
  var $i180: i32;
  var $i138: i32;
  var $p240: ref;
  var $p241: ref;
  var $i242: i64;
  var $i243: i1;
  var $p244: ref;
  var $p245: ref;
  var $i63: i32;
  var $i57: i32;
  var $i24: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(1240, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(504, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p7);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} ldv_mutex_lock_26(bq2415x_id_mutex);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i26 := idr_alloc(bq2415x_id, $p25, 0, 0, 208);
    call {:si_unique_call 485} {:cexpr "num"} boogie_si_record_i32($i26);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} ldv_mutex_unlock_27(bq2415x_id_mutex);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(1248, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p38 := to_acpi_node($p37);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p39 := acpi_device_handle($p38);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $p52, $p53 := $0.ref, $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p33, $p34 := $p52, $p53;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p33);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p59 := devm_kzalloc($p58, 440, 208);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p7);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i65 == 1);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p11);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p60);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} i2c_set_clientdata($p0, $p95);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(432, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i26);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, $p97);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p1);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i100 == 1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 1424)), $mul.ref(1248, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p109 := to_acpi_node($p108);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p110 := acpi_device_handle($p109);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(416, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p117, $p33);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(388, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, 0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(384, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, 0);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(424, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, 0);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, 0);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p7);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i123 == 1);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 1424)), $mul.ref(1248, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p128 := to_acpi_node($p127);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p129 := acpi_device_handle($p128);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p129);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i131 == 1);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(8, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p11);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 512} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p170, $p171, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} bq2415x_reset_chip($p60);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i172 := bq2415x_power_supply_init($p60);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 525} {:cexpr "ret"} boogie_si_record_i32($i172);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i176 := bq2415x_sysfs_init($p60);
    call {:si_unique_call 528} {:cexpr "ret"} boogie_si_record_i32($i176);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i181 := bq2415x_set_defaults($p60);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 532} {:cexpr "ret"} boogie_si_record_i32($i181);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i181, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p187);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i189 == 1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p208, $sub.i32(0, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} _dev_info.ref.ref($p210, .str.56);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} __init_work($p212, 0);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p213, 137438953408);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p216);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p3);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 543} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p217, $p218, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} lockdep_init_map($p221, .str.57, $p2, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} INIT_LIST_HEAD($p224);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p227, bq2415x_timer_work);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(128, 1)), $mul.ref(80, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} init_timer_key($p229, 2097152, .str.58, $p4);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(128, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p232, delayed_work_timer_fn);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(128, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i234 := $p2i.ref.i64($p233);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(128, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p237, $i234);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} bq2415x_set_autotimer($p60, 1);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} _dev_info.ref.ref($p239, .str.59);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i189 == 1;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p191, bq2415x_notifier_call);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(360, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i193 := power_supply_reg_notifier($p192);
    call {:si_unique_call 536} {:cexpr "ret"} boogie_si_record_i32($i193);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(360, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_23 := bq2415x_notifier_call($p197, 0, $p200);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(384, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_24 := bq2415x_set_mode($p60, $i203);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p205, 1);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} _dev_info.ref.ref($p207, .str.55);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    goto $bb92;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i194 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} dev_err.ref.ref.i32($p196, .str.54, $i193);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i185 := $i193;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} bq2415x_sysfs_exit($p60);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i180 := $i185;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} bq2415x_power_supply_exit($p60);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i138 := $i180;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i242 := $p2i.ref.i64($p241);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i243 := $ne.i64($i242, 0);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i63 := $i138;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} kfree($p33);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i57 := $i63;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} ldv_mutex_lock_28(bq2415x_id_mutex);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} idr_remove(bq2415x_id, $i26);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} ldv_mutex_unlock_29(bq2415x_id_mutex);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i24 := $i57;
    goto $bb8;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i243 == 1;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} power_supply_put($p245);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb82:
    assume $i182 == 1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} dev_err.ref.ref.i32($p184, .str.53, $i181);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i185 := $i181;
    goto $bb84;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i177 == 1;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} dev_err.ref.ref.i32($p179, .str.52, $i176);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i180 := $i176;
    goto $bb80;

  $bb75:
    assume $i173 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} dev_err.ref.ref.i32($p175, .str.51, $i172);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i138 := $i172;
    goto $bb56;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i131 == 1;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i136 := device_property_read_u32($p133, .str.45, $p135);
    call {:si_unique_call 511} {:cexpr "ret"} boogie_si_record_i32($i136);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i143 := device_property_read_u32($p140, .str.46, $p142);
    call {:si_unique_call 514} {:cexpr "ret"} boogie_si_record_i32($i143);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i149 := device_property_read_u32($p146, .str.47, $p148);
    call {:si_unique_call 516} {:cexpr "ret"} boogie_si_record_i32($i149);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i149, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i155 := device_property_read_u32($p152, .str.48, $p154);
    call {:si_unique_call 518} {:cexpr "ret"} boogie_si_record_i32($i155);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i161 := device_property_read_u32($p158, .str.49, $p160);
    call {:si_unique_call 520} {:cexpr "ret"} boogie_si_record_i32($i161);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i167 := device_property_read_u32($p164, .str.50, $p166);
    call {:si_unique_call 522} {:cexpr "ret"} boogie_si_record_i32($i167);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i168 == 1;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i138 := $i167;
    goto $bb56;

  $bb67:
    assume $i162 == 1;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i138 := $i161;
    goto $bb56;

  $bb64:
    assume $i156 == 1;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i138 := $i155;
    goto $bb56;

  $bb61:
    assume $i150 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i138 := $i149;
    goto $bb56;

  $bb58:
    assume $i144 == 1;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i138 := $i143;
    goto $bb56;

  $bb54:
    assume $i137 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i138 := $i136;
    goto $bb56;

  $bb49:
    assume $i123 == 1;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i112 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p34, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i114 := $load.i64($M.0, $p113);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i64.i32($i114);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i115);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i100 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i102);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, $i103);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume $i85 == 1;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb39;

  $bb40:
    assume $i89 == 1;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p92 := power_supply_get_by_name($p91);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $p92);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb28:
    assume $i65 == 1;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p66 := power_supply_get_by_phandle($p7, .str.43);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p66);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i71 := IS_ERR($p70);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i8($i71);
    call {:si_unique_call 500} {:cexpr "tmp___5"} boogie_si_record_i8($i72);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i72);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i73 == 1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i83 == 1;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32(0, 517);
    goto $bb26;

  $bb30:
    assume $i73 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i77 := PTR_ERR($p76);
    call {:si_unique_call 502} {:cexpr "tmp___4"} boogie_si_record_i64($i77);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} _dev_info.ref.ref.i64($p78, .str.44, $i77);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p60, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $0.ref);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i62 == 1;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32(0, 12);
    goto $bb26;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} dev_err.ref.ref($p56, .str.42);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 12);
    goto $bb22;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 120)), $mul.ref(48, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p48 := acpi_match_device($p46, $p47);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p51 := kasprintf.i32.ref.ref.i32(208, .str.41, $p50, $i26);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p52, $p53 := $p51, $p48;
    goto $bb19;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p32 := kasprintf.i32.ref.ref.i32(208, .str.41, $p31, $i26);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p33, $p34 := $p32, $0.ref;
    goto $bb16;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i24 := $i26;
    goto $bb8;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p11);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(1248, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p19 := to_acpi_node($p18);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p20 := acpi_device_handle($p19);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} dev_err.ref.ref($p23, .str.40);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 19);
    goto $bb8;
}



const bq2415x_remove: ref;

axiom bq2415x_remove == $sub.ref(0, 287012);

procedure bq2415x_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $M.19, $M.21, $CurrAddr, $M.7, $M.24, assertsPassed;



implementation bq2415x_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p1 := i2c_get_clientdata($p0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} bq2415x_sysfs_exit($p2);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} bq2415x_power_supply_exit($p2);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} bq2415x_reset_chip($p2);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ldv_mutex_lock_30(bq2415x_id_mutex);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 440)), $mul.ref(432, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} idr_remove(bq2415x_id, $i11);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ldv_mutex_unlock_31(bq2415x_id_mutex);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} _dev_info.ref.ref($p13, .str.86);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 440)), $mul.ref(416, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} kfree($p15);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 440)), $mul.ref(360, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} power_supply_unreg_notifier($p7);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 440)), $mul.ref(352, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} power_supply_put($p9);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2c_get_clientdata: ref;

axiom i2c_get_clientdata == $sub.ref(0, 288044);

procedure i2c_get_clientdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation i2c_get_clientdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const power_supply_unreg_notifier: ref;

axiom power_supply_unreg_notifier == $sub.ref(0, 289076);

procedure power_supply_unreg_notifier($p0: ref);
  free requires assertsPassed;



implementation power_supply_unreg_notifier($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    return;
}



const power_supply_put: ref;

axiom power_supply_put == $sub.ref(0, 290108);

procedure power_supply_put($p0: ref);
  free requires assertsPassed;



implementation power_supply_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    return;
}



const bq2415x_sysfs_exit: ref;

axiom bq2415x_sysfs_exit == $sub.ref(0, 291140);

procedure bq2415x_sysfs_exit($p0: ref);
  free requires assertsPassed;



implementation bq2415x_sysfs_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(40, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1944)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} sysfs_remove_group($p4, bq2415x_sysfs_attr_group);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    return;
}



const bq2415x_power_supply_exit: ref;

axiom bq2415x_power_supply_exit == $sub.ref(0, 292172);

procedure bq2415x_power_supply_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.19, $M.21;



implementation bq2415x_power_supply_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_25: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(424, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(128, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_25 := ldv_cancel_delayed_work_sync_25($p6);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(40, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} power_supply_unregister($p9);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(408, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} kfree($p11);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_30: ref;

axiom ldv_mutex_lock_30 == $sub.ref(0, 293204);

procedure ldv_mutex_lock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ldv_mutex_lock_bq2415x_id_mutex($p0);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} mutex_lock($p0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const idr_remove: ref;

axiom idr_remove == $sub.ref(0, 294236);

procedure idr_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation idr_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 295268);

procedure ldv_mutex_unlock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} ldv_mutex_unlock_bq2415x_id_mutex($p0);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} mutex_unlock($p0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 296300);

procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i64($p0: ref, $p1: ref, p.2: i64);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i64($p0: ref, $p1: ref, p.2: i64)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 297332);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} free_($p0);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 298364);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 572} $free($p0);
    return;
}



const ldv_mutex_unlock_bq2415x_id_mutex: ref;

axiom ldv_mutex_unlock_bq2415x_id_mutex == $sub.ref(0, 299396);

procedure ldv_mutex_unlock_bq2415x_id_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_bq2415x_id_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 574} {:cexpr "ldv_mutex_bq2415x_id_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} ldv_error();
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_bq2415x_id_mutex: ref;

axiom ldv_mutex_lock_bq2415x_id_mutex == $sub.ref(0, 300428);

procedure ldv_mutex_lock_bq2415x_id_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_bq2415x_id_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 576} {:cexpr "ldv_mutex_bq2415x_id_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} ldv_error();
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_391:
    assume !assertsPassed;
    return;
}



const ldv_cancel_delayed_work_sync_25: ref;

axiom ldv_cancel_delayed_work_sync_25 == $sub.ref(0, 301460);

procedure ldv_cancel_delayed_work_sync_25($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.15, $M.17, $M.19, $M.21;



implementation ldv_cancel_delayed_work_sync_25($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 578} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 579} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} disable_work_1($p5);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const power_supply_unregister: ref;

axiom power_supply_unregister == $sub.ref(0, 302492);

procedure power_supply_unregister($p0: ref);
  free requires assertsPassed;



implementation power_supply_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_remove_group: ref;

axiom sysfs_remove_group == $sub.ref(0, 303524);

procedure sysfs_remove_group($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_group($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    return;
}



const to_acpi_node: ref;

axiom to_acpi_node == $sub.ref(0, 304556);

procedure to_acpi_node($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_acpi_node($p0: ref) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i1 := is_acpi_node($p0);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 582} {:cexpr "tmp___1"} boogie_si_record_i8($i2);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 16), 2264));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const acpi_device_handle: ref;

axiom acpi_device_handle == $sub.ref(0, 305588);

procedure acpi_device_handle($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation acpi_device_handle($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2264)), $mul.ref(8, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p5 := $p4;
    goto $bb3;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 306620);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_26: ref;

axiom ldv_mutex_lock_26 == $sub.ref(0, 307652);

procedure ldv_mutex_lock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} ldv_mutex_lock_bq2415x_id_mutex($p0);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} mutex_lock($p0);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const idr_alloc: ref;

axiom idr_alloc == $sub.ref(0, 308684);

procedure idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 585} {:cexpr "idr_alloc:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 586} {:cexpr "idr_alloc:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 587} {:cexpr "idr_alloc:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 1} true;
    call {:si_unique_call 588} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 589} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 309716);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} ldv_mutex_unlock_bq2415x_id_mutex($p0);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} mutex_unlock($p0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const kasprintf: ref;

axiom kasprintf == $sub.ref(0, 310748);

procedure kasprintf.i32.ref.ref.ref.i32($i0: i32, $p1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kasprintf.i32.ref.ref.ref.i32($i0: i32, $p1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} {:cexpr "kasprintf:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p2 := external_alloc();
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



procedure kasprintf.i32.ref.ref.i32($i0: i32, $p1: ref, p.2: ref, p.3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kasprintf.i32.ref.ref.i32($i0: i32, $p1: ref, p.2: ref, p.3: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} {:cexpr "kasprintf:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p2 := external_alloc();
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const acpi_match_device: ref;

axiom acpi_match_device == $sub.ref(0, 311780);

procedure acpi_match_device($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation acpi_match_device($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p2 := external_alloc();
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 312812);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 598} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const power_supply_get_by_phandle: ref;

axiom power_supply_get_by_phandle == $sub.ref(0, 313844);

procedure power_supply_get_by_phandle($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation power_supply_get_by_phandle($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $p2 := external_alloc();
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 314876);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i1 := ldv_is_err($p0);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 315908);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 604} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const power_supply_get_by_name: ref;

axiom power_supply_get_by_name == $sub.ref(0, 316940);

procedure power_supply_get_by_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation power_supply_get_by_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p1 := external_alloc();
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const i2c_set_clientdata: ref;

axiom i2c_set_clientdata == $sub.ref(0, 317972);

procedure i2c_set_clientdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i2c_set_clientdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} dev_set_drvdata($p2, $p1);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    return;
}



const device_property_read_u32: ref;

axiom device_property_read_u32 == $sub.ref(0, 319004);

procedure device_property_read_u32($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_property_read_u32($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i3 := device_property_read_u32_array($p0, $p1, $p2, 1);
    call {:si_unique_call 608} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 320036);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const bq2415x_power_supply_init: ref;

axiom bq2415x_power_supply_init == $sub.ref(0, 321068);

procedure bq2415x_power_supply_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.26, $M.27, $M.28, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.7, assertsPassed;



implementation bq2415x_power_supply_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $i52: i8;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i32;
  var $i42: i32;
  var vslice_dummy_var_26: ref;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p3, $0.ref);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p5, $p0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p6, $0.ref);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $M.28 := $store.i64($M.28, $p7, 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(416, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p9);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 4);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, bq2415x_power_supply_props);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, 2);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, bq2415x_power_supply_get_property);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i20 := bq2415x_detect_chip($p0);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    call {:si_unique_call 612} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i23 := bq2415x_detect_revision($p0);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 614} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_27 := sprintf.ref.ref.i32($p27, .str.64, $i23);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i29 := bq2415x_get_vender_code($p0);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    call {:si_unique_call 618} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i22);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref($i30, 8));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.30, $p31);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p34 := kasprintf.i32.ref.ref.ref.i32(208, .str.65, $p32, $p33, $i29);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(408, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p34);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(408, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(48, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $p46 := power_supply_register($p44, $p45, $p2);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(40, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $p46);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(40, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i51 := IS_ERR($p50);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i8($i51);
    call {:si_unique_call 623} {:cexpr "tmp___2"} boogie_si_record_i8($i52);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(408, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} kfree($p55);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(40, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i59 := PTR_ERR($p58);
    call {:si_unique_call 626} {:cexpr "tmp___1"} boogie_si_record_i64($i59);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i59);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i42 := $i60;
    goto $bb9;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} dev_err.ref.ref($p41, .str.66);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} vslice_dummy_var_26 := strcpy($p25, .str.63);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const bq2415x_sysfs_init: ref;

axiom bq2415x_sysfs_init == $sub.ref(0, 322100);

procedure bq2415x_sysfs_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bq2415x_sysfs_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(40, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1944)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i5 := sysfs_create_group($p4, bq2415x_sysfs_attr_group);
    call {:si_unique_call 628} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const bq2415x_notifier_call: ref;

axiom bq2415x_notifier_call == $sub.ref(0, 323132);

procedure bq2415x_notifier_call($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr, $M.16, $M.15, $M.18, $M.17, $M.20, $M.19, $M.22, $M.21;



implementation bq2415x_notifier_call($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i38: i1;
  var $i40: i1;
  var $i41: i32;
  var $i39: i32;
  var $i37: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var vslice_dummy_var_28: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 631} {:cexpr "bq2415x_notifier_call:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i1, 0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 360), 440)), $mul.ref(352, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p7);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p14, .str.12);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p15, .str.84);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p16, .str.14);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p17, .str.85);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.12, $p19);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 812);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p19, $i22);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p23, 1);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.13, $p24);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 633} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i32 := power_supply_get_property($p7, 16, $p3);
    call {:si_unique_call 636} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p3);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.31, $p34);
    call {:si_unique_call 637} {:cexpr "mA"} boogie_si_record_i32($i35);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i38 := $sle.i32($i35, 499);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i35, 1799);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := 3;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i39 := $i41;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i37 := $i39;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 360), 440)), $mul.ref(384, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, $i37);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 360), 440)), $mul.ref(384, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i37);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 360), 440)), $mul.ref(428, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i48 := $sle.i32($i47, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 360), 440)), $mul.ref(128, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_28 := schedule_delayed_work($p49, 0);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb26:
    assume $i48 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i41 := 2;
    goto $bb22;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb19;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb16;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 360), 440)), $mul.ref(0, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __dynamic_dev_dbg.ref.ref.ref($p4, $p31, .str.85);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const power_supply_reg_notifier: ref;

axiom power_supply_reg_notifier == $sub.ref(0, 324164);

procedure power_supply_reg_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation power_supply_reg_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 1} true;
    call {:si_unique_call 639} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 640} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 325196);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 326228);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 327260);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    return;
}



const bq2415x_timer_work: ref;

axiom bq2415x_timer_work == $sub.ref(0, 328292);

procedure bq2415x_timer_work($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.7, $CurrAddr, assertsPassed, $M.14, $M.15, $M.17, $M.19, $M.21, $M.16, $M.18, $M.20, $M.22;



implementation bq2415x_timer_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 128), 440));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(428, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(424, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i21 := bq2415x_exec_command($p2, 0);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 646} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i23 := bq2415x_exec_command($p2, 17);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 649} {:cexpr "boost"} boogie_si_record_i32($i23);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i25 := bq2415x_exec_command($p2, 7);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 652} {:cexpr "error"} boogie_si_record_i32($i25);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i23, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i25, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i25, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i25, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i25, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(128, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_30 := schedule_delayed_work($p58, 2500);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb52:
    assume $i44 == 1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(0, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} dev_err.ref.ref($p57, .str.11);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb50:
    assume $i43 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(0, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} dev_err.ref.ref($p55, .str.3);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb48:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i25, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i45 == 1);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} bq2415x_timer_error($p2, .str.8);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i45 == 1;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} bq2415x_timer_error($p2, .str.7);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i25, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i25, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i47 == 1);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(0, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} dev_err.ref.ref($p53, .str.10);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb59:
    assume $i47 == 1;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(0, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} dev_err.ref.ref($p51, .str.9);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb57:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i25, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i48 == 1);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} bq2415x_timer_error($p2, .str.5);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i25, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb54;

  $bb63:
    assume $i49 == 1;
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb20:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i25, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i25, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i25, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i25, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb29:
    assume $i31 == 1;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} bq2415x_timer_error($p2, .str.2);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i30 == 1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(0, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} dev_err.ref.ref($p38, .str.3);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb25:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i25, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} bq2415x_timer_error($p2, .str.8);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} bq2415x_timer_error($p2, .str.7);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i25, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i25, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i34 == 1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(0, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} dev_err.ref.ref($p40, .str.4);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i34 == 1;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} bq2415x_timer_error($p2, .str.6);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i25, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i35 == 1);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} bq2415x_timer_error($p2, .str.5);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i25, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb31;

  $bb40:
    assume $i36 == 1;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} bq2415x_timer_error($p2, .str.2);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} bq2415x_timer_error($p2, .str.2);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} bq2415x_timer_error($p2, .str.1);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(384, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(388, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i7, $i9);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(40, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 1944)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} sysfs_notify($p14, $0.ref, .str);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 128), 440)), $mul.ref(384, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_29 := bq2415x_set_mode($p2, $i16);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 329324);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 330356);

procedure delayed_work_timer_fn($i0: i64);



const ldv_mutex_lock_28: ref;

axiom ldv_mutex_lock_28 == $sub.ref(0, 331388);

procedure ldv_mutex_lock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} ldv_mutex_lock_bq2415x_id_mutex($p0);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} mutex_lock($p0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 332420);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} ldv_mutex_unlock_bq2415x_id_mutex($p0);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} mutex_unlock($p0);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;
}



const bq2415x_timer_error: ref;

axiom bq2415x_timer_error == $sub.ref(0, 333452);

procedure bq2415x_timer_error($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.7, $CurrAddr, assertsPassed, $M.14, $M.15, $M.17, $M.19, $M.21, $M.16, $M.18, $M.20, $M.22;



implementation bq2415x_timer_error($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(400, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(40, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1944)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} sysfs_notify($p6, $0.ref, .str.23);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} dev_err.ref.ref.ref($p8, .str.24, $p1);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_31 := bq2415x_set_mode($p0, 0);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} bq2415x_set_autotimer($p0, 0);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(428, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const power_supply_get_property: ref;

axiom power_supply_get_property == $sub.ref(0, 334484);

procedure power_supply_get_property($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation power_supply_get_property($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 678} {:cexpr "power_supply_get_property:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 679} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sysfs_create_group: ref;

axiom sysfs_create_group == $sub.ref(0, 335516);

procedure sysfs_create_group($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_group($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 1} true;
    call {:si_unique_call 681} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 682} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const bq2415x_power_supply_get_property: ref;

axiom bq2415x_power_supply_get_property == $sub.ref(0, 336548);

procedure bq2415x_power_supply_get_property($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const bq2415x_detect_chip: ref;

axiom bq2415x_detect_chip == $sub.ref(0, 337580);

procedure bq2415x_detect_chip($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_detect_chip($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(0, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i5 := bq2415x_exec_command($p0, 27);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    call {:si_unique_call 684} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(2, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 107);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 107);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 7);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i7 := 6;
    goto $bb3;

  $bb34:
    assume $i36 == 1;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i7 := $i38;
    goto $bb3;

  $bb16:
    assume $i15 == 1;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i25 == 1);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 5);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i28 == 1);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 8);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i7 := $i33;
    goto $bb3;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb27;

  $bb14:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb20;

  $bb21:
    assume $i17 == 1;
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 4);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i7 := 3;
    goto $bb3;

  $bb23:
    assume $i20 == 1;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 106);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb11:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb41:
    assume $i40 == 1;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 11);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i7 := 12;
    goto $bb3;

  $bb49:
    assume $i49 == 1;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i7 := $i51;
    goto $bb3;

  $bb39:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb43;

  $bb44:
    assume $i41 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 10);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i7 := 9;
    goto $bb3;

  $bb46:
    assume $i44 == 1;
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 440)), $mul.ref(392, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i7 := $i46;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_466:
    assume !assertsPassed;
    return;
}



const bq2415x_detect_revision: ref;

axiom bq2415x_detect_revision == $sub.ref(0, 338612);

procedure bq2415x_detect_revision($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_detect_revision($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i1 := bq2415x_exec_command($p0, 28);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    call {:si_unique_call 686} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i2 := bq2415x_detect_chip($p0);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    call {:si_unique_call 688} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 0);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 0);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, 3);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i22 == 1);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i1, 1);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb6;

  $bb55:
    assume $i23 == 1;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb6;

  $bb53:
    assume $i22 == 1;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i2, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i13 == 1);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i1, 3);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb6;

  $bb59:
    assume $i24 == 1;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i5 := 3;
    goto $bb6;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i12 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb9:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb33, $bb35;

  $bb35:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb36, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i20 := $sge.i32($i1, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb6;

  $bb47:
    assume $i20 == 1;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i21 := $sle.i32($i1, 3);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb49;

  $bb50:
    assume $i21 == 1;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb6;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb42:
    assume $i18 == 1;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb40:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb21;

  $bb45:
    assume $i19 == 1;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 339644);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const bq2415x_get_vender_code: ref;

axiom bq2415x_get_vender_code == $sub.ref(0, 340676);

procedure bq2415x_get_vender_code($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation bq2415x_get_vender_code($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i1 := bq2415x_exec_command($p0, 26);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    call {:si_unique_call 690} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 1);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i32($i1, 2);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 100);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i8 := $ashr.i32($i1, 1);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, 10);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i7, $i10);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i4, $i11);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i3 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  SeqInstr_475:
    assume !assertsPassed;
    return;
}



const power_supply_register: ref;

axiom power_supply_register == $sub.ref(0, 341708);

procedure power_supply_register($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation power_supply_register($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p3 := external_alloc();
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const device_property_read_u32_array: ref;

axiom device_property_read_u32_array == $sub.ref(0, 342740);

procedure device_property_read_u32_array($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation device_property_read_u32_array($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 692} {:cexpr "device_property_read_u32_array:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 1} true;
    call {:si_unique_call 693} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 694} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 343772);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 344804);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 345836);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 346868);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 696} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p3 := external_alloc();
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const is_acpi_node: ref;

axiom is_acpi_node == $sub.ref(0, 347900);

procedure is_acpi_node($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_acpi_node($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 2);
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 348932);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p1 := calloc(1, $i0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 1} true;
    call {:si_unique_call 700} __VERIFIER_assume($i4);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 349964);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.32;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 702} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.32;
    call {:si_unique_call 703} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.32 := cmdloc_dummy_var_7;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 350996);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_initialize_device_attribute_12: ref;

axiom ldv_initialize_device_attribute_12 == $sub.ref(0, 352028);

procedure ldv_initialize_device_attribute_12();
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_12()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $M.33 := $p0;
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.34 := $p2;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_13: ref;

axiom ldv_initialize_device_attribute_13 == $sub.ref(0, 353060);

procedure ldv_initialize_device_attribute_13();
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_13()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $M.35 := $p0;
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.36 := $p2;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_17: ref;

axiom ldv_initialize_device_attribute_17 == $sub.ref(0, 354092);

procedure ldv_initialize_device_attribute_17();
  free requires assertsPassed;
  modifies $M.37, $M.38, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_17()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $M.37 := $p0;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $M.38 := $p2;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_14: ref;

axiom ldv_initialize_device_attribute_14 == $sub.ref(0, 355124);

procedure ldv_initialize_device_attribute_14();
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_14()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $M.39 := $p0;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $M.40 := $p2;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_16: ref;

axiom ldv_initialize_device_attribute_16 == $sub.ref(0, 356156);

procedure ldv_initialize_device_attribute_16();
  free requires assertsPassed;
  modifies $M.41, $M.42, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_16()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.41 := $p0;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $M.42 := $p2;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_11: ref;

axiom ldv_initialize_device_attribute_11 == $sub.ref(0, 357188);

procedure ldv_initialize_device_attribute_11();
  free requires assertsPassed;
  modifies $M.43, $M.44, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_11()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $M.43 := $p0;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $M.44 := $p2;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_19: ref;

axiom ldv_initialize_device_attribute_19 == $sub.ref(0, 358220);

procedure ldv_initialize_device_attribute_19();
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_19()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $M.45 := $p0;
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.46 := $p2;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_9: ref;

axiom ldv_initialize_device_attribute_9 == $sub.ref(0, 359252);

procedure ldv_initialize_device_attribute_9();
  free requires assertsPassed;
  modifies $M.47, $M.48, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_9()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.47 := $p0;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.48 := $p2;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_15: ref;

axiom ldv_initialize_device_attribute_15 == $sub.ref(0, 360284);

procedure ldv_initialize_device_attribute_15();
  free requires assertsPassed;
  modifies $M.49, $M.50, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_15()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $M.49 := $p0;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $M.50 := $p2;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_i2c_driver_2: ref;

axiom ldv_initialize_i2c_driver_2 == $sub.ref(0, 361316);

procedure ldv_initialize_i2c_driver_2();
  free requires assertsPassed;
  modifies $M.51, $M.0, $CurrAddr;



implementation ldv_initialize_i2c_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $p0 := ldv_init_zalloc(1480);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $M.51 := $p0;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_8: ref;

axiom ldv_initialize_device_attribute_8 == $sub.ref(0, 362348);

procedure ldv_initialize_device_attribute_8();
  free requires assertsPassed;
  modifies $M.52, $M.53, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_8()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $M.52 := $p0;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $M.53 := $p2;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 363380);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.15, $M.17, $M.19, $M.21;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 725} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 726} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.19 := 0;
    call {:si_unique_call 727} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 728} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 364412);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.15, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.17, $M.19, $M.21, $M.7, $CurrAddr, assertsPassed, $M.14, $M.16, $M.18, $M.20, $M.22;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 729} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 730} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 731} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_stop();
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i21 := $M.21;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i23 := $M.21;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.21 := 4;
    call {:si_unique_call 741} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p25 := $M.16;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} bq2415x_timer_work($p25);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 743} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i16 := $M.19;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i18 := $M.19;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.19 := 4;
    call {:si_unique_call 738} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p20 := $M.16;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} bq2415x_timer_work($p20);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 740} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i11 := $M.17;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i13 := $M.17;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.17 := 4;
    call {:si_unique_call 735} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p15 := $M.16;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} bq2415x_timer_work($p15);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 737} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i6 := $M.15;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i8 := $M.15;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.15 := 4;
    call {:si_unique_call 732} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p10 := $M.16;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} bq2415x_timer_work($p10);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 734} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 365444);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_device_attribute_7: ref;

axiom ldv_initialize_device_attribute_7 == $sub.ref(0, 366476);

procedure ldv_initialize_device_attribute_7();
  free requires assertsPassed;
  modifies $M.54, $M.55, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_7()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.54 := $p0;
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.55 := $p2;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_18: ref;

axiom ldv_initialize_device_attribute_18 == $sub.ref(0, 367508);

procedure ldv_initialize_device_attribute_18();
  free requires assertsPassed;
  modifies $M.56, $M.57, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_18()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $M.56 := $p0;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.57 := $p2;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 368540);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.58, $M.59, $M.60, $M.61, $M.15, $M.17, $M.19, $M.21, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.79, $M.80, $M.45, $M.46, $M.52, $M.53, $M.49, $M.50, $M.39, $M.40, $M.33, $M.34, $M.47, $M.48, $M.35, $M.36, $M.41, $M.42, $M.56, $M.57, $M.51, $M.37, $M.38, $M.54, $M.55, $M.43, $M.44, $M.16, $M.18, $M.20, $M.22, $M.85, $M.86, $M.83, $M.82, $M.81, $M.14, $M.24, $M.7, $M.87, $M.88, $M.117, $M.118, $M.30, $M.123, $M.29, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $CurrAddr, $M.25, $M.26, $M.27, $M.28, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i1;
  var $i164: i1;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i1;
  var $i187: i1;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $i192: i64;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i1;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i1;
  var $i218: i32;
  var $i219: i1;
  var $i220: i1;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $i226: i64;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i1;
  var $i237: i1;
  var $i238: i1;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $i243: i64;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $i250: i32;
  var $i251: i1;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $i255: i1;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i1;
  var $i264: i32;
  var $i265: i1;
  var $i266: i32;
  var $i267: i1;
  var $i268: i1;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $i274: i64;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $p279: ref;
  var $i281: i32;
  var $i282: i1;
  var $i283: i32;
  var $i284: i1;
  var $i285: i1;
  var $i286: i1;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $i291: i64;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $p296: ref;
  var $i298: i32;
  var $i299: i1;
  var $i300: i32;
  var $i301: i1;
  var $i302: i1;
  var $i303: i1;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $p307: ref;
  var $i308: i64;
  var $i310: i32;
  var $i311: i1;
  var $p312: ref;
  var $p313: ref;
  var $i315: i32;
  var $i316: i1;
  var $i317: i32;
  var $i318: i1;
  var $i319: i1;
  var $i320: i1;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $p324: ref;
  var $i325: i64;
  var $i327: i32;
  var $i328: i1;
  var $p329: ref;
  var $p330: ref;
  var $i332: i32;
  var $i333: i1;
  var $i334: i32;
  var $i335: i1;
  var $i336: i1;
  var $i337: i1;
  var $i338: i32;
  var $i339: i1;
  var $p340: ref;
  var $p341: ref;
  var $i342: i64;
  var $i344: i32;
  var $i345: i1;
  var $p346: ref;
  var $p347: ref;
  var $i349: i32;
  var $i350: i1;
  var $i351: i32;
  var $i352: i1;
  var $i353: i32;
  var $i354: i1;
  var $i356: i32;
  var $i357: i1;
  var $i358: i32;
  var $i359: i1;
  var $i360: i1;
  var $i361: i1;
  var $i362: i32;
  var $i363: i1;
  var $p364: ref;
  var $p365: ref;
  var $i366: i64;
  var $i368: i32;
  var $i369: i1;
  var $p370: ref;
  var $p371: ref;
  var $i373: i32;
  var $i374: i1;
  var $i375: i32;
  var $i376: i1;
  var $i377: i32;
  var $i378: i1;
  var $i380: i32;
  var $i381: i1;
  var $i382: i32;
  var $i383: i1;
  var $i384: i32;
  var $i385: i1;
  var vslice_dummy_var_32: ref;
  var vslice_dummy_var_33: ref;
  var vslice_dummy_var_34: ref;
  var vslice_dummy_var_35: ref;
  var vslice_dummy_var_36: ref;
  var vslice_dummy_var_37: ref;
  var vslice_dummy_var_38: ref;
  var vslice_dummy_var_39: ref;
  var vslice_dummy_var_40: ref;
  var vslice_dummy_var_41: ref;
  var vslice_dummy_var_42: ref;
  var vslice_dummy_var_43: ref;
  var vslice_dummy_var_44: i64;
  var vslice_dummy_var_45: i64;
  var vslice_dummy_var_46: i64;
  var vslice_dummy_var_47: i64;
  var vslice_dummy_var_48: i64;
  var vslice_dummy_var_49: i64;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i64;
  var vslice_dummy_var_52: i64;
  var vslice_dummy_var_53: i64;
  var vslice_dummy_var_54: i64;
  var vslice_dummy_var_55: i64;
  var vslice_dummy_var_56: i64;
  var vslice_dummy_var_57: i64;
  var vslice_dummy_var_58: i64;
  var vslice_dummy_var_59: i64;
  var vslice_dummy_var_60: i64;
  var vslice_dummy_var_61: i64;
  var vslice_dummy_var_62: i64;
  var vslice_dummy_var_63: i64;
  var vslice_dummy_var_64: i64;
  var vslice_dummy_var_65: i64;
  var vslice_dummy_var_66: i64;
  var vslice_dummy_var_67: i64;
  var vslice_dummy_var_68: i64;
  var vslice_dummy_var_69: i64;
  var vslice_dummy_var_70: i64;
  var vslice_dummy_var_71: i64;
  var vslice_dummy_var_72: i64;
  var vslice_dummy_var_73: i64;

  $bb0:
    call {:si_unique_call 749} $initialize();
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p12 := ldv_init_zalloc(1);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p13 := ldv_init_zalloc(1);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p14 := ldv_init_zalloc(1);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p15 := ldv_init_zalloc(1);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $p16 := ldv_init_zalloc(1);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p17 := ldv_init_zalloc(1);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p18 := ldv_init_zalloc(32);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p20 := ldv_init_zalloc(1);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p21 := ldv_init_zalloc(1);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p22 := ldv_init_zalloc(1);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p23 := ldv_init_zalloc(1);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p24 := ldv_init_zalloc(1);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $p25 := ldv_init_zalloc(1);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $p26 := ldv_init_zalloc(48);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p28 := ldv_init_zalloc(1);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $p29 := ldv_init_zalloc(1416);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p31 := ldv_init_zalloc(48);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p33 := ldv_init_zalloc(1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p34 := ldv_init_zalloc(1416);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p36 := ldv_init_zalloc(1);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p37 := ldv_init_zalloc(1);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p38 := ldv_init_zalloc(1);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p39 := ldv_init_zalloc(1);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p40 := ldv_init_zalloc(1);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p41 := ldv_init_zalloc(1);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $p42 := ldv_init_zalloc(1);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $p43 := ldv_init_zalloc(1);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p44 := ldv_init_zalloc(1);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $p45 := ldv_init_zalloc(1);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p46 := ldv_init_zalloc(1);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p47 := ldv_init_zalloc(48);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p49 := ldv_init_zalloc(1416);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $p51 := ldv_init_zalloc(1);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p52 := ldv_init_zalloc(1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $p53 := ldv_init_zalloc(48);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p55 := ldv_init_zalloc(1);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p56 := ldv_init_zalloc(1416);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p58 := ldv_init_zalloc(48);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p60 := ldv_init_zalloc(1416);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p62 := ldv_init_zalloc(1);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} ldv_initialize();
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p0);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} vslice_dummy_var_32 := ldv_memset($p63, 0, 8);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p1);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} vslice_dummy_var_33 := ldv_memset($p65, 0, 8);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p2);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_34 := ldv_memset($p67, 0, 8);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p3);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} vslice_dummy_var_35 := ldv_memset($p69, 0, 8);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p4);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_36 := ldv_memset($p71, 0, 8);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p5);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} vslice_dummy_var_37 := ldv_memset($p73, 0, 8);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p6);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_38 := ldv_memset($p75, 0, 8);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p7);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} vslice_dummy_var_39 := ldv_memset($p77, 0, 8);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p8);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_40 := ldv_memset($p79, 0, 8);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p9);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} vslice_dummy_var_41 := ldv_memset($p81, 0, 8);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p10);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} vslice_dummy_var_42 := ldv_memset($p83, 0, 8);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p11);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_43 := ldv_memset($p85, 0, 8);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 816} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $M.59 := 0;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $M.61 := 0;
    call {:si_unique_call 819} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} work_init_1();
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.63 := 0;
    call {:si_unique_call 822} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.64 := 0;
    call {:si_unique_call 823} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 824} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.66 := 0;
    call {:si_unique_call 825} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 827} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 829} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $M.72 := 0;
    call {:si_unique_call 831} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $M.73 := 0;
    call {:si_unique_call 832} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.74 := 0;
    call {:si_unique_call 833} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $M.75 := 0;
    call {:si_unique_call 834} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 835} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 837} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $p117, $p118, $i119, $i121, $i122, $p123, $p124, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p135, $i136, $i138, $i139, $p140, $p141, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $p151, $p152, $i153, $i155, $i156, $p157, $p158, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $p168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $p176, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $p190, $p191, $i192, $i194, $i195, $p196, $p197, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $p224, $p225, $i226, $i228, $i229, $p230, $p231, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $p241, $p242, $i243, $i245, $i246, $p247, $p248, $i250, $i251, $i252, $i253, $i254, $i255, $i257, $i258, $i259, $i260, $i261, $i262, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $p273, $i274, $i276, $i277, $p278, $p279, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $p289, $p290, $i291, $i293, $i294, $p295, $p296, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $p306, $p307, $i308, $i310, $i311, $p312, $p313, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $p323, $p324, $i325, $i327, $i328, $p329, $p330, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $p340, $p341, $i342, $i344, $i345, $p346, $p347, $i349, $i350, $i351, $i352, $i353, $i354, $i356, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $p364, $p365, $i366, $i368, $i369, $p370, $p371, $i373, $i374, $i375, $i376, $i377, $i378, $i380, $i381, $i382, $i383, $i384, $i385, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p27, $p28, $p30, $p32, $p33, $p35, $p36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p48, $p50, $p51, $p52, $p54, $p55, $p57, $p59, $p61, $p62, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $p117, $p118, $i119, $i121, $i122, $p123, $p124, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p135, $i136, $i138, $i139, $p140, $p141, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $p151, $p152, $i153, $i155, $i156, $p157, $p158, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $p168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $p176, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $p190, $p191, $i192, $i194, $i195, $p196, $p197, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $p224, $p225, $i226, $i228, $i229, $p230, $p231, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $p241, $p242, $i243, $i245, $i246, $p247, $p248, $i250, $i251, $i252, $i253, $i254, $i255, $i257, $i258, $i259, $i260, $i261, $i262, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $p273, $i274, $i276, $i277, $p278, $p279, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $p289, $p290, $i291, $i293, $i294, $p295, $p296, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $p306, $p307, $i308, $i310, $i311, $p312, $p313, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $p323, $p324, $i325, $i327, $i328, $p329, $p330, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $p340, $p341, $i342, $i344, $i345, $p346, $p347, $i349, $i350, $i351, $i352, $i353, $i354, $i356, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $p364, $p365, $i366, $i368, $i369, $p370, $p371, $i373, $i374, $i375, $i376, $i377, $i378, $i380, $i381, $i382, $i383, $i384, $i385, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i87, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i87, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i87, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i87, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i87, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i87, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} ldv_stop();
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb66_dummy;

  $bb13:
    assume $i93 == 1;
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i380 := $M.78;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i381 := $ne.i32($i380, 0);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb391:
    assume $i381 == 1;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1015} $i382 := __VERIFIER_nondet_int();
    call {:si_unique_call 1016} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i382);
    call {:si_unique_call 1017} {:cexpr "tmp___58"} boogie_si_record_i32($i382);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i382, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  $bb395:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} ldv_stop();
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb394:
    assume $i383 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i384 := $M.78;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i384, 1);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb396:
    assume $i385 == 1;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_73 := bq2415x_sysfs_show_status($p61, $p59, $p62);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1019} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb398;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i92 == 1;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i373 := $M.77;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb379:
    assume $i374 == 1;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1009} $i375 := __VERIFIER_nondet_int();
    call {:si_unique_call 1010} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i375);
    call {:si_unique_call 1011} {:cexpr "tmp___57"} boogie_si_record_i32($i375);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i375, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ldv_stop();
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb382:
    assume $i376 == 1;
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i377 := $M.77;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i377, 1);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb384:
    assume $i378 == 1;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_72 := bq2415x_sysfs_show_reported_mode($p57, $p54, $p55);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1013} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb9:
    assume $i91 == 1;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i356 := $M.76;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i357 := $ne.i32($i356, 0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb359:
    assume $i357 == 1;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1001} $i358 := __VERIFIER_nondet_int();
    call {:si_unique_call 1002} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i358);
    call {:si_unique_call 1003} {:cexpr "tmp___56"} boogie_si_record_i32($i358);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $i359 := $slt.i32($i358, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i358, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    assume !($i360 == 1);
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} ldv_stop();
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb364:
    assume $i360 == 1;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i368 := $M.76;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 1);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb373:
    assume $i369 == 1;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p370 := $M.46;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p371 := $M.45;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_71 := bq2415x_sysfs_show_limit($p370, $p371, $p52);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    goto $bb375;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb362:
    assume $i359 == 1;
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i358, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    assume !($i361 == 1);
    goto $bb366;

  $bb367:
    assume $i361 == 1;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i362 := $M.76;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i362, 1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb369:
    assume $i363 == 1;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p364 := $M.46;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p365 := $M.45;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i366 := $load.i64($M.32, $p11);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_70 := bq2415x_sysfs_set_limit($p364, $p365, $p51, $i366);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    goto $bb371;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i87, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i94 == 1);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i349 := $M.75;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i350 := $ne.i32($i349, 0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb347:
    assume $i350 == 1;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 995} $i351 := __VERIFIER_nondet_int();
    call {:si_unique_call 996} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i351);
    call {:si_unique_call 997} {:cexpr "tmp___55"} boogie_si_record_i32($i351);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} ldv_stop();
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb350:
    assume $i352 == 1;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i353 := $M.75;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 1);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb352:
    assume $i354 == 1;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} vslice_dummy_var_69 := bq2415x_sysfs_show_status($p50, $p48, $p46);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 999} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    goto $bb354;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i94 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i332 := $M.74;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i332, 0);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb327:
    assume $i333 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 987} $i334 := __VERIFIER_nondet_int();
    call {:si_unique_call 988} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i334);
    call {:si_unique_call 989} {:cexpr "tmp___54"} boogie_si_record_i32($i334);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $i335 := $slt.i32($i334, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i334, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    assume !($i336 == 1);
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} ldv_stop();
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb332:
    assume $i336 == 1;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i344 := $M.74;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i344, 1);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb341:
    assume $i345 == 1;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p346 := $M.53;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p347 := $M.52;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} vslice_dummy_var_68 := bq2415x_sysfs_show_timer($p346, $p347, $p45);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 993} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb330:
    assume $i335 == 1;
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i334, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    assume !($i337 == 1);
    goto $bb334;

  $bb335:
    assume $i337 == 1;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i338 := $M.74;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i339 := $eq.i32($i338, 1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb337:
    assume $i339 == 1;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p340 := $M.53;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p341 := $M.52;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i342 := $load.i64($M.32, $p10);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_67 := bq2415x_sysfs_set_timer($p340, $p341, $p44, $i342);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb339;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i87, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i87, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i87, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i97 == 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i315 := $M.73;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb307:
    assume $i316 == 1;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 979} $i317 := __VERIFIER_nondet_int();
    call {:si_unique_call 980} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i317);
    call {:si_unique_call 981} {:cexpr "tmp___53"} boogie_si_record_i32($i317);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $i318 := $slt.i32($i317, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i317, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    assume !($i319 == 1);
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_stop();
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb312:
    assume $i319 == 1;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i327 := $M.73;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i327, 1);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb321:
    assume $i328 == 1;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p329 := $M.50;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p330 := $M.49;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_66 := bq2415x_sysfs_show_limit($p329, $p330, $p43);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb323;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb310:
    assume $i318 == 1;
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i317, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb314;

  $bb315:
    assume $i320 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i321 := $M.73;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 1);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb317:
    assume $i322 == 1;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p323 := $M.50;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p324 := $M.49;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i325 := $load.i64($M.32, $p9);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} vslice_dummy_var_65 := bq2415x_sysfs_set_limit($p323, $p324, $p42, $i325);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    goto $bb319;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i97 == 1;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i298 := $M.72;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb287:
    assume $i299 == 1;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 971} $i300 := __VERIFIER_nondet_int();
    call {:si_unique_call 972} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i300);
    call {:si_unique_call 973} {:cexpr "tmp___52"} boogie_si_record_i32($i300);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $i301 := $slt.i32($i300, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i300, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    assume !($i302 == 1);
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} ldv_stop();
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb292:
    assume $i302 == 1;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i310 := $M.72;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 1);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb301:
    assume $i311 == 1;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p312 := $M.40;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p313 := $M.39;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_64 := bq2415x_sysfs_show_enable($p312, $p313, $p40);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    goto $bb303;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb290:
    assume $i301 == 1;
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i300, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    assume !($i303 == 1);
    goto $bb294;

  $bb295:
    assume $i303 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i304 := $M.72;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 1);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb297:
    assume $i305 == 1;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p306 := $M.40;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p307 := $M.39;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i308 := $load.i64($M.32, $p8);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} vslice_dummy_var_63 := bq2415x_sysfs_set_enable($p306, $p307, $p41, $i308);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    goto $bb299;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i96 == 1;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i281 := $M.71;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i282 := $ne.i32($i281, 0);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb267:
    assume $i282 == 1;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 963} $i283 := __VERIFIER_nondet_int();
    call {:si_unique_call 964} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i283);
    call {:si_unique_call 965} {:cexpr "tmp___51"} boogie_si_record_i32($i283);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i283, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i283, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ldv_stop();
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb272:
    assume $i285 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i293 := $M.71;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb281:
    assume $i294 == 1;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p295 := $M.34;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p296 := $M.33;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} vslice_dummy_var_62 := bq2415x_sysfs_show_enable($p295, $p296, $p38);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb283;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb270:
    assume $i284 == 1;
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i283, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    assume !($i286 == 1);
    goto $bb274;

  $bb275:
    assume $i286 == 1;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i287 := $M.71;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 1);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb277:
    assume $i288 == 1;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p289 := $M.34;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p290 := $M.33;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i291 := $load.i64($M.32, $p7);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} vslice_dummy_var_61 := bq2415x_sysfs_set_enable($p289, $p290, $p39, $i291);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    goto $bb279;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i87, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i98 == 1);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i264 := $M.70;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i265 := $ne.i32($i264, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb247:
    assume $i265 == 1;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 955} $i266 := __VERIFIER_nondet_int();
    call {:si_unique_call 956} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i266);
    call {:si_unique_call 957} {:cexpr "tmp___50"} boogie_si_record_i32($i266);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $i267 := $slt.i32($i266, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i266, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} ldv_stop();
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb252:
    assume $i268 == 1;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i276 := $M.70;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb261:
    assume $i277 == 1;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p278 := $M.48;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p279 := $M.47;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_60 := bq2415x_sysfs_show_mode($p278, $p279, $p37);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb250:
    assume $i267 == 1;
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i266, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb254;

  $bb255:
    assume $i269 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i270 := $M.70;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 1);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb257:
    assume $i271 == 1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p272 := $M.48;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p273 := $M.47;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i274 := $load.i64($M.32, $p6);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_59 := bq2415x_sysfs_set_mode($p272, $p273, $p36, $i274);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    goto $bb259;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i98 == 1;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i257 := $M.69;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb235:
    assume $i258 == 1;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 949} $i259 := __VERIFIER_nondet_int();
    call {:si_unique_call 950} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i259);
    call {:si_unique_call 951} {:cexpr "tmp___49"} boogie_si_record_i32($i259);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} ldv_stop();
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb238:
    assume $i260 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i261 := $M.69;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 1);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb240:
    assume $i262 == 1;
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_58 := bq2415x_sysfs_show_status($p35, $p32, $p33);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    goto $bb242;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i87, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i87, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i87, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i87, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i102 == 1);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i250 := $M.68;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 0);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb223:
    assume $i251 == 1;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} $i252 := __VERIFIER_nondet_int();
    call {:si_unique_call 944} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i252);
    call {:si_unique_call 945} {:cexpr "tmp___48"} boogie_si_record_i32($i252);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} ldv_stop();
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb226:
    assume $i253 == 1;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i254 := $M.68;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 1);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb228:
    assume $i255 == 1;
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_57 := bq2415x_sysfs_show_status($p30, $p27, $p28);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    goto $bb230;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i102 == 1;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i233 := $M.67;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb203:
    assume $i234 == 1;
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 935} $i235 := __VERIFIER_nondet_int();
    call {:si_unique_call 936} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i235);
    call {:si_unique_call 937} {:cexpr "tmp___47"} boogie_si_record_i32($i235);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i235, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i235, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} ldv_stop();
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb208:
    assume $i237 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i245 := $M.67;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 1);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb217:
    assume $i246 == 1;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p247 := $M.36;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p248 := $M.35;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_56 := bq2415x_sysfs_show_enable($p247, $p248, $p25);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    goto $bb219;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb206:
    assume $i236 == 1;
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i235, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb210;

  $bb211:
    assume $i238 == 1;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i239 := $M.67;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 1);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb213:
    assume $i240 == 1;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p241 := $M.36;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p242 := $M.35;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i243 := $load.i64($M.32, $p5);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_55 := bq2415x_sysfs_set_enable($p241, $p242, $p24, $i243);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    goto $bb215;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i101 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i216 := $M.66;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i217 := $ne.i32($i216, 0);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb183:
    assume $i217 == 1;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} $i218 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i218);
    call {:si_unique_call 929} {:cexpr "tmp___46"} boogie_si_record_i32($i218);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i219 := $slt.i32($i218, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i218, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    assume !($i220 == 1);
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_stop();
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb188:
    assume $i220 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i228 := $M.66;
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 1);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb197:
    assume $i229 == 1;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p230 := $M.42;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p231 := $M.41;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vslice_dummy_var_54 := bq2415x_sysfs_show_limit($p230, $p231, $p22);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb199;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb186:
    assume $i219 == 1;
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i218, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume !($i221 == 1);
    goto $bb190;

  $bb191:
    assume $i221 == 1;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i222 := $M.66;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb193:
    assume $i223 == 1;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p224 := $M.42;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p225 := $M.41;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i226 := $load.i64($M.32, $p4);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} vslice_dummy_var_53 := bq2415x_sysfs_set_limit($p224, $p225, $p23, $i226);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i87, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i103 == 1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i199 := $M.65;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb153:
    assume $i200 == 1;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 885} $i201 := __VERIFIER_nondet_int();
    call {:si_unique_call 886} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i201);
    call {:si_unique_call 887} {:cexpr "tmp___45"} boogie_si_record_i32($i201);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i201, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i201, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} ldv_stop();
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb158:
    assume $i203 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i209 := $M.65;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 1);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb171:
    assume $i210 == 1;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i211 := bq2415x_driver_init();
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $M.80 := $i211;
    call {:si_unique_call 892} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i211);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i212 := $M.80;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 0);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i214 := $M.80;
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb176:
    assume $i215 == 1;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_check_final_state();
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb173:
    assume $i213 == 1;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 894} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 896} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} ldv_initialize_device_attribute_19();
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 898} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 899} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ldv_initialize_device_attribute_8();
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_initialize_device_attribute_15();
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv_initialize_device_attribute_14();
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 905} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} ldv_initialize_device_attribute_12();
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ldv_initialize_device_attribute_9();
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 910} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ldv_initialize_device_attribute_13();
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ldv_initialize_device_attribute_16();
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} ldv_initialize_device_attribute_18();
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} ldv_initialize_i2c_driver_2();
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ldv_initialize_device_attribute_17();
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ldv_initialize_device_attribute_7();
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} ldv_initialize_device_attribute_11();
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb156:
    assume $i202 == 1;
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i201, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !($i204 == 1);
    goto $bb160;

  $bb161:
    assume $i204 == 1;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i205 := $M.65;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 3);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb163:
    assume $i206 == 1;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i207 := $M.64;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb165;

  $bb166:
    assume $i208 == 1;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} bq2415x_driver_exit();
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb34:
    assume $i103 == 1;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i182 := $M.63;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb133:
    assume $i183 == 1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} $i184 := __VERIFIER_nondet_int();
    call {:si_unique_call 878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i184);
    call {:si_unique_call 879} {:cexpr "tmp___44"} boogie_si_record_i32($i184);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i184, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i184, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} ldv_stop();
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb138:
    assume $i186 == 1;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i194 := $M.63;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb147:
    assume $i195 == 1;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p196 := $M.57;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p197 := $M.56;
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} vslice_dummy_var_52 := bq2415x_sysfs_show_limit($p196, $p197, $p20);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    goto $bb149;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb136:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i184, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb140;

  $bb141:
    assume $i187 == 1;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i188 := $M.63;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 1);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb143:
    assume $i189 == 1;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p190 := $M.57;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p191 := $M.56;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i192 := $load.i64($M.32, $p3);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_51 := bq2415x_sysfs_set_limit($p190, $p191, $p21, $i192);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    goto $bb145;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i87, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i87, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i87, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i106 == 1);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i180 := $M.62;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb130:
    assume $i181 == 1;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} invoke_work_1();
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    goto $bb132;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i106 == 1;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i160 := $M.61;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb107:
    assume $i161 == 1;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 865} $i162 := __VERIFIER_nondet_int();
    call {:si_unique_call 866} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i162);
    call {:si_unique_call 867} {:cexpr "tmp___43"} boogie_si_record_i32($i162);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i163 := $slt.i32($i162, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i162, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} ldv_stop();
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb112:
    assume $i164 == 1;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i174 := $M.61;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 2);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb124:
    assume $i175 == 1;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p176 := $M.51;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_50 := bq2415x_remove($p176);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i178 := $M.64;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i179 := $sub.i32($i178, 1);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.64 := $i179;
    call {:si_unique_call 874} {:cexpr "ref_cnt"} boogie_si_record_i32($i179);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    goto $bb126;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb110:
    assume $i163 == 1;
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i162, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb114;

  $bb115:
    assume $i165 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i166 := $M.61;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 1);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb117:
    assume $i167 == 1;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p168 := $M.51;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i169 := bq2415x_probe($p168, $p19);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.79 := $i169;
    call {:si_unique_call 869} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i169);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i170 := $M.79;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb119:
    assume $i171 == 1;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i172 := $M.64;
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i172, 1);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.64 := $i173;
    call {:si_unique_call 871} {:cexpr "ref_cnt"} boogie_si_record_i32($i173);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    goto $bb121;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i105 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i143 := $M.60;
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb87:
    assume $i144 == 1;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 857} $i145 := __VERIFIER_nondet_int();
    call {:si_unique_call 858} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i145);
    call {:si_unique_call 859} {:cexpr "tmp___42"} boogie_si_record_i32($i145);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i145, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i145, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} ldv_stop();
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb92:
    assume $i147 == 1;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i155 := $M.60;
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb101:
    assume $i156 == 1;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p157 := $M.38;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p158 := $M.37;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_49 := bq2415x_sysfs_show_limit($p157, $p158, $p17);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 863} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    goto $bb103;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb90:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i145, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb94;

  $bb95:
    assume $i148 == 1;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i149 := $M.60;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 1);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb97:
    assume $i150 == 1;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p151 := $M.38;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p152 := $M.37;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.32, $p2);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_48 := bq2415x_sysfs_set_limit($p151, $p152, $p16, $i153);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 861} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i87, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i107 == 1);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i126 := $M.59;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb67:
    assume $i127 == 1;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 849} $i128 := __VERIFIER_nondet_int();
    call {:si_unique_call 850} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i128);
    call {:si_unique_call 851} {:cexpr "tmp___41"} boogie_si_record_i32($i128);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i128, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i128, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ldv_stop();
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb72:
    assume $i130 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i138 := $M.59;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 1);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb81:
    assume $i139 == 1;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p140 := $M.55;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p141 := $M.54;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} vslice_dummy_var_47 := bq2415x_sysfs_show_registers($p140, $p141, $p14);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 855} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i128, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb74;

  $bb75:
    assume $i131 == 1;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i132 := $M.59;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 1);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb77:
    assume $i133 == 1;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p134 := $M.55;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p135 := $M.54;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i136 := $load.i64($M.32, $p1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} vslice_dummy_var_46 := bq2415x_sysfs_set_registers($p134, $p135, $p15, $i136);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb79;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i87, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb15;

  $bb44:
    assume $i108 == 1;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i109 := $M.58;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb46:
    assume $i110 == 1;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 1} true;
    call {:si_unique_call 841} $i111 := __VERIFIER_nondet_int();
    call {:si_unique_call 842} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i111);
    call {:si_unique_call 843} {:cexpr "tmp___40"} boogie_si_record_i32($i111);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i111, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i111, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} ldv_stop();
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb51:
    assume $i113 == 1;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i121 := $M.58;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 1);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb60:
    assume $i122 == 1;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p123 := $M.44;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p124 := $M.43;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} vslice_dummy_var_45 := bq2415x_sysfs_show_enable($p123, $p124, $p12);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i111, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb53;

  $bb54:
    assume $i114 == 1;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i115 := $M.58;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 1);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i116 == 1;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p117 := $M.44;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p118 := $M.43;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.32, $p0);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} vslice_dummy_var_44 := bq2415x_sysfs_set_enable($p117, $p118, $p13, $i119);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 845} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb66_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 838} $i87 := __VERIFIER_nondet_int();
    call {:si_unique_call 839} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i87);
    call {:si_unique_call 840} {:cexpr "tmp___39"} boogie_si_record_i32($i87);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 369572);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    return;
}



const bq2415x_driver_exit: ref;

axiom bq2415x_driver_exit == $sub.ref(0, 370604);

procedure bq2415x_driver_exit();
  free requires assertsPassed;



implementation bq2415x_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} i2c_del_driver(bq2415x_driver);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    return;
}



const bq2415x_driver_init: ref;

axiom bq2415x_driver_init == $sub.ref(0, 371636);

procedure bq2415x_driver_init() returns ($r: i32);
  free requires assertsPassed;



implementation bq2415x_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i0 := i2c_register_driver(__this_module, bq2415x_driver);
    call {:si_unique_call 1024} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 372668);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i0 := $M.7;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.24;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.14;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.81;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.82;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i10 := $M.83;
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} ldv_error();
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} ldv_error();
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_error();
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} ldv_error();
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} ldv_error();
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} ldv_error();
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_580:
    assume !assertsPassed;
    return;
}



const i2c_register_driver: ref;

axiom i2c_register_driver == $sub.ref(0, 373700);

procedure i2c_register_driver($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_register_driver($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1031} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1032} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i2c_del_driver: ref;

axiom i2c_del_driver == $sub.ref(0, 374732);

procedure i2c_del_driver($p0: ref);
  free requires assertsPassed;



implementation i2c_del_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 375764);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1033} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 1} true;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 376796);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 377828);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 378860);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 379892);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 380924);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 381956);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 382988);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 384020);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 385052);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 386084);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 387116);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 388148);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 389180);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1034} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1035} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1036} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1037} __VERIFIER_assume($i4);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 390212);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 391244);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 392276);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 393308);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 394340);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 395372);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 396404);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 397436);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 398468);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 399500);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 400532);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 401564);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 402596);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 403628);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 404660);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 405692);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 406724);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1038} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1039} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1040} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1041} __VERIFIER_assume($i10);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 407756);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1043} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 408788);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 409820);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1044} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1045} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 410852);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 411884);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 412916);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1046} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1047} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1048} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1049} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p6 := malloc($i5);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 1051} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 413948);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 414980);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.85, $M.86, $M.83, $M.82, $M.81, $M.14, $M.24, $M.7, $M.87, $M.88, $M.117, $M.118, $M.30, $M.0, $M.123, $M.29, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1052} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.33 := $0.ref;
    $M.34 := $0.ref;
    $M.15 := 0;
    call {:si_unique_call 1053} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.16 := $0.ref;
    $M.17 := 0;
    call {:si_unique_call 1054} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.18 := $0.ref;
    $M.19 := 0;
    call {:si_unique_call 1055} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.20 := $0.ref;
    $M.21 := 0;
    call {:si_unique_call 1056} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.22 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.38 := $0.ref;
    $M.39 := $0.ref;
    $M.40 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := $0.ref;
    $M.44 := $0.ref;
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.48 := $0.ref;
    $M.49 := $0.ref;
    $M.50 := $0.ref;
    $M.51 := $0.ref;
    $M.52 := $0.ref;
    $M.53 := $0.ref;
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.56 := $0.ref;
    $M.57 := $0.ref;
    $M.58 := 0;
    call {:si_unique_call 1057} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1058} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1059} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1060} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1061} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 1062} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 1063} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 1064} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1065} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1067} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1068} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1069} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1070} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1071} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 1072} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 1073} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 1074} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 1075} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1076} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1077} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1078} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 1079} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.85 := $store.i8($M.85, __mod_i2c__bq2415x_i2c_id_table_device_table, 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_i2c__bq2415x_i2c_id_table_device_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, __mod_acpi__bq2415x_i2c_acpi_match_device_table, 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(__mod_acpi__bq2415x_i2c_acpi_match_device_table, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(16, 1)), 0);
    $M.83 := 1;
    call {:si_unique_call 1080} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.82 := 1;
    call {:si_unique_call 1081} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.81 := 1;
    call {:si_unique_call 1082} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.14 := 1;
    call {:si_unique_call 1083} {:cexpr "ldv_mutex_bq2415x_timer_mutex"} boogie_si_record_i32(1);
    $M.24 := 1;
    call {:si_unique_call 1084} {:cexpr "ldv_mutex_bq2415x_id_mutex"} boogie_si_record_i32(1);
    $M.7 := 1;
    call {:si_unique_call 1085} {:cexpr "ldv_mutex_bq2415x_i2c_mutex"} boogie_si_record_i32(1);
    $M.87 := $store.i8($M.87, bq2415x_i2c_id_table, 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 120);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(24, 1)), 2);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(24, 1)), 3);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(24, 1)), 4);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(24, 1)), 5);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 51);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(24, 1)), 6);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 51);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(24, 1)), 7);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(24, 1)), 8);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(24, 1)), 9);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(24, 1)), 10);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 55);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(24, 1)), 11);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 113);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 56);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(24, 1)), 12);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref(bq2415x_i2c_id_table, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.88 := $store.i8($M.88, bq2415x_i2c_acpi_match, 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 88);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(16, 1)), 1);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 65);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(16, 1)), 2);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(16, 1)), 3);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 65);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(16, 1)), 4);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(16, 1)), 5);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 51);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(16, 1)), 6);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 65);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 51);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(16, 1)), 7);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(16, 1)), 8);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(16, 1)), 9);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 65);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 54);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(16, 1)), 10);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 83);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 55);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(16, 1)), 11);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 81);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 50);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 56);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(16, 1)), 12);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref(bq2415x_i2c_acpi_match, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(16, 1)), 0);
    $M.117 := $store.ref($M.117, dev_attr_fault_status, .str.83);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_status);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_fault_status, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.117 := $store.ref($M.117, dev_attr_boost_status, .str.82);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_status);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_boost_status, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.117 := $store.ref($M.117, dev_attr_charge_status, .str.81);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_status);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_charge_status, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.117 := $store.ref($M.117, dev_attr_otg_status, .str.80);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_status);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_otg_status, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.117 := $store.ref($M.117, dev_attr_registers, .str.79);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_registers);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_registers);
    $M.117 := $store.ref($M.117, dev_attr_timer, .str.23);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_timer);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_timer, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_timer);
    $M.117 := $store.ref($M.117, dev_attr_mode, .str.20);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_mode);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_mode);
    $M.117 := $store.ref($M.117, dev_attr_reported_mode, .str);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_reported_mode);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_reported_mode, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.117 := $store.ref($M.117, dev_attr_stat_pin_enable, .str.30);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_enable);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_stat_pin_enable, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_enable);
    $M.117 := $store.ref($M.117, dev_attr_otg_pin_enable, .str.29);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_enable);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_otg_pin_enable, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_enable);
    $M.117 := $store.ref($M.117, dev_attr_high_impedance_enable, .str.28);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_enable);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_high_impedance_enable, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_enable);
    $M.117 := $store.ref($M.117, dev_attr_charge_termination_enable, .str.27);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_enable);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_charge_termination_enable, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_enable);
    $M.117 := $store.ref($M.117, dev_attr_termination_current, .str.39);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_limit);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_termination_current, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_limit);
    $M.117 := $store.ref($M.117, dev_attr_charge_current, .str.38);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_limit);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_charge_current, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_limit);
    $M.117 := $store.ref($M.117, dev_attr_battery_regulation_voltage, .str.37);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_limit);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_battery_regulation_voltage, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_limit);
    $M.117 := $store.ref($M.117, dev_attr_weak_battery_voltage, .str.36);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_limit);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_weak_battery_voltage, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_limit);
    $M.117 := $store.ref($M.117, dev_attr_current_limit, .str.35);
    $M.117 := $store.i16($M.117, $add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(32, 1)), bq2415x_sysfs_show_limit);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_attr_current_limit, $mul.ref(0, 48)), $mul.ref(40, 1)), bq2415x_sysfs_set_limit);
    $M.118 := $store.ref($M.118, bq2415x_sysfs_attributes, dev_attr_current_limit);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(1, 8)), dev_attr_weak_battery_voltage);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(2, 8)), dev_attr_battery_regulation_voltage);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(3, 8)), dev_attr_charge_current);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(4, 8)), dev_attr_termination_current);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(5, 8)), dev_attr_charge_termination_enable);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(6, 8)), dev_attr_high_impedance_enable);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(7, 8)), dev_attr_otg_pin_enable);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(8, 8)), dev_attr_stat_pin_enable);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(9, 8)), dev_attr_reported_mode);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(10, 8)), dev_attr_mode);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(11, 8)), dev_attr_timer);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(12, 8)), dev_attr_registers);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(13, 8)), dev_attr_otg_status);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(14, 8)), dev_attr_charge_status);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(15, 8)), dev_attr_boost_status);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(16, 8)), dev_attr_fault_status);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(bq2415x_sysfs_attributes, $mul.ref(0, 144)), $mul.ref(17, 8)), $0.ref);
    $M.30 := $store.ref($M.30, bq2415x_chip_name, .str.63);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(1, 8)), .str.67);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(2, 8)), .str.68);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(3, 8)), .str.69);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(4, 8)), .str.70);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(5, 8)), .str.71);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(6, 8)), .str.72);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(7, 8)), .str.73);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(8, 8)), .str.74);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(9, 8)), .str.75);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(10, 8)), .str.76);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(11, 8)), .str.77);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(bq2415x_chip_name, $mul.ref(0, 104)), $mul.ref(12, 8)), .str.78);
    $M.0 := $store.i32($M.0, bq2415x_power_supply_props, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(bq2415x_power_supply_props, $mul.ref(0, 8)), $mul.ref(1, 4)), 62);
    $M.123 := $store.ref($M.123, bq2415x_id, $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.123 := $store.i32($M.123, $add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(16, 1)), 0);
    $M.123 := $store.i32($M.123, $add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(20, 1)), 0);
    $M.123 := $store.i32($M.123, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.123 := $store.i32($M.123, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.123 := $store.i32($M.123, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.123 := $store.ref($M.123, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.123 := $store.ref($M.123, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.62);
    $M.123 := $store.i32($M.123, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.123 := $store.i64($M.123, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.123 := $store.i32($M.123, $add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(96, 1)), 0);
    $M.123 := $store.ref($M.123, $add.ref($add.ref(bq2415x_id, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, bq2415x_id_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(bq2415x_id_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(bq2415x_id_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), bq2415x_id_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.61);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(bq2415x_id_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, bq2415x_timer_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(bq2415x_timer_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(bq2415x_timer_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), bq2415x_timer_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.26);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(bq2415x_timer_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, bq2415x_i2c_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.21);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(bq2415x_i2c_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(bq2415x_i2c_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), bq2415x_i2c_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.22);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(bq2415x_i2c_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.29 := $store.i8($M.29, .str.63, 117);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(2, 1)), 107);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(5, 1)), 119);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.29 := $store.i8($M.29, .str.67, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.29 := $store.i8($M.29, .str.68, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(6, 1)), 48);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(7, 1)), 97);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.29 := $store.i8($M.29, .str.69, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(6, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.29 := $store.i8($M.29, .str.70, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(6, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(7, 1)), 97);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.29 := $store.i8($M.29, .str.71, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(6, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.71, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.29 := $store.i8($M.29, .str.72, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(6, 1)), 51);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.72, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.29 := $store.i8($M.29, .str.73, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.73, $mul.ref(0, 9)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.73, $mul.ref(0, 9)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.73, $mul.ref(0, 9)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.73, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.73, $mul.ref(0, 9)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.73, $mul.ref(0, 9)), $mul.ref(6, 1)), 51);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.73, $mul.ref(0, 9)), $mul.ref(7, 1)), 97);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.73, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.29 := $store.i8($M.29, .str.74, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.74, $mul.ref(0, 8)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.74, $mul.ref(0, 8)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.74, $mul.ref(0, 8)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.74, $mul.ref(0, 8)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.74, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.74, $mul.ref(0, 8)), $mul.ref(6, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.74, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.29 := $store.i8($M.29, .str.75, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(6, 1)), 54);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.29 := $store.i8($M.29, .str.76, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(6, 1)), 54);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(7, 1)), 97);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.29 := $store.i8($M.29, .str.77, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(6, 1)), 55);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(7, 1)), 115);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.29 := $store.i8($M.29, .str.78, 98);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(1, 1)), 113);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(2, 1)), 50);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(3, 1)), 52);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(4, 1)), 49);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(6, 1)), 56);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.78, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.124 := $store.i8($M.124, .str.35, 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(1, 1)), 117);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(2, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(3, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(5, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(6, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(8, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(9, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(10, 1)), 109);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(11, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.35, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.124 := $store.i8($M.124, .str.36, 119);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(2, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(3, 1)), 107);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(5, 1)), 98);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(6, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(7, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(10, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(11, 1)), 121);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(13, 1)), 118);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(14, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(15, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(18, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.36, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.124 := $store.i8($M.124, .str.37, 98);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(1, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(2, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(3, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(4, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(5, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(6, 1)), 121);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(7, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(8, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(9, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(10, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(11, 1)), 117);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(12, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(13, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(14, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(15, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(16, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(17, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(18, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(19, 1)), 118);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(20, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(21, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(22, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(23, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(24, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(25, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.37, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.124 := $store.i8($M.124, .str.38, 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(1, 1)), 104);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(2, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(3, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(4, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(7, 1)), 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(8, 1)), 117);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(9, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(11, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(12, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(13, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.38, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.124 := $store.i8($M.124, .str.39, 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(2, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(3, 1)), 109);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(4, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(5, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(6, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(8, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(9, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(10, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(12, 1)), 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(13, 1)), 117);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(16, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(17, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.39, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.125 := $store.i8($M.125, .str.31, 37);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(.str.31, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(.str.31, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(.str.31, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.124 := $store.i8($M.124, .str.27, 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(1, 1)), 104);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(2, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(3, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(4, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(5, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(6, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(7, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(8, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(9, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(10, 1)), 109);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(11, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(12, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(13, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(14, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(15, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(16, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(17, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(20, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(21, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(22, 1)), 98);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(23, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.27, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.124 := $store.i8($M.124, .str.28, 104);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(2, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(3, 1)), 104);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(5, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(6, 1)), 109);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(7, 1)), 112);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(9, 1)), 100);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(10, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(11, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(12, 1)), 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(13, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(16, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(17, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(18, 1)), 98);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(19, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.28, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.124 := $store.i8($M.124, .str.29, 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(1, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(2, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(4, 1)), 112);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(6, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(8, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(9, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(10, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(11, 1)), 98);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(12, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.124 := $store.i8($M.124, .str.30, 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(1, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(2, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(3, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(5, 1)), 112);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(7, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(10, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(11, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(12, 1)), 98);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(13, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.124 := $store.i8($M.124, .str, 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(2, 1)), 112);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(3, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(4, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(5, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(6, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(7, 1)), 100);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(9, 1)), 109);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(11, 1)), 100);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.126 := $store.i8($M.126, .str.99, 111);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(.str.99, $mul.ref(0, 5)), $mul.ref(1, 1)), 102);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(.str.99, $mul.ref(0, 5)), $mul.ref(2, 1)), 102);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(.str.99, $mul.ref(0, 5)), $mul.ref(3, 1)), 10);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(.str.99, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.127 := $store.i8($M.127, .str.100, 110);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.100, $mul.ref(0, 6)), $mul.ref(1, 1)), 111);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.100, $mul.ref(0, 6)), $mul.ref(2, 1)), 110);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.100, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.100, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.100, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.128 := $store.i8($M.128, .str.101, 104);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.101, $mul.ref(0, 6)), $mul.ref(1, 1)), 111);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.101, $mul.ref(0, 6)), $mul.ref(2, 1)), 115);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.101, $mul.ref(0, 6)), $mul.ref(3, 1)), 116);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.101, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.101, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.129 := $store.i8($M.129, .str.102, 100);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(2, 1)), 100);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(3, 1)), 105);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(4, 1)), 99);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(5, 1)), 97);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(6, 1)), 116);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(7, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(8, 1)), 100);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(9, 1)), 10);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.130 := $store.i8($M.130, .str.103, 98);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(1, 1)), 111);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(2, 1)), 111);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(3, 1)), 115);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(4, 1)), 116);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(5, 1)), 10);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.124 := $store.i8($M.124, .str.20, 109);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.20, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.20, $mul.ref(0, 5)), $mul.ref(2, 1)), 100);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.20, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.20, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.131 := $store.i8($M.131, .str.88, 97);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.88, $mul.ref(0, 5)), $mul.ref(1, 1)), 117);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.88, $mul.ref(0, 5)), $mul.ref(2, 1)), 116);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.88, $mul.ref(0, 5)), $mul.ref(3, 1)), 111);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.88, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.132 := $store.i8($M.132, .str.89, 111);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.89, $mul.ref(0, 4)), $mul.ref(1, 1)), 102);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.89, $mul.ref(0, 4)), $mul.ref(2, 1)), 102);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.89, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.133 := $store.i8($M.133, .str.90, 110);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.90, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.90, $mul.ref(0, 5)), $mul.ref(2, 1)), 110);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.90, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.90, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.134 := $store.i8($M.134, .str.91, 104);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.91, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.91, $mul.ref(0, 5)), $mul.ref(2, 1)), 115);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.91, $mul.ref(0, 5)), $mul.ref(3, 1)), 116);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.91, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.135 := $store.i8($M.135, .str.92, 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(1, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(2, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(3, 1)), 105);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(4, 1)), 99);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(5, 1)), 97);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(6, 1)), 116);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(8, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.92, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.136 := $store.i8($M.136, .str.93, 98);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.93, $mul.ref(0, 6)), $mul.ref(1, 1)), 111);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.93, $mul.ref(0, 6)), $mul.ref(2, 1)), 111);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.93, $mul.ref(0, 6)), $mul.ref(3, 1)), 115);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.93, $mul.ref(0, 6)), $mul.ref(4, 1)), 116);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.93, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.137 := $store.i8($M.137, .str.94, 114);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.94, $mul.ref(0, 6)), $mul.ref(1, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.94, $mul.ref(0, 6)), $mul.ref(2, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.94, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.94, $mul.ref(0, 6)), $mul.ref(4, 1)), 116);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.94, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.138 := $store.i8($M.138, .str.95, 97);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(.str.95, $mul.ref(0, 7)), $mul.ref(1, 1)), 117);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(.str.95, $mul.ref(0, 7)), $mul.ref(2, 1)), 116);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(.str.95, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(.str.95, $mul.ref(0, 7)), $mul.ref(4, 1)), 32);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(.str.95, $mul.ref(0, 7)), $mul.ref(5, 1)), 40);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(.str.95, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.139 := $store.i8($M.139, .str.96, 41);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(.str.96, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.140 := $store.i8($M.140, .str.97, 10);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(.str.97, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.124 := $store.i8($M.124, .str.23, 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(1, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(2, 1)), 109);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(4, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.141 := $store.i8($M.141, .str.24, 37);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.24, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.24, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.24, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.142 := $store.i8($M.142, .str.98, 97);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(.str.98, $mul.ref(0, 6)), $mul.ref(1, 1)), 117);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(.str.98, $mul.ref(0, 6)), $mul.ref(2, 1)), 116);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(.str.98, $mul.ref(0, 6)), $mul.ref(3, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(.str.98, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(.str.98, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.124 := $store.i8($M.124, .str.79, 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(1, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(2, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(3, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(4, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(5, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(6, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(7, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.143 := $store.i8($M.143, .str.32, 37);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(.str.32, $mul.ref(0, 6)), $mul.ref(1, 1)), 120);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(.str.32, $mul.ref(0, 6)), $mul.ref(2, 1)), 32);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(.str.32, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(.str.32, $mul.ref(0, 6)), $mul.ref(4, 1)), 120);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(.str.32, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.144 := $store.i8($M.144, .str.33, 37);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(1, 1)), 35);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(2, 1)), 46);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(3, 1)), 50);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(4, 1)), 120);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(5, 1)), 61);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(9, 1)), 111);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(10, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(11, 1)), 32);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(12, 1)), 37);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(13, 1)), 100);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(14, 1)), 10);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.33, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.145 := $store.i8($M.145, .str.34, 37);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(1, 1)), 35);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(2, 1)), 46);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(3, 1)), 50);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(4, 1)), 120);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(5, 1)), 61);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(6, 1)), 37);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(7, 1)), 35);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(8, 1)), 46);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(9, 1)), 50);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(10, 1)), 120);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(11, 1)), 10);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.124 := $store.i8($M.124, .str.80, 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.80, $mul.ref(0, 11)), $mul.ref(1, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.80, $mul.ref(0, 11)), $mul.ref(2, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.80, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.80, $mul.ref(0, 11)), $mul.ref(4, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.80, $mul.ref(0, 11)), $mul.ref(5, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.80, $mul.ref(0, 11)), $mul.ref(6, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.80, $mul.ref(0, 11)), $mul.ref(7, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.80, $mul.ref(0, 11)), $mul.ref(8, 1)), 117);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.80, $mul.ref(0, 11)), $mul.ref(9, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.80, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.124 := $store.i8($M.124, .str.81, 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(1, 1)), 104);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(2, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(3, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(4, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(5, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(7, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(8, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(9, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(10, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(11, 1)), 117);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(12, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.124 := $store.i8($M.124, .str.82, 98);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(1, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(2, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(3, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(4, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(6, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(7, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(8, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(10, 1)), 117);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(11, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.82, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.124 := $store.i8($M.124, .str.83, 102);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(1, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(2, 1)), 117);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(3, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(4, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(6, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(7, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(8, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(10, 1)), 117);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(11, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.141 := $store.i8($M.141, .str.40, 78);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(1, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(2, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(3, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(4, 1)), 104);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(5, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(6, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(7, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(8, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(9, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(10, 1)), 118);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(11, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(12, 1)), 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(13, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(14, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(15, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(16, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(17, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(18, 1)), 44);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(19, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(20, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(21, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(22, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(23, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(24, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(25, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(26, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(27, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(28, 1)), 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(29, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(30, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(31, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(32, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(33, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(34, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(35, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(36, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(37, 1)), 44);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(38, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(39, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(40, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(41, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(42, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(43, 1)), 65);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(44, 1)), 67);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(45, 1)), 80);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(46, 1)), 73);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(47, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(48, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(49, 1)), 117);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(50, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(51, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(52, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(53, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(54, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(55, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.40, $mul.ref(0, 57)), $mul.ref(56, 1)), 0);
    $M.141 := $store.i8($M.141, .str.42, 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(1, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(2, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(3, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(4, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(5, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(6, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(7, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(8, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(9, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(10, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(11, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(12, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(13, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(14, 1)), 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(15, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(16, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(17, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(18, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(19, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(20, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(21, 1)), 118);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(22, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(23, 1)), 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(24, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(25, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(26, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(27, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(28, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(29, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(30, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.42, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.141 := $store.i8($M.141, .str.51, 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(1, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(2, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(3, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(4, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(5, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(6, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(7, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(8, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(9, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(10, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(11, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(12, 1)), 103);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(13, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(14, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(15, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(16, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(17, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(18, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(19, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(20, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(21, 1)), 119);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(22, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(23, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(24, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(25, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(26, 1)), 117);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(27, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(28, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(29, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(30, 1)), 121);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(31, 1)), 58);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(32, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(33, 1)), 37);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(34, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(35, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.51, $mul.ref(0, 37)), $mul.ref(36, 1)), 0);
    $M.141 := $store.i8($M.141, .str.52, 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(1, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(2, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(3, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(4, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(5, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(6, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(7, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(8, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(9, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(10, 1)), 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(11, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(12, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(13, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(14, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(15, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(16, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(17, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(18, 1)), 121);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(19, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(20, 1)), 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(21, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(22, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(23, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(24, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(25, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(26, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(27, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(28, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(29, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(30, 1)), 58);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(31, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(32, 1)), 37);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(33, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(34, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.52, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.141 := $store.i8($M.141, .str.53, 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(1, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(2, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(3, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(4, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(5, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(6, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(7, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(8, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(9, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(10, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(11, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(12, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(13, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(14, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(15, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(16, 1)), 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(17, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(18, 1)), 117);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(19, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(20, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(21, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(22, 1)), 118);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(23, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(24, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(25, 1)), 117);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(26, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(27, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(28, 1)), 58);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(29, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(30, 1)), 37);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(31, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(32, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.53, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.141 := $store.i8($M.141, .str.54, 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(1, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(2, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(3, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(4, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(5, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(6, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(7, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(8, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(9, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(10, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(11, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(12, 1)), 103);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(13, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(14, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(15, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(16, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(17, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(18, 1)), 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(19, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(20, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(21, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(22, 1)), 58);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(23, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(24, 1)), 37);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(25, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(26, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.54, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(8, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(16, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.2, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.141 := $store.i8($M.141, .str.3, 84);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(1, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(2, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(5, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(6, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(7, 1)), 120);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(8, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(9, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(11, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(12, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.3, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.141 := $store.i8($M.141, .str.4, 66);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(1, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(2, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(3, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(4, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(5, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(6, 1)), 121);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(7, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(8, 1)), 118);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(9, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(10, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(11, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(12, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(13, 1)), 103);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(15, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(16, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(17, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(18, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(19, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(20, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(21, 1)), 119);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(22, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.4, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.5, 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(1, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(23, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(24, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(25, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(26, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(27, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(29, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(30, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(31, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(33, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(34, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, .str.6, 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(1, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.7, 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(6, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(9, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(17, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(20, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(28, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(29, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.8, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(9, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(14, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(17, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(22, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(25, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.141 := $store.i8($M.141, .str.9, 83);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(1, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(2, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(3, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(4, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(5, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(6, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(7, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(8, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(10, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.9, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.141 := $store.i8($M.141, .str.10, 80);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(2, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(3, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(4, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(5, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(6, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(7, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(8, 1)), 117);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(10, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(11, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(12, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(13, 1)), 117);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(14, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(15, 1)), 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(17, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.10, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.141 := $store.i8($M.141, .str.11, 78);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(1, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(2, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(3, 1)), 98);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(4, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(5, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(6, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(8, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(9, 1)), 121);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(10, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.146 := $store.i8($M.146, .str.64, 49);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(1, 1)), 46);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.141 := $store.i8($M.141, .str.66, 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(1, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(2, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(3, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(4, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(5, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(6, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(7, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(8, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(9, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(10, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(11, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(12, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(13, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(14, 1)), 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(15, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(16, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(17, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(18, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(19, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(20, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(21, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(22, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(23, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(24, 1)), 32);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(25, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(26, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(27, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(28, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(29, 1)), 10);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(.str.66, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    call {:si_unique_call 1086} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.85, $M.86, $M.83, $M.82, $M.81, $M.14, $M.24, $M.7, $M.87, $M.88, $M.117, $M.118, $M.30, $M.0, $M.123, $M.29, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1087} __SMACK_static_init();
    call {:si_unique_call 1088} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.32, $M.58, $M.59, $M.60, $M.61, $M.15, $M.17, $M.19, $M.21, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.79, $M.80, $M.45, $M.46, $M.52, $M.53, $M.49, $M.50, $M.39, $M.40, $M.33, $M.34, $M.47, $M.48, $M.35, $M.36, $M.41, $M.42, $M.56, $M.57, $M.51, $M.37, $M.38, $M.54, $M.55, $M.43, $M.44, $M.16, $M.18, $M.20, $M.22, $M.85, $M.86, $M.83, $M.82, $M.81, $M.14, $M.24, $M.7, $M.87, $M.88, $M.117, $M.118, $M.30, $M.123, $M.29, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $CurrAddr, $M.25, $M.26, $M.27, $M.28;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$p57: ref, in_$p59: ref, in_$p61: ref, in_$p62: ref, in_$i87: i32, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$i136: i64, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i64, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$p158: ref, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i1, in_$i164: i1, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i178: i32, in_$i179: i32, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$p191: ref, in_$i192: i64, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i1, in_$i220: i1, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$p225: ref, in_$i226: i64, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$p231: ref, in_$i233: i32, in_$i234: i1, in_$i235: i32, in_$i236: i1, in_$i237: i1, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$p242: ref, in_$i243: i64, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$p273: ref, in_$i274: i64, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$p279: ref, in_$i281: i32, in_$i282: i1, in_$i283: i32, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$p290: ref, in_$i291: i64, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$p296: ref, in_$i298: i32, in_$i299: i1, in_$i300: i32, in_$i301: i1, in_$i302: i1, in_$i303: i1, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$p307: ref, in_$i308: i64, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$p313: ref, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i1, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$p324: ref, in_$i325: i64, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$p330: ref, in_$i332: i32, in_$i333: i1, in_$i334: i32, in_$i335: i1, in_$i336: i1, in_$i337: i1, in_$i338: i32, in_$i339: i1, in_$p340: ref, in_$p341: ref, in_$i342: i64, in_$i344: i32, in_$i345: i1, in_$p346: ref, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$i351: i32, in_$i352: i1, in_$i353: i32, in_$i354: i1, in_$i356: i32, in_$i357: i1, in_$i358: i32, in_$i359: i1, in_$i360: i1, in_$i361: i1, in_$i362: i32, in_$i363: i1, in_$p364: ref, in_$p365: ref, in_$i366: i64, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$p371: ref, in_$i373: i32, in_$i374: i1, in_$i375: i32, in_$i376: i1, in_$i377: i32, in_$i378: i1, in_$i380: i32, in_$i381: i1, in_$i382: i32, in_$i383: i1, in_$i384: i32, in_$i385: i1, in_vslice_dummy_var_44: i64, in_vslice_dummy_var_45: i64, in_vslice_dummy_var_46: i64, in_vslice_dummy_var_47: i64, in_vslice_dummy_var_48: i64, in_vslice_dummy_var_49: i64, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i64, in_vslice_dummy_var_52: i64, in_vslice_dummy_var_53: i64, in_vslice_dummy_var_54: i64, in_vslice_dummy_var_55: i64, in_vslice_dummy_var_56: i64, in_vslice_dummy_var_57: i64, in_vslice_dummy_var_58: i64, in_vslice_dummy_var_59: i64, in_vslice_dummy_var_60: i64, in_vslice_dummy_var_61: i64, in_vslice_dummy_var_62: i64, in_vslice_dummy_var_63: i64, in_vslice_dummy_var_64: i64, in_vslice_dummy_var_65: i64, in_vslice_dummy_var_66: i64, in_vslice_dummy_var_67: i64, in_vslice_dummy_var_68: i64, in_vslice_dummy_var_69: i64, in_vslice_dummy_var_70: i64, in_vslice_dummy_var_71: i64, in_vslice_dummy_var_72: i64, in_vslice_dummy_var_73: i64) returns (out_$i87: i32, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$i136: i64, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i64, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$p158: ref, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i1, out_$i164: i1, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i178: i32, out_$i179: i32, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$p191: ref, out_$i192: i64, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i1, out_$i220: i1, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$p225: ref, out_$i226: i64, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$p231: ref, out_$i233: i32, out_$i234: i1, out_$i235: i32, out_$i236: i1, out_$i237: i1, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$p242: ref, out_$i243: i64, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$p273: ref, out_$i274: i64, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$p279: ref, out_$i281: i32, out_$i282: i1, out_$i283: i32, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$p290: ref, out_$i291: i64, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$p296: ref, out_$i298: i32, out_$i299: i1, out_$i300: i32, out_$i301: i1, out_$i302: i1, out_$i303: i1, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$p307: ref, out_$i308: i64, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$p313: ref, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i1, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$p324: ref, out_$i325: i64, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$p330: ref, out_$i332: i32, out_$i333: i1, out_$i334: i32, out_$i335: i1, out_$i336: i1, out_$i337: i1, out_$i338: i32, out_$i339: i1, out_$p340: ref, out_$p341: ref, out_$i342: i64, out_$i344: i32, out_$i345: i1, out_$p346: ref, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$i351: i32, out_$i352: i1, out_$i353: i32, out_$i354: i1, out_$i356: i32, out_$i357: i1, out_$i358: i32, out_$i359: i1, out_$i360: i1, out_$i361: i1, out_$i362: i32, out_$i363: i1, out_$p364: ref, out_$p365: ref, out_$i366: i64, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$p371: ref, out_$i373: i32, out_$i374: i1, out_$i375: i32, out_$i376: i1, out_$i377: i32, out_$i378: i1, out_$i380: i32, out_$i381: i1, out_$i382: i32, out_$i383: i1, out_$i384: i32, out_$i385: i1, out_vslice_dummy_var_44: i64, out_vslice_dummy_var_45: i64, out_vslice_dummy_var_46: i64, out_vslice_dummy_var_47: i64, out_vslice_dummy_var_48: i64, out_vslice_dummy_var_49: i64, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i64, out_vslice_dummy_var_52: i64, out_vslice_dummy_var_53: i64, out_vslice_dummy_var_54: i64, out_vslice_dummy_var_55: i64, out_vslice_dummy_var_56: i64, out_vslice_dummy_var_57: i64, out_vslice_dummy_var_58: i64, out_vslice_dummy_var_59: i64, out_vslice_dummy_var_60: i64, out_vslice_dummy_var_61: i64, out_vslice_dummy_var_62: i64, out_vslice_dummy_var_63: i64, out_vslice_dummy_var_64: i64, out_vslice_dummy_var_65: i64, out_vslice_dummy_var_66: i64, out_vslice_dummy_var_67: i64, out_vslice_dummy_var_68: i64, out_vslice_dummy_var_69: i64, out_vslice_dummy_var_70: i64, out_vslice_dummy_var_71: i64, out_vslice_dummy_var_72: i64, out_vslice_dummy_var_73: i64)
{

  entry:
    out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$p118, out_$i119, out_$i121, out_$i122, out_$p123, out_$p124, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i138, out_$i139, out_$p140, out_$p141, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$p158, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$p197, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$i226, out_$i228, out_$i229, out_$p230, out_$p231, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$p242, out_$i243, out_$i245, out_$i246, out_$p247, out_$p248, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$i276, out_$i277, out_$p278, out_$p279, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i293, out_$i294, out_$p295, out_$p296, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$p307, out_$i308, out_$i310, out_$i311, out_$p312, out_$p313, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$p323, out_$p324, out_$i325, out_$i327, out_$i328, out_$p329, out_$p330, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$p340, out_$p341, out_$i342, out_$i344, out_$i345, out_$p346, out_$p347, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p365, out_$i366, out_$i368, out_$i369, out_$p370, out_$p371, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73 := in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$p117, in_$p118, in_$i119, in_$i121, in_$i122, in_$p123, in_$p124, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$p135, in_$i136, in_$i138, in_$i139, in_$p140, in_$p141, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$p151, in_$p152, in_$i153, in_$i155, in_$i156, in_$p157, in_$p158, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$p168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$p176, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$p190, in_$p191, in_$i192, in_$i194, in_$i195, in_$p196, in_$p197, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$p224, in_$p225, in_$i226, in_$i228, in_$i229, in_$p230, in_$p231, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$p241, in_$p242, in_$i243, in_$i245, in_$i246, in_$p247, in_$p248, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$p272, in_$p273, in_$i274, in_$i276, in_$i277, in_$p278, in_$p279, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$p289, in_$p290, in_$i291, in_$i293, in_$i294, in_$p295, in_$p296, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$p306, in_$p307, in_$i308, in_$i310, in_$i311, in_$p312, in_$p313, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$p323, in_$p324, in_$i325, in_$i327, in_$i328, in_$p329, in_$p330, in_$i332, in_$i333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$p340, in_$p341, in_$i342, in_$i344, in_$i345, in_$p346, in_$p347, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$i354, in_$i356, in_$i357, in_$i358, in_$i359, in_$i360, in_$i361, in_$i362, in_$i363, in_$p364, in_$p365, in_$i366, in_$i368, in_$i369, in_$p370, in_$p371, in_$i373, in_$i374, in_$i375, in_$i376, in_$i377, in_$i378, in_$i380, in_$i381, in_$i382, in_$i383, in_$i384, in_$i385, in_vslice_dummy_var_44, in_vslice_dummy_var_45, in_vslice_dummy_var_46, in_vslice_dummy_var_47, in_vslice_dummy_var_48, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52, in_vslice_dummy_var_53, in_vslice_dummy_var_54, in_vslice_dummy_var_55, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 838} out_$i87 := __VERIFIER_nondet_int();
    call {:si_unique_call 839} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i87);
    call {:si_unique_call 840} {:cexpr "tmp___39"} boogie_si_record_i32(out_$i87);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb66_dummy;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb47:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 845} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3109;

  SeqInstr_492:
    goto corral_source_split_3108;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} out_vslice_dummy_var_44 := bq2415x_sysfs_set_enable(out_$p117, out_$p118, in_$p13, out_$i119);
    goto SeqInstr_491;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i64($M.32, in_$p0);
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$p118 := $M.43;
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$p117 := $M.44;
    goto corral_source_split_3105;

  $bb56:
    assume out_$i116 == 1;
    goto corral_source_split_3104;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 1);
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$i115 := $M.58;
    goto corral_source_split_3101;

  $bb54:
    assume out_$i114 == 1;
    goto corral_source_split_3100;

  $bb49:
    assume out_$i112 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i111, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i111, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_3094:
    assume {:verifier.code 1} true;
    call {:si_unique_call 841} out_$i111 := __VERIFIER_nondet_int();
    call {:si_unique_call 842} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i111);
    call {:si_unique_call 843} {:cexpr "tmp___40"} boogie_si_record_i32(out_$i111);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i110 == 1;
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$i109 := $M.58;
    goto corral_source_split_3091;

  $bb44:
    assume out_$i108 == 1;
    goto corral_source_split_3090;

  $bb42:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i87, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb36:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i87, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb26:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i87, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb3:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i87, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i87, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb61:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3115;

  SeqInstr_495:
    goto corral_source_split_3114;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} out_vslice_dummy_var_45 := bq2415x_sysfs_show_enable(out_$p123, out_$p124, in_$p12);
    goto SeqInstr_494;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$p124 := $M.43;
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$p123 := $M.44;
    goto corral_source_split_3112;

  $bb60:
    assume out_$i122 == 1;
    goto corral_source_split_3111;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 1);
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$i121 := $M.58;
    goto corral_source_split_3097;

  $bb51:
    assume out_$i113 == 1;
    goto corral_source_split_3096;

  $bb50:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i111, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} ldv_stop();
    goto corral_source_split_3117;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i113 == 1);
    goto $bb53;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i114 == 1);
    goto $bb53;

  $bb68:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3134;

  SeqInstr_498:
    goto corral_source_split_3133;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} out_vslice_dummy_var_46 := bq2415x_sysfs_set_registers(out_$p134, out_$p135, in_$p15, out_$i136);
    goto SeqInstr_497;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i64($M.32, in_$p1);
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$p135 := $M.54;
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$p134 := $M.55;
    goto corral_source_split_3130;

  $bb77:
    assume out_$i133 == 1;
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 1);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i132 := $M.59;
    goto corral_source_split_3126;

  $bb75:
    assume out_$i131 == 1;
    goto corral_source_split_3125;

  $bb70:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i128, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i128, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_3119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 849} out_$i128 := __VERIFIER_nondet_int();
    call {:si_unique_call 850} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i128);
    call {:si_unique_call 851} {:cexpr "tmp___41"} boogie_si_record_i32(out_$i128);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume out_$i127 == 1;
    goto corral_source_split_3119;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$i126 := $M.59;
    goto corral_source_split_3087;

  $bb43:
    assume !(out_$i107 == 1);
    goto corral_source_split_3086;

  $bb82:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 855} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3140;

  SeqInstr_501:
    goto corral_source_split_3139;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} out_vslice_dummy_var_47 := bq2415x_sysfs_show_registers(out_$p140, out_$p141, in_$p14);
    goto SeqInstr_500;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$p141 := $M.54;
    goto corral_source_split_3138;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    out_$p140 := $M.55;
    goto corral_source_split_3137;

  $bb81:
    assume out_$i139 == 1;
    goto corral_source_split_3136;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 1);
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i138 := $M.59;
    goto corral_source_split_3122;

  $bb72:
    assume out_$i130 == 1;
    goto corral_source_split_3121;

  $bb71:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i128, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ldv_stop();
    goto corral_source_split_3142;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i130 == 1);
    goto $bb74;

  $bb76:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb74;

  $bb88:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb98:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 861} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_3159;

  SeqInstr_504:
    goto corral_source_split_3158;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} out_vslice_dummy_var_48 := bq2415x_sysfs_set_limit(out_$p151, out_$p152, in_$p16, out_$i153);
    goto SeqInstr_503;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i64($M.32, in_$p2);
    goto corral_source_split_3157;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$p152 := $M.37;
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$p151 := $M.38;
    goto corral_source_split_3155;

  $bb97:
    assume out_$i150 == 1;
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 1);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$i149 := $M.60;
    goto corral_source_split_3151;

  $bb95:
    assume out_$i148 == 1;
    goto corral_source_split_3150;

  $bb90:
    assume out_$i146 == 1;
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i145, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i145, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_3144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 857} out_$i145 := __VERIFIER_nondet_int();
    call {:si_unique_call 858} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i145);
    call {:si_unique_call 859} {:cexpr "tmp___42"} boogie_si_record_i32(out_$i145);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume out_$i144 == 1;
    goto corral_source_split_3144;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i32(out_$i143, 0);
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$i143 := $M.60;
    goto corral_source_split_3075;

  $bb38:
    assume out_$i105 == 1;
    goto corral_source_split_3074;

  $bb37:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i87, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb102:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 863} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_3165;

  SeqInstr_507:
    goto corral_source_split_3164;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} out_vslice_dummy_var_49 := bq2415x_sysfs_show_limit(out_$p157, out_$p158, in_$p17);
    goto SeqInstr_506;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$p158 := $M.37;
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$p157 := $M.38;
    goto corral_source_split_3162;

  $bb101:
    assume out_$i156 == 1;
    goto corral_source_split_3161;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 1);
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$i155 := $M.60;
    goto corral_source_split_3147;

  $bb92:
    assume out_$i147 == 1;
    goto corral_source_split_3146;

  $bb91:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i145, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} ldv_stop();
    goto corral_source_split_3167;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb93:
    assume {:verifier.code 0} true;
    assume !(out_$i147 == 1);
    goto $bb94;

  $bb96:
    assume {:verifier.code 0} true;
    assume !(out_$i148 == 1);
    goto $bb94;

  $bb108:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb118:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.64 := out_$i173;
    call {:si_unique_call 871} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    out_$i173 := $add.i32(out_$i172, 1);
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$i172 := $M.64;
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3187;

  $bb119:
    assume out_$i171 == 1;
    goto corral_source_split_3186;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 0);
    goto corral_source_split_3184;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$i170 := $M.79;
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.79 := out_$i169;
    call {:si_unique_call 869} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_3182;

  SeqInstr_510:
    goto corral_source_split_3181;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} out_$i169 := bq2415x_probe(out_$p168, in_$p19);
    goto SeqInstr_509;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$p168 := $M.51;
    goto corral_source_split_3180;

  $bb117:
    assume out_$i167 == 1;
    goto corral_source_split_3179;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 1);
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$i166 := $M.61;
    goto corral_source_split_3176;

  $bb115:
    assume out_$i165 == 1;
    goto corral_source_split_3175;

  $bb110:
    assume out_$i163 == 1;
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i162, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i163 := $slt.i32(out_$i162, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_3169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 865} out_$i162 := __VERIFIER_nondet_int();
    call {:si_unique_call 866} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i162);
    call {:si_unique_call 867} {:cexpr "tmp___43"} boogie_si_record_i32(out_$i162);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb107:
    assume out_$i161 == 1;
    goto corral_source_split_3169;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i161 := $ne.i32(out_$i160, 0);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$i160 := $M.61;
    goto corral_source_split_3079;

  $bb40:
    assume out_$i106 == 1;
    goto corral_source_split_3078;

  $bb39:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i87, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb125:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.64 := out_$i179;
    call {:si_unique_call 874} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i179);
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$i179 := $sub.i32(out_$i178, 1);
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$i178 := $M.64;
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3195;

  SeqInstr_513:
    goto corral_source_split_3194;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} out_vslice_dummy_var_50 := bq2415x_remove(out_$p176);
    goto SeqInstr_512;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$p176 := $M.51;
    goto corral_source_split_3193;

  $bb124:
    assume out_$i175 == 1;
    goto corral_source_split_3192;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 2);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$i174 := $M.61;
    goto corral_source_split_3172;

  $bb112:
    assume out_$i164 == 1;
    goto corral_source_split_3171;

  $bb111:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i162, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} ldv_stop();
    goto corral_source_split_3200;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb113:
    assume {:verifier.code 0} true;
    assume !(out_$i164 == 1);
    goto $bb114;

  $bb116:
    assume {:verifier.code 0} true;
    assume !(out_$i165 == 1);
    goto $bb114;

  $bb131:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    goto $bb132;

  SeqInstr_516:
    goto corral_source_split_3203;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} invoke_work_1();
    goto SeqInstr_515;

  $bb130:
    assume out_$i181 == 1;
    goto corral_source_split_3202;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$i181 := $ne.i32(out_$i180, 0);
    goto corral_source_split_3084;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    out_$i180 := $M.62;
    goto corral_source_split_3083;

  $bb41:
    assume !(out_$i106 == 1);
    goto corral_source_split_3082;

  $bb134:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb144:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3220;

  SeqInstr_519:
    goto corral_source_split_3219;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} out_vslice_dummy_var_51 := bq2415x_sysfs_set_limit(out_$p190, out_$p191, in_$p21, out_$i192);
    goto SeqInstr_518;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$i192 := $load.i64($M.32, in_$p3);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$p191 := $M.56;
    goto corral_source_split_3217;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$p190 := $M.57;
    goto corral_source_split_3216;

  $bb143:
    assume out_$i189 == 1;
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 1);
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i188 := $M.63;
    goto corral_source_split_3212;

  $bb141:
    assume out_$i187 == 1;
    goto corral_source_split_3211;

  $bb136:
    assume out_$i185 == 1;
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i184, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i185 := $slt.i32(out_$i184, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_3205:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} out_$i184 := __VERIFIER_nondet_int();
    call {:si_unique_call 878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i184);
    call {:si_unique_call 879} {:cexpr "tmp___44"} boogie_si_record_i32(out_$i184);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb133:
    assume out_$i183 == 1;
    goto corral_source_split_3205;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$i183 := $ne.i32(out_$i182, 0);
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    out_$i182 := $M.63;
    goto corral_source_split_3067;

  $bb34:
    assume out_$i103 == 1;
    goto corral_source_split_3066;

  $bb28:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i87, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb27:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i87, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb148:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3226;

  SeqInstr_522:
    goto corral_source_split_3225;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} out_vslice_dummy_var_52 := bq2415x_sysfs_show_limit(out_$p196, out_$p197, in_$p20);
    goto SeqInstr_521;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$p197 := $M.56;
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$p196 := $M.57;
    goto corral_source_split_3223;

  $bb147:
    assume out_$i195 == 1;
    goto corral_source_split_3222;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 1);
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$i194 := $M.63;
    goto corral_source_split_3208;

  $bb138:
    assume out_$i186 == 1;
    goto corral_source_split_3207;

  $bb137:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i184, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} ldv_stop();
    goto corral_source_split_3228;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb139:
    assume {:verifier.code 0} true;
    assume !(out_$i186 == 1);
    goto $bb140;

  $bb142:
    assume {:verifier.code 0} true;
    assume !(out_$i187 == 1);
    goto $bb140;

  $bb154:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb164:
    assume {:verifier.code 0} true;
    assume !(out_$i206 == 1);
    goto $bb165;

  $bb167:
    assume {:verifier.code 0} true;
    assume !(out_$i208 == 1);
    goto $bb165;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 0);
    goto corral_source_split_3242;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    out_$i207 := $M.64;
    goto corral_source_split_3241;

  $bb163:
    assume out_$i206 == 1;
    goto corral_source_split_3240;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 3);
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    out_$i205 := $M.65;
    goto corral_source_split_3237;

  $bb161:
    assume out_$i204 == 1;
    goto corral_source_split_3236;

  $bb156:
    assume out_$i202 == 1;
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i201, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb155:
    assume {:verifier.code 0} true;
    out_$i202 := $slt.i32(out_$i201, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_3230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 885} out_$i201 := __VERIFIER_nondet_int();
    call {:si_unique_call 886} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i201);
    call {:si_unique_call 887} {:cexpr "tmp___45"} boogie_si_record_i32(out_$i201);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb153:
    assume out_$i200 == 1;
    goto corral_source_split_3230;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    out_$i200 := $ne.i32(out_$i199, 0);
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    out_$i199 := $M.65;
    goto corral_source_split_3071;

  $bb35:
    assume !(out_$i103 == 1);
    goto corral_source_split_3070;

  $bb172:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb177:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i215 := $ne.i32(out_$i214, 0);
    goto corral_source_split_3291;

  $bb175:
    assume {:verifier.code 0} true;
    out_$i214 := $M.80;
    goto corral_source_split_3290;

  $bb174:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} ldv_initialize_device_attribute_11();
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ldv_initialize_device_attribute_7();
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ldv_initialize_device_attribute_17();
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} ldv_initialize_i2c_driver_2();
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} ldv_initialize_device_attribute_18();
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ldv_initialize_device_attribute_16();
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ldv_initialize_device_attribute_13();
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 910} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ldv_initialize_device_attribute_9();
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} ldv_initialize_device_attribute_12();
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 905} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv_initialize_device_attribute_14();
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_initialize_device_attribute_15();
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ldv_initialize_device_attribute_8();
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 899} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 898} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3262;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} ldv_initialize_device_attribute_19();
    goto corral_source_split_3261;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 896} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3260;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3259;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 894} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3258;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3257;

  $bb173:
    assume out_$i213 == 1;
    goto corral_source_split_3256;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 0);
    goto corral_source_split_3254;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i212 := $M.80;
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $M.80 := out_$i211;
    call {:si_unique_call 892} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i211);
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} out_$i211 := bq2415x_driver_init();
    goto corral_source_split_3251;

  $bb171:
    assume out_$i210 == 1;
    goto corral_source_split_3250;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 1);
    goto corral_source_split_3234;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i209 := $M.65;
    goto corral_source_split_3233;

  $bb158:
    assume out_$i203 == 1;
    goto corral_source_split_3232;

  $bb157:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i201, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} ldv_stop();
    goto corral_source_split_3296;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb159:
    assume {:verifier.code 0} true;
    assume !(out_$i203 == 1);
    goto $bb160;

  $bb162:
    assume {:verifier.code 0} true;
    assume !(out_$i204 == 1);
    goto $bb160;

  $bb184:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb194:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_3313;

  SeqInstr_528:
    goto corral_source_split_3312;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} out_vslice_dummy_var_53 := bq2415x_sysfs_set_limit(out_$p224, out_$p225, in_$p23, out_$i226);
    goto SeqInstr_527;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i64($M.32, in_$p4);
    goto corral_source_split_3311;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$p225 := $M.41;
    goto corral_source_split_3310;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    out_$p224 := $M.42;
    goto corral_source_split_3309;

  $bb193:
    assume out_$i223 == 1;
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 1);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$i222 := $M.66;
    goto corral_source_split_3305;

  $bb191:
    assume out_$i221 == 1;
    goto corral_source_split_3304;

  $bb186:
    assume out_$i219 == 1;
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i218, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb185:
    assume {:verifier.code 0} true;
    out_$i219 := $slt.i32(out_$i218, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_3298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} out_$i218 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i218);
    call {:si_unique_call 929} {:cexpr "tmp___46"} boogie_si_record_i32(out_$i218);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb183:
    assume out_$i217 == 1;
    goto corral_source_split_3298;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    out_$i217 := $ne.i32(out_$i216, 0);
    goto corral_source_split_3056;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$i216 := $M.66;
    goto corral_source_split_3055;

  $bb30:
    assume out_$i101 == 1;
    goto corral_source_split_3054;

  $bb29:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i87, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb198:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_3319;

  SeqInstr_531:
    goto corral_source_split_3318;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} out_vslice_dummy_var_54 := bq2415x_sysfs_show_limit(out_$p230, out_$p231, in_$p22);
    goto SeqInstr_530;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$p231 := $M.41;
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$p230 := $M.42;
    goto corral_source_split_3316;

  $bb197:
    assume out_$i229 == 1;
    goto corral_source_split_3315;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i228, 1);
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i228 := $M.66;
    goto corral_source_split_3301;

  $bb188:
    assume out_$i220 == 1;
    goto corral_source_split_3300;

  $bb187:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i218, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_stop();
    goto corral_source_split_3321;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb189:
    assume {:verifier.code 0} true;
    assume !(out_$i220 == 1);
    goto $bb190;

  $bb192:
    assume {:verifier.code 0} true;
    assume !(out_$i221 == 1);
    goto $bb190;

  $bb204:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb214:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_3338;

  SeqInstr_534:
    goto corral_source_split_3337;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} out_vslice_dummy_var_55 := bq2415x_sysfs_set_enable(out_$p241, out_$p242, in_$p24, out_$i243);
    goto SeqInstr_533;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$i243 := $load.i64($M.32, in_$p5);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$p242 := $M.35;
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$p241 := $M.36;
    goto corral_source_split_3334;

  $bb213:
    assume out_$i240 == 1;
    goto corral_source_split_3333;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 1);
    goto corral_source_split_3331;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$i239 := $M.67;
    goto corral_source_split_3330;

  $bb211:
    assume out_$i238 == 1;
    goto corral_source_split_3329;

  $bb206:
    assume out_$i236 == 1;
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i235, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb205:
    assume {:verifier.code 0} true;
    out_$i236 := $slt.i32(out_$i235, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_3323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 935} out_$i235 := __VERIFIER_nondet_int();
    call {:si_unique_call 936} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i235);
    call {:si_unique_call 937} {:cexpr "tmp___47"} boogie_si_record_i32(out_$i235);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb203:
    assume out_$i234 == 1;
    goto corral_source_split_3323;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$i234 := $ne.i32(out_$i233, 0);
    goto corral_source_split_3060;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    out_$i233 := $M.67;
    goto corral_source_split_3059;

  $bb32:
    assume out_$i102 == 1;
    goto corral_source_split_3058;

  $bb31:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i87, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb218:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_3344;

  SeqInstr_537:
    goto corral_source_split_3343;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} out_vslice_dummy_var_56 := bq2415x_sysfs_show_enable(out_$p247, out_$p248, in_$p25);
    goto SeqInstr_536;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$p248 := $M.35;
    goto corral_source_split_3342;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$p247 := $M.36;
    goto corral_source_split_3341;

  $bb217:
    assume out_$i246 == 1;
    goto corral_source_split_3340;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 1);
    goto corral_source_split_3327;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i245 := $M.67;
    goto corral_source_split_3326;

  $bb208:
    assume out_$i237 == 1;
    goto corral_source_split_3325;

  $bb207:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i235, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} ldv_stop();
    goto corral_source_split_3346;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb209:
    assume {:verifier.code 0} true;
    assume !(out_$i237 == 1);
    goto $bb210;

  $bb212:
    assume {:verifier.code 0} true;
    assume !(out_$i238 == 1);
    goto $bb210;

  $bb224:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb229:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3356;

  SeqInstr_540:
    goto corral_source_split_3355;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} out_vslice_dummy_var_57 := bq2415x_sysfs_show_status(in_$p30, in_$p27, in_$p28);
    goto SeqInstr_539;

  $bb228:
    assume out_$i255 == 1;
    goto corral_source_split_3354;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 1);
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    out_$i254 := $M.68;
    goto corral_source_split_3351;

  $bb226:
    assume out_$i253 == 1;
    goto corral_source_split_3350;

  $bb225:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_3348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} out_$i252 := __VERIFIER_nondet_int();
    call {:si_unique_call 944} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i252);
    call {:si_unique_call 945} {:cexpr "tmp___48"} boogie_si_record_i32(out_$i252);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb223:
    assume out_$i251 == 1;
    goto corral_source_split_3348;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$i251 := $ne.i32(out_$i250, 0);
    goto corral_source_split_3064;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$i250 := $M.68;
    goto corral_source_split_3063;

  $bb33:
    assume !(out_$i102 == 1);
    goto corral_source_split_3062;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} ldv_stop();
    goto corral_source_split_3358;

  $bb227:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb236:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb241:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3368;

  SeqInstr_543:
    goto corral_source_split_3367;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} out_vslice_dummy_var_58 := bq2415x_sysfs_show_status(in_$p35, in_$p32, in_$p33);
    goto SeqInstr_542;

  $bb240:
    assume out_$i262 == 1;
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 1);
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    out_$i261 := $M.69;
    goto corral_source_split_3363;

  $bb238:
    assume out_$i260 == 1;
    goto corral_source_split_3362;

  $bb237:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_3360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 949} out_$i259 := __VERIFIER_nondet_int();
    call {:si_unique_call 950} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i259);
    call {:si_unique_call 951} {:cexpr "tmp___49"} boogie_si_record_i32(out_$i259);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb235:
    assume out_$i258 == 1;
    goto corral_source_split_3360;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$i258 := $ne.i32(out_$i257, 0);
    goto corral_source_split_3048;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$i257 := $M.69;
    goto corral_source_split_3047;

  $bb24:
    assume out_$i98 == 1;
    goto corral_source_split_3046;

  $bb18:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i87, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb5:
    assume out_$i89 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i87, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb4:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i87, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} ldv_stop();
    goto corral_source_split_3370;

  $bb239:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb248:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb258:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3387;

  SeqInstr_546:
    goto corral_source_split_3386;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_vslice_dummy_var_59 := bq2415x_sysfs_set_mode(out_$p272, out_$p273, in_$p36, out_$i274);
    goto SeqInstr_545;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i64($M.32, in_$p6);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$p273 := $M.47;
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$p272 := $M.48;
    goto corral_source_split_3383;

  $bb257:
    assume out_$i271 == 1;
    goto corral_source_split_3382;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 1);
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$i270 := $M.70;
    goto corral_source_split_3379;

  $bb255:
    assume out_$i269 == 1;
    goto corral_source_split_3378;

  $bb250:
    assume out_$i267 == 1;
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i266, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb249:
    assume {:verifier.code 0} true;
    out_$i267 := $slt.i32(out_$i266, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_3372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 955} out_$i266 := __VERIFIER_nondet_int();
    call {:si_unique_call 956} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i266);
    call {:si_unique_call 957} {:cexpr "tmp___50"} boogie_si_record_i32(out_$i266);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb247:
    assume out_$i265 == 1;
    goto corral_source_split_3372;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    out_$i265 := $ne.i32(out_$i264, 0);
    goto corral_source_split_3052;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$i264 := $M.70;
    goto corral_source_split_3051;

  $bb25:
    assume !(out_$i98 == 1);
    goto corral_source_split_3050;

  $bb262:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} out_vslice_dummy_var_60 := bq2415x_sysfs_show_mode(out_$p278, out_$p279, in_$p37);
    goto corral_source_split_3392;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$p279 := $M.47;
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$p278 := $M.48;
    goto corral_source_split_3390;

  $bb261:
    assume out_$i277 == 1;
    goto corral_source_split_3389;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i276, 1);
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    out_$i276 := $M.70;
    goto corral_source_split_3375;

  $bb252:
    assume out_$i268 == 1;
    goto corral_source_split_3374;

  $bb251:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i266, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} ldv_stop();
    goto corral_source_split_3395;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb253:
    assume {:verifier.code 0} true;
    assume !(out_$i268 == 1);
    goto $bb254;

  $bb256:
    assume {:verifier.code 0} true;
    assume !(out_$i269 == 1);
    goto $bb254;

  $bb268:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb278:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_3412;

  SeqInstr_549:
    goto corral_source_split_3411;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} out_vslice_dummy_var_61 := bq2415x_sysfs_set_enable(out_$p289, out_$p290, in_$p39, out_$i291);
    goto SeqInstr_548;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    out_$i291 := $load.i64($M.32, in_$p7);
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$p290 := $M.33;
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$p289 := $M.34;
    goto corral_source_split_3408;

  $bb277:
    assume out_$i288 == 1;
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 1);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$i287 := $M.71;
    goto corral_source_split_3404;

  $bb275:
    assume out_$i286 == 1;
    goto corral_source_split_3403;

  $bb270:
    assume out_$i284 == 1;
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i283, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb269:
    assume {:verifier.code 0} true;
    out_$i284 := $slt.i32(out_$i283, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  corral_source_split_3397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 963} out_$i283 := __VERIFIER_nondet_int();
    call {:si_unique_call 964} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i283);
    call {:si_unique_call 965} {:cexpr "tmp___51"} boogie_si_record_i32(out_$i283);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb267:
    assume out_$i282 == 1;
    goto corral_source_split_3397;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i282 := $ne.i32(out_$i281, 0);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$i281 := $M.71;
    goto corral_source_split_3035;

  $bb20:
    assume out_$i96 == 1;
    goto corral_source_split_3034;

  $bb19:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i87, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb282:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_3418;

  SeqInstr_552:
    goto corral_source_split_3417;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} out_vslice_dummy_var_62 := bq2415x_sysfs_show_enable(out_$p295, out_$p296, in_$p38);
    goto SeqInstr_551;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    out_$p296 := $M.33;
    goto corral_source_split_3416;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$p295 := $M.34;
    goto corral_source_split_3415;

  $bb281:
    assume out_$i294 == 1;
    goto corral_source_split_3414;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 1);
    goto corral_source_split_3401;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    out_$i293 := $M.71;
    goto corral_source_split_3400;

  $bb272:
    assume out_$i285 == 1;
    goto corral_source_split_3399;

  $bb271:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i283, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ldv_stop();
    goto corral_source_split_3420;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb273:
    assume {:verifier.code 0} true;
    assume !(out_$i285 == 1);
    goto $bb274;

  $bb276:
    assume {:verifier.code 0} true;
    assume !(out_$i286 == 1);
    goto $bb274;

  $bb288:
    assume !(out_$i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb298:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    goto $bb299;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_3437;

  SeqInstr_555:
    goto corral_source_split_3436;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} out_vslice_dummy_var_63 := bq2415x_sysfs_set_enable(out_$p306, out_$p307, in_$p41, out_$i308);
    goto SeqInstr_554;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i64($M.32, in_$p8);
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    out_$p307 := $M.39;
    goto corral_source_split_3434;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$p306 := $M.40;
    goto corral_source_split_3433;

  $bb297:
    assume out_$i305 == 1;
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 1);
    goto corral_source_split_3430;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    out_$i304 := $M.72;
    goto corral_source_split_3429;

  $bb295:
    assume out_$i303 == 1;
    goto corral_source_split_3428;

  $bb290:
    assume out_$i301 == 1;
    assume {:verifier.code 0} true;
    out_$i303 := $eq.i32(out_$i300, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb289:
    assume {:verifier.code 0} true;
    out_$i301 := $slt.i32(out_$i300, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_3422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 971} out_$i300 := __VERIFIER_nondet_int();
    call {:si_unique_call 972} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i300);
    call {:si_unique_call 973} {:cexpr "tmp___52"} boogie_si_record_i32(out_$i300);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb287:
    assume out_$i299 == 1;
    goto corral_source_split_3422;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$i299 := $ne.i32(out_$i298, 0);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i298 := $M.72;
    goto corral_source_split_3039;

  $bb22:
    assume out_$i97 == 1;
    goto corral_source_split_3038;

  $bb21:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i87, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb302:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_3443;

  SeqInstr_558:
    goto corral_source_split_3442;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} out_vslice_dummy_var_64 := bq2415x_sysfs_show_enable(out_$p312, out_$p313, in_$p40);
    goto SeqInstr_557;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$p313 := $M.39;
    goto corral_source_split_3441;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$p312 := $M.40;
    goto corral_source_split_3440;

  $bb301:
    assume out_$i311 == 1;
    goto corral_source_split_3439;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 1);
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$i310 := $M.72;
    goto corral_source_split_3425;

  $bb292:
    assume out_$i302 == 1;
    goto corral_source_split_3424;

  $bb291:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i300, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} ldv_stop();
    goto corral_source_split_3445;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb293:
    assume {:verifier.code 0} true;
    assume !(out_$i302 == 1);
    goto $bb294;

  $bb296:
    assume {:verifier.code 0} true;
    assume !(out_$i303 == 1);
    goto $bb294;

  $bb308:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb318:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_3462;

  SeqInstr_561:
    goto corral_source_split_3461;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} out_vslice_dummy_var_65 := bq2415x_sysfs_set_limit(out_$p323, out_$p324, in_$p42, out_$i325);
    goto SeqInstr_560;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i325 := $load.i64($M.32, in_$p9);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$p324 := $M.49;
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    out_$p323 := $M.50;
    goto corral_source_split_3458;

  $bb317:
    assume out_$i322 == 1;
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 1);
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    out_$i321 := $M.73;
    goto corral_source_split_3454;

  $bb315:
    assume out_$i320 == 1;
    goto corral_source_split_3453;

  $bb310:
    assume out_$i318 == 1;
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i317, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb309:
    assume {:verifier.code 0} true;
    out_$i318 := $slt.i32(out_$i317, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_3447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 979} out_$i317 := __VERIFIER_nondet_int();
    call {:si_unique_call 980} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i317);
    call {:si_unique_call 981} {:cexpr "tmp___53"} boogie_si_record_i32(out_$i317);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb307:
    assume out_$i316 == 1;
    goto corral_source_split_3447;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$i316 := $ne.i32(out_$i315, 0);
    goto corral_source_split_3044;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i315 := $M.73;
    goto corral_source_split_3043;

  $bb23:
    assume !(out_$i97 == 1);
    goto corral_source_split_3042;

  $bb322:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_3468;

  SeqInstr_564:
    goto corral_source_split_3467;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} out_vslice_dummy_var_66 := bq2415x_sysfs_show_limit(out_$p329, out_$p330, in_$p43);
    goto SeqInstr_563;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$p330 := $M.49;
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$p329 := $M.50;
    goto corral_source_split_3465;

  $bb321:
    assume out_$i328 == 1;
    goto corral_source_split_3464;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i327, 1);
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$i327 := $M.73;
    goto corral_source_split_3450;

  $bb312:
    assume out_$i319 == 1;
    goto corral_source_split_3449;

  $bb311:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    out_$i319 := $eq.i32(out_$i317, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_stop();
    goto corral_source_split_3470;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb313:
    assume {:verifier.code 0} true;
    assume !(out_$i319 == 1);
    goto $bb314;

  $bb316:
    assume {:verifier.code 0} true;
    assume !(out_$i320 == 1);
    goto $bb314;

  $bb328:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb338:
    assume !(out_$i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3487;

  SeqInstr_567:
    goto corral_source_split_3486;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} out_vslice_dummy_var_67 := bq2415x_sysfs_set_timer(out_$p340, out_$p341, in_$p44, out_$i342);
    goto SeqInstr_566;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$i342 := $load.i64($M.32, in_$p10);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$p341 := $M.52;
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$p340 := $M.53;
    goto corral_source_split_3483;

  $bb337:
    assume out_$i339 == 1;
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$i339 := $eq.i32(out_$i338, 1);
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    out_$i338 := $M.74;
    goto corral_source_split_3479;

  $bb335:
    assume out_$i337 == 1;
    goto corral_source_split_3478;

  $bb330:
    assume out_$i335 == 1;
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i334, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb329:
    assume {:verifier.code 0} true;
    out_$i335 := $slt.i32(out_$i334, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  corral_source_split_3472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 987} out_$i334 := __VERIFIER_nondet_int();
    call {:si_unique_call 988} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i334);
    call {:si_unique_call 989} {:cexpr "tmp___54"} boogie_si_record_i32(out_$i334);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb327:
    assume out_$i333 == 1;
    goto corral_source_split_3472;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    out_$i333 := $ne.i32(out_$i332, 0);
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_$i332 := $M.74;
    goto corral_source_split_3027;

  $bb16:
    assume out_$i94 == 1;
    goto corral_source_split_3026;

  $bb7:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i87, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb6:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i87, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb342:
    assume !(out_$i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 993} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} out_vslice_dummy_var_68 := bq2415x_sysfs_show_timer(out_$p346, out_$p347, in_$p45);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$p347 := $M.52;
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    out_$p346 := $M.53;
    goto corral_source_split_3490;

  $bb341:
    assume out_$i345 == 1;
    goto corral_source_split_3489;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$i345 := $eq.i32(out_$i344, 1);
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i344 := $M.74;
    goto corral_source_split_3475;

  $bb332:
    assume out_$i336 == 1;
    goto corral_source_split_3474;

  $bb331:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    out_$i336 := $eq.i32(out_$i334, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} ldv_stop();
    goto corral_source_split_3495;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb333:
    assume {:verifier.code 0} true;
    assume !(out_$i336 == 1);
    goto $bb334;

  $bb336:
    assume {:verifier.code 0} true;
    assume !(out_$i337 == 1);
    goto $bb334;

  $bb348:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb353:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 999} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3505;

  SeqInstr_570:
    goto corral_source_split_3504;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} out_vslice_dummy_var_69 := bq2415x_sysfs_show_status(in_$p50, in_$p48, in_$p46);
    goto SeqInstr_569;

  $bb352:
    assume out_$i354 == 1;
    goto corral_source_split_3503;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 1);
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    out_$i353 := $M.75;
    goto corral_source_split_3500;

  $bb350:
    assume out_$i352 == 1;
    goto corral_source_split_3499;

  $bb349:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_3497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 995} out_$i351 := __VERIFIER_nondet_int();
    call {:si_unique_call 996} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i351);
    call {:si_unique_call 997} {:cexpr "tmp___55"} boogie_si_record_i32(out_$i351);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb347:
    assume out_$i350 == 1;
    goto corral_source_split_3497;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$i350 := $ne.i32(out_$i349, 0);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$i349 := $M.75;
    goto corral_source_split_3031;

  $bb17:
    assume !(out_$i94 == 1);
    goto corral_source_split_3030;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} ldv_stop();
    goto corral_source_split_3507;

  $bb351:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb360:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb370:
    assume !(out_$i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    goto $bb371;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3524;

  SeqInstr_573:
    goto corral_source_split_3523;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} out_vslice_dummy_var_70 := bq2415x_sysfs_set_limit(out_$p364, out_$p365, in_$p51, out_$i366);
    goto SeqInstr_572;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    out_$i366 := $load.i64($M.32, in_$p11);
    goto corral_source_split_3522;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    out_$p365 := $M.45;
    goto corral_source_split_3521;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    out_$p364 := $M.46;
    goto corral_source_split_3520;

  $bb369:
    assume out_$i363 == 1;
    goto corral_source_split_3519;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i362, 1);
    goto corral_source_split_3517;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    out_$i362 := $M.76;
    goto corral_source_split_3516;

  $bb367:
    assume out_$i361 == 1;
    goto corral_source_split_3515;

  $bb362:
    assume out_$i359 == 1;
    assume {:verifier.code 0} true;
    out_$i361 := $eq.i32(out_$i358, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb361:
    assume {:verifier.code 0} true;
    out_$i359 := $slt.i32(out_$i358, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  corral_source_split_3509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1001} out_$i358 := __VERIFIER_nondet_int();
    call {:si_unique_call 1002} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i358);
    call {:si_unique_call 1003} {:cexpr "tmp___56"} boogie_si_record_i32(out_$i358);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb359:
    assume out_$i357 == 1;
    goto corral_source_split_3509;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$i357 := $ne.i32(out_$i356, 0);
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    out_$i356 := $M.76;
    goto corral_source_split_3015;

  $bb9:
    assume out_$i91 == 1;
    goto corral_source_split_3014;

  $bb8:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i87, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb374:
    assume !(out_$i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3530;

  SeqInstr_576:
    goto corral_source_split_3529;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} out_vslice_dummy_var_71 := bq2415x_sysfs_show_limit(out_$p370, out_$p371, in_$p52);
    goto SeqInstr_575;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    out_$p371 := $M.45;
    goto corral_source_split_3528;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    out_$p370 := $M.46;
    goto corral_source_split_3527;

  $bb373:
    assume out_$i369 == 1;
    goto corral_source_split_3526;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 1);
    goto corral_source_split_3513;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$i368 := $M.76;
    goto corral_source_split_3512;

  $bb364:
    assume out_$i360 == 1;
    goto corral_source_split_3511;

  $bb363:
    assume !(out_$i359 == 1);
    assume {:verifier.code 0} true;
    out_$i360 := $eq.i32(out_$i358, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} ldv_stop();
    goto corral_source_split_3532;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb365:
    assume {:verifier.code 0} true;
    assume !(out_$i360 == 1);
    goto $bb366;

  $bb368:
    assume {:verifier.code 0} true;
    assume !(out_$i361 == 1);
    goto $bb366;

  $bb380:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb385:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1013} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3542;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} out_vslice_dummy_var_72 := bq2415x_sysfs_show_reported_mode(in_$p57, in_$p54, in_$p55);
    goto corral_source_split_3541;

  $bb384:
    assume out_$i378 == 1;
    goto corral_source_split_3540;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    out_$i378 := $eq.i32(out_$i377, 1);
    goto corral_source_split_3538;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    out_$i377 := $M.77;
    goto corral_source_split_3537;

  $bb382:
    assume out_$i376 == 1;
    goto corral_source_split_3536;

  $bb381:
    assume {:verifier.code 0} true;
    out_$i376 := $eq.i32(out_$i375, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_3534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1009} out_$i375 := __VERIFIER_nondet_int();
    call {:si_unique_call 1010} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i375);
    call {:si_unique_call 1011} {:cexpr "tmp___57"} boogie_si_record_i32(out_$i375);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb379:
    assume out_$i374 == 1;
    goto corral_source_split_3534;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i374 := $ne.i32(out_$i373, 0);
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$i373 := $M.77;
    goto corral_source_split_3019;

  $bb11:
    assume out_$i92 == 1;
    goto corral_source_split_3018;

  $bb10:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i87, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ldv_stop();
    goto corral_source_split_3544;

  $bb383:
    assume !(out_$i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb392:
    assume !(out_$i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb397:
    assume !(out_$i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1019} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3554;

  SeqInstr_579:
    goto corral_source_split_3553;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} out_vslice_dummy_var_73 := bq2415x_sysfs_show_status(in_$p61, in_$p59, in_$p62);
    goto SeqInstr_578;

  $bb396:
    assume out_$i385 == 1;
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i384, 1);
    goto corral_source_split_3550;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    out_$i384 := $M.78;
    goto corral_source_split_3549;

  $bb394:
    assume out_$i383 == 1;
    goto corral_source_split_3548;

  $bb393:
    assume {:verifier.code 0} true;
    out_$i383 := $eq.i32(out_$i382, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  corral_source_split_3546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1015} out_$i382 := __VERIFIER_nondet_int();
    call {:si_unique_call 1016} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i382);
    call {:si_unique_call 1017} {:cexpr "tmp___58"} boogie_si_record_i32(out_$i382);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb391:
    assume out_$i381 == 1;
    goto corral_source_split_3546;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    out_$i381 := $ne.i32(out_$i380, 0);
    goto corral_source_split_3024;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$i380 := $M.78;
    goto corral_source_split_3023;

  $bb13:
    assume out_$i93 == 1;
    goto corral_source_split_3022;

  $bb12:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i87, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} ldv_stop();
    goto corral_source_split_3556;

  $bb395:
    assume !(out_$i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} ldv_stop();
    goto corral_source_split_3558;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i93 == 1);
    goto $bb15;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i108 == 1);
    goto $bb15;

  $bb66_dummy:
    call {:si_unique_call 1} out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$p118, out_$i119, out_$i121, out_$i122, out_$p123, out_$p124, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i138, out_$i139, out_$p140, out_$p141, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$p158, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$p197, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$i226, out_$i228, out_$i229, out_$p230, out_$p231, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$p242, out_$i243, out_$i245, out_$i246, out_$p247, out_$p248, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$i276, out_$i277, out_$p278, out_$p279, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i293, out_$i294, out_$p295, out_$p296, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$p307, out_$i308, out_$i310, out_$i311, out_$p312, out_$p313, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$p323, out_$p324, out_$i325, out_$i327, out_$i328, out_$p329, out_$p330, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$p340, out_$p341, out_$i342, out_$i344, out_$i345, out_$p346, out_$p347, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p365, out_$i366, out_$i368, out_$i369, out_$p370, out_$p371, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p27, in_$p28, in_$p30, in_$p32, in_$p33, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p48, in_$p50, in_$p51, in_$p52, in_$p54, in_$p55, in_$p57, in_$p59, in_$p61, in_$p62, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$p118, out_$i119, out_$i121, out_$i122, out_$p123, out_$p124, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i138, out_$i139, out_$p140, out_$p141, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$p158, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$p197, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$i226, out_$i228, out_$i229, out_$p230, out_$p231, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$p242, out_$i243, out_$i245, out_$i246, out_$p247, out_$p248, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$i276, out_$i277, out_$p278, out_$p279, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i293, out_$i294, out_$p295, out_$p296, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$p307, out_$i308, out_$i310, out_$i311, out_$p312, out_$p313, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$p323, out_$p324, out_$i325, out_$i327, out_$i328, out_$p329, out_$p330, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$p340, out_$p341, out_$i342, out_$i344, out_$i345, out_$p346, out_$p347, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p365, out_$i366, out_$i368, out_$i369, out_$p370, out_$p371, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$p57: ref, in_$p59: ref, in_$p61: ref, in_$p62: ref, in_$i87: i32, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$i136: i64, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i64, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$p158: ref, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i1, in_$i164: i1, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i178: i32, in_$i179: i32, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$p191: ref, in_$i192: i64, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i1, in_$i220: i1, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$p225: ref, in_$i226: i64, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$p231: ref, in_$i233: i32, in_$i234: i1, in_$i235: i32, in_$i236: i1, in_$i237: i1, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$p242: ref, in_$i243: i64, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$p273: ref, in_$i274: i64, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$p279: ref, in_$i281: i32, in_$i282: i1, in_$i283: i32, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$p290: ref, in_$i291: i64, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$p296: ref, in_$i298: i32, in_$i299: i1, in_$i300: i32, in_$i301: i1, in_$i302: i1, in_$i303: i1, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$p307: ref, in_$i308: i64, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$p313: ref, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i1, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$p324: ref, in_$i325: i64, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$p330: ref, in_$i332: i32, in_$i333: i1, in_$i334: i32, in_$i335: i1, in_$i336: i1, in_$i337: i1, in_$i338: i32, in_$i339: i1, in_$p340: ref, in_$p341: ref, in_$i342: i64, in_$i344: i32, in_$i345: i1, in_$p346: ref, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$i351: i32, in_$i352: i1, in_$i353: i32, in_$i354: i1, in_$i356: i32, in_$i357: i1, in_$i358: i32, in_$i359: i1, in_$i360: i1, in_$i361: i1, in_$i362: i32, in_$i363: i1, in_$p364: ref, in_$p365: ref, in_$i366: i64, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$p371: ref, in_$i373: i32, in_$i374: i1, in_$i375: i32, in_$i376: i1, in_$i377: i32, in_$i378: i1, in_$i380: i32, in_$i381: i1, in_$i382: i32, in_$i383: i1, in_$i384: i32, in_$i385: i1, in_vslice_dummy_var_44: i64, in_vslice_dummy_var_45: i64, in_vslice_dummy_var_46: i64, in_vslice_dummy_var_47: i64, in_vslice_dummy_var_48: i64, in_vslice_dummy_var_49: i64, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i64, in_vslice_dummy_var_52: i64, in_vslice_dummy_var_53: i64, in_vslice_dummy_var_54: i64, in_vslice_dummy_var_55: i64, in_vslice_dummy_var_56: i64, in_vslice_dummy_var_57: i64, in_vslice_dummy_var_58: i64, in_vslice_dummy_var_59: i64, in_vslice_dummy_var_60: i64, in_vslice_dummy_var_61: i64, in_vslice_dummy_var_62: i64, in_vslice_dummy_var_63: i64, in_vslice_dummy_var_64: i64, in_vslice_dummy_var_65: i64, in_vslice_dummy_var_66: i64, in_vslice_dummy_var_67: i64, in_vslice_dummy_var_68: i64, in_vslice_dummy_var_69: i64, in_vslice_dummy_var_70: i64, in_vslice_dummy_var_71: i64, in_vslice_dummy_var_72: i64, in_vslice_dummy_var_73: i64) returns (out_$i87: i32, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$i136: i64, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i64, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$p158: ref, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i1, out_$i164: i1, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i178: i32, out_$i179: i32, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$p191: ref, out_$i192: i64, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i1, out_$i220: i1, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$p225: ref, out_$i226: i64, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$p231: ref, out_$i233: i32, out_$i234: i1, out_$i235: i32, out_$i236: i1, out_$i237: i1, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$p242: ref, out_$i243: i64, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$p273: ref, out_$i274: i64, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$p279: ref, out_$i281: i32, out_$i282: i1, out_$i283: i32, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$p290: ref, out_$i291: i64, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$p296: ref, out_$i298: i32, out_$i299: i1, out_$i300: i32, out_$i301: i1, out_$i302: i1, out_$i303: i1, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$p307: ref, out_$i308: i64, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$p313: ref, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i1, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$p324: ref, out_$i325: i64, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$p330: ref, out_$i332: i32, out_$i333: i1, out_$i334: i32, out_$i335: i1, out_$i336: i1, out_$i337: i1, out_$i338: i32, out_$i339: i1, out_$p340: ref, out_$p341: ref, out_$i342: i64, out_$i344: i32, out_$i345: i1, out_$p346: ref, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$i351: i32, out_$i352: i1, out_$i353: i32, out_$i354: i1, out_$i356: i32, out_$i357: i1, out_$i358: i32, out_$i359: i1, out_$i360: i1, out_$i361: i1, out_$i362: i32, out_$i363: i1, out_$p364: ref, out_$p365: ref, out_$i366: i64, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$p371: ref, out_$i373: i32, out_$i374: i1, out_$i375: i32, out_$i376: i1, out_$i377: i32, out_$i378: i1, out_$i380: i32, out_$i381: i1, out_$i382: i32, out_$i383: i1, out_$i384: i32, out_$i385: i1, out_vslice_dummy_var_44: i64, out_vslice_dummy_var_45: i64, out_vslice_dummy_var_46: i64, out_vslice_dummy_var_47: i64, out_vslice_dummy_var_48: i64, out_vslice_dummy_var_49: i64, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i64, out_vslice_dummy_var_52: i64, out_vslice_dummy_var_53: i64, out_vslice_dummy_var_54: i64, out_vslice_dummy_var_55: i64, out_vslice_dummy_var_56: i64, out_vslice_dummy_var_57: i64, out_vslice_dummy_var_58: i64, out_vslice_dummy_var_59: i64, out_vslice_dummy_var_60: i64, out_vslice_dummy_var_61: i64, out_vslice_dummy_var_62: i64, out_vslice_dummy_var_63: i64, out_vslice_dummy_var_64: i64, out_vslice_dummy_var_65: i64, out_vslice_dummy_var_66: i64, out_vslice_dummy_var_67: i64, out_vslice_dummy_var_68: i64, out_vslice_dummy_var_69: i64, out_vslice_dummy_var_70: i64, out_vslice_dummy_var_71: i64, out_vslice_dummy_var_72: i64, out_vslice_dummy_var_73: i64);
  modifies $M.58, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.7, assertsPassed, $M.59, $M.60, $M.64, $M.61, $M.79, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.24, $M.25, $M.26, $M.27, $M.28, $M.15, $M.17, $M.19, $M.21, $M.14, $M.16, $M.18, $M.20, $M.22, $M.63, $M.43, $M.44, $M.54, $M.55, $M.37, $M.38, $M.51, $M.56, $M.57, $M.41, $M.42, $M.66, $M.35, $M.36, $M.67, $M.68, $M.69, $M.47, $M.48, $M.70, $M.33, $M.34, $M.71, $M.39, $M.40, $M.72, $M.49, $M.50, $M.73, $M.52, $M.53, $M.74, $M.75, $M.45, $M.46, $M.76, $M.77, $M.78, $M.65, $M.80;


