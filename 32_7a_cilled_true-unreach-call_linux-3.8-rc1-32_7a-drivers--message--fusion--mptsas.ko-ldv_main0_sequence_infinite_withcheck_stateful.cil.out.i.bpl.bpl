var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]i8;

var $M.4: [ref]i64;

var $M.5: [ref]i32;

var $M.6: [ref]i32;

var $M.7: [ref]i32;

var $M.8: [ref]i32;

var $M.9: [ref]i8;

var $M.10: [ref]i64;

var $M.11: i8;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]i16;

var $M.16: [ref]i64;

var $M.17: [ref]ref;

var $M.18: [ref]i32;

var $M.19: [ref]i32;

var $M.20: [ref]i32;

var $M.21: [ref]ref;

var $M.22: [ref]i16;

var $M.23: [ref]ref;

var $M.24: [ref]i32;

var $M.25: i32;

var $M.26: i32;

var $M.28: [ref]i8;

var $M.29: [ref]i16;

var $M.30: [ref]i16;

var $M.31: [ref]i16;

var $M.32: [ref]i16;

var $M.33: [ref]i8;

var $M.34: [ref]i8;

var $M.35: [ref]i8;

var $M.36: [ref]i8;

var $M.37: i8;

var $M.38: i8;

var $M.39: i8;

var $M.40: i32;

var $M.41: ref;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: [ref]i8;

var $M.47: [ref]i16;

var $M.48: [ref]i16;

var $M.49: [ref]i16;

var $M.50: [ref]i16;

var $M.51: [ref]i8;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $M.54: [ref]i8;

var $M.55: [ref]i8;

var $M.56: [ref]i32;

var $M.57: [ref]i16;

var $M.58: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i8;

var $M.62: [ref]i16;

var $M.63: [ref]i16;

var $M.65: [ref]i8;

var $M.66: [ref]i8;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i16;

var $M.71: [ref]i16;

var $M.72: [ref]i8;

var $M.74: [ref]i8;

var $M.75: [ref]i8;

var $M.77: [ref]i8;

var $M.78: [ref]i8;

var $M.79: [ref]i16;

var $M.80: [ref]i16;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i32;

var $M.84: [ref]i8;

var $M.85: [ref]i32;

var $M.86: i8;

var $M.88: [ref]i8;

var $M.89: [ref]i8;

var $M.90: [ref]i8;

var $M.91: [ref]i16;

var $M.92: [ref]i8;

var $M.93: [ref]i8;

var $M.94: [ref]i64;

var $M.95: [ref]i32;

var $M.96: [ref]i16;

var $M.98: i32;

var $M.99: i32;

var $M.162: [ref]i8;

var $M.163: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 620486);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __mod_pci_device_table: ref;

axiom __mod_pci_device_table == $sub.ref(0, 2084);

const mpt_pt_clear: ref;

axiom mpt_pt_clear == $sub.ref(0, 3112);

const mpt_loadtime_max_sectors: ref;

axiom mpt_loadtime_max_sectors == $sub.ref(0, 4140);

const max_lun: ref;

axiom max_lun == $sub.ref(0, 5168);

const mptsas_driver_template: ref;

axiom mptsas_driver_template == $sub.ref(0, 6504);

const {:count 7} mptsas_pci_table: ref;

axiom mptsas_pci_table == $sub.ref(0, 7752);

const mptsas_driver: ref;

axiom mptsas_driver == $sub.ref(0, 9088);

const mptsasInternalCtx: ref;

axiom mptsasInternalCtx == $sub.ref(0, 10113);

const mptsasTaskCtx: ref;

axiom mptsasTaskCtx == $sub.ref(0, 11138);

const mptsasDoneCtx: ref;

axiom mptsasDoneCtx == $sub.ref(0, 12163);

const mptsas_transport_template: ref;

axiom mptsas_transport_template == $sub.ref(0, 13195);

const mptsas_transport_functions: ref;

axiom mptsas_transport_functions == $sub.ref(0, 14291);

const mptsasMgmtCtx: ref;

axiom mptsasMgmtCtx == $sub.ref(0, 15316);

const mptsasDeviceResetCtx: ref;

axiom mptsasDeviceResetCtx == $sub.ref(0, 16341);

const ldv_mutex_sas_topology_mutex: ref;

axiom ldv_mutex_sas_topology_mutex == $sub.ref(0, 17369);

const ldv_mutex_sas_device_info_mutex: ref;

axiom ldv_mutex_sas_device_info_mutex == $sub.ref(0, 18397);

const ldv_mutex_mutex: ref;

axiom ldv_mutex_mutex == $sub.ref(0, 19425);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 20453);

const ldv_mutex_cred_guard_mutex: ref;

axiom ldv_mutex_cred_guard_mutex == $sub.ref(0, 21481);

const {:count 60} .str.166: ref;

axiom .str.166 == $sub.ref(0, 22565);

const {:count 19} .str.167: ref;

axiom .str.167 == $sub.ref(0, 23608);

const {:count 65} .str.168: ref;

axiom .str.168 == $sub.ref(0, 24697);

const {:count 67} .str.53: ref;

axiom .str.53 == $sub.ref(0, 25788);

const {:count 41} .str.169: ref;

axiom .str.169 == $sub.ref(0, 26853);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 49} .str.164: ref;

axiom .str.164 == $sub.ref(0, 27926);

const {:count 17} .str.165: ref;

axiom .str.165 == $sub.ref(0, 28967);

const {:count 169} .str.7: ref;

axiom .str.7 == $sub.ref(0, 30160);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 166} .str.8: ref;

axiom .str.8 == $sub.ref(0, 31350);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 47} .str.159: ref;

axiom .str.159 == $sub.ref(0, 32421);

const {:count 39} .str.160: ref;

axiom .str.160 == $sub.ref(0, 33484);

const {:count 49} .str.161: ref;

axiom .str.161 == $sub.ref(0, 34557);

const {:count 42} .str.162: ref;

axiom .str.162 == $sub.ref(0, 35623);

const {:count 44} .str.163: ref;

axiom .str.163 == $sub.ref(0, 36691);

const {:count 7} .str.66: ref;

axiom .str.66 == $sub.ref(0, 37722);

const {:count 50} .str.54: ref;

axiom .str.54 == $sub.ref(0, 38796);

const {:count 26} .str.55: ref;

axiom .str.55 == $sub.ref(0, 39846);

const {:count 40} .str.56: ref;

axiom .str.56 == $sub.ref(0, 40910);

const {:count 21} .str.57: ref;

axiom .str.57 == $sub.ref(0, 41955);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 36} .str.186: ref;

axiom .str.186 == $sub.ref(0, 43015);

const {:count 56} .str.97: ref;

axiom .str.97 == $sub.ref(0, 44095);

const {:count 19} .str.98: ref;

axiom .str.98 == $sub.ref(0, 45138);

const {:count 36} .str.47: ref;

axiom .str.47 == $sub.ref(0, 46198);

const {:count 2} .str.32: ref;

axiom .str.32 == $sub.ref(0, 47224);

const {:count 17} .str.45: ref;

axiom .str.45 == $sub.ref(0, 48265);

const {:count 33} .str.48: ref;

axiom .str.48 == $sub.ref(0, 49322);

const {:count 63} .str.170: ref;

axiom .str.170 == $sub.ref(0, 50409);

const {:count 56} .str.171: ref;

axiom .str.171 == $sub.ref(0, 51489);

const {:count 84} .str.172: ref;

axiom .str.172 == $sub.ref(0, 52597);

const {:count 74} .str.173: ref;

axiom .str.173 == $sub.ref(0, 53695);

const {:count 25} .str.174: ref;

axiom .str.174 == $sub.ref(0, 54744);

const {:count 26} .str.175: ref;

axiom .str.175 == $sub.ref(0, 55794);

const {:count 21} .str.176: ref;

axiom .str.176 == $sub.ref(0, 56839);

const {:count 51} .str.177: ref;

axiom .str.177 == $sub.ref(0, 57914);

const {:count 88} .str.178: ref;

axiom .str.178 == $sub.ref(0, 59026);

const {:count 49} .str.179: ref;

axiom .str.179 == $sub.ref(0, 60099);

const {:count 33} .str.180: ref;

axiom .str.180 == $sub.ref(0, 61156);

const {:count 30} .str.181: ref;

axiom .str.181 == $sub.ref(0, 62210);

const {:count 28} .str.182: ref;

axiom .str.182 == $sub.ref(0, 63262);

const {:count 43} .str.183: ref;

axiom .str.183 == $sub.ref(0, 64329);

const {:count 55} .str.101: ref;

axiom .str.101 == $sub.ref(0, 65408);

const {:count 47} .str.17: ref;

axiom .str.17 == $sub.ref(0, 66479);

const {:count 26} .str.18: ref;

axiom .str.18 == $sub.ref(0, 67529);

const {:count 33} .str.19: ref;

axiom .str.19 == $sub.ref(0, 68586);

const {:count 36} .str.20: ref;

axiom .str.20 == $sub.ref(0, 69646);

const {:count 24} .str.21: ref;

axiom .str.21 == $sub.ref(0, 70694);

const {:count 33} .str.22: ref;

axiom .str.22 == $sub.ref(0, 71751);

const {:count 29} .str.23: ref;

axiom .str.23 == $sub.ref(0, 72804);

const {:count 23} .str.24: ref;

axiom .str.24 == $sub.ref(0, 73851);

const {:count 34} .str.25: ref;

axiom .str.25 == $sub.ref(0, 74909);

const {:count 33} .str.26: ref;

axiom .str.26 == $sub.ref(0, 75966);

const {:count 31} .str.27: ref;

axiom .str.27 == $sub.ref(0, 77021);

const {:count 25} .str.28: ref;

axiom .str.28 == $sub.ref(0, 78070);

const {:count 34} .str.29: ref;

axiom .str.29 == $sub.ref(0, 79128);

const .str: ref;

axiom .str == $sub.ref(0, 80194);

const {:count 22} .str.116: ref;

axiom .str.116 == $sub.ref(0, 81240);

const {:count 51} .str.89: ref;

axiom .str.89 == $sub.ref(0, 82315);

const {:count 4} .str.92: ref;

axiom .str.92 == $sub.ref(0, 83343);

const {:count 4} .str.93: ref;

axiom .str.93 == $sub.ref(0, 84371);

const {:count 5} .str.94: ref;

axiom .str.94 == $sub.ref(0, 85400);

const {:count 84} .str.117: ref;

axiom .str.117 == $sub.ref(0, 86508);

const {:count 23} .str.115: ref;

axiom .str.115 == $sub.ref(0, 87555);

const {:count 59} .str.2: ref;

axiom .str.2 == $sub.ref(0, 88638);

const {:count 21} .str.40: ref;

axiom .str.40 == $sub.ref(0, 89683);

const {:count 44} .str.41: ref;

axiom .str.41 == $sub.ref(0, 90751);

const {:count 42} .str.42: ref;

axiom .str.42 == $sub.ref(0, 91817);

const {:count 40} .str.43: ref;

axiom .str.43 == $sub.ref(0, 92881);

const {:count 35} .str.44: ref;

axiom .str.44 == $sub.ref(0, 93940);

const {:count 42} .str.49: ref;

axiom .str.49 == $sub.ref(0, 95006);

const {:count 31} .str.50: ref;

axiom .str.50 == $sub.ref(0, 96061);

const {:count 43} .str.51: ref;

axiom .str.51 == $sub.ref(0, 97128);

const {:count 294} .str.52: ref;

axiom .str.52 == $sub.ref(0, 98446);

const {:count 33} .str.46: ref;

axiom .str.46 == $sub.ref(0, 99503);

const {:count 42} .str.30: ref;

axiom .str.30 == $sub.ref(0, 100569);

const {:count 24} .str.31: ref;

axiom .str.31 == $sub.ref(0, 101617);

const {:count 43} .str.33: ref;

axiom .str.33 == $sub.ref(0, 102684);

const {:count 46} .str.34: ref;

axiom .str.34 == $sub.ref(0, 103754);

const {:count 63} .str.35: ref;

axiom .str.35 == $sub.ref(0, 104841);

const {:count 48} .str.36: ref;

axiom .str.36 == $sub.ref(0, 105913);

const {:count 68} .str.37: ref;

axiom .str.37 == $sub.ref(0, 107005);

const {:count 34} .str.38: ref;

axiom .str.38 == $sub.ref(0, 108063);

const {:count 2} .str.39: ref;

axiom .str.39 == $sub.ref(0, 109089);

const {:count 52} .str.9: ref;

axiom .str.9 == $sub.ref(0, 110165);

const {:count 33} .str.10: ref;

axiom .str.10 == $sub.ref(0, 111222);

const {:count 34} .str.11: ref;

axiom .str.11 == $sub.ref(0, 112280);

const {:count 40} .str.12: ref;

axiom .str.12 == $sub.ref(0, 113344);

const {:count 40} .str.13: ref;

axiom .str.13 == $sub.ref(0, 114408);

const {:count 38} .str.14: ref;

axiom .str.14 == $sub.ref(0, 115470);

const {:count 39} .str.15: ref;

axiom .str.15 == $sub.ref(0, 116533);

const {:count 43} .str.16: ref;

axiom .str.16 == $sub.ref(0, 117600);

const {:count 47} .str.109: ref;

axiom .str.109 == $sub.ref(0, 118671);

const {:count 42} .str.110: ref;

axiom .str.110 == $sub.ref(0, 119737);

const {:count 43} .str.111: ref;

axiom .str.111 == $sub.ref(0, 120804);

const {:count 40} .str.112: ref;

axiom .str.112 == $sub.ref(0, 121868);

const {:count 32} .str.113: ref;

axiom .str.113 == $sub.ref(0, 122924);

const {:count 29} .str.114: ref;

axiom .str.114 == $sub.ref(0, 123977);

const {:count 47} .str.102: ref;

axiom .str.102 == $sub.ref(0, 125048);

const {:count 37} .str.103: ref;

axiom .str.103 == $sub.ref(0, 126109);

const {:count 24} .str.104: ref;

axiom .str.104 == $sub.ref(0, 127157);

const {:count 30} .str.105: ref;

axiom .str.105 == $sub.ref(0, 128211);

const {:count 29} .str.106: ref;

axiom .str.106 == $sub.ref(0, 129264);

const {:count 46} .str.107: ref;

axiom .str.107 == $sub.ref(0, 130334);

const {:count 36} .str.108: ref;

axiom .str.108 == $sub.ref(0, 131394);

const {:count 9} .str.185: ref;

axiom .str.185 == $sub.ref(0, 132427);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 48} .str.3: ref;

axiom .str.3 == $sub.ref(0, 133499);

const {:count 20} .str.4: ref;

axiom .str.4 == $sub.ref(0, 134543);

const {:count 39} .str.5: ref;

axiom .str.5 == $sub.ref(0, 135606);

const {:count 79} .str.6: ref;

axiom .str.6 == $sub.ref(0, 136709);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 13} .str.184: ref;

axiom .str.184 == $sub.ref(0, 137746);

const mptscsih_host_attrs: ref;

axiom mptscsih_host_attrs == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 2} .str.123: ref;

axiom .str.123 == $sub.ref(0, 138772);

const {:count 77} .str.158: ref;

axiom .str.158 == $sub.ref(0, 139873);

const {:count 23} .str.157: ref;

axiom .str.157 == $sub.ref(0, 140920);

const {:count 55} .str.156: ref;

axiom .str.156 == $sub.ref(0, 141999);

const {:count 20} .str.1: ref;

axiom .str.1 == $sub.ref(0, 143043);

const {:count 8} .str.58: ref;

axiom .str.58 == $sub.ref(0, 144075);

const {:count 27} .str.59: ref;

axiom .str.59 == $sub.ref(0, 145126);

const {:count 8} .str.60: ref;

axiom .str.60 == $sub.ref(0, 146158);

const {:count 17} .str.61: ref;

axiom .str.61 == $sub.ref(0, 147199);

const {:count 27} .str.62: ref;

axiom .str.62 == $sub.ref(0, 148250);

const {:count 25} .str.63: ref;

axiom .str.63 == $sub.ref(0, 149299);

const {:count 17} .str.64: ref;

axiom .str.64 == $sub.ref(0, 150340);

const {:count 25} .str.65: ref;

axiom .str.65 == $sub.ref(0, 151389);

const {:count 38} .str.152: ref;

axiom .str.152 == $sub.ref(0, 152451);

const {:count 17} .str.153: ref;

axiom .str.153 == $sub.ref(0, 153492);

const {:count 36} .str.154: ref;

axiom .str.154 == $sub.ref(0, 154552);

const {:count 37} .str.155: ref;

axiom .str.155 == $sub.ref(0, 155613);

const {:count 48} .str.75: ref;

axiom .str.75 == $sub.ref(0, 156685);

const {:count 20} .str.151: ref;

axiom .str.151 == $sub.ref(0, 157729);

const {:count 27} .str.77: ref;

axiom .str.77 == $sub.ref(0, 158780);

const {:count 28} .str.78: ref;

axiom .str.78 == $sub.ref(0, 159832);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 49} .str.79: ref;

axiom .str.79 == $sub.ref(0, 160905);

const {:count 20} .str.80: ref;

axiom .str.80 == $sub.ref(0, 161949);

const {:count 54} .str.81: ref;

axiom .str.81 == $sub.ref(0, 163027);

const {:count 27} .str.82: ref;

axiom .str.82 == $sub.ref(0, 164078);

const {:count 37} .str.83: ref;

axiom .str.83 == $sub.ref(0, 165139);

const {:count 52} .str.84: ref;

axiom .str.84 == $sub.ref(0, 166215);

const {:count 76} .str.141: ref;

axiom .str.141 == $sub.ref(0, 167315);

const {:count 29} .str.142: ref;

axiom .str.142 == $sub.ref(0, 168368);

const {:count 43} .str.143: ref;

axiom .str.143 == $sub.ref(0, 169435);

const {:count 29} .str.144: ref;

axiom .str.144 == $sub.ref(0, 170488);

const {:count 51} .str.139: ref;

axiom .str.139 == $sub.ref(0, 171563);

const {:count 38} .str.140: ref;

axiom .str.140 == $sub.ref(0, 172625);

const {:count 47} .str.96: ref;

axiom .str.96 == $sub.ref(0, 173696);

const {:count 62} .str.100: ref;

axiom .str.100 == $sub.ref(0, 174782);

const {:count 22} .str.90: ref;

axiom .str.90 == $sub.ref(0, 175828);

const {:count 10} .str.91: ref;

axiom .str.91 == $sub.ref(0, 176862);

const {:count 81} .str.95: ref;

axiom .str.95 == $sub.ref(0, 177967);

const {:count 25} .str.129: ref;

axiom .str.129 == $sub.ref(0, 179016);

const {:count 32} .str.130: ref;

axiom .str.130 == $sub.ref(0, 180072);

const {:count 65} .str.131: ref;

axiom .str.131 == $sub.ref(0, 181161);

const {:count 64} .str.132: ref;

axiom .str.132 == $sub.ref(0, 182249);

const {:count 58} .str.135: ref;

axiom .str.135 == $sub.ref(0, 183331);

const {:count 141} .str.136: ref;

axiom .str.136 == $sub.ref(0, 184496);

const {:count 58} .str.137: ref;

axiom .str.137 == $sub.ref(0, 185578);

const {:count 53} .str.138: ref;

axiom .str.138 == $sub.ref(0, 186655);

const {:count 61} .str.133: ref;

axiom .str.133 == $sub.ref(0, 187740);

const {:count 24} .str.134: ref;

axiom .str.134 == $sub.ref(0, 188788);

const {:count 43} .str.126: ref;

axiom .str.126 == $sub.ref(0, 189855);

const {:count 22} .str.128: ref;

axiom .str.128 == $sub.ref(0, 190901);

const {:count 93} .str.118: ref;

axiom .str.118 == $sub.ref(0, 192018);

const {:count 62} .str.119: ref;

axiom .str.119 == $sub.ref(0, 193104);

const {:count 20} .str.120: ref;

axiom .str.120 == $sub.ref(0, 194148);

const {:count 46} .str.121: ref;

axiom .str.121 == $sub.ref(0, 195218);

const {:count 45} .str.122: ref;

axiom .str.122 == $sub.ref(0, 196287);

const {:count 80} .str.124: ref;

axiom .str.124 == $sub.ref(0, 197391);

const {:count 81} .str.125: ref;

axiom .str.125 == $sub.ref(0, 198496);

const {:count 54} .str.99: ref;

axiom .str.99 == $sub.ref(0, 199574);

const {:count 23} .str.127: ref;

axiom .str.127 == $sub.ref(0, 200621);

const {:count 51} .str.85: ref;

axiom .str.85 == $sub.ref(0, 201696);

const {:count 30} .str.86: ref;

axiom .str.86 == $sub.ref(0, 202750);

const {:count 39} .str.87: ref;

axiom .str.87 == $sub.ref(0, 203813);

const {:count 80} .str.88: ref;

axiom .str.88 == $sub.ref(0, 204917);

const {:count 87} .str.145: ref;

axiom .str.145 == $sub.ref(0, 206028);

const {:count 45} .str.146: ref;

axiom .str.146 == $sub.ref(0, 207097);

const {:count 40} .str.147: ref;

axiom .str.147 == $sub.ref(0, 208161);

const {:count 21} .str.148: ref;

axiom .str.148 == $sub.ref(0, 209206);

const {:count 59} .str.149: ref;

axiom .str.149 == $sub.ref(0, 210289);

const {:count 26} .str.150: ref;

axiom .str.150 == $sub.ref(0, 211339);

const {:count 53} .str.72: ref;

axiom .str.72 == $sub.ref(0, 212416);

const {:count 163} .str.73: ref;

axiom .str.73 == $sub.ref(0, 213603);

const {:count 47} .str.74: ref;

axiom .str.74 == $sub.ref(0, 214674);

const {:count 27} .str.76: ref;

axiom .str.76 == $sub.ref(0, 215725);

const {:count 41} .str.67: ref;

axiom .str.67 == $sub.ref(0, 216790);

const {:count 20} .str.68: ref;

axiom .str.68 == $sub.ref(0, 217834);

const {:count 37} .str.69: ref;

axiom .str.69 == $sub.ref(0, 218895);

const {:count 82} .str.70: ref;

axiom .str.70 == $sub.ref(0, 220001);

const {:count 80} .str.71: ref;

axiom .str.71 == $sub.ref(0, 221105);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 222137);

const {:count 3} .str.1.388: ref;

axiom .str.1.388 == $sub.ref(0, 223164);

const {:count 14} .str.389: ref;

axiom .str.389 == $sub.ref(0, 224202);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 225230);

const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 226262);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 227294);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const mptsas_get_linkerrors: ref;

axiom mptsas_get_linkerrors == $sub.ref(0, 228326);

procedure mptsas_get_linkerrors($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $CurrAddr;



implementation mptsas_get_linkerrors($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i64;
  var $p70: ref;
  var $i71: i64;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p4 := phy_to_ioc($p0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i8 := scsi_is_host_device($p7);
    call {:si_unique_call 5} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 0);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p12, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 1);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 15);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 19);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, $p1);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p20, $sub.i64(0, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(1152, 1)), $mul.ref(24, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p25, $i24);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p26, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(23, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p27, 0);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p28, 30);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i29 := mpt_config($p4, $p2);
    call {:si_unique_call 7} {:cexpr "error"} boogie_si_record_i32($i29);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.1, $p31);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i40 := $mul.i32($i39, 4);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p42 := pci_alloc_consistent($p36, $i41, $p3);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.4, $p3);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p47, $i46);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p48, 1);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i49 := mpt_config($p4, $p2);
    call {:si_unique_call 10} {:cexpr "error"} boogie_si_record_i32($i49);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} mptsas_print_phy_pg1($p4, $p43);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p43, $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.5, $p51);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(1204, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p43, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.6, $p54);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(1208, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p43, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.7, $p57);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(1212, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p43, $mul.ref(0, 28)), $mul.ref(24, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.8, $p60);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(1216, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.1, $p65);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i68 := $mul.i32($i67, 4);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p43);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.4, $p3);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} pci_free_consistent($p64, $i69, $p70, $i71);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i10 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 6);
    goto $bb3;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i10 := $i29;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const mptsas_get_enclosure_identifier: ref;

axiom mptsas_get_enclosure_identifier == $sub.ref(0, 229358);

procedure mptsas_get_enclosure_identifier($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.26, $M.1, $M.2, $M.28, $CurrAddr, assertsPassed;



implementation mptsas_get_enclosure_identifier($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p39: ref;
  var $i40: i16;
  var $i41: i64;
  var $i42: i32;
  var $i43: i16;
  var $i44: i32;
  var $i45: i1;
  var $i20: i32;
  var $p19: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p14: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i64;
  var $i54: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p3 := rphy_to_ioc($p0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} ldv_mutex_lock_30($p4);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5712)), $mul.ref(1744, 1)), $mul.ref(0, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} ldv_mutex_unlock_31($p53);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 6);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p14 := $p7;
    goto $bb4;

  $bb4:
    call $p15, $i16, $i17, $i18, $p21, $p22, $i23, $p26, $i27, $p29, $i30, $i31, $p32, $i33, $i42, $i43, $i44, $i45, $i20, $p19, $p47, $p48, $p49, $p50, $i51, $i52, $p14 := mptsas_get_enclosure_identifier_loop_$bb4($p0, $i12, $p15, $i16, $i17, $i18, $p21, $p22, $i23, $p26, $i27, $p29, $i30, $i31, $p32, $i33, $i42, $i43, $i44, $i45, $i20, $p19, $p47, $p48, $p49, $p50, $i51, $i52, $p14);
    goto $bb4_last;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 0);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p19 := $p14;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, $i12);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p48;
    goto $bb18_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb9;

  $bb9:
    call $p21, $p22, $i23, $p26, $i27, $p29, $i30, $i31, $p32, $i33, $i42, $i43, $i44, $i45, $i20 := mptsas_get_enclosure_identifier_loop_$bb9($p0, $p15, $p21, $p22, $i23, $p26, $i27, $p29, $i30, $i31, $p32, $i33, $i42, $i43, $i44, $i45, $i20, $p14);
    goto $bb9_last;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i20);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p22, $mul.ref($i23, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i27, $i30);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p32, $i33 := $p14, $i20;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i20, 1);
    call {:si_unique_call 21} {:cexpr "i"} boogie_si_record_i32($i42);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p15);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, $i42);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p19 := $p14;
    goto $bb8;

  $bb15:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i42;
    goto $bb15_dummy;

  $bb11:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i33);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p35, $mul.ref($i36, 112)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i64($i40);
    call {:si_unique_call 16} {:cexpr "enclosure_handle"} boogie_si_record_i64($i41);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} ldv_mutex_unlock_32($p55);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p2);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.9;
    call {:si_unique_call 18} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p56, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.9 := cmdloc_dummy_var_1;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i41);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i58 := mptsas_sas_enclosure_pg0($p3, $p2, 268435456, $i57);
    call {:si_unique_call 20} {:cexpr "error"} boogie_si_record_i32($i58);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i54 := $i58;
    goto $bb21;

  $bb22:
    assume $i59 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.9, $p60);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p1, $i61);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_137;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_128;
}



const mptsas_get_bay_identifier: ref;

axiom mptsas_get_bay_identifier == $sub.ref(0, 230390);

procedure mptsas_get_bay_identifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation mptsas_get_bay_identifier($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $i18: i32;
  var $p17: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p12: ref;
  var $i40: i32;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p1 := rphy_to_ioc($p0);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} ldv_mutex_lock_33($p2);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 5712)), $mul.ref(1744, 1)), $mul.ref(0, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 6);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} ldv_mutex_unlock_34($p52);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p12 := $p5;
    goto $bb4;

  $bb4:
    call $p13, $i14, $i15, $i16, $p19, $p20, $i21, $p24, $i25, $p27, $i28, $i29, $p30, $i31, $i41, $i42, $i43, $i44, $i18, $p17, $p46, $p47, $p48, $p49, $i50, $i51, $p12 := mptsas_get_bay_identifier_loop_$bb4($p0, $i10, $p13, $i14, $i15, $i16, $p19, $p20, $i21, $p24, $i25, $p27, $i28, $i29, $p30, $i31, $i41, $i42, $i43, $i44, $i18, $p17, $p46, $p47, $p48, $p49, $i50, $i51, $p12);
    goto $bb4_last;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 0);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p17 := $p12;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, $i10);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p47;
    goto $bb18_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb9:
    call $p19, $p20, $i21, $p24, $i25, $p27, $i28, $i29, $p30, $i31, $i41, $i42, $i43, $i44, $i18 := mptsas_get_bay_identifier_loop_$bb9($p0, $p13, $p19, $p20, $i21, $p24, $i25, $p27, $i28, $i29, $p30, $i31, $i41, $i42, $i43, $i44, $i18, $p12);
    goto $bb9_last;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i18);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p20, $mul.ref($i21, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i25, $i28);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p30, $i31 := $p12, $i18;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i18, 1);
    call {:si_unique_call 27} {:cexpr "i"} boogie_si_record_i32($i41);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p13);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, $i41);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p17 := $p12;
    goto $bb8;

  $bb15:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i41;
    goto $bb15_dummy;

  $bb11:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i31);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p33, $mul.ref($i34, 112)), $mul.ref(48, 1)), $mul.ref(6, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    call {:si_unique_call 25} {:cexpr "rc"} boogie_si_record_i32($i39);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb13;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_216;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;
}



const mptsas_phy_reset: ref;

axiom mptsas_phy_reset == $sub.ref(0, 231422);

procedure mptsas_phy_reset($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed;



implementation mptsas_phy_reset($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i1;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p38: ref;
  var $i39: i8;
  var $p40: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $p47: ref;
  var $i48: i64;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $i25: i32;
  var $p85: ref;
  var $p87: ref;
  var $i18: i32;
  var $i8: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} {:cexpr "mptsas_phy_reset:arg:hard_reset"} boogie_si_record_i32($i1);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p2 := phy_to_ioc($p0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i6 := scsi_is_host_device($p5);
    call {:si_unique_call 31} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(1152, 1)), $mul.ref(8, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(0, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i16 := ldv_mutex_lock_interruptible_28($p15);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 33} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i19 := $M.11;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p22 := mpt_get_msg_frame($i21, $p2);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p22);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p22);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 36} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p28, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p27, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 27);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p27, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i1, 0);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i34 := (if $i33 == 1 then 7 else 6);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p27, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(1152, 1)), $mul.ref(24, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p27, $mul.ref(0, 32)), $mul.ref(14, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i39);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 4);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i43 := $M.11;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} mpt_put_msg_frame($i45, $p2, $p22);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(168, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i48 := wait_for_completion_timeout($p47, 2500);
    call {:si_unique_call 39} {:cexpr "timeleft"} boogie_si_record_i64($i48);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 2);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 1);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(264, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 20)), $mul.ref(14, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(0, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} ldv_mutex_unlock_29($p87);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i18 := $i25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i8 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i75 == 1;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p71, $mul.ref(0, 20)), $mul.ref(14, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p71, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} vslice_dummy_var_77 := printk.ref.ref.ref.i32.i32(.str.164, $p77, .str.165, $i80, $i82);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 6);
    goto $bb14;

  $bb25:
    assume $i68 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 6);
    goto $bb14;

  $bb16:
    assume $i54 == 1;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} mpt_free_msg_frame($p2, $p22);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 8);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i48, 0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 62);
    goto $bb14;

  $bb21:
    assume $i61 == 1;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} vslice_dummy_var_76 := mpt_Soft_Hard_ResetHandler($p2, 1);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i60 == 1;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 62);
    goto $bb14;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb14;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 512);
    goto $bb10;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const mptsas_smp_handler: ref;

axiom mptsas_smp_handler == $sub.ref(0, 232454);

procedure mptsas_smp_handler($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.19, $M.25, $M.26, assertsPassed;



implementation mptsas_smp_handler($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $i60: i16;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p66: ref;
  var $i67: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $i68: i64;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i8;
  var $p135: ref;
  var $i136: i64;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $p144: ref;
  var $i145: i8;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $i149: i1;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $i174: i32;
  var $p175: ref;
  var $p177: ref;
  var $p178: ref;
  var $i176: i32;
  var $i125: i32;
  var $p126: ref;
  var $i180: i1;
  var $i181: i32;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $i186: i32;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $i103: i32;
  var $p104: ref;
  var $i190: i64;
  var $i191: i1;
  var $i53: i32;
  var $p193: ref;
  var $p195: ref;
  var $i46: i32;
  var $i14: i32;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3032)), $mul.ref(3032, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.12, $p5);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(368, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.13, $p7);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(96, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.14, $p15);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.15, $p17);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, 1);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 376)), $mul.ref(96, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.14, $p21);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.15, $p23);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, 1);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(0, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i44 := ldv_mutex_lock_interruptible_35($p43);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 50} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i47 := $M.11;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p50 := mpt_get_msg_frame($i49, $p6);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p50);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 53} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p55, 0, 44, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i56 := blk_rq_bytes($p2);
    call {:si_unique_call 55} {:cexpr "tmp___1"} boogie_si_record_i32($i56);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32($i58, 4);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p54, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, $i60);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p54, $mul.ref(0, 44)), $mul.ref(3, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 26);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i64 == 1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} ldv_mutex_lock_36($p69);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(2224, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i85 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} ldv_mutex_unlock_37($p86);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    assume {:verifier.code 0} true;
    $i68 := $i85;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p54, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i68);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p50);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p89, $mul.ref(8, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i91 := blk_rq_bytes($p2);
    call {:si_unique_call 59} {:cexpr "tmp___2"} boogie_si_record_i32($i91);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i91, 4);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i93 := $or.i32($i92, 1409286144);
    call {:si_unique_call 60} {:cexpr "flagsLength"} boogie_si_record_i32($i93);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i94 := blk_rq_bytes($p2);
    call {:si_unique_call 62} {:cexpr "tmp___3"} boogie_si_record_i32($i94);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(96, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.14, $p95);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p97 := bio_data($p96);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i94);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i101 := pci_map_single($p99, $p97, $i100, 0);
    call {:si_unique_call 65} {:cexpr "dma_addr_out"} boogie_si_record_i64($i101);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i101, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(336, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    call {:si_unique_call 68} devirtbounce($p106, $p90, $i93, $i101);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(5706, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i64($i108);
    $i110 := $add.i64(8, $i109);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p89, $mul.ref($i110, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i112 := $shl.i32(80, 24);
    call {:si_unique_call 69} {:cexpr "flagsLength"} boogie_si_record_i32($i112);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i113 := blk_rq_bytes($p8);
    call {:si_unique_call 71} {:cexpr "tmp___5"} boogie_si_record_i32($i113);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, 4);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i115 := $or.i32($i114, $i112);
    call {:si_unique_call 72} {:cexpr "flagsLength"} boogie_si_record_i32($i115);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i116 := blk_rq_bytes($p8);
    call {:si_unique_call 74} {:cexpr "tmp___6"} boogie_si_record_i32($i116);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p8, $mul.ref(0, 376)), $mul.ref(96, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.14, $p117);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p119 := bio_data($p118);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i122 := $zext.i32.i64($i116);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i123 := pci_map_single($p121, $p119, $i122, 0);
    call {:si_unique_call 77} {:cexpr "dma_addr_in"} boogie_si_record_i64($i123);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i124 := $eq.i64($i123, 0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(336, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    call {:si_unique_call 78} devirtbounce($p128, $p111, $i115, $i123);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 4);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i131 := $M.11;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i8($i132);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} mpt_put_msg_frame($i133, $p6, $p50);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(168, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i136 := wait_for_completion_timeout($p135, 2500);
    call {:si_unique_call 81} {:cexpr "timeleft"} boogie_si_record_i64($i136);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.0, $p138);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 2);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 0);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.0, $p152);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i155 := $and.i32($i154, 1);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i156 == 1);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_81 := printk.ref.ref.ref(.str.53, $p178, .str.167);
    assume {:verifier.code 0} true;
    $i176 := $sub.i32(0, 6);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i125, $p126 := $i176, $0.ref;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i180 := $ne.i64($i101, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i185 := $ne.i64($i123, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i103, $p104 := $i125, $p126;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p104);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i191 := $ne.i64($i190, 0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i53 := $i103;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p193, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(0, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} ldv_mutex_unlock_38($p195);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i46 := $i53;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i14 := $i46;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i191 == 1;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} mpt_free_msg_frame($p6, $p104);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i185 == 1;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i186 := blk_rq_bytes($p8);
    call {:si_unique_call 91} {:cexpr "tmp___9"} boogie_si_record_i32($i186);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i189 := $zext.i32.i64($i186);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} pci_unmap_single($p188, $i123, $i189, 0);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i180 == 1;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i181 := blk_rq_bytes($p2);
    call {:si_unique_call 88} {:cexpr "tmp___8"} boogie_si_record_i32($i181);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i184 := $zext.i32.i64($i181);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} pci_unmap_single($p183, $i101, $i184, 0);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb45:
    assume $i156 == 1;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(264, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i160 := $ugt.i64(28, 63);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i160 == 1);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(312, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.17, $p164);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p159);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 86} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p165, $p166, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(304, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p167, 28);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(308, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p168, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p8, $mul.ref(0, 376)), $mul.ref(308, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.19, $p169);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p159, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.0, $p171);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i174 := $sub.i32($i170, $i173);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p8, $mul.ref(0, 376)), $mul.ref(308, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p175, $i174);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i176 := $i44;
    goto $bb50;

  $bb47:
    assume $i160 == 1;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(312, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.17, $p161);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p159);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 85} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p162, $p163, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb36:
    assume $i142 == 1;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} mpt_free_msg_frame($p6, $p50);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.0, $p144);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 8);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i149 := $eq.i64($i136, 0);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i125, $p126 := $sub.i32(0, 62), $0.ref;
    goto $bb34;

  $bb41:
    assume $i149 == 1;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} vslice_dummy_var_80 := mpt_Soft_Hard_ResetHandler($p6, 1);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i148 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i125, $p126 := $sub.i32(0, 62), $0.ref;
    goto $bb34;

  $bb32:
    assume $i124 == 1;
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i125, $p126 := $i44, $p50;
    goto $bb34;

  $bb28:
    assume $i102 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i103, $p104 := $i44, $p50;
    goto $bb30;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i73 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p71, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb24;

  $bb25:
    assume $i77 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p71, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p81, $mul.ref(0, 1248)), $mul.ref(1152, 1)), $mul.ref(16, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    call {:si_unique_call 66} {:cexpr "sas_address"} boogie_si_record_i64($i84);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb27;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.16, $p66);
    call {:si_unique_call 56} {:cexpr "sas_address"} boogie_si_record_i64($i67);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb21;

  $bb15:
    assume $i52 == 1;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 12);
    goto $bb17;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i46 := $i44;
    goto $bb13;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i27 := blk_rq_bytes($p8);
    call {:si_unique_call 45} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i28 := blk_rq_bytes($p2);
    call {:si_unique_call 47} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(96, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.14, $p31);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.15, $p33);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p8, $mul.ref(0, 376)), $mul.ref(96, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.14, $p36);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.15, $p38);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} vslice_dummy_var_79 := printk.ref.ref.ref.i32.i32.i32.i32(.str.168, $p30, .str.167, $i35, $i28, $i40, $i27);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_78 := printk.ref.ref.ref(.str.166, $p12, .str.167);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 233486);

procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 94} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 95} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 96} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 97} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 98} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 99} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 101} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 102} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 104} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64) returns ($r: i32);



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 106} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 108} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i64.i32.i32.i64.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i64, p.5: i32, p.6: i32, p.7: i64, p.8: i32) returns ($r: i32);



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 110} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 113} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 114} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 115} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.i32.i32.i64($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.i32.i32.i64($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb15:
    assume {:verifier.code 1} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 116} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 117} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb16:
    assume {:verifier.code 1} true;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32.i64($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32.i64($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb17:
    assume {:verifier.code 1} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 120} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 121} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb18:
    assume {:verifier.code 1} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 122} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 123} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb19:
    assume {:verifier.code 1} true;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 1} true;
    call {:si_unique_call 124} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 125} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const blk_rq_bytes: ref;

axiom blk_rq_bytes == $sub.ref(0, 234518);

procedure blk_rq_bytes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_bytes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(84, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.20, $p1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_interruptible_35: ref;

axiom ldv_mutex_lock_interruptible_35 == $sub.ref(0, 235550);

procedure ldv_mutex_lock_interruptible_35($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_35($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 127} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i2 := ldv_mutex_lock_interruptible_mutex($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 129} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const mpt_get_msg_frame: ref;

axiom mpt_get_msg_frame == $sub.ref(0, 236582);

procedure mpt_get_msg_frame($i0: i8, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mpt_get_msg_frame($i0: i8, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} {:cexpr "mpt_get_msg_frame:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p2 := external_alloc();
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 237614);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_mutex_lock_36: ref;

axiom ldv_mutex_lock_36 == $sub.ref(0, 238646);

procedure ldv_mutex_lock_36($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} mutex_lock($p0);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_37: ref;

axiom ldv_mutex_unlock_37 == $sub.ref(0, 239678);

procedure ldv_mutex_unlock_37($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_37($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} mutex_unlock($p0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const bio_data: ref;

axiom bio_data == $sub.ref(0, 240710);

procedure bio_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bio_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.15, $p1);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $r := $p24;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.21, $p5);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(42, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.22, $p7);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i8);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.23, $p11);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p13 := lowmem_page_address($p12);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.21, $p14);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(42, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.22, $p16);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i64($i17);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(12, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.24, $p20);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p13, $mul.ref($i22, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb3;
}



const pci_map_single: ref;

axiom pci_map_single == $sub.ref(0, 241742);

procedure pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} {:cexpr "pci_map_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 138} {:cexpr "pci_map_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i8 := dma_map_single_attrs($p7, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 140} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const mpt_put_msg_frame: ref;

axiom mpt_put_msg_frame == $sub.ref(0, 242774);

procedure mpt_put_msg_frame($i0: i8, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation mpt_put_msg_frame($i0: i8, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} {:cexpr "mpt_put_msg_frame:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 243806);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 142} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 144} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mpt_free_msg_frame: ref;

axiom mpt_free_msg_frame == $sub.ref(0, 244838);

procedure mpt_free_msg_frame($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mpt_free_msg_frame($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    return;
}



const mpt_Soft_Hard_ResetHandler: ref;

axiom mpt_Soft_Hard_ResetHandler == $sub.ref(0, 245870);

procedure mpt_Soft_Hard_ResetHandler($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mpt_Soft_Hard_ResetHandler($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} {:cexpr "mpt_Soft_Hard_ResetHandler:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 1} true;
    call {:si_unique_call 146} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 147} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 246902);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const pci_unmap_single: ref;

axiom pci_unmap_single == $sub.ref(0, 247934);

procedure pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} {:cexpr "pci_unmap_single:arg:dma_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 149} {:cexpr "pci_unmap_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 150} {:cexpr "pci_unmap_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} dma_unmap_single_attrs($p7, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const ldv_mutex_unlock_38: ref;

axiom ldv_mutex_unlock_38 == $sub.ref(0, 248966);

procedure ldv_mutex_unlock_38($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_38($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} mutex_unlock($p0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_mutex: ref;

axiom ldv_mutex_unlock_mutex == $sub.ref(0, 249998);

procedure ldv_mutex_unlock_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 155} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 251030);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 252062);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 156} __VERIFIER_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 253094);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 158} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 159} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p5 := get_dma_ops($p0);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 162} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 164} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 166} devirtbounce.1($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 165} devirtbounce(0, .str.169, 36, 12);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 254126);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 169} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 255158);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 256190);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 172} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 257222);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 174} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 175} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 176} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 258254);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 178} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $p5 := get_dma_ops($p0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 182} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 184} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i14 := __phys_addr($i13);
    call {:si_unique_call 187} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($sub.i64(0, 24189255811072), $i17);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 4095);
    call {:si_unique_call 188} $i22 := devirtbounce.2($p16, $p0, $p19, $i21, $i2, $i3, $p4);
    call {:si_unique_call 189} {:cexpr "addr"} boogie_si_record_i64($i22);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i24 := __phys_addr($i23);
    call {:si_unique_call 191} {:cexpr "tmp___3"} boogie_si_record_i64($i24);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i64($i24, 12);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($sub.i64(0, 24189255811072), $i25);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 4095);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} debug_dma_map_page($p0, $p27, $i29, $i2, $i3, $i22, 1);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 185} devirtbounce(0, .str.169, 19, 12);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 259286);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 260318);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 194} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 1} true;
    call {:si_unique_call 195} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 196} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 261350);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 198} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 199} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 200} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 201} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 262382);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 80);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_mutex_unlock_sas_topology_mutex: ref;

axiom ldv_mutex_unlock_sas_topology_mutex == $sub.ref(0, 263414);

procedure ldv_mutex_unlock_sas_topology_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_sas_topology_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i1 := $M.26;
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} ldv_error();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 203} {:cexpr "ldv_mutex_sas_topology_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_sas_topology_mutex: ref;

axiom ldv_mutex_lock_sas_topology_mutex == $sub.ref(0, 264446);

procedure ldv_mutex_lock_sas_topology_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_sas_topology_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i1 := $M.26;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} ldv_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 205} {:cexpr "ldv_mutex_sas_topology_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 265478);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 266510);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 1} true;
    call {:si_unique_call 206} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 207} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 267542);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 1} true;
    call {:si_unique_call 208} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 209} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_mutex: ref;

axiom ldv_mutex_lock_interruptible_mutex == $sub.ref(0, 268574);

procedure ldv_mutex_lock_interruptible_mutex($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_mutex($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} ldv_error();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 211} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 212} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 213} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 214} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const phy_to_ioc: ref;

axiom phy_to_ioc == $sub.ref(0, 269606);

procedure phy_to_ioc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation phy_to_ioc($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $p4 := dev_to_shost($p3);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3032)), $mul.ref(3032, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const scsi_is_host_device: ref;

axiom scsi_is_host_device == $sub.ref(0, 270638);

procedure scsi_is_host_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_is_host_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 216} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 217} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_28: ref;

axiom ldv_mutex_lock_interruptible_28 == $sub.ref(0, 271670);

procedure ldv_mutex_lock_interruptible_28($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_28($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 219} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i2 := ldv_mutex_lock_interruptible_mutex($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 221} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 272702);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} mutex_unlock($p0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const dev_to_shost: ref;

axiom dev_to_shost == $sub.ref(0, 273734);

procedure dev_to_shost($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_to_shost($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p4: ref;
  var $p14: ref;
  var $p3: ref;
  var $p15: ref;
  var $p16: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i1 := scsi_is_host_device($p0);
    call {:si_unique_call 225} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p3 := $p0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 712), 3032));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p9 := $p16;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $i8, $p10, $p11, $i12, $i13, $p4, $p14 := dev_to_shost_loop_$bb4($p5, $p6, $i7, $i8, $p10, $p11, $i12, $i13, $p4, $p14);
    goto $bb4_last;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i12 := scsi_is_host_device($p11);
    call {:si_unique_call 227} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p14 := $p11;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p3 := $p14;
    goto $bb3;

  $bb10:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p11;
    goto $bb10_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_956;
}



const rphy_to_ioc: ref;

axiom rphy_to_ioc == $sub.ref(0, 274766);

procedure rphy_to_ioc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rphy_to_ioc($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $p6 := dev_to_shost($p5);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3032)), $mul.ref(3032, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;
}



const ldv_mutex_lock_33: ref;

axiom ldv_mutex_lock_33 == $sub.ref(0, 275798);

procedure ldv_mutex_lock_33($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} mutex_lock($p0);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_34: ref;

axiom ldv_mutex_unlock_34 == $sub.ref(0, 276830);

procedure ldv_mutex_unlock_34($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} mutex_unlock($p0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_30: ref;

axiom ldv_mutex_lock_30 == $sub.ref(0, 277862);

procedure ldv_mutex_lock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} mutex_lock($p0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 278894);

procedure ldv_mutex_unlock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} mutex_unlock($p0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_32: ref;

axiom ldv_mutex_unlock_32 == $sub.ref(0, 279926);

procedure ldv_mutex_unlock_32($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} mutex_unlock($p0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const mptsas_sas_enclosure_pg0: ref;

axiom mptsas_sas_enclosure_pg0 == $sub.ref(0, 280958);

procedure mptsas_sas_enclosure_pg0($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.28, $M.9, $CurrAddr;



implementation mptsas_sas_enclosure_pg0($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $p55: ref;
  var $p56: ref;
  var $i57: i16;
  var $p58: ref;
  var $p59: ref;
  var $i60: i16;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i32;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i23: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 243} {:cexpr "mptsas_sas_enclosure_pg0:arg:form"} boogie_si_record_i32($i2);
    call {:si_unique_call 244} {:cexpr "mptsas_sas_enclosure_pg0:arg:form_specific"} boogie_si_record_i32($i3);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.1;
    call {:si_unique_call 245} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p8, 0, 8, $zext.i32.i64(2), 0 == 1);
    $M.1 := cmdloc_dummy_var_13;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 1);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 0);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 15);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 21);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, $p4);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p15, $sub.i64(0, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i2, $i3);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p17, $i16);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p18, 0);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(23, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p19, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p20, 30);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i21 := mpt_config($p0, $p5);
    call {:si_unique_call 247} {:cexpr "error"} boogie_si_record_i32($i21);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.1, $p30);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i33 := $mul.i32($i32, 4);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p35 := pci_alloc_consistent($p29, $i34, $p6);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.4, $p6);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p40, $i39);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p41, 1);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i42 := mpt_config($p0, $p5);
    call {:si_unique_call 250} {:cexpr "error"} boogie_si_record_i32($i42);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64(8, 63);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p7);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.28;
    cmdloc_dummy_var_18 := $M.28;
    call {:si_unique_call 253} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p48, $p50, 8, $zext.i32.i64(4), 0 == 1);
    $M.28 := cmdloc_dummy_var_19;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.28, $p7);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p52, $i51);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(22, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.29, $p53);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p55, $i54);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.30, $p56);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(10, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p58, $i57);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.31, $p59);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p61, $i60);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.32, $p62);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p64, $i63);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.33, $p65);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p67, $i66);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(29, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.34, $p68);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p70, $i69);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.35, $p71);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p73, $i72);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(31, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.36, $p74);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(19, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p76, $i75);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.1, $p79);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i82 := $mul.i32($i81, 4);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p36);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.4, $p6);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} pci_free_consistent($p78, $i83, $p84, $i85);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i23 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p7);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.28;
    cmdloc_dummy_var_15 := $M.28;
    call {:si_unique_call 252} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p45, $p47, 8, $zext.i32.i64(4), 0 == 1);
    $M.28 := cmdloc_dummy_var_16;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb3;
}



const mpt_config: ref;

axiom mpt_config == $sub.ref(0, 281990);

procedure mpt_config($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mpt_config($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_alloc_consistent: ref;

axiom pci_alloc_consistent == $sub.ref(0, 283022);

procedure pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} {:cexpr "pci_alloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $p7 := dma_alloc_attrs($p6, $i1, $p2, 32, $0.ref);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 284054);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 259} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 285086);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_82: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 262} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $p5 := get_dma_ops($p0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i6 := arch_local_save_flags();
    call {:si_unique_call 265} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 267} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 268} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 270} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_82 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 274} devirtbounce.3($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} warn_slowpath_null(.str.7, 166);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 286118);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 276} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 278} $i7 := devirtbounce.4(0, 45, pv_irq_ops, 1);
    call {:si_unique_call 279} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 277} devirtbounce(0, .str.8, 825, 12);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 287150);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 288182);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 289214);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 283} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 290246);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 285} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p5 := get_dma_ops($p0);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 287} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 289} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 291} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 292} $p20 := devirtbounce.5($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.4, $p2);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 291278);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(904, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(904, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 292310);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 296} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 298} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 297} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 293342);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 300} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 294374);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(912, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 302} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 303} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const mptsas_print_phy_pg1: ref;

axiom mptsas_print_phy_pg1 == $sub.ref(0, 295406);

procedure mptsas_print_phy_pg1($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mptsas_print_phy_pg1($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1048576);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1048576);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1048576);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1048576);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 1048576);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 28)), $mul.ref(24, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.8, $p42);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_87 := printk.ref.ref.i32(.str.163, $p41, $i43);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.7, $p33);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_86 := printk.ref.ref.i32(.str.162, $p32, $i34);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} vslice_dummy_var_85 := printk.ref.ref.i32(.str.161, $p23, $i25);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.5, $p15);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_84 := printk.ref.ref.i32(.str.160, $p14, $i16);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} vslice_dummy_var_83 := printk.ref.ref(.str.159, $p7);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mptsas_probe: ref;

axiom mptsas_probe == $sub.ref(0, 296438);

procedure mptsas_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $CurrAddr, $M.1, $M.2, $M.26, $M.55, $M.61, assertsPassed, $M.81, $M.4, $M.25;



implementation mptsas_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i41: i64;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i39: i32;
  var $i40: i32;
  var $i55: i32;
  var $i38: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i124: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i123: i32;
  var $p141: ref;
  var $i142: i16;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i16;
  var $i153: i32;
  var $i155: i16;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $i167: i32;
  var $i168: i32;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $i177: i16;
  var $i178: i32;
  var $i180: i32;
  var $i181: i16;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i32;
  var $i188: i64;
  var $p189: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i32;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i211: i32;
  var $i212: i8;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $i222: i8;
  var $i223: i32;
  var $i224: i1;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $p236: ref;
  var $p239: ref;
  var $i240: i16;
  var $i241: i32;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i26: i32;
  var $i9: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: ref;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i7 := mpt_attach($p0, $p1);
    call {:si_unique_call 315} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p10 := pci_get_drvdata($p0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} mptsas_fw_event_off($p11);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i12 := $M.37;
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(1715, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i14 := $M.38;
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(1716, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i16 := $M.39;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(1717, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i16);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(4880, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, mptsas_schedule_target_reset);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(4888, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, mptscsih_flush_running_cmds);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(276, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 536870912);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(280, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(1324, 1)), $mul.ref(38, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i36, 0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i38 := 0;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i38, 0);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p60 := scsi_host_alloc(mptsas_driver_template, 560);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(512, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p67 := spinlock_check($p66);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i68 := _raw_spin_lock_irqsave($p67);
    call {:si_unique_call 328} {:cexpr "flags"} boogie_si_record_i64($i68);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p60);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(688, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p70, 0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(696, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 0);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(700, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(584, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, 16);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(500, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, $sub.i32(0, 10));
    call {:si_unique_call 329} {:cexpr "__min1"} boogie_si_record_i32($i76);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(592, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    call {:si_unique_call 330} {:cexpr "__min2"} boogie_si_record_i32($i78);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i76, $i78);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(592, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(568, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $sub.i32(0, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i83 := $M.40;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(572, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p85 := $M.41;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(520, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $p85);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(0, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(580, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} INIT_LIST_HEAD($p90);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} __mutex_init($p91, .str.174, $p2);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(2048, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} __mutex_init($p92, .str.175, $p3);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(0, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} __mutex_init($p94, .str.176, $p4);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(168, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} init_completion($p96);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(504, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(5706, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i102 := $sdiv.i32($i98, $i101);
    call {:si_unique_call 336} {:cexpr "scale"} boogie_si_record_i32($i102);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(5704, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 8);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i106 == 1);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i102, $sub.i32(0, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(1324, 1)), $mul.ref(20, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i129 := $add.i32($i128, $sub.i32(0, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i130 := $mul.i32($i124, $i129);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, 1);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i131, $i102);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(504, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i134, $sub.i32(0, 64));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(5706, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p136);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i139 := $sdiv.i32($i135, $i138);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i132, $i139);
    call {:si_unique_call 338} {:cexpr "numSGE"} boogie_si_record_i32($i140);
    assume {:verifier.code 0} true;
    $i123 := $i140;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(598, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i142 := $load.i16($M.0, $p141);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i142);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i144 := $sgt.i32($i143, $i123);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i157 := $M.42;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p183 := shost_priv($p60);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p184, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p185, $p10);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(500, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i187);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $p189 := kcalloc($i188, 8, 32);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(5368, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p191, $p189);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(5368, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p193);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i195 := $eq.i64($i194, 0);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(5376, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} vslice_dummy_var_95 := spinlock_check($p197);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(5376, 1)), $mul.ref(0, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} __raw_spin_lock_init($p201, .str.180, $p5);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i204 := $and.i32($i203, 1);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i211 := $M.43;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i32.i8($i211);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(944, 1)), $mul.ref(0, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p214, $i212);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p184, $mul.ref(0, 560)), $mul.ref(528, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p215, 0);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p184, $mul.ref(0, 560)), $mul.ref(544, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} INIT_LIST_HEAD($p216);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(2248, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} INIT_LIST_HEAD($p217);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} __mutex_init($p218, .str.182, $p6);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(512, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} spin_unlock_irqrestore($p219, $i68);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(944, 1)), $mul.ref(0, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.0, $p221);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i222);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 1);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p227, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i229 := scsi_add_host($p60, $p228);
    call {:si_unique_call 355} {:cexpr "error"} boogie_si_record_i32($i229);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i230 := $ne.i32($i229, 0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(1324, 1)), $mul.ref(4, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i240 := $load.i16($M.0, $p239);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i241 := $zext.i16.i32($i240);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i242 := $ashr.i32($i241, 8);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i243 := $ule.i32($i242, 13);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} mptsas_scan_sas_topology($p11);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} mptsas_fw_event_on($p11);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i243 == 1;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(2432, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p244, 1);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb62:
    assume $i230 == 1;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.0, $p231);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i233 := $and.i32($i232, 1);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i26 := $i229;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} mptscsih_remove($p0);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i9 := $i26;
    goto $bb3;

  $bb64:
    assume $i234 == 1;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p235);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_98 := printk.ref.ref(.str.183, $p236);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb59:
    assume $i224 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_97 := mptbase_sas_persist_operation($p11, 2);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i205 == 1;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(5368, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_96 := printk.ref.ref.ref(.str.181, $p207, $p209);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i195 == 1;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(512, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} spin_unlock_irqrestore($p196, $i68);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb7;

  $bb41:
    assume $i158 == 1;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i159 := $M.42;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i160 := $sle.i32($i159, 63);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i160 == 1);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i161 := $M.42;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i162 := $sgt.i32($i161, 8192);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i167 := $M.42;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i168 := $and.i32($i167, $sub.i32(0, 2));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.42 := $i168;
    call {:si_unique_call 341} {:cexpr "mpt_loadtime_max_sectors"} boogie_si_record_i32($i168);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i170, 1);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i180 := $M.42;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i16($i180);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(602, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p182, $i181);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i172 == 1;
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i175 := $M.42;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(602, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i177 := $load.i16($M.0, $p176);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i178 := $zext.i16.i32($i177);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} vslice_dummy_var_94 := printk.ref.ref.i32.i32(.str.179, $p174, $i175, $i178);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i165 := $M.42;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} vslice_dummy_var_93 := printk.ref.ref.i32(.str.178, $p164, $i165);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb44;

  $bb35:
    assume $i144 == 1;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i16($i123);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(598, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p156, $i155);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i148 == 1;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p60, $mul.ref(0, 3032)), $mul.ref(598, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i152 := $load.i16($M.0, $p151);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i152);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_92 := printk.ref.ref.i32.i32(.str.177, $p150, $i123, $i153);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb32:
    assume $i106 == 1;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i102, $sub.i32(0, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(1324, 1)), $mul.ref(20, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, $sub.i32(0, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i113 := $mul.i32($i107, $i112);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, $i102);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(504, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i116, $sub.i32(0, 60));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(5706, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i121 := $sdiv.i32($i117, $i120);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i114, $i121);
    call {:si_unique_call 337} {:cexpr "numSGE"} boogie_si_record_i32($i122);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i123 := $i122;
    goto $bb34;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i80 := $i76;
    goto $bb31;

  $bb26:
    assume $i62 == 1;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_91 := printk.ref.ref(.str.173, $p64);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 1);
    goto $bb7;

  $bb23:
    assume $i56 == 1;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_90 := printk.ref.ref.ref(.str.172, $p58, $p11);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i39, $i40 := 0, 0;
    goto $bb15;

  $bb15:
    call $i41, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i39, $i40, $i55 := mptsas_probe_loop_$bb15($p11, $p34, $i41, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i39, $i40, $i55);
    goto $bb15_last;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(1404, 1)), $mul.ref($i41, 40)), $mul.ref(26, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 8);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i39;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i40, 1);
    call {:si_unique_call 322} {:cexpr "ii"} boogie_si_record_i32($i51);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p34);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i53, $i51);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i55 := $i50;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i38 := $i55;
    goto $bb14;

  $bb20:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i39, $i40 := $i50, $i51;
    goto $bb20_dummy;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i39, 1);
    call {:si_unique_call 321} {:cexpr "ioc_cap"} boogie_si_record_i32($i49);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb19;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_89 := printk.ref.ref(.str.171, $p31);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 19);
    goto $bb7;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p11, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} vslice_dummy_var_88 := printk.ref.ref(.str.170, $p24);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 19);
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1396;
}



const mptsas_remove: ref;

axiom mptsas_remove == $sub.ref(0, 297470);

procedure mptsas_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $M.44;



implementation mptsas_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $i34: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p27: ref;
  var $p28: ref;
  var $p56: ref;
  var $p57: ref;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} mptsas_shutdown($p0);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} mptsas_del_device_components($p2);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2217, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 1);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} sas_remove_host($p12);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} ldv_mutex_lock_66($p13);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(1744, 1)), $mul.ref(0, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i23, $i25);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} ldv_mutex_unlock_67($p56);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(2224, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $0.ref);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} mptscsih_remove($p0);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p20, $p16;
    goto $bb8;

  $bb8:
    call $p29, $p30, $i31, $i32, $i33, $p35, $p36, $i37, $p39, $p40, $i41, $i42, $i43, $i44, $i34, $p45, $p46, $p47, $p48, $p50, $p51, $p53, $i54, $i55, $p27, $p28 := mptsas_remove_loop_$bb8($p2, $i25, $p29, $p30, $i31, $i32, $i33, $p35, $p36, $i37, $p39, $p40, $i41, $i42, $i43, $i44, $i34, $p45, $p46, $p47, $p48, $p50, $p51, $p53, $i54, $i55, $p27, $p28);
    goto $bb8_last;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} list_del($p29);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i32, 0);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} kfree($p47);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p28);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} kfree($p48);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p27, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, $i25);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i55 == 1);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb18:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p27, $p28 := $p51, $p27;
    goto $bb18_dummy;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb13;

  $bb13:
    call $p35, $p36, $i37, $p39, $p40, $i41, $i42, $i43, $i44, $i34 := mptsas_remove_loop_$bb13($p2, $p30, $p35, $p36, $i37, $p39, $p40, $i41, $i42, $i43, $i44, $i34, $p28);
    goto $bb13_last;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i34);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p36, $mul.ref($i37, 112)), $mul.ref(104, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} mptsas_port_delete($p2, $p40);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i34, 1);
    call {:si_unique_call 368} {:cexpr "i"} boogie_si_record_i32($i41);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p30);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, $i41);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i41;
    goto $bb15_dummy;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_99 := printk.ref.ref(.str.186, $p8);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} mpt_detach($p0);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  $bb18_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1714;
}



const mptscsih_suspend: ref;

axiom mptscsih_suspend == $sub.ref(0, 298502);

procedure mptscsih_suspend($p0: ref, $i1: i32) returns ($r: i32);



const mptscsih_resume: ref;

axiom mptscsih_resume == $sub.ref(0, 299534);

procedure mptscsih_resume($p0: ref) returns ($r: i32);



const mptsas_shutdown: ref;

axiom mptsas_shutdown == $sub.ref(0, 300566);

procedure mptsas_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation mptsas_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} mptsas_fw_event_off($p2);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} mptsas_cleanup_fw_event_q($p2);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 301598);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mptsas_fw_event_off: ref;

axiom mptsas_fw_event_off == $sub.ref(0, 302630);

procedure mptsas_fw_event_off($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation mptsas_fw_event_off($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1952, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p2 := spinlock_check($p1);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 379} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2024, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 1);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2433, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1952, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} spin_unlock_irqrestore($p6, $i3);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    return;
}



const mptsas_cleanup_fw_event_q: ref;

axiom mptsas_cleanup_fw_event_q == $sub.ref(0, 303662);

procedure mptsas_cleanup_fw_event_q($p0: ref);
  free requires assertsPassed;



implementation mptsas_cleanup_fw_event_q($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p21: ref;
  var $p22: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p71: ref;
  var $i72: i1;
  var $i73: i8;
  var $i74: i1;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p69: ref;
  var $p70: ref;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p3 := shost_priv($p2);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 560)), $mul.ref(544, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i6 := list_empty($p5);
    call {:si_unique_call 383} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1936, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i44 := list_empty($p43);
    call {:si_unique_call 388} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i45 == 1);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1928, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $p50 := current_thread_info();
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i54 := $and.i64($i53, 134217472);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1936, 1)), $mul.ref(0, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p59, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1936, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i65, $i67);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i68 == 1;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p69, $p70 := $p58, $p62;
    goto $bb28;

  $bb28:
    call $p71, $i72, $i73, $i74, $p76, $p77, $p79, $i80, $i81, $p69, $p70 := mptsas_cleanup_fw_event_q_loop_$bb28($p0, $i67, $p71, $i72, $i73, $i74, $p76, $p77, $p79, $i80, $i81, $p69, $p70);
    goto $bb28_last;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p69, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i72 := cancel_delayed_work($p71);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i8($i72);
    call {:si_unique_call 391} {:cexpr "tmp___3"} boogie_si_record_i8($i73);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i8.i1($i73);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p70, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, $i67);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i81 == 1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb33:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $p69, $p70 := $p70, $p77;
    goto $bb33_dummy;

  $bb30:
    assume $i74 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} mptsas_free_fw_event($p0, $p69);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb21:
    assume $i55 == 1;
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb16;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 560)), $mul.ref(544, 1)), $mul.ref(0, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 560)), $mul.ref(544, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i17, $i19);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p21, $p22 := $p14, $p10;
    goto $bb6;

  $bb6:
    call $p23, $i24, $i25, $i26, $p27, $p28, $p30, $i31, $i32, $p34, $p35, $p37, $p38, $p40, $i41, $i42, $p21, $p22, vslice_dummy_var_100 := mptsas_cleanup_fw_event_q_loop_$bb6($p0, $i19, $p23, $i24, $i25, $i26, $p27, $p28, $p30, $i31, $i32, $p34, $p35, $p37, $p38, $p40, $i41, $i42, $p21, $p22, vslice_dummy_var_100);
    goto $bb6_last;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 256);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p22, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} list_del($p34);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p22);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} kfree($p35);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, $i19);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p21, $p22 := $p38, $p21;
    goto $bb11_dummy;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_100 := printk.ref.ref.ref.i32(.str.54, $p28, .str.55, $i32);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb33_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1869;

  $bb11_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1807;
}



const shost_priv: ref;

axiom shost_priv == $sub.ref(0, 304694);

procedure shost_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation shost_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3032)), $mul.ref(3032, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 305726);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 306758);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 307790);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} free_($p0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 308822);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i0 := devirtbounce.6(0, kernel_stack);
    call {:si_unique_call 395} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 8152);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const cancel_delayed_work: ref;

axiom cancel_delayed_work == $sub.ref(0, 309854);

procedure cancel_delayed_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 1} true;
    call {:si_unique_call 396} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 397} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mptsas_free_fw_event: ref;

axiom mptsas_free_fw_event == $sub.ref(0, 310886);

procedure mptsas_free_fw_event($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mptsas_free_fw_event($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1952, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p3 := spinlock_check($p2);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 400} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 8);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} list_del($p12);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} kfree($p13);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1952, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} spin_unlock_irqrestore($p14, $i4);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} vslice_dummy_var_101 := printk.ref.ref.ref.ref(.str.56, $p10, .str.57, $p1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 311918);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 312950);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 1} true;
    call {:si_unique_call 405} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 406} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 313982);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 315014);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 316046);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 410} $free($p0);
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 317078);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p1 := external_alloc();
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const mpt_detach: ref;

axiom mpt_detach == $sub.ref(0, 318110);

procedure mpt_detach($p0: ref);
  free requires assertsPassed;



implementation mpt_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    return;
}



const mptsas_del_device_components: ref;

axiom mptsas_del_device_components == $sub.ref(0, 319142);

procedure mptsas_del_device_components($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation mptsas_del_device_components($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p15: ref;
  var $p16: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} ldv_mutex_lock_16($p1);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1)), $mul.ref(0, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} ldv_mutex_unlock_17($p26);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p17, $p18, $p20, $p21, $p23, $i24, $i25, $p15, $p16 := mptsas_del_device_components_loop_$bb4($i13, $p17, $p18, $p20, $p21, $p23, $i24, $i25, $p15, $p16);
    goto $bb4_last;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} list_del($p17);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p16);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} kfree($p18);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p15, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i13);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16 := $p21, $p15;
    goto $bb6_dummy;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;
}



const sas_remove_host: ref;

axiom sas_remove_host == $sub.ref(0, 320174);

procedure sas_remove_host($p0: ref);
  free requires assertsPassed;



implementation sas_remove_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_66: ref;

axiom ldv_mutex_lock_66 == $sub.ref(0, 321206);

procedure ldv_mutex_lock_66($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_66($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} mutex_lock($p0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const mptsas_port_delete: ref;

axiom mptsas_port_delete == $sub.ref(0, 322238);

procedure mptsas_port_delete($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation mptsas_port_delete($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i24: i8;
  var $p25: ref;
  var $p43: ref;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 2097152);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32(0, $i22);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p1);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} kfree($p43);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i24, $p25 := 0, $p7;
    goto $bb11;

  $bb11:
    call $p26, $p27, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i24, $p25, cmdloc_dummy_var_20, cmdloc_dummy_var_21 := mptsas_port_delete_loop_$bb11($p0, $p1, $p20, $p26, $p27, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i24, $p25, cmdloc_dummy_var_20, cmdloc_dummy_var_21);
    goto $bb11_last;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p1);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i28, $i29);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p25, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 420} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p32, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} mptsas_set_rphy($p0, $p25, $0.ref);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p25, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i24);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    call {:si_unique_call 419} {:cexpr "i"} boogie_si_record_i8($i36);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p25, $mul.ref(1, 112));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i16($i36);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p20);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i39, $i41);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i24, $p25 := $i36, $p37;
    goto $bb17_dummy;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} vslice_dummy_var_102 := printk.ref.ref.ref.ref.i32.i64(.str.97, $p13, .str.98, $p1, $i16, $i18);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2026;
}



const ldv_mutex_unlock_67: ref;

axiom ldv_mutex_unlock_67 == $sub.ref(0, 323270);

procedure ldv_mutex_unlock_67($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_67($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} mutex_unlock($p0);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const mptscsih_remove: ref;

axiom mptscsih_remove == $sub.ref(0, 324302);

procedure mptscsih_remove($p0: ref);
  free requires assertsPassed;



implementation mptscsih_remove($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    return;
}



const mptsas_set_rphy: ref;

axiom mptsas_set_rphy == $sub.ref(0, 325334);

procedure mptsas_set_rphy($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation mptsas_set_rphy($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p2);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 2097152);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 2097152);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1208)), $mul.ref(0, 1)), $mul.ref(1128, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_105 := printk.ref.ref.ref.ref(.str.48, $p32, $p2, $p35);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 1208)), $mul.ref(0, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vslice_dummy_var_104 := dev_printk.ref.ref.ref.ref(.str.32, $p23, .str.45, $p25);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p2);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2097152);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_103 := printk.ref.ref.ref(.str.47, $p15, $p2);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const dev_printk: ref;

axiom dev_printk == $sub.ref(0, 326366);

procedure dev_printk.ref.ref.ref.ref.i32.i32.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.i32.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 1} true;
    call {:si_unique_call 428} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 429} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 1} true;
    call {:si_unique_call 430} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 431} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 1} true;
    call {:si_unique_call 432} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 433} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.ref.i32.i32.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i64) returns ($r: i32);



procedure dev_printk.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 434} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 435} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);



procedure dev_printk.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



procedure dev_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 1} true;
    call {:si_unique_call 436} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 437} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_16: ref;

axiom ldv_mutex_lock_16 == $sub.ref(0, 327398);

procedure ldv_mutex_lock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_mutex_lock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} ldv_mutex_lock_sas_device_info_mutex($p0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} mutex_lock($p0);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_17: ref;

axiom ldv_mutex_unlock_17 == $sub.ref(0, 328430);

procedure ldv_mutex_unlock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_mutex_unlock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} ldv_mutex_unlock_sas_device_info_mutex($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} mutex_unlock($p0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_sas_device_info_mutex: ref;

axiom ldv_mutex_unlock_sas_device_info_mutex == $sub.ref(0, 329462);

procedure ldv_mutex_unlock_sas_device_info_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_mutex_unlock_sas_device_info_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i1 := $M.44;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} ldv_error();
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 443} {:cexpr "ldv_mutex_sas_device_info_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_sas_device_info_mutex: ref;

axiom ldv_mutex_lock_sas_device_info_mutex == $sub.ref(0, 330494);

procedure ldv_mutex_lock_sas_device_info_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_mutex_lock_sas_device_info_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i1 := $M.44;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} ldv_error();
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 445} {:cexpr "ldv_mutex_sas_device_info_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mpt_attach: ref;

axiom mpt_attach == $sub.ref(0, 331526);

procedure mpt_attach($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mpt_attach($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 446} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 447} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mptsas_schedule_target_reset: ref;

axiom mptsas_schedule_target_reset == $sub.ref(0, 332558);

procedure mptsas_schedule_target_reset($p0: ref);



const mptscsih_flush_running_cmds: ref;

axiom mptscsih_flush_running_cmds == $sub.ref(0, 333590);

procedure mptscsih_flush_running_cmds($p0: ref);



const scsi_host_alloc: ref;

axiom scsi_host_alloc == $sub.ref(0, 334622);

procedure scsi_host_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_host_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} {:cexpr "scsi_host_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $p2 := external_alloc();
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 335654);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 336686);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 337718);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} __init_waitqueue_head($p3, .str.185, $p1);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 338750);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 453} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 454} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 339782);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    return;
}



const mptbase_sas_persist_operation: ref;

axiom mptbase_sas_persist_operation == $sub.ref(0, 340814);

procedure mptbase_sas_persist_operation($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation mptbase_sas_persist_operation($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 456} {:cexpr "mptbase_sas_persist_operation:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 1} true;
    call {:si_unique_call 457} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const scsi_add_host: ref;

axiom scsi_add_host == $sub.ref(0, 341846);

procedure scsi_add_host($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_add_host($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i2 := scsi_add_host_with_dma($p0, $p1, $p1);
    call {:si_unique_call 460} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mptsas_scan_sas_topology: ref;

axiom mptsas_scan_sas_topology == $sub.ref(0, 342878);

procedure mptsas_scan_sas_topology($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.55, $M.61, assertsPassed, $M.81, $M.4, $CurrAddr, $M.25;



implementation mptsas_scan_sas_topology($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $i25: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_106 := mptsas_probe_hba_phys($p0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} mptsas_probe_expanders($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} mptsas_probe_devices($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1696, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, 0);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb13;

  $bb13:
    call $p26, $p27, $i28, $p30, $p31, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $p41, $i42, $p44, $p45, $p48, $i49, $i50, $p52, $p53, $i54, $p56, $p57, $p60, $i61, $i62, $i64, $p65, $p66, $i67, $i68, $i69, $i25, vslice_dummy_var_107, vslice_dummy_var_108 := mptsas_scan_sas_topology_loop_$bb13($p0, $p19, $p26, $p27, $i28, $p30, $p31, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $p41, $i42, $p44, $p45, $p48, $i49, $i50, $p52, $p53, $i54, $p56, $p57, $p60, $i61, $i62, $i64, $p65, $p66, $i67, $i68, $i69, $i25, vslice_dummy_var_107, vslice_dummy_var_108);
    goto $bb13_last;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i25);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 20)), $mul.ref(12, 1)), $mul.ref($i28, 8)), $mul.ref(0, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p37 := scsi_device_lookup($p27, 1, $i36, 0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i25);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 20)), $mul.ref(12, 1)), $mul.ref($i42, 8)), $mul.ref(0, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_107 := printk.ref.ref.i32.i32(.str.101, $p41, 1, $i50);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i25);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 20)), $mul.ref(12, 1)), $mul.ref($i54, 8)), $mul.ref(0, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_108 := scsi_add_device($p53, 1, $i62, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i25, 1);
    call {:si_unique_call 466} {:cexpr "i"} boogie_si_record_i32($i64);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p19);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i68, $i64);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i25 := $i64;
    goto $bb19_dummy;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} scsi_device_put($p37);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb19_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2220;
}



const mptsas_fw_event_on: ref;

axiom mptsas_fw_event_on == $sub.ref(0, 343910);

procedure mptsas_fw_event_on($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation mptsas_fw_event_on($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1952, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p2 := spinlock_check($p1);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 471} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2024, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1952, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} spin_unlock_irqrestore($p5, $i3);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    return;
}



const mptsas_probe_hba_phys: ref;

axiom mptsas_probe_hba_phys == $sub.ref(0, 344942);

procedure mptsas_probe_hba_phys($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.55, assertsPassed, $M.81, $M.4, $CurrAddr, $M.25;



implementation mptsas_probe_hba_phys($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p30: ref;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p41: ref;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p52: ref;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i1;
  var $i25: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p20: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p82: ref;
  var $i83: i16;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $i115: i8;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $p132: ref;
  var $i133: i16;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $p146: ref;
  var $i147: i16;
  var $i148: i32;
  var $i150: i32;
  var $i151: i16;
  var $i152: i32;
  var $i153: i1;
  var $i72: i32;
  var $p154: ref;
  var $i155: i16;
  var $i156: i32;
  var $i157: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i64;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i169: i32;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $p173: ref;
  var $i174: i16;
  var $i175: i32;
  var $i176: i1;
  var $i158: i32;
  var $p178: ref;
  var $i5: i32;
  var $i177: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p1 := kzalloc(32, 208);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i6 := mptsas_sas_io_unit_pg0($p0, $p2);
    call {:si_unique_call 475} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_109 := mptsas_sas_io_unit_pg1($p0);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} ldv_mutex_lock_41($p9);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2224, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, 0);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} kfree($p65);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p2);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} kfree($p66);
    assume {:verifier.code 0} true;
    $p20 := $p11;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} ldv_mutex_unlock_42($p67);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.0, $p68);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i71 := $sgt.i32($i70, 0);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} mptsas_setup_wide_ports($p0, $p20);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i155 := $load.i16($M.0, $p154);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i155);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i157 := $sgt.i32($i156, 0);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i177 := 0;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $r := $i177;
    return;

  $bb34:
    assume $i157 == 1;
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i158 := 0;
    goto $bb37;

  $bb37:
    call $p159, $p160, $p161, $p162, $p163, $i164, $p165, $p166, $i167, $i169, $p170, $i171, $i172, $p173, $i174, $i175, $i176, $i158, vslice_dummy_var_113 := mptsas_probe_hba_phys_loop_$bb37($p0, $p20, $p154, $p159, $p160, $p161, $p162, $p163, $i164, $p165, $p166, $i167, $i169, $p170, $i171, $i172, $p173, $i174, $i175, $i176, $i158, vslice_dummy_var_113);
    goto $bb37_last;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 3032)), $mul.ref(712, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i158);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p163, $mul.ref($i164, 112));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_113 := mptsas_probe_one_phy($p161, $p165, $i167, 1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i158, 1);
    call {:si_unique_call 491} {:cexpr "i"} boogie_si_record_i32($i169);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i171, 1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p173, $i172);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i174 := $load.i16($M.0, $p154);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i175 := $zext.i16.i32($i174);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i176 := $sgt.i32($i175, $i169);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i176 == 1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb39:
    assume $i176 == 1;
    assume {:verifier.code 0} true;
    $i158 := $i169;
    goto $bb39_dummy;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb23;

  $bb23:
    call $p73, $p74, $i75, $p76, $p78, $p79, $i80, $p82, $i83, $p84, $p85, $i86, $p89, $p90, $p91, $i92, $p94, $p95, $p96, $i97, $p100, $i101, $i102, $p104, $i105, $i106, $p107, $p108, $i109, $p112, $i113, $p114, $i115, $p116, $p117, $i118, $p120, $p121, $p122, $i123, $p126, $p127, $p128, $i129, $p132, $i133, $i134, $i135, $p136, $p137, $i138, $p140, $p141, $p142, $i143, $p146, $i147, $i148, $i150, $i151, $i152, $i153, $i72, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112 := mptsas_probe_hba_phys_loop_$bb23($p0, $p20, $p68, $p73, $p74, $i75, $p76, $p78, $p79, $i80, $p82, $i83, $p84, $p85, $i86, $p89, $p90, $p91, $i92, $p94, $p95, $p96, $i97, $p100, $i101, $i102, $p104, $i105, $i106, $p107, $p108, $i109, $p112, $i113, $p114, $i115, $p116, $p117, $i118, $p120, $p121, $p122, $i123, $p126, $p127, $p128, $i129, $p132, $i133, $i134, $i135, $p136, $p137, $i138, $p140, $p141, $p142, $i143, $p146, $i147, $i148, $i150, $i151, $i152, $i153, $i72, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112);
    goto $bb23_last;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i72);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p74, $mul.ref($i75, 112));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_110 := mptsas_sas_phy_pg0($p0, $p76, 0, $i72);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i72);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p79, $mul.ref($i80, 112)), $mul.ref(0, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i72);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p85, $mul.ref($i86, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $i83);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i72);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p91, $mul.ref($i92, 112)), $mul.ref(8, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i72);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p96, $mul.ref($i97, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_111 := mptsas_sas_device_pg0($p0, $p94, 536870912, $i102);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2232, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, $p104);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i106 := $eq.i64($i105, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i72);
    call {:si_unique_call 486} {:cexpr "tmp___0"} boogie_si_record_i8($i115);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i72);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p117, $mul.ref($i118, 112)), $mul.ref(2, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, $i115);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i72);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p122, $mul.ref($i123, 112)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, $i115);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i72);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p128, $mul.ref($i129, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i133 := $load.i16($M.0, $p132);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i133);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i72, 1);
    call {:si_unique_call 488} {:cexpr "i"} boogie_si_record_i32($i150);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i151 := $load.i16($M.0, $p68);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i151);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i153 := $sgt.i32($i152, $i150);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i153 == 1);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb31:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    $i72 := $i150;
    goto $bb31_dummy;

  $bb28:
    assume $i135 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i72);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p137, $mul.ref($i138, 112)), $mul.ref(48, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i72);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p142, $mul.ref($i143, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i147 := $load.i16($M.0, $p146);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i148 := $zext.i16.i32($i147);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_112 := mptsas_sas_device_pg0($p0, $p140, 536870912, $i148);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i106 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i72);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p108, $mul.ref($i109, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i113 := $load.i64($M.0, $p112);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2232, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p114, $i113);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb15;

  $bb15:
    call $p26, $p27, $i28, $p30, $i31, $p32, $p33, $i34, $p36, $p37, $p38, $i39, $p41, $i42, $p43, $p44, $i45, $p47, $p48, $p49, $i50, $p52, $i53, $p54, $p55, $i56, $p58, $i59, $i60, $i61, $i62, $i25 := mptsas_probe_hba_phys_loop_$bb15($p2, $p11, $p21, $p26, $p27, $i28, $p30, $i31, $p32, $p33, $i34, $p36, $p37, $p38, $i39, $p41, $i42, $p43, $p44, $i45, $p47, $p48, $p49, $i50, $p52, $i53, $p54, $p55, $i56, $p58, $i59, $i60, $i61, $i62, $i25);
    goto $bb15_last;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i25);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p27, $mul.ref($i28, 112)), $mul.ref(4, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i25);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p33, $mul.ref($i34, 112)), $mul.ref(4, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i31);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i25);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p38, $mul.ref($i39, 112)), $mul.ref(0, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i25);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p44, $mul.ref($i45, 112)), $mul.ref(0, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i42);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i25);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p49, $mul.ref($i50, 112)), $mul.ref(3, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i25);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref($i56, 112)), $mul.ref(3, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i53);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i25, 1);
    call {:si_unique_call 481} {:cexpr "i"} boogie_si_record_i32($i59);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p21);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, $i59);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i62 == 1);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i25 := $i59;
    goto $bb17_dummy;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2224, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2240, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $i16);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} list_add_tail($p18, $p19);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p20 := $p1;
    goto $bb11;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p2);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} kfree($p178);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i177 := $i5;
    goto $bb42;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb39_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2478;

  $bb31_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;
}



const mptsas_probe_expanders: ref;

axiom mptsas_probe_expanders == $sub.ref(0, 345974);

procedure mptsas_probe_expanders($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.61, $M.55, $M.26, $CurrAddr, assertsPassed, $M.4, $M.25;



implementation mptsas_probe_expanders($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i21: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i16;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i16;
  var $i77: i32;
  var $i78: i1;
  var $i69: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $i92: i64;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i2 := mptsas_sas_expander_pg0($p0, $p1, 0, 65535);
    call {:si_unique_call 494} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p4, $p5, $p6, $i7, $i8, $p9, $p10, $p12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $i22, $p23, $p24, $i25, $p27, $p28, $p29, $p31, $i32, $p33, $p34, $i35, $p38, $i39, $i40, $i41, $i42, $i21, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $p59, $i60, $p61, $p62, $p63, $p64, $p65, $i66, $i67, $i68, $p70, $p71, $i72, $p74, $i75, $i76, $i77, $i78, $i69, $p79, $p80, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $p88, $p89, $p91, $i92, vslice_dummy_var_115 := mptsas_probe_expanders_loop_$bb4($p0, $p1, $p4, $p5, $p6, $i7, $i8, $p9, $p10, $p12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $i22, $p23, $p24, $i25, $p27, $p28, $p29, $p31, $i32, $p33, $p34, $i35, $p38, $i39, $i40, $i41, $i42, $i21, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $p59, $i60, $p61, $p62, $p63, $p64, $p65, $i66, $i67, $i68, $p70, $p71, $i72, $p74, $i75, $i76, $i77, $i78, $i69, $p79, $p80, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $p88, $p89, $p91, $i92, vslice_dummy_var_115);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    call {:si_unique_call 495} {:cexpr "handle"} boogie_si_record_i32($i8);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p14 := mptsas_find_portinfo_by_sas_address($p0, $i13);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p48 := kzalloc(32, 208);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, $i60);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p63);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} ldv_mutex_lock_55($p79);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} list_add_tail($p80, $p81);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} ldv_mutex_unlock_56($p82);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p85);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p89, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p91);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} vslice_dummy_var_115 := printk.ref.ref.i32.i64(.str.2, $p84, $i87, $i92);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} mptsas_expander_refresh($p0, $p49);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i46 := mptsas_sas_expander_pg0($p0, $p1, 0, $i8);
    call {:si_unique_call 501} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb17_dummy;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i68 == 1;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb30;

  $bb30:
    call $p70, $p71, $i72, $p74, $i75, $i76, $i77, $i78, $i69 := mptsas_probe_expanders_loop_$bb30($p48, $p49, $p65, $p70, $p71, $i72, $p74, $i75, $i76, $i77, $i78, $i69);
    goto $bb30_last;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i69);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p71, $mul.ref($i72, 112)), $mul.ref(96, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p48);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i69, 1);
    call {:si_unique_call 504} {:cexpr "i"} boogie_si_record_i32($i75);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p65);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i77, $i75);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i78 == 1);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i69 := $i75;
    goto $bb32_dummy;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 128);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i55 == 1;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_114 := printk.ref.ref.ref.i32(.str, $p57, .str.115, 3987);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 0);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} mptsas_expander_refresh($p0, $p14);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} kfree($p45);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb11;

  $bb11:
    call $i22, $p23, $p24, $i25, $p27, $p28, $p29, $p31, $i32, $p33, $p34, $i35, $p38, $i39, $i40, $i41, $i42, $i21 := mptsas_probe_expanders_loop_$bb11($p1, $i8, $p14, $p17, $i22, $p23, $p24, $i25, $p27, $p28, $p29, $p31, $i32, $p33, $p34, $i35, $p38, $i39, $i40, $i41, $i42, $i21);
    goto $bb11_last;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i8);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i21);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref($i25, 112)), $mul.ref(0, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i22);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i21);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p34, $mul.ref($i35, 112)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, $i32);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i21, 1);
    call {:si_unique_call 497} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p17);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, $i39);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i39;
    goto $bb13_dummy;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb32_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2599;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const mptsas_probe_devices: ref;

axiom mptsas_probe_devices == $sub.ref(0, 347006);

procedure mptsas_probe_devices($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.55, $CurrAddr, $M.26, assertsPassed;



implementation mptsas_probe_devices($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i16;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i2 := mptsas_sas_device_pg0($p0, $p1, 0, 65535);
    call {:si_unique_call 512} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p4, $i5, $p6, $i7, $i8, $i9, $i10, $i11, $i12, $p13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $p26, $i27, $i28, vslice_dummy_var_116 := mptsas_probe_devices_loop_$bb4($p0, $p1, $p4, $i5, $p6, $i7, $i8, $i9, $i10, $i11, $i12, $p13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $p26, $i27, $i28, vslice_dummy_var_116);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.45, $p4);
    call {:si_unique_call 513} {:cexpr "handle"} boogie_si_record_i16($i5);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.45, $p6);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1664);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.45, $p13);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i17 == 1);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.45, $p18);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 2);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p23 := mptsas_refreshing_device_handles($p0, $p1);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p26 := mptsas_get_rphy($p23);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_116 := mptsas_add_end_device($p0, $p23);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i5);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i11 := mptsas_sas_device_pg0($p0, $p1, 0, $i10);
    call {:si_unique_call 515} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb9_dummy;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb18:
    assume $i25 == 1;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb13;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const scsi_device_lookup: ref;

axiom scsi_device_lookup == $sub.ref(0, 348038);

procedure scsi_device_lookup($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_device_lookup($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} {:cexpr "scsi_device_lookup:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 520} {:cexpr "scsi_device_lookup:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 521} {:cexpr "scsi_device_lookup:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p4 := external_alloc();
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const scsi_device_put: ref;

axiom scsi_device_put == $sub.ref(0, 349070);

procedure scsi_device_put($p0: ref);
  free requires assertsPassed;



implementation scsi_device_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    return;
}



const scsi_add_device: ref;

axiom scsi_add_device == $sub.ref(0, 350102);

procedure scsi_add_device($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_add_device($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 523} {:cexpr "scsi_add_device:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 524} {:cexpr "scsi_add_device:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 525} {:cexpr "scsi_add_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 526} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 527} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const mptsas_refreshing_device_handles: ref;

axiom mptsas_refreshing_device_handles == $sub.ref(0, 351134);

procedure mptsas_refreshing_device_handles($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed;



implementation mptsas_refreshing_device_handles($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i16;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i16;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i16;
  var $i77: i32;
  var $i78: i1;
  var $i16: i32;
  var $p79: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.45, $p2);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p4 := mptsas_find_phyinfo_by_sas_address($p0, $i3);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} ldv_mutex_lock_20($p11);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 0);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} ldv_mutex_unlock_21($p79);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb11;

  $bb11:
    call $p17, $p18, $i19, $p22, $i23, $p24, $i25, $i26, $p27, $i28, $p29, $p30, $i31, $p34, $p35, $i36, $p37, $p38, $i39, $p42, $p43, $i44, $p45, $p46, $i47, $p50, $p51, $i52, $p53, $p54, $i55, $p58, $p59, $i60, $p61, $p62, $i63, $p66, $p67, $i68, $p69, $p70, $i71, $p74, $i75, $i76, $i77, $i78, $i16 := mptsas_refreshing_device_handles_loop_$bb11($p1, $p8, $p12, $p17, $p18, $i19, $p22, $i23, $p24, $i25, $i26, $p27, $i28, $p29, $p30, $i31, $p34, $p35, $i36, $p37, $p38, $i39, $p42, $p43, $i44, $p45, $p46, $i47, $p50, $p51, $i52, $p53, $p54, $i55, $p58, $p59, $i60, $p61, $p62, $i63, $p66, $p67, $i68, $p69, $p70, $i71, $p74, $i75, $i76, $i77, $i78, $i16);
    goto $bb11_last;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i16);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p18, $mul.ref($i19, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.45, $p24);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i23, $i25);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.45, $p27);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i16);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p30, $mul.ref($i31, 112)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i28);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(10, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.45, $p35);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i16);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p38, $mul.ref($i39, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i36);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.45, $p43);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i16);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, $i44);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.45, $p51);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i16);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p54, $mul.ref($i55, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, $i52);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(2, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.45, $p59);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i16);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p62, $mul.ref($i63, 112)), $mul.ref(48, 1)), $mul.ref(2, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p66, $i60);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.45, $p67);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i16);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p70, $mul.ref($i71, 112)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p74, $i68);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i16, 1);
    call {:si_unique_call 530} {:cexpr "i"} boogie_si_record_i32($i75);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p12);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i77, $i75);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i78 == 1);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i75;
    goto $bb17_dummy;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2715;
}



const mptsas_get_rphy: ref;

axiom mptsas_get_rphy == $sub.ref(0, 352166);

procedure mptsas_get_rphy($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mptsas_get_rphy($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;
}



const mptsas_add_end_device: ref;

axiom mptsas_add_end_device == $sub.ref(0, 353198);

procedure mptsas_add_end_device($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation mptsas_add_end_device($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p14: ref;
  var $i15: i8;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i12: i32;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    call {:si_unique_call 534} {:cexpr "fw_id"} boogie_si_record_i8($i15);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p16 := mptsas_get_rphy($p1);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p27 := mptsas_get_port($p1);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 1024);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $p43 := $0.ref;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 512);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $p49 := $p43;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 128);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $p55 := $p49;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_120 := printk.ref.ref.ref.i32.i32.i32.i64(.str.117, $p57, $p55, $i61, $i65, $i69, $i72);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} mptsas_parse_device_info($p2, $p74);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p75 := sas_end_device_alloc($p27);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p75, $mul.ref(0, 1208)), $mul.ref(1144, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p2);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 543} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p87, $p88, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i89 := sas_rphy_add($p75);
    call {:si_unique_call 545} {:cexpr "tmp___0"} boogie_si_record_i32($i89);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} mptsas_set_rphy($p0, $p1, $p75);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb35:
    assume $i90 == 1;
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 128);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} sas_rphy_free($p75);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i12 := 6;
    goto $bb6;

  $bb37:
    assume $i94 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i15);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_122 := printk.ref.ref.ref.i32.i32(.str.89, $p96, .str.116, $i97, 1528);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb29:
    assume $i77 == 1;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 128);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i12 := 5;
    goto $bb6;

  $bb31:
    assume $i81 == 1;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i15);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_121 := printk.ref.ref.ref.i32.i32(.str.89, $p83, .str.116, $i84, 1520);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume $i54 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p55 := .str.94;
    goto $bb28;

  $bb23:
    assume $i48 == 1;
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p49 := .str.93;
    goto $bb25;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p43 := .str.92;
    goto $bb22;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 128);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i12 := 3;
    goto $bb6;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i15);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_119 := printk.ref.ref.ref.i32.i32(.str.89, $p35, .str.116, $i36, 1495);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 128);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := 2;
    goto $bb6;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i15);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_118 := printk.ref.ref.ref.i32.i32(.str.89, $p24, .str.116, $i25, 1487);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 128);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_117 := printk.ref.ref.ref.i32(.str, $p10, .str.116, 1478);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const mptsas_sas_device_pg0: ref;

axiom mptsas_sas_device_pg0 == $sub.ref(0, 354230);

procedure mptsas_sas_device_pg0($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.55, $CurrAddr;



implementation mptsas_sas_device_pg0($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i16;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $p55: ref;
  var $p56: ref;
  var $i57: i16;
  var $p58: ref;
  var $p59: ref;
  var $i60: i16;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $p74: ref;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i16;
  var $p89: ref;
  var $i47: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $i95: i32;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i26: i32;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 553} {:cexpr "mptsas_sas_device_pg0:arg:form"} boogie_si_record_i32($i2);
    call {:si_unique_call 554} {:cexpr "mptsas_sas_device_pg0:arg:form_specific"} boogie_si_record_i32($i3);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 5);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p9, 0);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 0);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 15);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 18);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, $p4);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i2, $i3);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p18, $i17);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p19, $sub.i64(0, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p20, 0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(23, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p21, 0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p22, 30);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 555} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p23, 0, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i24 := mpt_config($p0, $p5);
    call {:si_unique_call 557} {:cexpr "error"} boogie_si_record_i32($i24);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.1, $p27);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p33);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i35, 4);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $p38 := pci_alloc_consistent($p32, $i37, $p6);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.4, $p6);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p43, $i42);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p44, 1);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i45 := mpt_config($p0, $p5);
    call {:si_unique_call 560} {:cexpr "error"} boogie_si_record_i32($i45);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 34);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i45, 0);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} mptsas_print_device_pg0($p0, $p39);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p1);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 563} cmdloc_dummy_var_28 := $memset.i8(cmdloc_dummy_var_27, $p49, 0, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.47, $p50);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $i51);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.48, $p53);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(2, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, $i54);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(10, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.49, $p56);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, $i57);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.50, $p59);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, $i60);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(22, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.51, $p62);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $i63);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(34, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.52, $p65);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(9, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i66);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(26, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.53, $p68);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(10, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, $i69);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $sub.i32(0, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(27, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.54, $p72);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i73);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i75 := $ugt.i64(8, 63);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i75 == 1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p7);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.55;
    cmdloc_dummy_var_33 := $M.55;
    call {:si_unique_call 565} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p79, $p81, 8, $zext.i32.i64(4), 0 == 1);
    $M.55 := cmdloc_dummy_var_34;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.55, $p7);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, $i82);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.56, $p84);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.57, $p87);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $i88);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.1, $p92);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i95 := $mul.i32($i94, 4);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i95);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p39);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.4, $p6);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} pci_free_consistent($p91, $i96, $p97, $i98);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i26 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb18:
    assume $i75 == 1;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p7);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p39, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.55;
    cmdloc_dummy_var_30 := $M.55;
    call {:si_unique_call 564} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p76, $p78, 8, $zext.i32.i64(4), 0 == 1);
    $M.55 := cmdloc_dummy_var_31;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb13;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 19);
    goto $bb13;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb3;
}



const mptsas_print_device_pg0: ref;

axiom mptsas_print_device_pg0 == $sub.ref(0, 355262);

procedure mptsas_print_device_pg0($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.55, $CurrAddr;



implementation mptsas_print_device_pg0($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i64(8, 63);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.55;
    cmdloc_dummy_var_39 := $M.55;
    call {:si_unique_call 568} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p7, $p9, 8, $zext.i32.i64(4), 0 == 1);
    $M.55 := cmdloc_dummy_var_40;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1048576);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1048576);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1048576);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 1048576);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 1048576);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 1048576);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 1048576);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 1048576);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 1048576);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 1048576);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 1048576);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 1048576);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 1048576);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    return;

  $bb40:
    assume $i127 == 1;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(34, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.52, $p130);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_135 := printk.ref.ref.i32(.str.29, $p129, $i132);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i117 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.57, $p120);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} vslice_dummy_var_134 := printk.ref.ref.i32(.str.28, $p119, $i122);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i108 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.56, $p111);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} vslice_dummy_var_133 := printk.ref.ref.i32(.str.27, $p110, $i112);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i98 == 1;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(23, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.58, $p101);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} vslice_dummy_var_132 := printk.ref.ref.i32(.str.26, $p100, $i103);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i88 == 1;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(22, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.51, $p91);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_131 := printk.ref.ref.i32(.str.25, $p90, $i93);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i78 == 1;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(27, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.54, $p81);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} vslice_dummy_var_130 := printk.ref.ref.i32(.str.24, $p80, $i83);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i68 == 1;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(26, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.53, $p71);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_129 := printk.ref.ref.i32(.str.23, $p70, $i73);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i60 == 1;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.55, $p2);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_128 := printk.ref.ref.i64(.str.22, $p62, $i63);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.50, $p53);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_127 := printk.ref.ref.i32(.str.21, $p52, $i55);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(10, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.49, $p43);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_126 := printk.ref.ref.i32(.str.20, $p42, $i45);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.48, $p33);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_125 := printk.ref.ref.i32(.str.19, $p32, $i35);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.47, $p23);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_124 := printk.ref.ref.i32(.str.18, $p22, $i25);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_123 := printk.ref.ref(.str.17, $p15);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.55;
    cmdloc_dummy_var_36 := $M.55;
    call {:si_unique_call 567} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p4, $p6, 8, $zext.i32.i64(4), 0 == 1);
    $M.55 := cmdloc_dummy_var_37;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mptsas_get_port: ref;

axiom mptsas_get_port == $sub.ref(0, 356294);

procedure mptsas_get_port($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mptsas_get_port($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;
}



const mptsas_parse_device_info: ref;

axiom mptsas_parse_device_info == $sub.ref(0, 357326);

procedure mptsas_parse_device_info($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation mptsas_parse_device_info($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i3);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i6);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 120);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    call {:si_unique_call 582} {:cexpr "protocols"} boogie_si_record_i16($i13);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i13);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 64);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i13);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 32);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i13);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 16);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i13);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 8);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1920);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    call {:si_unique_call 583} {:cexpr "protocols"} boogie_si_record_i16($i48);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i48);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 1024);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i48);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 512);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i48);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 256);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i48);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 128);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 7);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i80, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i80, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i83 == 1;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 3);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb28:
    assume $i82 == 1;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, 2);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i80, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i84 == 1);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 1);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb33:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i80, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb32;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, 0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb22:
    assume $i73 == 1;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, 1);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i76);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i66 == 1;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, 2);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i59 == 1;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, 4);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i52 == 1;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 8);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, 1);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 2);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 4);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 8);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sas_end_device_alloc: ref;

axiom sas_end_device_alloc == $sub.ref(0, 358358);

procedure sas_end_device_alloc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sas_end_device_alloc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p1 := external_alloc();
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sas_rphy_add: ref;

axiom sas_rphy_add == $sub.ref(0, 359390);

procedure sas_rphy_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sas_rphy_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 1} true;
    call {:si_unique_call 585} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 586} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sas_rphy_free: ref;

axiom sas_rphy_free == $sub.ref(0, 360422);

procedure sas_rphy_free($p0: ref);
  free requires assertsPassed;



implementation sas_rphy_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    return;
}



const mptsas_find_phyinfo_by_sas_address: ref;

axiom mptsas_find_phyinfo_by_sas_address == $sub.ref(0, 361454);

procedure mptsas_find_phyinfo_by_sas_address($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation mptsas_find_phyinfo_by_sas_address($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $i19: i32;
  var $p40: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p13: ref;
  var $p14: ref;
  var $p52: ref;
  var $p12: ref;
  var $p53: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} {:cexpr "mptsas_find_phyinfo_by_sas_address:arg:sas_address"} boogie_si_record_i64($i1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} ldv_mutex_lock_59($p2);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1744, 1)), $mul.ref(0, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} ldv_mutex_unlock_60($p53);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p13, $p14 := $0.ref, $p5;
    goto $bb4;

  $bb4:
    call $p15, $i16, $i17, $i18, $p20, $p21, $i22, $p24, $i25, $i26, $p27, $p28, $i29, $p32, $i33, $i34, $i35, $p36, $p37, $i38, $p39, $i41, $i42, $i43, $i44, $i19, $p40, $p46, $p47, $p48, $p49, $i50, $i51, $p13, $p14, $p52 := mptsas_find_phyinfo_by_sas_address_loop_$bb4($i1, $i10, $p15, $i16, $i17, $i18, $p20, $p21, $i22, $p24, $i25, $i26, $p27, $p28, $i29, $p32, $i33, $i34, $i35, $p36, $p37, $i38, $p39, $i41, $i42, $i43, $i44, $i19, $p40, $p46, $p47, $p48, $p49, $i50, $i51, $p13, $p14, $p52);
    goto $bb4_last;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p40 := $p13;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, $i10);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p52 := $p40;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p12 := $p52;
    goto $bb3;

  $bb22:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p13, $p14 := $p40, $p47;
    goto $bb22_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb9;

  $bb9:
    call $p20, $p21, $i22, $p24, $i25, $i26, $p27, $p28, $i29, $p32, $i33, $i34, $i35, $i41, $i42, $i43, $i44, $i19 := mptsas_find_phyinfo_by_sas_address_loop_$bb9($i1, $p15, $p20, $p21, $i22, $p24, $i25, $i26, $p27, $p28, $i29, $p32, $i33, $i34, $i35, $i41, $i42, $i43, $i44, $i19, $p14);
    goto $bb9_last;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i19);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref($i22, 112)), $mul.ref(48, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i25 := mptsas_is_end_device($p24);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i19);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p28, $mul.ref($i29, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i1);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i35 := $i19;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i35);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($i38, 112));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p40 := $p39;
    goto $bb18;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i19, 1);
    call {:si_unique_call 591} {:cexpr "i"} boogie_si_record_i32($i41);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p15);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, $i41);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb19:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i41;
    goto $bb19_dummy;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb19_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3438;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3429;
}



const ldv_mutex_lock_20: ref;

axiom ldv_mutex_lock_20 == $sub.ref(0, 362486);

procedure ldv_mutex_lock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} mutex_lock($p0);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 363518);

procedure ldv_mutex_unlock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} mutex_unlock($p0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_59: ref;

axiom ldv_mutex_lock_59 == $sub.ref(0, 364550);

procedure ldv_mutex_lock_59($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_59($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} mutex_lock($p0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const mptsas_is_end_device: ref;

axiom mptsas_is_end_device == $sub.ref(0, 365582);

procedure mptsas_is_end_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mptsas_is_end_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1664);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb8;
}



const ldv_mutex_unlock_60: ref;

axiom ldv_mutex_unlock_60 == $sub.ref(0, 366614);

procedure ldv_mutex_unlock_60($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_60($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} mutex_unlock($p0);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const mptsas_find_portinfo_by_sas_address: ref;

axiom mptsas_find_portinfo_by_sas_address == $sub.ref(0, 367646);

procedure mptsas_find_portinfo_by_sas_address($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation mptsas_find_portinfo_by_sas_address($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i16;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i42: i32;
  var $i43: i16;
  var $i44: i32;
  var $i45: i1;
  var $i31: i32;
  var $p30: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p25: ref;
  var $p41: ref;
  var $p53: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} {:cexpr "mptsas_find_portinfo_by_sas_address:arg:sas_address"} boogie_si_record_i64($i1);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2232, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i4 := $ule.i64($i3, $i1);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} ldv_mutex_lock_8($p15);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1744, 1)), $mul.ref(0, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i21, $i23);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p41 := $0.ref;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} ldv_mutex_unlock_9($p53);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p14 := $p41;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p25 := $p18;
    goto $bb11;

  $bb11:
    call $p26, $i27, $i28, $i29, $p32, $p33, $i34, $p37, $i38, $i39, $p40, $i42, $i43, $i44, $i45, $i31, $p30, $p47, $p48, $p49, $p50, $i51, $i52, $p25 := mptsas_find_portinfo_by_sas_address_loop_$bb11($i1, $i23, $p26, $i27, $i28, $i29, $p32, $p33, $i34, $p37, $i38, $i39, $p40, $i42, $i43, $i44, $i45, $i31, $p30, $p47, $p48, $p49, $p50, $i51, $i52, $p25);
    goto $bb11_last;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 0);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p30 := $p25;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, $i23);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb25:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $p25 := $p48;
    goto $bb25_dummy;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb16;

  $bb16:
    call $p32, $p33, $i34, $p37, $i38, $i39, $p40, $i42, $i43, $i44, $i45, $i31 := mptsas_find_portinfo_by_sas_address_loop_$bb16($i1, $p26, $p32, $p33, $i34, $p37, $i38, $i39, $p40, $i42, $i43, $i44, $i45, $i31, $p25);
    goto $bb16_last;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i31);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p33, $mul.ref($i34, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, $i1);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p40 := $p25;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i31, 1);
    call {:si_unique_call 604} {:cexpr "i"} boogie_si_record_i32($i42);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p26);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, $i42);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p30 := $p25;
    goto $bb15;

  $bb22:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i31 := $i42;
    goto $bb22_dummy;

  $bb18:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p41 := $p40;
    goto $bb20;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2232, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2240, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i8);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i6, $i9);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64($i10, $i1);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2224, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb6;

  $bb22_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3564;

  $bb25_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3555;
}



const mptsas_expander_refresh: ref;

axiom mptsas_expander_refresh == $sub.ref(0, 368678);

procedure mptsas_expander_refresh($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.55, $M.26, $CurrAddr, assertsPassed, $M.4, $M.25;



implementation mptsas_expander_refresh($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $i43: i8;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p77: ref;
  var $i78: i8;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i16;
  var $i87: i32;
  var $i88: i1;
  var $i16: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $i94: i16;
  var $i95: i32;
  var $i96: i16;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i16;
  var $i125: i32;
  var $i126: i1;
  var $i106: i32;
  var $p107: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p127: ref;
  var $p105: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i16;
  var $i134: i32;
  var $i135: i1;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i144: i32;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $i149: i16;
  var $i150: i32;
  var $i151: i1;
  var $i136: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    call {:si_unique_call 605} {:cexpr "handle"} boogie_si_record_i32($i6);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    call {:si_unique_call 606} {:cexpr "sas_address"} boogie_si_record_i64($i11);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 0);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} ldv_mutex_lock_43($p89);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.0, $p93);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i16($i95);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p97 := mptsas_find_portinfo_by_handle($p0, $i96);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i98, 0);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p97, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i104 := $sgt.i32($i103, 0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p105 := $0.ref;
    assume {:branchcond $i104} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} ldv_mutex_unlock_45($p131);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} mptsas_setup_wide_ports($p0, $p1);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i133 := $load.i16($M.0, $p132);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i133);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i135 := $sgt.i32($i134, 0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i135 == 1;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i136 := 0;
    goto $bb32;

  $bb32:
    call $p137, $p138, $i139, $p140, $p141, $i142, $i144, $p145, $i146, $i147, $p148, $i149, $i150, $i151, $i136, vslice_dummy_var_139 := mptsas_expander_refresh_loop_$bb32($p0, $p1, $p105, $p132, $p137, $p138, $i139, $p140, $p141, $i142, $i144, $p145, $i146, $i147, $p148, $i149, $i150, $i151, $i136, vslice_dummy_var_139);
    goto $bb32_last;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i136);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p138, $mul.ref($i139, 112));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_139 := mptsas_probe_one_phy($p105, $p140, $i142, 0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i136, 1);
    call {:si_unique_call 619} {:cexpr "i"} boogie_si_record_i32($i144);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i146, 1);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, $i147);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.0, $p132);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i151 := $sgt.i32($i150, $i144);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i151 == 1);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb34:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $i136 := $i144;
    goto $bb34_dummy;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i104 == 1;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i106, $p107 := 0, $0.ref;
    goto $bb19;

  $bb19:
    call $p108, $p109, $i110, $p113, $i114, $i115, $p116, $p117, $i118, $p119, $p120, $p122, $i123, $i124, $i125, $i126, $i106, $p107, $i128, $i129, $p130, $p127 := mptsas_expander_refresh_loop_$bb19($i11, $p97, $p101, $p108, $p109, $i110, $p113, $i114, $i115, $p116, $p117, $i118, $p119, $p120, $p122, $i123, $i124, $i125, $i126, $i106, $p107, $i128, $i129, $p130, $p127);
    goto $bb19_last;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p107);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i128, 0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p130 := $p107;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p105 := $p130;
    goto $bb18;

  $bb26:
    assume $i129 == 1;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p97, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i106);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p109, $mul.ref($i110, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i114 := $load.i64($M.0, $p113);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i115 := $eq.i64($i114, $i11);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $p122 := $p107;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i106, 1);
    call {:si_unique_call 615} {:cexpr "i"} boogie_si_record_i32($i123);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i124 := $load.i16($M.0, $p101);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i124);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i126 := $sgt.i32($i125, $i123);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p127 := $p122;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p105 := $p127;
    goto $bb18;

  $bb24:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i106, $p107 := $i123, $p122;
    goto $bb24_dummy;

  $bb21:
    assume $i115 == 1;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p97, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i106);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p117, $mul.ref($i118, 112));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p120 := mptsas_get_rphy($p119);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p122 := $p120;
    goto $bb23;

  $bb12:
    assume $i99 == 1;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} ldv_mutex_unlock_44($p100);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $p20, $i21, $i22, $p24, $p25, $i26, $p28, $p29, $p30, $i31, $p34, $i35, $i36, $p38, $p39, $i40, $p42, $i43, $p44, $p45, $i46, $p49, $p50, $p51, $i52, $p55, $i56, $i57, $i58, $p59, $p60, $i61, $p63, $p64, $p65, $i66, $p69, $i70, $i71, $p73, $p74, $i75, $p77, $i78, $p79, $p80, $i81, $p84, $i85, $i86, $i87, $i88, $i16, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138 := mptsas_expander_refresh_loop_$bb4($p0, $p1, $i6, $p12, $p17, $p18, $i19, $p20, $i21, $i22, $p24, $p25, $i26, $p28, $p29, $p30, $i31, $p34, $i35, $i36, $p38, $p39, $i40, $p42, $i43, $p44, $p45, $i46, $p49, $p50, $p51, $i52, $p55, $i56, $i57, $i58, $p59, $p60, $i61, $p63, $p64, $p65, $i66, $p69, $i70, $i71, $p73, $p74, $i75, $p77, $i78, $p79, $p80, $i81, $p84, $i85, $i86, $i87, $i88, $i16, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138);
    goto $bb4_last;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i16);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 112));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i16, 16);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, $i6);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vslice_dummy_var_136 := mptsas_sas_expander_pg1($p0, $p20, 268435456, $i22);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i16);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref($i26, 112)), $mul.ref(8, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i16);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p30, $mul.ref($i31, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_137 := mptsas_sas_device_pg0($p0, $p28, 536870912, $i36);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i16);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p39, $mul.ref($i40, 112)), $mul.ref(2, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i16);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p45, $mul.ref($i46, 112)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i43);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i16);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p51, $mul.ref($i52, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i16, 1);
    call {:si_unique_call 610} {:cexpr "i"} boogie_si_record_i32($i85);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p12);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i88 := $sgt.i32($i87, $i85);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i88 == 1);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i85;
    goto $bb9_dummy;

  $bb6:
    assume $i58 == 1;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i16);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p60, $mul.ref($i61, 112)), $mul.ref(48, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i16);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p65, $mul.ref($i66, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_138 := mptsas_sas_device_pg0($p0, $p63, 536870912, $i71);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i16);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p74, $mul.ref($i75, 112)), $mul.ref(2, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i16);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p80, $mul.ref($i81, 112)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, $i78);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb34_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  $bb24_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3713;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3613;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 369710);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 621} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_mutex_lock_55: ref;

axiom ldv_mutex_lock_55 == $sub.ref(0, 370742);

procedure ldv_mutex_lock_55($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_55($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} mutex_lock($p0);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 371774);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __list_add($p0, $p3, $p1);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_56: ref;

axiom ldv_mutex_unlock_56 == $sub.ref(0, 372806);

procedure ldv_mutex_unlock_56($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_56($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} mutex_unlock($p0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const mptsas_sas_expander_pg0: ref;

axiom mptsas_sas_expander_pg0 == $sub.ref(0, 373838);

procedure mptsas_sas_expander_pg0($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.61, $CurrAddr;



implementation mptsas_sas_expander_pg0($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $p61: ref;
  var $i62: i16;
  var $i63: i64;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $i81: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i16;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p101: ref;
  var $p102: ref;
  var $i103: i16;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $p109: ref;
  var $i110: i32;
  var $i111: i16;
  var $i112: i32;
  var $i113: i1;
  var $i82: i32;
  var $i48: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i16;
  var $i118: i32;
  var $i119: i32;
  var $i120: i64;
  var $p121: ref;
  var $i122: i64;
  var $i27: i32;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 632} {:cexpr "mptsas_sas_expander_pg0:arg:form"} boogie_si_record_i32($i2);
    call {:si_unique_call 633} {:cexpr "mptsas_sas_expander_pg0:arg:form_specific"} boogie_si_record_i32($i3);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 634} cmdloc_dummy_var_42 := $memset.i8(cmdloc_dummy_var_41, $p8, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 3);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p10, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 0);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 0);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 15);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 17);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, $p4);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p18, $sub.i64(0, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i2, $i3);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p20, $i19);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p21, 0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(23, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p22, 0);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p23, 30);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 635} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p24, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i25 := mpt_config($p0, $p5);
    call {:si_unique_call 637} {:cexpr "error"} boogie_si_record_i32($i25);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.1, $p34);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i36, 4);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p39 := pci_alloc_consistent($p33, $i38, $p6);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.4, $p6);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p44, $i43);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p45, 1);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i46 := mpt_config($p0, $p5);
    call {:si_unique_call 640} {:cexpr "error"} boogie_si_record_i32($i46);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 34);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i46, 0);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p40, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.60, $p50);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i53 == 1);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i58 := 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, $i59);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i64($i62);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p64 := kcalloc($i63, 112, 208);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p64);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i71 := $ugt.i64(8, 63);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i71 == 1);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p7);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p40, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.61;
    cmdloc_dummy_var_49 := $M.61;
    call {:si_unique_call 644} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p75, $p77, 8, $zext.i32.i64(4), 0 == 1);
    $M.61 := cmdloc_dummy_var_50;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i81 := $sgt.i32($i80, 0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i48 := $i46;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i117 := $load.i16($M.1, $p116);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i117);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i119 := $mul.i32($i118, 4);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i119);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p40);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.4, $p6);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} pci_free_consistent($p115, $i120, $p121, $i122);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i27 := $i48;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb27:
    assume $i81 == 1;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb30;

  $bb30:
    call $p83, $p84, $i85, $p87, $p88, $i89, $p90, $p91, $i92, $p94, $i95, $p96, $p97, $i98, $p101, $p102, $i103, $p104, $p105, $i106, $p109, $i110, $i111, $i112, $i113, $i82 := mptsas_sas_expander_pg0_loop_$bb30($p1, $p7, $p40, $p78, $p83, $p84, $i85, $p87, $p88, $i89, $p90, $p91, $i92, $p94, $i95, $p96, $p97, $i98, $p101, $p102, $i103, $p104, $p105, $i106, $p109, $i110, $i111, $i112, $i113, $i82);
    goto $bb30_last;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i82);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p84, $mul.ref($i85, 112)), $mul.ref(96, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p1);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p40, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.62, $p88);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i82);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p91, $mul.ref($i92, 112)), $mul.ref(0, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p94, $i89);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.61, $p7);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i82);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p97, $mul.ref($i98, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p101, $i95);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p40, $mul.ref(0, 36)), $mul.ref(26, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i103 := $load.i16($M.63, $p102);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i82);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p105, $mul.ref($i106, 112)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p109, $i103);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i82, 1);
    call {:si_unique_call 645} {:cexpr "i"} boogie_si_record_i32($i110);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i111 := $load.i16($M.0, $p78);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i113 := $sgt.i32($i112, $i110);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i113 == 1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i82 := $i110;
    goto $bb32_dummy;

  $bb24:
    assume $i71 == 1;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p7);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p40, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.61;
    cmdloc_dummy_var_46 := $M.61;
    call {:si_unique_call 643} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p72, $p74, 8, $zext.i32.i64(4), 0 == 1);
    $M.61 := cmdloc_dummy_var_47;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i70 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 12);
    goto $bb13;

  $bb18:
    assume $i53 == 1;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p40, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.60, $p54);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i16($i55);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb20;

  $bb15:
    assume $i49 == 1;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i48 := $i46;
    goto $bb13;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 19);
    goto $bb13;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb3;

  $bb32_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 374870);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 375902);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 647} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 376934);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 650} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p2 := ldv_malloc($i0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 377966);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 652} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 1} true;
    call {:si_unique_call 653} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 654} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p3 := malloc($i0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i4 := ldv_is_err($p3);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 1} true;
    call {:si_unique_call 657} __VERIFIER_assume($i7);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 378998);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 658} $r := $malloc($i0);
    return;
}



const mptsas_sas_expander_pg1: ref;

axiom mptsas_sas_expander_pg1 == $sub.ref(0, 380030);

procedure mptsas_sas_expander_pg1($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $CurrAddr;



implementation mptsas_sas_expander_pg1($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $p65: ref;
  var $p66: ref;
  var $i67: i16;
  var $p69: ref;
  var $i45: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $i76: i64;
  var $p77: ref;
  var $i78: i64;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 662} {:cexpr "mptsas_sas_expander_pg1:arg:form"} boogie_si_record_i32($i2);
    call {:si_unique_call 663} {:cexpr "mptsas_sas_expander_pg1:arg:form_specific"} boogie_si_record_i32($i3);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, 1);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p8, 0);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 1);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 0);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 15);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 17);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p15, $p4);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p16, $sub.i64(0, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i2, $i3);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p18, $i17);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p19, 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(23, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p20, 0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p21, 30);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i22 := mpt_config($p0, $p5);
    call {:si_unique_call 665} {:cexpr "error"} boogie_si_record_i32($i22);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.1, $p25);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.1, $p31);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i33, 4);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p36 := pci_alloc_consistent($p30, $i35, $p6);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.4, $p6);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p41, $i40);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p42, 1);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i43 := mpt_config($p0, $p5);
    call {:si_unique_call 668} {:cexpr "error"} boogie_si_record_i32($i43);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 34);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i43, 0);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} mptsas_print_expander_pg1($p0, $p37);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.65, $p47);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i48);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.66, $p50);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(3, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i51);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(31, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.67, $p53);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i54);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.68, $p56);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(6, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i57);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(17, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.69, $p59);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(5, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i60);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.70, $p62);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $i63);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.71, $p66);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i67);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.1, $p72);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i75 := $mul.i32($i74, 4);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p37);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.4, $p6);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} pci_free_consistent($p71, $i76, $p77, $i78);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i24 := $i45;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb13;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 19);
    goto $bb13;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb3;
}



const ldv_mutex_lock_43: ref;

axiom ldv_mutex_lock_43 == $sub.ref(0, 381062);

procedure ldv_mutex_lock_43($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} mutex_lock($p0);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const mptsas_find_portinfo_by_handle: ref;

axiom mptsas_find_portinfo_by_handle == $sub.ref(0, 382094);

procedure mptsas_find_portinfo_by_handle($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation mptsas_find_portinfo_by_handle($p0: ref, $i1: i16) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $i17: i32;
  var $p16: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p11: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} {:cexpr "mptsas_find_portinfo_by_handle:arg:handle"} boogie_si_record_i16($i1);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1744, 1)), $mul.ref(0, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p29 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $r := $p29;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p12, $i13, $i14, $i15, $p18, $p19, $i20, $p23, $i24, $i25, $i26, $i27, $p28, $i30, $i31, $i32, $i33, $i17, $p16, $p35, $p36, $p37, $p38, $i39, $i40, $p11 := mptsas_find_portinfo_by_handle_loop_$bb4($i1, $i9, $p12, $i13, $i14, $i15, $p18, $p19, $i20, $p23, $i24, $i25, $i26, $i27, $p28, $i30, $i31, $i32, $i33, $i17, $p16, $p35, $p36, $p37, $p38, $i39, $i40, $p11);
    goto $bb4_last;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p16 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, $i9);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p36;
    goto $bb18_dummy;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb9;

  $bb9:
    call $p18, $p19, $i20, $p23, $i24, $i25, $i26, $i27, $p28, $i30, $i31, $i32, $i33, $i17 := mptsas_find_portinfo_by_handle_loop_$bb9($i1, $p12, $p18, $p19, $i20, $p23, $i24, $i25, $i26, $i27, $p28, $i30, $i31, $i32, $i33, $i17, $p11);
    goto $bb9_last;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i17);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p19, $mul.ref($i20, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i1);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i25, $i26);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p28 := $p11;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i17, 1);
    call {:si_unique_call 674} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p12);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i32, $i30);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p16 := $p11;
    goto $bb8;

  $bb15:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i30;
    goto $bb15_dummy;

  $bb11:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p29 := $p28;
    goto $bb13;

  $bb15_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4122;
}



const ldv_mutex_unlock_44: ref;

axiom ldv_mutex_unlock_44 == $sub.ref(0, 383126);

procedure ldv_mutex_unlock_44($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} mutex_unlock($p0);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_45: ref;

axiom ldv_mutex_unlock_45 == $sub.ref(0, 384158);

procedure ldv_mutex_unlock_45($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} mutex_unlock($p0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const mptsas_setup_wide_ports: ref;

axiom mptsas_setup_wide_ports == $sub.ref(0, 385190);

procedure mptsas_setup_wide_ports($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $CurrAddr;



implementation mptsas_setup_wide_ports($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p16: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i1;
  var $i9: i32;
  var $p10: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i16;
  var $i83: i32;
  var $i84: i1;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i97: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i64;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i16;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i64;
  var $p143: ref;
  var $i144: i32;
  var $p145: ref;
  var $i146: i16;
  var $i147: i32;
  var $i148: i1;
  var $p152: ref;
  var $i153: i64;
  var $i154: i1;
  var $p157: ref;
  var $i158: i64;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $i163: i64;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $p172: ref;
  var $i173: i64;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i16;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i16;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i8;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i64;
  var $p207: ref;
  var $i208: i8;
  var $i209: i32;
  var $i210: i32;
  var $i211: i64;
  var $i212: i64;
  var $p213: ref;
  var $p214: ref;
  var $i215: i16;
  var $i216: i32;
  var $i217: i32;
  var $i218: i16;
  var $p219: ref;
  var $p155: ref;
  var $i220: i32;
  var $p221: ref;
  var $i222: i16;
  var $i223: i32;
  var $i224: i1;
  var $i149: i32;
  var $p150: ref;
  var $i98: i32;
  var $p99: ref;
  var $i225: i32;
  var $p226: ref;
  var $i227: i16;
  var $i228: i32;
  var $i229: i1;
  var $i85: i32;
  var $p86: ref;
  var $p230: ref;
  var $i231: i16;
  var $i232: i32;
  var $i233: i1;
  var $p235: ref;
  var $p236: ref;
  var $i237: i64;
  var $p239: ref;
  var $p240: ref;
  var $i241: i64;
  var $i242: i1;
  var $p243: ref;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i250: i16;
  var $i251: i32;
  var $p252: ref;
  var $i253: i64;
  var $p255: ref;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i266: i32;
  var $i267: i16;
  var $i268: i32;
  var $i269: i1;
  var $i234: i32;
  var $p270: ref;
  var $i271: i32;
  var $i272: i32;
  var $i273: i1;
  var $p275: ref;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} ldv_mutex_lock_18($p2);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.0, $p81);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i84 := $sgt.i32($i83, 0);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i231 := $load.i16($M.0, $p230);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i232 := $zext.i16.i32($i231);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i233 := $sgt.i32($i232, 0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i233 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.0, $p270);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i272 := $and.i32($i271, 2097152);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} ldv_mutex_unlock_19($p275);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb107:
    assume $i273 == 1;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_147 := printk.ref(.str.39);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb89:
    assume $i233 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i234 := 0;
    goto $bb92;

  $bb92:
    call $p235, $p236, $i237, $p239, $p240, $i241, $i242, $p243, $i244, $i245, $i246, $p247, $p248, $p249, $i250, $i251, $p252, $i253, $p255, $i256, $i257, $i258, $p259, $p260, $p261, $p262, $p263, $p264, $i266, $i267, $i268, $i269, $i234, vslice_dummy_var_145, vslice_dummy_var_146 := mptsas_setup_wide_ports_loop_$bb92($p0, $p1, $p230, $p235, $p236, $i237, $p239, $p240, $i241, $i242, $p243, $i244, $i245, $i246, $p247, $p248, $p249, $i250, $i251, $p252, $i253, $p255, $i256, $i257, $i258, $p259, $p260, $p261, $p262, $p263, $p264, $i266, $i267, $i268, $i269, $i234, vslice_dummy_var_145, vslice_dummy_var_146);
    goto $bb92_last;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i237 := $sext.i32.i64($i234);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p236, $mul.ref($i237, 112)), $mul.ref(104, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i241 := $p2i.ref.i64($p240);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i242 := $eq.i64($i241, 0);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i245 := $and.i32($i244, 2097152);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.0, $p255);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i257 := $and.i32($i256, 2097152);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i266 := $add.i32($i234, 1);
    call {:si_unique_call 697} {:cexpr "i"} boogie_si_record_i32($i266);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i267 := $load.i16($M.0, $p230);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i268 := $zext.i16.i32($i267);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i269 := $sgt.i32($i268, $i266);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i269 == 1);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb104:
    assume $i269 == 1;
    assume {:verifier.code 0} true;
    $i234 := $i266;
    goto $bb104_dummy;

  $bb101:
    assume $i258 == 1;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p240, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p240, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.0, $p263);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vslice_dummy_var_146 := printk.ref.ref.ref.ref(.str.38, $p260, $p262, $p264);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb98:
    assume $i246 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p247);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p240, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i250 := $load.i16($M.0, $p249);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i251 := $zext.i16.i32($i250);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p240, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i253 := $load.i64($M.0, $p252);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} vslice_dummy_var_145 := printk.ref.ref.ref.ref.i32.i32.i64(.str.37, $p248, .str.31, $p240, $i234, $i251, $i253);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb94:
    assume $i242 == 1;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb28:
    assume $i84 == 1;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i85, $p86 := 0, $p80;
    goto $bb31;

  $bb31:
    call $p88, $i89, $p90, $i91, $i92, $i93, $p94, $p95, $i97, $p100, $p101, $i102, $i103, $p104, $p105, $i106, $i107, $p108, $p109, $p110, $i111, $i112, $i113, $p114, $i115, $p116, $i117, $i118, $i119, $i120, $i121, $p122, $p123, $p124, $i125, $i126, $i127, $p128, $p129, $p131, $p132, $p133, $p134, $i135, $i136, $i137, $i138, $p139, $p140, $i141, $i142, $p143, $i144, $p145, $i146, $i147, $i148, $p152, $i153, $i154, $p157, $i158, $i159, $p160, $p161, $i162, $i163, $i164, $p165, $i166, $i167, $i168, $p169, $p170, $p172, $i173, $p175, $p176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $p184, $p185, $p186, $p187, $i188, $p189, $p190, $p191, $p192, $i193, $i194, $i195, $p196, $p197, $p198, $p199, $p200, $p201, $i202, $i203, $i204, $p205, $i206, $p207, $i208, $i209, $i210, $i211, $i212, $p213, $p214, $i215, $i216, $i217, $i218, $p219, $p155, $i220, $p221, $i222, $i223, $i224, $i149, $p150, $i98, $p99, $i225, $p226, $i227, $i228, $i229, $i85, $p86, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144 := mptsas_setup_wide_ports_loop_$bb31($p0, $p1, $p81, $p88, $i89, $p90, $i91, $i92, $i93, $p94, $p95, $i97, $p100, $p101, $i102, $i103, $p104, $p105, $i106, $i107, $p108, $p109, $p110, $i111, $i112, $i113, $p114, $i115, $p116, $i117, $i118, $i119, $i120, $i121, $p122, $p123, $p124, $i125, $i126, $i127, $p128, $p129, $p131, $p132, $p133, $p134, $i135, $i136, $i137, $i138, $p139, $p140, $i141, $i142, $p143, $i144, $p145, $i146, $i147, $i148, $p152, $i153, $i154, $p157, $i158, $i159, $p160, $p161, $i162, $i163, $i164, $p165, $i166, $i167, $i168, $p169, $p170, $p172, $i173, $p175, $p176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $p184, $p185, $p186, $p187, $i188, $p189, $p190, $p191, $p192, $i193, $i194, $i195, $p196, $p197, $p198, $p199, $p200, $p201, $i202, $i203, $i204, $p205, $i206, $p207, $i208, $i209, $i210, $i211, $i212, $p213, $p214, $i215, $i216, $i217, $i218, $p219, $p155, $i220, $p221, $i222, $i223, $i224, $i149, $p150, $i98, $p99, $i225, $p226, $i227, $i228, $i229, $i85, $p86, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144);
    goto $bb31_last;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p86, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    call {:si_unique_call 685} {:cexpr "sas_address"} boogie_si_record_i64($i89);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 2097152);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i89, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p86, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i103 := $eq.i64($i102, 0);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $p132, $p133 := $p86, $p101;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i135 := $load.i16($M.0, $p134);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i135);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i137 := $add.i32($i136, $sub.i32(0, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, $i85);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i85);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i142 := $add.i64($i141, 1);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p140, $mul.ref($i142, 112));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i85, 1);
    call {:si_unique_call 690} {:cexpr "j"} boogie_si_record_i32($i144);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i146 := $load.i16($M.0, $p145);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i146);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i148 := $sgt.i32($i147, $i144);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i98, $p99 := $i85, $p132;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i98, 1);
    call {:si_unique_call 687} {:cexpr "i"} boogie_si_record_i32($i225);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p99, $mul.ref(1, 112));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i227 := $load.i16($M.0, $p81);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i228 := $zext.i16.i32($i227);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i229 := $sgt.i32($i228, $i225);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i229 == 1);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb86:
    assume $i229 == 1;
    assume {:verifier.code 0} true;
    $i85, $p86 := $i225, $p226;
    goto $bb86_dummy;

  $bb56:
    assume $i148 == 1;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i149, $p150 := $i144, $p143;
    goto $bb59;

  $bb59:
    call $p152, $i153, $i154, $p157, $i158, $i159, $p160, $p161, $i162, $i163, $i164, $p165, $i166, $i167, $i168, $p169, $p170, $p172, $i173, $p175, $p176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $p184, $p185, $p186, $p187, $i188, $p189, $p190, $p191, $p192, $i193, $i194, $i195, $p196, $p197, $p198, $p199, $p200, $p201, $i202, $i203, $i204, $p205, $i206, $p207, $i208, $i209, $i210, $i211, $i212, $p213, $p214, $i215, $i216, $i217, $i218, $p219, $p155, $i220, $p221, $i222, $i223, $i224, $i149, $p150, vslice_dummy_var_144 := mptsas_setup_wide_ports_loop_$bb59($p0, $i89, $p133, $p145, $p152, $i153, $i154, $p157, $i158, $i159, $p160, $p161, $i162, $i163, $i164, $p165, $i166, $i167, $i168, $p169, $p170, $p172, $i173, $p175, $p176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $p184, $p185, $p186, $p187, $i188, $p189, $p190, $p191, $p192, $i193, $i194, $i195, $p196, $p197, $p198, $p199, $p200, $p201, $i202, $i203, $i204, $p205, $i206, $p207, $i208, $i209, $i210, $i211, $i212, $p213, $p214, $i215, $i216, $i217, $i218, $p219, $p155, $i220, $p221, $i222, $i223, $i224, $i149, $p150, vslice_dummy_var_144);
    goto $bb59_last;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i154 := $eq.i64($i153, 0);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i158 := $load.i64($M.0, $p157);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i159 := $ne.i64($i158, $i89);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p161);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p133);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i164 := $eq.i64($i162, $i163);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i166, 2097152);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i178 := $ne.i64($i177, 0);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i178 == 1);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(7, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p199, 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p200, $p133);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.0, $p201);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i202);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i204 := $ule.i32($i203, 63);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p133, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i215 := $load.i16($M.0, $p214);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i216 := $zext.i16.i32($i215);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i217 := $add.i32($i216, 1);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i32.i16($i217);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p133, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p219, $i218);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p155 := $p150;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i220 := $add.i32($i149, 1);
    call {:si_unique_call 691} {:cexpr "j"} boogie_si_record_i32($i220);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p155, $mul.ref(1, 112));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i222 := $load.i16($M.0, $p145);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i223 := $zext.i16.i32($i222);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i224 := $sgt.i32($i223, $i220);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i224 == 1);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb83:
    assume $i224 == 1;
    assume {:verifier.code 0} true;
    $i149, $p150 := $i220, $p221;
    goto $bb83_dummy;

  $bb80:
    assume $i204 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p133, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i206 := $load.i64($M.0, $p205);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.0, $p207);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i208);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i210 := $shl.i32(1, $i209);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i211 := $sext.i32.i64($i210);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i212 := $or.i64($i206, $i211);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p133, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p213, $i212);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb74:
    assume $i178 == 1;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p179 := mptsas_get_rphy($p150);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p133, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p180, $p179);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p181 := mptsas_get_port($p150);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p133, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p183 := mptsas_get_starget($p150);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p133, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p184, $p183);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p186, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i188 := $load.i16($M.0, $p187);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p133, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, $i188);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p191, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i193 := $load.i16($M.0, $p192);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i194 := $zext.i16.i32($i193);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i195 == 1;
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} kfree($p198);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb71:
    assume $i168 == 1;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i173 := $load.i64($M.0, $p172);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_144 := printk.ref.ref.i32.i64(.str.36, $p170, $i149, $i173);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume $i164 == 1;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p155 := $p150;
    goto $bb63;

  $bb65:
    assume $i159 == 1;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p155 := $p150;
    goto $bb63;

  $bb61:
    assume $i154 == 1;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p155 := $p150;
    goto $bb63;

  $bb53:
    assume $i138 == 1;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i98, $p99 := $i85, $p132;
    goto $bb38;

  $bb40:
    assume $i103 == 1;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p104 := kzalloc(48, 208);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p105, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p108, 1);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p105, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p109, $p1);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p86, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i113 := $ule.i32($i112, 63);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p86, $mul.ref(0, 112)), $mul.ref(7, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 1);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 2097152);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p86, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p131, $p104);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p132, $p133 := $p86, $p104;
    goto $bb52;

  $bb49:
    assume $i127 == 1;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_143 := printk.ref.ref.i32.i64(.str.35, $p129, $i85, $i89);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i113 == 1;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p105, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p86, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i119 := $shl.i32(1, $i118);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i119);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i121 := $or.i64($i115, $i120);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p105, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p122, $i121);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb42:
    assume $i107 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i97 == 1;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i98, $p99 := $i85, $p86;
    goto $bb38;

  $bb33:
    assume $i93 == 1;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} vslice_dummy_var_142 := printk.ref.ref.i32.i64(.str.34, $p95, $i85, $i89);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i9, $p10 := 0, $p4;
    goto $bb4;

  $bb4:
    call $p12, $i13, $i14, $i15, $p17, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $p29, $p30, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $p54, $i55, $i56, $i57, $p58, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $p66, $p67, $p69, $p70, $p71, $p72, $p73, $p16, $i74, $p75, $i76, $i77, $i78, $i9, $p10, cmdloc_dummy_var_51, cmdloc_dummy_var_52, vslice_dummy_var_140, vslice_dummy_var_141 := mptsas_setup_wide_ports_loop_$bb4($p0, $p5, $p12, $i13, $i14, $i15, $p17, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $p29, $p30, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $p54, $i55, $i56, $i57, $p58, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $p66, $p67, $p69, $p70, $p71, $p72, $p73, $p16, $i74, $p75, $i76, $i77, $i78, $i9, $p10, cmdloc_dummy_var_51, cmdloc_dummy_var_52, vslice_dummy_var_140, vslice_dummy_var_141);
    goto $bb4_last;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i24 := $ule.i32($i23, 1);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 2097152);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32($i34, 1);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $i36);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32(1, $i42);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i44 := $xor.i32($i43, $sub.i32(0, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i39, $i45);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i46);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 682} cmdloc_dummy_var_52 := $memset.i8(cmdloc_dummy_var_51, $p49, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $0.ref);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i9, 1);
    call {:si_unique_call 680} {:cexpr "i"} boogie_si_record_i32($i74);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p16, $mul.ref(1, 112));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p5);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i77, $i74);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i78 == 1);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb25:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i9, $p10 := $i74, $p75;
    goto $bb25_dummy;

  $bb19:
    assume $i53 == 1;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 8);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} sas_port_delete_phy($p70, $p72);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} vslice_dummy_var_141 := dev_printk.ref.ref.ref.ref.i32.ref(.str.32, $p60, .str.33, $p62, $i65, $p67);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} vslice_dummy_var_140 := printk.ref.ref.ref.ref.i32(.str.30, $p30, .str.31, $p18, $i9);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb8;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb8;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb8;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb104_dummy:
    assume false;
    return;

  $bb92_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4500;

  $bb83_dummy:
    assume false;
    return;

  $bb59_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4389;

  $bb86_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4183;
}



const mptsas_probe_one_phy: ref;

axiom mptsas_probe_one_phy == $sub.ref(0, 386222);

procedure mptsas_probe_one_phy($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr, $M.25, assertsPassed;



implementation mptsas_probe_one_phy($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i1;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $p123: ref;
  var $i124: i64;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $i157: i32;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $i161: i64;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $p175: ref;
  var $i176: i16;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i16;
  var $i186: i32;
  var $i187: i1;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $p194: ref;
  var $i195: i64;
  var $p196: ref;
  var $i197: i64;
  var $i198: i1;
  var $i199: i32;
  var $i200: i16;
  var $i201: i32;
  var $i202: i1;
  var $i188: i32;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $p206: ref;
  var $i207: i64;
  var $p209: ref;
  var $i210: i64;
  var $i211: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i1;
  var $i215: i1;
  var $i216: i1;
  var $i217: i1;
  var $p218: ref;
  var $p220: ref;
  var $i221: i32;
  var $p222: ref;
  var $p219: ref;
  var $i223: i64;
  var $i224: i1;
  var $p225: ref;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $p230: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $p244: ref;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $i251: i64;
  var $p252: ref;
  var $p253: ref;
  var $i255: i32;
  var $p257: ref;
  var $i258: i8;
  var $i259: i32;
  var $i260: i8;
  var $p262: ref;
  var $i263: i8;
  var $i264: i32;
  var $i265: i8;
  var $p266: ref;
  var $i267: i64;
  var $i268: i1;
  var $p269: ref;
  var $i270: i8;
  var $i271: i32;
  var $i272: i1;
  var $p274: ref;
  var $i7: i32;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 703} {:cexpr "mptsas_probe_one_phy:arg:index"} boogie_si_record_i32($i2);
    call {:si_unique_call 704} {:cexpr "mptsas_probe_one_phy:arg:local"} boogie_si_record_i32($i3);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    assume {:verifier.code 0} true;
    $p15 := $p17;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1152, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} mptsas_parse_device_info($p18, $p19);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i22, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i22, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i22, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1184, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(5, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 240);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 144);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i41, 144);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(6, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 240);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 144);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i50, 144);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(5, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 15);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i59, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(6, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 15);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i68, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i81 := 0;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb80, $bb82;

  $bb82:
    assume !($i86 == 1);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p91 := mptsas_get_port($p1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p94 := phy_to_ioc($p93);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(7, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $p156, $i157 := $p91, $i81;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p158 := mptsas_get_rphy($p1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i160 := $eq.i64($i159, 0);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i255 := $i157;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i258 := $load.i8($M.0, $p257);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i259 := $zext.i8.i32($i258);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i260 := $trunc.i32.i8($i259);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.0, $p262);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i32($i263);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i32.i8($i264);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $p266 := mptsas_find_vtarget($p94, $i260, $i265);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p266);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i268 := $ne.i64($i267, 0);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i7 := $i255;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb175:
    assume $i268 == 1;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p266, $mul.ref(0, 24)), $mul.ref(19, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i270 := $load.i8($M.0, $p269);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i271 := $zext.i8.i32($i270);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i272 == 1);
    goto $bb177;

  $bb178:
    assume $i272 == 1;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_155 := printk.ref(.str.44);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p266, $mul.ref(0, 24)), $mul.ref(19, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p274, 0);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb110:
    assume $i160 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p156);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i162 := $ne.i64($i161, 0);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb112;

  $bb113:
    assume $i162 == 1;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p156, $mul.ref(0, 1352)), $mul.ref(1160, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p164);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i166 := $eq.i64($i165, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb115, $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb112;

  $bb115:
    assume $i166 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i172 := mptsas_is_end_device($p171);
    call {:si_unique_call 723} {:cexpr "tmp"} boogie_si_record_i32($i172);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} mptsas_parse_device_info($p4, $p179);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i180 := scsi_is_host_device($p170);
    call {:si_unique_call 726} {:cexpr "tmp___1"} boogie_si_record_i32($i180);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i181 == 1);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i203 := scsi_is_sas_rphy($p170);
    call {:si_unique_call 728} {:cexpr "tmp___0"} boogie_si_record_i32($i203);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i214 := $slt.i32($i213, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    $i215 := $slt.i32($i213, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i213, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb148, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i216 == 1);
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p219 := $0.ref;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i223 := $p2i.ref.i64($p219);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i224 := $eq.i64($i223, 0);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p219, $mul.ref(0, 1208)), $mul.ref(1144, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p232);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p234 := $bitcast.ref.ref($p4);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 735} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p233, $p234, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i235 := sas_rphy_add($p219);
    call {:si_unique_call 737} {:cexpr "error"} boogie_si_record_i32($i235);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i236 := $ne.i32($i235, 0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} mptsas_set_rphy($p94, $p1, $p219);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 2);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb170;

  $bb170:
    assume !($i246 == 1);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p247);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 3);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i249} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i255 := $i235;
    goto $bb174;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i249 == 1;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i251 := $load.i64($M.0, $p250);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p219);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($p252, $mul.ref($sub.ref(0, 56), 1264));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_154 := mptsas_exp_repmanufacture_info($p94, $i251, $p253);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto $bb173;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb168:
    assume {:verifier.code 0} true;
    assume $i246 == 1;
    goto $bb169;

  $bb162:
    assume $i236 == 1;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.0, $p237);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i239 := $and.i32($i238, 128);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i239, 0);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} sas_rphy_free($p219);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i7 := $i235;
    goto $bb3;

  $bb164:
    assume $i240 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p241);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} vslice_dummy_var_153 := printk.ref.ref.ref.i32(.str, $p242, .str.40, 3309);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb156:
    assume $i224 == 1;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.0, $p225);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i227 := $and.i32($i226, 128);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i228 := $ne.i32($i227, 0);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i7 := $i157;
    goto $bb3;

  $bb158:
    assume $i228 == 1;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} vslice_dummy_var_152 := printk.ref.ref.ref.i32(.str, $p230, .str.40, 3300);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i216 == 1;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p222 := sas_expander_alloc($p156, $i221);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p219 := $p222;
    goto $bb154;

  $bb146:
    assume $i215 == 1;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb144:
    assume $i214 == 1;
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i213, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i217 == 1);
    goto $bb151;

  $bb152:
    assume $i217 == 1;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $p218 := sas_end_device_alloc($p156);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p219 := $p218;
    goto $bb154;

  $bb137:
    assume $i204 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p170);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i207 := $load.i64($M.0, $p206);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p205, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i210 := $load.i64($M.0, $p209);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i211 := $eq.i64($i207, $i210);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb139:
    assume $i211 == 1;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} sas_port_mark_backlink($p156);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i7 := $i157;
    goto $bb3;

  $bb123:
    assume $i181 == 1;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(2224, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p183, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i185 := $load.i16($M.0, $p184);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i186 := $zext.i16.i32($i185);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i187 := $sgt.i32($i186, 0);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb125:
    assume $i187 == 1;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i188 := 0;
    goto $bb128;

  $bb128:
    call $p189, $p190, $i191, $p194, $i195, $p196, $i197, $i198, $i199, $i200, $i201, $i202, $i188 := mptsas_probe_one_phy_loop_$bb128($p4, $p183, $p184, $p189, $p190, $i191, $p194, $i195, $p196, $i197, $i198, $i199, $i200, $i201, $i202, $i188);
    goto $bb128_last;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p183, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i191 := $sext.i32.i64($i188);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p190, $mul.ref($i191, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i195 := $load.i64($M.0, $p194);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i197 := $load.i64($M.0, $p196);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i198 := $eq.i64($i195, $i197);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i199 := $add.i32($i188, 1);
    call {:si_unique_call 730} {:cexpr "i"} boogie_si_record_i32($i199);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.0, $p184);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i202 := $sgt.i32($i201, $i199);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i202 == 1);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb133:
    assume $i202 == 1;
    assume {:verifier.code 0} true;
    $i188 := $i199;
    goto $bb133_dummy;

  $bb130:
    assume $i198 == 1;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} sas_port_mark_backlink($p156);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i7 := $i157;
    goto $bb3;

  $bb117:
    assume $i173 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(2, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i176 := $load.i16($M.0, $p175);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i176);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i178 == 1);
    goto $bb119;

  $bb120:
    assume $i178 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i7 := $i157;
    goto $bb3;

  $bb86:
    assume $i98 == 1;
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p91);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $p126, $i127 := $p91, $i81;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i129, 2097152);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} sas_port_add_phy($p126, $p139);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(7, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p140, 0);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 8);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p156, $i157 := $p126, $i127;
    goto $bb109;

  $bb106:
    assume $i144 == 1;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p150);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} vslice_dummy_var_151 := dev_printk.ref.ref.ref.ref.i32.ref(.str.32, $p147, .str.43, $p149, $i152, $p154);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb103:
    assume $i131 == 1;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.0, $p134);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} vslice_dummy_var_150 := printk.ref.ref.i32(.str.42, $p133, $i136);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb88:
    assume $i100 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p101 := sas_port_alloc_num($p0);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i103 := $eq.i64($i102, 0);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i104 := sas_port_add($p101);
    call {:si_unique_call 714} {:cexpr "error"} boogie_si_record_i32($i104);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} mptsas_set_port($p94, $p1, $p101);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 8);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p126, $i127 := $p101, $i104;
    goto $bb102;

  $bb99:
    assume $i116 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p101, $mul.ref(0, 1352)), $mul.ref(0, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p101, $mul.ref(0, 1352)), $mul.ref(1144, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i124 := $load.i64($M.0, $p123);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} vslice_dummy_var_149 := dev_printk.ref.ref.ref.ref.i32.i64(.str.32, $p117, .str.41, $p119, $i121, $i124);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb93:
    assume $i105 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 128);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i7 := $i104;
    goto $bb3;

  $bb95:
    assume $i109 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p94, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} vslice_dummy_var_148 := printk.ref.ref.ref.i32(.str, $p111, .str.40, 3226);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb90:
    assume $i103 == 1;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i7 := $i81;
    goto $bb3;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb81;

  $bb74:
    assume $i77 == 1;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i78 := sas_phy_add($p15);
    call {:si_unique_call 708} {:cexpr "error"} boogie_si_record_i32($i78);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $p15);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i81 := $i78;
    goto $bb79;

  $bb76:
    assume $i79 == 1;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} sas_phy_free($p15);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i7 := $i78;
    goto $bb3;

  $bb67:
    assume $i70 == 1;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1192, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 9);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb65:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i68, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb69;

  $bb70:
    assume $i71 == 1;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1192, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 8);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb57:
    assume $i61 == 1;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1188, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 9);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb55:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i59, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb59;

  $bb60:
    assume $i62 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1188, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 8);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb47:
    assume $i52 == 1;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1200, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 9);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb45:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i50, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb49;

  $bb50:
    assume $i53 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1200, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 8);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb37:
    assume $i43 == 1;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1196, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 9);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i41, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb39;

  $bb40:
    assume $i44 == 1;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1196, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 8);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb18:
    assume $i26 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1184, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 10);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1184, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 9);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb14:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i22, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i27 == 1);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1184, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 8);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb21:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb20;

  $bb23:
    assume $i28 == 1;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb12:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i22, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i22, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i30 == 1);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1184, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 16);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i30 == 1;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p15, $mul.ref(0, 1248)), $mul.ref(1184, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb25:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i22, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb20;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb30;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p12 := sas_phy_alloc($p0, $i2);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $p12;
    goto $bb10;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb133_dummy:
    assume false;
    return;

  $bb128_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4828;
}



const sas_phy_alloc: ref;

axiom sas_phy_alloc == $sub.ref(0, 387254);

procedure sas_phy_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation sas_phy_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} {:cexpr "sas_phy_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p2 := external_alloc();
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const sas_phy_add: ref;

axiom sas_phy_add == $sub.ref(0, 388286);

procedure sas_phy_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sas_phy_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 1} true;
    call {:si_unique_call 746} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 747} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sas_phy_free: ref;

axiom sas_phy_free == $sub.ref(0, 389318);

procedure sas_phy_free($p0: ref);
  free requires assertsPassed;



implementation sas_phy_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    return;
}



const sas_port_alloc_num: ref;

axiom sas_port_alloc_num == $sub.ref(0, 390350);

procedure sas_port_alloc_num($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sas_port_alloc_num($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p1 := external_alloc();
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sas_port_add: ref;

axiom sas_port_add == $sub.ref(0, 391382);

procedure sas_port_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sas_port_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 749} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 750} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mptsas_set_port: ref;

axiom mptsas_set_port == $sub.ref(0, 392414);

procedure mptsas_set_port($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation mptsas_set_port($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 2097152);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 2097152);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1352)), $mul.ref(0, 1)), $mul.ref(1128, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} vslice_dummy_var_157 := printk.ref.ref.ref.ref(.str.46, $p25, $p2, $p28);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 1352)), $mul.ref(0, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_156 := dev_printk.ref.ref.ref.ref(.str.32, $p16, .str.45, $p18);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p2);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sas_port_add_phy: ref;

axiom sas_port_add_phy == $sub.ref(0, 393446);

procedure sas_port_add_phy($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sas_port_add_phy($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    return;
}



const sas_port_mark_backlink: ref;

axiom sas_port_mark_backlink == $sub.ref(0, 394478);

procedure sas_port_mark_backlink($p0: ref);
  free requires assertsPassed;



implementation sas_port_mark_backlink($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    return;
}



const scsi_is_sas_rphy: ref;

axiom scsi_is_sas_rphy == $sub.ref(0, 395510);

procedure scsi_is_sas_rphy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_is_sas_rphy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 1} true;
    call {:si_unique_call 753} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 754} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sas_expander_alloc: ref;

axiom sas_expander_alloc == $sub.ref(0, 396542);

procedure sas_expander_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation sas_expander_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} {:cexpr "sas_expander_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p2 := external_alloc();
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const mptsas_exp_repmanufacture_info: ref;

axiom mptsas_exp_repmanufacture_info == $sub.ref(0, 397574);

procedure mptsas_exp_repmanufacture_info($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.25, $CurrAddr, assertsPassed;



implementation mptsas_exp_repmanufacture_info($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i8;
  var $p74: ref;
  var $i75: i64;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i89: i1;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i8;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i32;
  var $i141: i16;
  var $i142: i32;
  var $p143: ref;
  var $i144: i8;
  var $i145: i16;
  var $i146: i32;
  var $i147: i32;
  var $i148: i16;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $p152: ref;
  var $p154: ref;
  var $p155: ref;
  var $i153: i32;
  var $i88: i32;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $i161: i64;
  var $i162: i64;
  var $p38: ref;
  var $i39: i32;
  var $i163: i64;
  var $i164: i1;
  var $i28: i32;
  var $p166: ref;
  var $p168: ref;
  var $i21: i32;
  var $i15: i32;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: ref;
  var vslice_dummy_var_163: ref;
  var vslice_dummy_var_164: ref;
  var vslice_dummy_var_165: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 758} {:cexpr "mptsas_exp_repmanufacture_info:arg:sas_address"} boogie_si_record_i64($i1);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p3, 0);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(4800, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p5 := spinlock_check($p4);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 761} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(4877, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(4800, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} spin_unlock_irqrestore($p16, $i6);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(0, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $i19 := ldv_mutex_lock_interruptible_39($p18);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 766} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $M.11;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $p25 := mpt_get_msg_frame($i24, $p0);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p25);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    call {:si_unique_call 769} cmdloc_dummy_var_57 := $memset.i8(cmdloc_dummy_var_56, $p30, 0, 44, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_57;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64(64);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p34 := pci_alloc_consistent($p32, $i33, $p3);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p34);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 64);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p40, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p29, $mul.ref(0, 44)), $mul.ref(3, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 26);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p29, $mul.ref(0, 44)), $mul.ref(1, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $sub.i8(0, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p29, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i1);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p29, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, 4);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p25);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(8, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i52 := $shl.i32(84, 24);
    call {:si_unique_call 772} {:cexpr "flagsLength"} boogie_si_record_i32($i52);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i52, 4);
    call {:si_unique_call 773} {:cexpr "flagsLength"} boogie_si_record_i32($i53);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(336, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.4, $p3);
    call {:si_unique_call 774} devirtbounce($p55, $p51, $i53, $i56);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(5706, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    $i60 := $add.i64(8, $i59);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p50, $mul.ref($i60, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32(80, 24);
    call {:si_unique_call 775} {:cexpr "flagsLength"} boogie_si_record_i32($i62);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 60);
    call {:si_unique_call 776} {:cexpr "flagsLength"} boogie_si_record_i32($i63);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(336, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.4, $p3);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 4);
    call {:si_unique_call 777} devirtbounce($p65, $p61, $i63, $i67);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 4);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i70 := $M.11;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} mpt_put_msg_frame($i72, $p0, $p25);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(168, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i75 := wait_for_completion_timeout($p74, 2500);
    call {:si_unique_call 780} {:cexpr "timeleft"} boogie_si_record_i64($i75);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 2);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 1);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i96 == 1);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} vslice_dummy_var_161 := printk.ref.ref.ref(.str.53, $p155, .str.50);
    assume {:verifier.code 0} true;
    $i153 := $sub.i32(0, 6);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i88 := $i153;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.4, $p3);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p38, $i39 := $0.ref, $i88;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p38);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i164 := $ne.i64($i163, 0);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i28 := $i39;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p166, 0);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(0, 1));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} ldv_mutex_unlock_40($p168);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i21 := $i28;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i15 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i164 == 1;
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} mpt_free_msg_frame($p0, $p38);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i158 == 1;
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i161 := $zext.i32.i64(64);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.4, $p3);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} pci_free_consistent($p160, $i161, $p34, $i162);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb27:
    assume $i96 == 1;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(264, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 60);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p34);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p104, $mul.ref(4, 60));
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(8, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p104, $mul.ref(4, 60)), $mul.ref(12, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_162 := strncpy($p107, $p109, 8);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(17, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p104, $mul.ref(4, 60)), $mul.ref(20, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_163 := strncpy($p112, $p114, 16);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(34, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p104, $mul.ref(4, 60)), $mul.ref(36, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_164 := strncpy($p117, $p119, 4);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p104, $mul.ref(4, 60)), $mul.ref(8, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i123 := $and.i8($i122, 1);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(0, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, $i124);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p105);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref(8, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i153 := $i19;
    goto $bb35;

  $bb32:
    assume $i130 == 1;
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(39, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p104, $mul.ref(4, 60)), $mul.ref(40, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_165 := strncpy($p132, $p134, 8);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p104, $mul.ref(4, 60)), $mul.ref(48, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i140 := $shl.i32($i139, 8);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i16($i140);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i142 := $sext.i16.i32($i141);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p137, $mul.ref(1, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.0, $p143);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i16($i144);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i146 := $sext.i16.i32($i145);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i147 := $or.i32($i142, $i146);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i16($i147);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(48, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p149, $i148);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p104, $mul.ref(4, 60)), $mul.ref(50, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p150);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(50, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p152, $i151);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i103 == 1;
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i88 := $i19;
    goto $bb21;

  $bb17:
    assume $i81 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} mpt_free_msg_frame($p0, $p25);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2440, 1)), $mul.ref(456, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 8);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i75, 0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32(0, 62);
    goto $bb21;

  $bb23:
    assume $i89 == 1;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_160 := mpt_Soft_Hard_ResetHandler($p0, 1);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i87 == 1;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32(0, 62);
    goto $bb21;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vslice_dummy_var_159 := printk.ref.ref.i32.ref(.str.51, .str.52, 2930, .str.50);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p38, $i39 := $p25, $sub.i32(0, 12);
    goto $bb15;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb7;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(4800, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} spin_unlock_irqrestore($p11, $i6);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} vslice_dummy_var_158 := printk.ref.ref.ref(.str.49, .str.50, $p13);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 14);
    goto $bb3;
}



const mptsas_find_vtarget: ref;

axiom mptsas_find_vtarget == $sub.ref(0, 398606);

procedure mptsas_find_vtarget($p0: ref, $i1: i8, $i2: i8) returns ($r: ref);
  free requires assertsPassed;



implementation mptsas_find_vtarget($p0: ref, $i1: i8, $i2: i8) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p20: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p9: ref;
  var $p10: ref;
  var $p56: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} {:cexpr "mptsas_find_vtarget:arg:channel"} boogie_si_record_i8($i1);
    call {:si_unique_call 791} {:cexpr "mptsas_find_vtarget:arg:id"} boogie_si_record_i8($i2);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p5 := __scsi_iterate_devices($p4, $0.ref);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p9, $p10 := $0.ref, $p5;
    goto $bb4;

  $bb4:
    call $p11, $p12, $p13, $i14, $i15, $p16, $p17, $i18, $i19, $p21, $p22, $p23, $i24, $i25, $i26, $i27, $p28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $p36, $i37, $i38, $i39, $i40, $p41, $p42, $p43, $i44, $i45, $i46, $i47, $p48, $p49, $p50, $p20, $p51, $p52, $p53, $i54, $i55, $p9, $p10, $p56 := mptsas_find_vtarget_loop_$bb4($p0, $i1, $i2, $p11, $p12, $p13, $i14, $i15, $p16, $p17, $i18, $i19, $p21, $p22, $p23, $i24, $i25, $i26, $i27, $p28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $p36, $i37, $i38, $i39, $i40, $p41, $p42, $p43, $i44, $i45, $i46, $i47, $p48, $p49, $p50, $p20, $p51, $p52, $p53, $i54, $i55, $p9, $p10, $p56);
    goto $bb4_last;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2896)), $mul.ref(224, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i15 == 1);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 64);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i27 == 1);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 24)), $mul.ref(10, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i2);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i38, $i39);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p50 := $p9;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p20 := $p50;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p53 := __scsi_iterate_devices($p52, $p10);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p56 := $p20;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p8 := $p56;
    goto $bb3;

  $bb25:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p9, $p10 := $p20, $p53;
    goto $bb25_dummy;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 24)), $mul.ref(11, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i1);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i45, $i46);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb21;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p50 := $p49;
    goto $bb24;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p20 := $p9;
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $p9;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb7;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5238;
}



const __scsi_iterate_devices: ref;

axiom __scsi_iterate_devices == $sub.ref(0, 399638);

procedure __scsi_iterate_devices($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __scsi_iterate_devices($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p2 := external_alloc();
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_mutex_lock_interruptible_39: ref;

axiom ldv_mutex_lock_interruptible_39 == $sub.ref(0, 400670);

procedure ldv_mutex_lock_interruptible_39($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_39($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 796} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i2 := ldv_mutex_lock_interruptible_mutex($p0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 798} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const strncpy: ref;

axiom strncpy == $sub.ref(0, 401702);

procedure strncpy($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);



const ldv_mutex_unlock_40: ref;

axiom ldv_mutex_unlock_40 == $sub.ref(0, 402734);

procedure ldv_mutex_unlock_40($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_40($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} mutex_unlock($p0);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_18: ref;

axiom ldv_mutex_lock_18 == $sub.ref(0, 403766);

procedure ldv_mutex_lock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} mutex_lock($p0);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const sas_port_delete_phy: ref;

axiom sas_port_delete_phy == $sub.ref(0, 404798);

procedure sas_port_delete_phy($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sas_port_delete_phy($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    return;
}



const mptsas_get_starget: ref;

axiom mptsas_get_starget == $sub.ref(0, 405830);

procedure mptsas_get_starget($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mptsas_get_starget($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;
}



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 406862);

procedure ldv_mutex_unlock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} mutex_unlock($p0);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const mptsas_print_expander_pg1: ref;

axiom mptsas_print_expander_pg1 == $sub.ref(0, 407894);

procedure mptsas_print_expander_pg1($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mptsas_print_expander_pg1($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1048576);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1048576);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1048576);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 1048576);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 1048576);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 1048576);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 1048576);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 1048576);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i72 == 1;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.71, $p75);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_173 := printk.ref.ref.i32(.str.16, $p74, $i77);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i62 == 1;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.70, $p65);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} vslice_dummy_var_172 := printk.ref.ref.i32(.str.15, $p64, $i67);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(17, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.69, $p55);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_171 := printk.ref.ref.i32(.str.14, $p54, $i57);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.68, $p45);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} vslice_dummy_var_170 := printk.ref.ref.i32(.str.13, $p44, $i47);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(31, 1));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.67, $p35);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_169 := printk.ref.ref.i32(.str.12, $p34, $i37);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.65, $p25);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} vslice_dummy_var_168 := printk.ref.ref.i32(.str.11, $p24, $i27);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.66, $p15);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_167 := printk.ref.ref.i32(.str.10, $p14, $i17);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} vslice_dummy_var_166 := printk.ref.ref(.str.9, $p7);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_8: ref;

axiom ldv_mutex_lock_8 == $sub.ref(0, 408926);

procedure ldv_mutex_lock_8($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} mutex_lock($p0);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_9: ref;

axiom ldv_mutex_unlock_9 == $sub.ref(0, 409958);

procedure ldv_mutex_unlock_9($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} mutex_unlock($p0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const mptsas_sas_io_unit_pg0: ref;

axiom mptsas_sas_io_unit_pg0 == $sub.ref(0, 410990);

procedure mptsas_sas_io_unit_pg0($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $CurrAddr;



implementation mptsas_sas_io_unit_pg0($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i16;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i64;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i16;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i8;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p77: ref;
  var $i78: i64;
  var $p81: ref;
  var $i82: i8;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p87: ref;
  var $i88: i64;
  var $p91: ref;
  var $i92: i8;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $p102: ref;
  var $i103: i64;
  var $p106: ref;
  var $i107: i16;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p112: ref;
  var $i113: i32;
  var $i114: i16;
  var $i115: i32;
  var $i116: i1;
  var $i67: i32;
  var $i42: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i16;
  var $i121: i32;
  var $i122: i32;
  var $i123: i64;
  var $p124: ref;
  var $i125: i64;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, 4);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p6, 0);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, 0);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 0);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 15);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 16);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, $p2);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p14, $sub.i64(0, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p15, 0);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p16, 0);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(23, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p17, 0);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p18, 30);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i19 := mpt_config($p0, $p3);
    call {:si_unique_call 821} {:cexpr "error"} boogie_si_record_i32($i19);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.1, $p22);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i30, 4);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p33 := pci_alloc_consistent($p27, $i32, $p4);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.4, $p4);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p38, $i37);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p39, 1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i40 := mpt_config($p0, $p3);
    call {:si_unique_call 824} {:cexpr "error"} boogie_si_record_i32($i40);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.72, $p43);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i16($i44);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, $i45);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i64($i48);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p50 := kcalloc($i49, 112, 208);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p50);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(10, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.72, $p57);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(220, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $i58);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.72, $p60);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(222, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, $i61);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p63);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i66 := $sgt.i32($i65, 0);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.1, $p119);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i122 := $mul.i32($i121, 4);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i122);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p34);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.4, $p4);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} pci_free_consistent($p118, $i123, $p124, $i125);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i21 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb18:
    assume $i66 == 1;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb21;

  $bb21:
    call $p68, $p69, $i70, $p71, $i72, $p73, $p74, $i75, $p77, $i78, $p81, $i82, $p83, $p84, $i85, $p87, $i88, $p91, $i92, $p93, $p94, $i95, $p97, $p98, $p99, $i100, $p102, $i103, $p106, $i107, $p108, $p109, $i110, $p112, $i113, $i114, $i115, $i116, $i67 := mptsas_sas_io_unit_pg0_loop_$bb21($p0, $p1, $p34, $p63, $p68, $p69, $i70, $p71, $i72, $p73, $p74, $i75, $p77, $i78, $p81, $i82, $p83, $p84, $i85, $p87, $i88, $p91, $i92, $p93, $p94, $i95, $p97, $p98, $p99, $i100, $p102, $i103, $p106, $i107, $p108, $p109, $i110, $p112, $i113, $i114, $i115, $i116, $i67);
    goto $bb21_last;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i67);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p69, $mul.ref($i70, 16));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} mptsas_print_phy_data($p0, $p71);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i67);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i67);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p74, $mul.ref($i75, 112)), $mul.ref(2, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $i72);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i67);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref($i78, 16)), $mul.ref(0, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.72, $p81);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i67);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p84, $mul.ref($i85, 112)), $mul.ref(3, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i82);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i67);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref($i88, 16)), $mul.ref(3, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.72, $p91);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i67);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p94, $mul.ref($i95, 112)), $mul.ref(4, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, $i92);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i67);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p99, $mul.ref($i100, 112)), $mul.ref(96, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p102, $p1);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i67);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref($i103, 16)), $mul.ref(10, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.72, $p106);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i67);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p109, $mul.ref($i110, 112)), $mul.ref(0, 1));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p112, $i107);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i67, 1);
    call {:si_unique_call 828} {:cexpr "i"} boogie_si_record_i32($i113);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p63);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i116 := $sgt.i32($i115, $i113);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i116 == 1);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i67 := $i113;
    goto $bb23_dummy;

  $bb15:
    assume $i56 == 1;
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 12);
    goto $bb13;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb13;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5560;
}



const mptsas_sas_io_unit_pg1: ref;

axiom mptsas_sas_io_unit_pg1 == $sub.ref(0, 412022);

procedure mptsas_sas_io_unit_pg1($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $CurrAddr;



implementation mptsas_sas_io_unit_pg1($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i60: i32;
  var $i64: i16;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $i28: i32;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.1;
    call {:si_unique_call 832} cmdloc_dummy_var_59 := $memset.i8(cmdloc_dummy_var_58, $p4, 0, 8, $zext.i32.i64(2), 0 == 1);
    $M.1 := cmdloc_dummy_var_59;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.2;
    call {:si_unique_call 833} cmdloc_dummy_var_61 := $memset.i8(cmdloc_dummy_var_60, $p5, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.2 := cmdloc_dummy_var_61;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, $p1);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p8, 0);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p9, 30);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.2, $p11);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 15);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.2, $p15);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 16);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.2, $p19);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, 7);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 1);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i26 := mpt_config($p0, $p2);
    call {:si_unique_call 835} {:cexpr "error"} boogie_si_record_i32($i26);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.1, $p29);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.1, $p35);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32($i37, 4);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p40 := pci_alloc_consistent($p34, $i39, $p3);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.4, $p3);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p45, $i44);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p46, 1);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i47 := mpt_config($p0, $p2);
    call {:si_unique_call 838} {:cexpr "error"} boogie_si_record_i32($i47);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(19, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.74, $p49);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(228, 1));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i50);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(18, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.75, $p52);
    call {:si_unique_call 840} {:cexpr "device_missing_delay"} boogie_si_record_i8($i53);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i54 := $sext.i8.i32($i53);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 0);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i55 == 1);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i16($i53);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 127);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i60 := $i63;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i60);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(230, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $i64);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.1, $p68);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i71 := $mul.i32($i70, 4);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p41);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.4, $p3);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} pci_free_consistent($p67, $i72, $p73, $i74);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i28 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb15:
    assume $i55 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i16($i53);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 127);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 16);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb17;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb3;
}



const ldv_mutex_lock_41: ref;

axiom ldv_mutex_lock_41 == $sub.ref(0, 413054);

procedure ldv_mutex_lock_41($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} mutex_lock($p0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_42: ref;

axiom ldv_mutex_unlock_42 == $sub.ref(0, 414086);

procedure ldv_mutex_unlock_42($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} mutex_unlock($p0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const mptsas_sas_phy_pg0: ref;

axiom mptsas_sas_phy_pg0 == $sub.ref(0, 415118);

procedure mptsas_sas_phy_pg0($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.81, $CurrAddr;



implementation mptsas_sas_phy_pg0($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $p54: ref;
  var $p55: ref;
  var $i56: i16;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 848} {:cexpr "mptsas_sas_phy_pg0:arg:form"} boogie_si_record_i32($i2);
    call {:si_unique_call 849} {:cexpr "mptsas_sas_phy_pg0:arg:form_specific"} boogie_si_record_i32($i3);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, 1);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p8, 0);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 0);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 0);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 0);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 15);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 19);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p15, $p4);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(23, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p16, 0);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p17, 30);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p18, $sub.i64(0, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i2, $i3);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p20, $i19);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p21, 0);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $i22 := mpt_config($p0, $p5);
    call {:si_unique_call 851} {:cexpr "error"} boogie_si_record_i32($i22);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.1, $p25);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.1, $p31);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i33, 4);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p36 := pci_alloc_consistent($p30, $i35, $p6);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.4, $p6);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p41, $i40);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p42, 1);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i43 := mpt_config($p0, $p5);
    call {:si_unique_call 854} {:cexpr "error"} boogie_si_record_i32($i43);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} mptsas_print_phy_pg0($p0, $p37);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p37, $mul.ref(0, 36)), $mul.ref(29, 1));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.77, $p45);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(5, 1));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i46);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p37, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.78, $p48);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(6, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i49);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p37, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.79, $p51);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, $i52);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p37, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.80, $p55);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, $i56);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.1, $p61);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i64 := $mul.i32($i63, 4);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p37);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.4, $p6);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} pci_free_consistent($p60, $i65, $p66, $i67);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i24 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb3;
}



const mptsas_print_phy_pg0: ref;

axiom mptsas_print_phy_pg0 == $sub.ref(0, 416150);

procedure mptsas_print_phy_pg0($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.81, $CurrAddr;



implementation mptsas_print_phy_pg0($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i64(8, 63);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.81;
    cmdloc_dummy_var_66 := $M.81;
    call {:si_unique_call 859} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p7, $p9, 8, $zext.i32.i64(4), 0 == 1);
    $M.81 := cmdloc_dummy_var_67;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1048576);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1048576);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1048576);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 1048576);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1048576);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 1048576);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 1048576);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 1048576);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i77 == 1;
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.85, $p80);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} vslice_dummy_var_181 := printk.ref.ref.i32(.str.114, $p79, $i81);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i67 == 1;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(30, 1));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.84, $p70);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_180 := printk.ref.ref.i32(.str.113, $p69, $i72);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.78, $p60);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_179 := printk.ref.ref.i32(.str.13, $p59, $i62);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.83, $p51);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} vslice_dummy_var_178 := printk.ref.ref.i32(.str.112, $p50, $i52);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(22, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.82, $p41);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} vslice_dummy_var_177 := printk.ref.ref.i32(.str.111, $p40, $i43);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.81, $p2);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_176 := printk.ref.ref.i64(.str.22, $p32, $i33);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.80, $p23);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} vslice_dummy_var_175 := printk.ref.ref.i32(.str.110, $p22, $i25);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_174 := printk.ref.ref(.str.109, $p15);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.81;
    cmdloc_dummy_var_63 := $M.81;
    call {:si_unique_call 858} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p4, $p6, 8, $zext.i32.i64(4), 0 == 1);
    $M.81 := cmdloc_dummy_var_64;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mptsas_print_phy_data: ref;

axiom mptsas_print_phy_data == $sub.ref(0, 417182);

procedure mptsas_print_phy_data($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mptsas_print_phy_data($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1048576);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1048576);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1048576);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 1048576);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 1048576);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 1048576);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 1048576);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 1048576);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 1048576);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i81 == 1;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.72, $p84);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} vslice_dummy_var_190 := printk.ref.ref.i32(.str.108, $p83, $i85);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i72 == 1;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.72, $p75);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} vslice_dummy_var_189 := printk.ref.ref.i32(.str.107, $p74, $i76);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i62 == 1;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.72, $p65);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_188 := printk.ref.ref.i32(.str.12, $p64, $i67);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.72, $p55);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_187 := printk.ref.ref.i32(.str.106, $p54, $i57);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.72, $p45);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_186 := printk.ref.ref.i32(.str.105, $p44, $i47);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.72, $p35);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} vslice_dummy_var_185 := printk.ref.ref.i32(.str.104, $p34, $i37);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.72, $p25);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} vslice_dummy_var_184 := printk.ref.ref.i32(.str.103, $p24, $i27);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.72, $p15);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_183 := printk.ref.ref.i32(.str.18, $p14, $i17);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} vslice_dummy_var_182 := printk.ref.ref(.str.102, $p7);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const scsi_add_host_with_dma: ref;

axiom scsi_add_host_with_dma == $sub.ref(0, 418214);

procedure scsi_add_host_with_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_add_host_with_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 419246);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 880} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 881} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 420278);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    return;
}



const mptsas_target_reset: ref;

axiom mptsas_target_reset == $sub.ref(0, 421310);

procedure mptsas_target_reset($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);



const mpt_set_taskmgmt_in_progress_flag: ref;

axiom mpt_set_taskmgmt_in_progress_flag == $sub.ref(0, 422342);

procedure mpt_set_taskmgmt_in_progress_flag($p0: ref) returns ($r: i32);



const mpt_put_msg_frame_hi_pri: ref;

axiom mpt_put_msg_frame_hi_pri == $sub.ref(0, 423374);

procedure mpt_put_msg_frame_hi_pri($i0: i8, $p1: ref, $p2: ref);



const mpt_clear_taskmgmt_in_progress_flag: ref;

axiom mpt_clear_taskmgmt_in_progress_flag == $sub.ref(0, 424406);

procedure mpt_clear_taskmgmt_in_progress_flag($p0: ref);



const mptscsih_info: ref;

axiom mptscsih_info == $sub.ref(0, 425438);

procedure mptscsih_info($p0: ref) returns ($r: ref);



const mptsas_qcmd: ref;

axiom mptsas_qcmd == $sub.ref(0, 426470);

procedure mptsas_qcmd($p0: ref, $p1: ref) returns ($r: i32);



const mptscsih_abort: ref;

axiom mptscsih_abort == $sub.ref(0, 427502);

procedure mptscsih_abort($p0: ref) returns ($r: i32);



const mptscsih_dev_reset: ref;

axiom mptscsih_dev_reset == $sub.ref(0, 428534);

procedure mptscsih_dev_reset($p0: ref) returns ($r: i32);



const mptscsih_host_reset: ref;

axiom mptscsih_host_reset == $sub.ref(0, 429566);

procedure mptscsih_host_reset($p0: ref) returns ($r: i32);



const mptsas_slave_alloc: ref;

axiom mptsas_slave_alloc == $sub.ref(0, 430598);

procedure mptsas_slave_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $CurrAddr;



implementation mptsas_slave_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p51: ref;
  var $i52: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i8;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i16;
  var $i90: i32;
  var $i91: i1;
  var $i45: i32;
  var $p44: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p39: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $i14: i32;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(0, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p3 := shost_priv($p2);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p7 := kzalloc(16, 208);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $p15 := scsi_target($p0);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1320)), $mul.ref(1312, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p17);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(208, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(280, 1));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 1320)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_mutex_lock_25($p29);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i35, $i37);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} ldv_mutex_unlock_27($p99);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p8);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} kfree($p100);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 6);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p39 := $p32;
    goto $bb12;

  $bb12:
    call $p40, $i41, $i42, $i43, $p46, $p47, $i48, $p51, $i52, $p54, $i55, $i56, $p57, $i58, $i88, $i89, $i90, $i91, $i45, $p44, $p93, $p94, $p95, $p96, $i97, $i98, $p39 := mptsas_slave_alloc_loop_$bb12($p28, $i37, $p40, $i41, $i42, $i43, $p46, $p47, $i48, $p51, $i52, $p54, $i55, $i56, $p57, $i58, $i88, $i89, $i90, $i91, $i45, $p44, $p93, $p94, $p95, $p96, $i97, $i98, $p39);
    goto $bb12_last;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 0);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p44 := $p39;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, $i37);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i98 == 1);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb29:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $p39 := $p94;
    goto $bb29_dummy;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb17;

  $bb17:
    call $p46, $p47, $i48, $p51, $i52, $p54, $i55, $i56, $p57, $i58, $i88, $i89, $i90, $i91, $i45 := mptsas_slave_alloc_loop_$bb17($p28, $p40, $p46, $p47, $i48, $p51, $i52, $p54, $i55, $i56, $p57, $i58, $i88, $i89, $i90, $i91, $i45, $p39);
    goto $bb17_last;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p39, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i45);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p47, $mul.ref($i48, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i52, $i55);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p57, $i58 := $p39, $i45;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(204, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p57, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i58);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p63, $mul.ref($i64, 112)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p57, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i58);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p72, $mul.ref($i73, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i78);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $i80 := mptscsih_is_phys_disk($p6, $i70, $i79);
    call {:si_unique_call 890} {:cexpr "tmp___1"} boogie_si_record_i32($i80);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_mutex_unlock_26($p87);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i104, 1);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, $i105);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(224, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $p7);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i81 == 1;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(292, 1));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, $sub.i64(0, 1073741825));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i86 := $or.i64($i85, 1073741824);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, $i86);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i45, 1);
    call {:si_unique_call 888} {:cexpr "i"} boogie_si_record_i32($i88);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.0, $p40);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i91 := $sgt.i32($i90, $i88);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i91 == 1);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p44 := $p39;
    goto $bb16;

  $bb26:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i45 := $i88;
    goto $bb26_dummy;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_191 := printk.ref.ref.i64(.str.156, $p12, 16);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6138;

  $bb29_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6129;
}



const mptsas_slave_configure: ref;

axiom mptsas_slave_configure == $sub.ref(0, 431630);

procedure mptsas_slave_configure($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.9, $M.28, $M.55, $M.44, $M.26, $CurrAddr, assertsPassed;



implementation mptsas_slave_configure($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(0, 1));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $p3 := shost_priv($p2);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(224, 1));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(208, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} vslice_dummy_var_193 := sas_read_port_mode_page($p0);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $p26 := scsi_target($p0);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} mptsas_add_device_component_starget($p6, $p26);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i27 := mptscsih_slave_configure($p0);
    call {:si_unique_call 899} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $p24 := scsi_target($p0);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} mptsas_add_device_component_starget_ir($p6, $p24);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(432, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} vslice_dummy_var_192 := dev_printk.ref.ref.ref(.str.123, $p16, .str.157);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mptscsih_slave_destroy: ref;

axiom mptscsih_slave_destroy == $sub.ref(0, 432662);

procedure mptscsih_slave_destroy($p0: ref);



const mptsas_target_alloc: ref;

axiom mptsas_target_alloc == $sub.ref(0, 433694);

procedure mptsas_target_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $CurrAddr;



implementation mptsas_target_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i64;
  var $p53: ref;
  var $p54: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i8;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i38: i32;
  var $i39: i8;
  var $i66: i8;
  var $i37: i8;
  var $p67: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p96: ref;
  var $i97: i64;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $p109: ref;
  var $i110: i8;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $p116: ref;
  var $i117: i8;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $p121: ref;
  var $i122: i32;
  var $i123: i8;
  var $i124: i32;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i8;
  var $i130: i32;
  var $i131: i8;
  var $i132: i8;
  var $p133: ref;
  var $i134: i8;
  var $i135: i32;
  var $i136: i32;
  var $i137: i8;
  var $p138: ref;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $p145: ref;
  var $i146: i8;
  var $p147: ref;
  var $i148: i32;
  var $i149: i16;
  var $i150: i32;
  var $i151: i1;
  var $i90: i32;
  var $p89: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p84: ref;
  var $p159: ref;
  var $p160: ref;
  var $i68: i8;
  var $i69: i8;
  var $p161: ref;
  var $p162: ref;
  var $p164: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(40, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p2 := dev_to_shost($p1);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p3 := shost_priv($p2);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $p7 := kzalloc(24, 208);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(0, 1));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(9, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 8);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 906} {:cexpr "id"} boogie_si_record_i8($i20);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(1188, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} ldv_mutex_lock_22($p74);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i80, $i82);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ldv_mutex_unlock_24($p159);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p8);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} kfree($p160);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 6);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i83 == 1;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p84 := $p77;
    goto $bb26;

  $bb26:
    call $p85, $i86, $i87, $i88, $p91, $p92, $i93, $p96, $i97, $p99, $i100, $i101, $p102, $i103, $i148, $i149, $i150, $i151, $i90, $p89, $p153, $p154, $p155, $p156, $i157, $i158, $p84 := mptsas_target_alloc_loop_$bb26($p73, $i82, $p85, $i86, $i87, $i88, $p91, $p92, $i93, $p96, $i97, $p99, $i100, $i101, $p102, $i103, $i148, $i149, $i150, $i151, $i90, $p89, $p153, $p154, $p155, $p156, $i157, $i158, $p84);
    goto $bb26_last;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p85);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i88 := $sgt.i32($i87, 0);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p89 := $p84;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p89, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, $i82);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i158 == 1);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb43:
    assume $i158 == 1;
    assume {:verifier.code 0} true;
    $p84 := $p154;
    goto $bb43_dummy;

  $bb28:
    assume $i88 == 1;
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb31;

  $bb31:
    call $p91, $p92, $i93, $p96, $i97, $p99, $i100, $i101, $p102, $i103, $i148, $i149, $i150, $i151, $i90 := mptsas_target_alloc_loop_$bb31($p73, $p85, $p91, $p92, $i93, $p96, $i97, $p99, $i100, $i101, $p102, $i103, $i148, $i149, $i150, $i151, $i90, $p84);
    goto $bb31_last;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p84, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i90);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p92, $mul.ref($i93, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i100 := $load.i64($M.0, $p99);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i97, $i100);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p102, $i103 := $p84, $i90;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p102, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i103);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p105, $mul.ref($i106, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    call {:si_unique_call 912} {:cexpr "id"} boogie_si_record_i8($i110);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p102, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i103);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p112, $mul.ref($i113, 112)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    call {:si_unique_call 913} {:cexpr "channel"} boogie_si_record_i8($i117);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p102, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i103);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p119, $mul.ref($i120, 112));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} mptsas_set_starget($p121, $p0);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i117);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i8($i122);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i110);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i8($i124);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i126 := mptscsih_is_phys_disk($p6, $i123, $i125);
    call {:si_unique_call 916} {:cexpr "tmp___2"} boogie_si_record_i32($i126);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i146 := $i110;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} ldv_mutex_unlock_23($p147);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i68, $i69 := $i146, $i117;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(10, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p161, $i68);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(11, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p162, $i69);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(1312, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p164, $p7);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i127 == 1;
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i117);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i128);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i110);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i8($i130);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i132 := mptscsih_raid_id_to_num($p6, $i129, $i131);
    call {:si_unique_call 918} {:cexpr "id"} boogie_si_record_i8($i132);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.0, $p133);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i136 := $or.i32($i135, 64);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i136);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p138, $i137);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i132);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p102, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i103);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p141, $mul.ref($i142, 112)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, $i139);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i146 := $i132;
    goto $bb39;

  $bb33:
    assume $i101 == 1;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i90, 1);
    call {:si_unique_call 911} {:cexpr "i"} boogie_si_record_i32($i148);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.0, $p85);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i151 := $sgt.i32($i150, $i148);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i151 == 1);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p89 := $p84;
    goto $bb30;

  $bb40:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $i90 := $i148;
    goto $bb40_dummy;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, 0);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i37 := 0;
    assume {:branchcond $i36} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 1);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i68, $i69 := $i20, $i37;
    goto $bb21;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i38, $i39 := 0, 0;
    goto $bb13;

  $bb13:
    call $i40, $p42, $p43, $p46, $i47, $i48, $i49, $i50, $i51, $p53, $p54, $p57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $i65, $i38, $i39, $i66 := mptsas_target_alloc_loop_$bb13($p6, $i20, $p31, $i40, $p42, $p43, $p46, $i47, $i48, $i49, $i50, $i51, $p53, $p54, $p57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $i65, $i38, $i39, $i66);
    goto $bb13_last;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i38);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p43, $mul.ref(0, 20)), $mul.ref(12, 1)), $mul.ref($i40, 8)), $mul.ref(0, 1));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i20);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i48, $i49);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i39;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i38, 1);
    call {:si_unique_call 909} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p31);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i64, $i60);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i66 := $i59;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i37 := $i66;
    goto $bb12;

  $bb18:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i38, $i39 := $i60, $i59;
    goto $bb18_dummy;

  $bb15:
    assume $i50 == 1;
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i38);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 20)), $mul.ref(12, 1)), $mul.ref($i51, 8)), $mul.ref(1, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    call {:si_unique_call 908} {:cexpr "channel"} boogie_si_record_i8($i58);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb17;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p8);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} kfree($p29);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6362;

  $bb43_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6353;

  $bb18_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6297;
}



const mptsas_target_destroy: ref;

axiom mptsas_target_destroy == $sub.ref(0, 434726);

procedure mptsas_target_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation mptsas_target_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p51: ref;
  var $i52: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p89: ref;
  var $i90: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i16;
  var $i98: i32;
  var $i99: i1;
  var $i45: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p40: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var vslice_dummy_var_194: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(40, 1));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $p2 := dev_to_shost($p1);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p3 := shost_priv($p2);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(1312, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(1312, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(1188, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} mptsas_del_device_component_by_os($p6, $i18, $i23);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(1188, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i36, $i38);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, $0.ref);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(1312, 1));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} kfree($p109);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(1312, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $0.ref);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p40 := $p33;
    goto $bb12;

  $bb12:
    call $p41, $i42, $i43, $i44, $p46, $p47, $i48, $p51, $i52, $p54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $i62, $p65, $i66, $i67, $p68, $p69, $i70, $p73, $i74, $i75, $p76, $p77, $i78, $p81, $i82, $i83, $p84, $p85, $i86, $p89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $i99, $i45, $p101, $p102, $p103, $p104, $i105, $i106, $p40, vslice_dummy_var_194 := mptsas_target_destroy_loop_$bb12($p0, $p6, $p30, $i38, $p41, $i42, $i43, $i44, $p46, $p47, $i48, $p51, $i52, $p54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $i62, $p65, $i66, $i67, $p68, $p69, $i70, $p73, $i74, $i75, $p76, $p77, $i78, $p81, $i82, $i83, $p84, $p85, $i86, $p89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $i99, $i45, $p101, $p102, $p103, $p104, $i105, $i106, $p40, vslice_dummy_var_194);
    goto $bb12_last;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, 0);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, $i38);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i106 == 1);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb26:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $p40 := $p102;
    goto $bb26_dummy;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb17;

  $bb17:
    call $p46, $p47, $i48, $p51, $i52, $p54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $i62, $p65, $i66, $i67, $p68, $p69, $i70, $p73, $i74, $i75, $p76, $p77, $i78, $p81, $i82, $i83, $p84, $p85, $i86, $p89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $i99, $i45, vslice_dummy_var_194 := mptsas_target_destroy_loop_$bb17($p0, $p6, $p30, $p41, $p46, $p47, $i48, $p51, $i52, $p54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $i62, $p65, $i66, $i67, $p68, $p69, $i70, $p73, $i74, $i75, $p76, $p77, $i78, $p81, $i82, $i83, $p84, $p85, $i86, $p89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $i99, $i45, $p40, vslice_dummy_var_194);
    goto $bb17_last;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i45);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p47, $mul.ref($i48, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i52, $i55);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1320)), $mul.ref(40, 1));
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i45);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p61, $mul.ref($i62, 112)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i45);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p69, $mul.ref($i70, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i45);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p77, $mul.ref($i78, 112)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i45);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p85, $mul.ref($i86, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} vslice_dummy_var_194 := dev_printk.ref.ref.ref.ref.i32.i32.i32.i64(.str.123, $p57, .str.158, $p59, $i67, $i75, $i83, $i90);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i45);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p93, $mul.ref($i94, 112));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} mptsas_set_starget($p95, $0.ref);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i45, 1);
    call {:si_unique_call 926} {:cexpr "i"} boogie_si_record_i32($i96);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.0, $p41);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i98, $i96);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i99 == 1);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i45 := $i96;
    goto $bb23_dummy;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6511;

  $bb26_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6502;
}



const mptscsih_change_queue_depth: ref;

axiom mptscsih_change_queue_depth == $sub.ref(0, 435758);

procedure mptscsih_change_queue_depth($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const mptscsih_bios_param: ref;

axiom mptscsih_bios_param == $sub.ref(0, 436790);

procedure mptscsih_bios_param($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32);



const mptscsih_proc_info: ref;

axiom mptscsih_proc_info == $sub.ref(0, 437822);

procedure mptscsih_proc_info($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32, $i5: i32) returns ($r: i32);



const mptsas_del_device_component_by_os: ref;

axiom mptsas_del_device_component_by_os == $sub.ref(0, 438854);

procedure mptsas_del_device_component_by_os($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation mptsas_del_device_component_by_os($p0: ref, $i1: i8, $i2: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} {:cexpr "mptsas_del_device_component_by_os:arg:channel"} boogie_si_record_i8($i1);
    call {:si_unique_call 930} {:cexpr "mptsas_del_device_component_by_os:arg:id"} boogie_si_record_i8($i2);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1)), $mul.ref(0, 1));
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i12, $i14);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p9, $p5;
    goto $bb4;

  $bb4:
    call $p19, $i20, $i21, $i22, $i23, $p25, $i26, $i27, $i28, $i29, $p30, $p32, $p33, $p35, $i36, $i37, $p16, $p17 := mptsas_del_device_component_by_os_loop_$bb4($i1, $i2, $i14, $p19, $i20, $i21, $i22, $i23, $p25, $i26, $i27, $i28, $i29, $p30, $p32, $p33, $p35, $i36, $i37, $p16, $p17);
    goto $bb4_last;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i21, $i22);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p16, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, $i14);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $p16, $p17 := $p33, $p16;
    goto $bb12_dummy;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i2);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i27, $i28);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb8;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(51, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 1);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6593;
}



const mptsas_set_starget: ref;

axiom mptsas_set_starget == $sub.ref(0, 439886);

procedure mptsas_set_starget($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation mptsas_set_starget($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_22: ref;

axiom ldv_mutex_lock_22 == $sub.ref(0, 440918);

procedure ldv_mutex_lock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} mutex_lock($p0);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const mptscsih_is_phys_disk: ref;

axiom mptscsih_is_phys_disk == $sub.ref(0, 441950);

procedure mptscsih_is_phys_disk($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation mptscsih_is_phys_disk($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 933} {:cexpr "mptscsih_is_phys_disk:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 934} {:cexpr "mptscsih_is_phys_disk:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 1} true;
    call {:si_unique_call 935} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 936} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mptscsih_raid_id_to_num: ref;

axiom mptscsih_raid_id_to_num == $sub.ref(0, 442982);

procedure mptscsih_raid_id_to_num($p0: ref, $i1: i8, $i2: i8) returns ($r: i8);
  free requires assertsPassed;



implementation mptscsih_raid_id_to_num($p0: ref, $i1: i8, $i2: i8) returns ($r: i8)
{
  var $i3: i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 937} {:cexpr "mptscsih_raid_id_to_num:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 938} {:cexpr "mptscsih_raid_id_to_num:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} $i3 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 940} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i3);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 444014);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} mutex_unlock($p0);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_24: ref;

axiom ldv_mutex_unlock_24 == $sub.ref(0, 445046);

procedure ldv_mutex_unlock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} mutex_unlock($p0);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const scsi_target: ref;

axiom scsi_target == $sub.ref(0, 446078);

procedure scsi_target($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_target($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(432, 1)), $mul.ref(0, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 40), 1320));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const mptsas_add_device_component_starget_ir: ref;

axiom mptsas_add_device_component_starget_ir == $sub.ref(0, 447110);

procedure mptsas_add_device_component_starget_ir($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.0, $M.55, $M.9, $M.28, $M.44, $CurrAddr, assertsPassed;



implementation mptsas_add_device_component_starget_ir($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i48: i64;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i8;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i8;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p75: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i8;
  var $i111: i32;
  var $i112: i1;
  var $i47: i32;
  var $p113: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $i123: i64;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p129: ref;
  var $i130: i8;
  var $i131: i32;
  var $i132: i1;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p143: ref;
  var $p144: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p127: ref;
  var $p128: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i8;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i8;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i8;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p18: ref;
  var $i173: i64;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i180: i32;
  var $i181: i64;
  var $p182: ref;
  var $i183: i64;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p5 := $alloc($mul.ref(120, $zext.i32.i64(1)));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.2;
    call {:si_unique_call 949} cmdloc_dummy_var_69 := $memset.i8(cmdloc_dummy_var_68, $p6, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.2 := cmdloc_dummy_var_69;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_70 := $M.1;
    call {:si_unique_call 950} cmdloc_dummy_var_71 := $memset.i8(cmdloc_dummy_var_70, $p7, 0, 4, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_71;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 8);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p11, $i10);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, $p3);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p14, 0);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p15, 30);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i16 := mpt_config($p0, $p2);
    call {:si_unique_call 952} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i27, 4);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $p30 := pci_alloc_consistent($p24, $i29, $p4);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.4, $p4);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p35, $i34);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p36, 1);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i37 := mpt_config($p0, $p2);
    call {:si_unique_call 955} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p31, $mul.ref(0, 44)), $mul.ref(36, 1));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.88, $p39);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p31, $mul.ref(0, 44)), $mul.ref(36, 1));
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.88, $p43);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i46 := $sgt.i32($i45, 0);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} ldv_mutex_lock_14($p113);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1)), $mul.ref(0, 1));
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p117, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p117, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1));
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i123, $i125);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $p149 := kzalloc(56, 208);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p150);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} ldv_mutex_unlock_15($p172);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p18 := $p30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p18);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i174 := $ne.i64($i173, 0);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    return;

  $bb62:
    assume $i174 == 1;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(656, 1));
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.1, $p177);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i180 := $mul.i32($i179, 4);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i181 := $sext.i32.i64($i180);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p18);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i183 := $load.i64($M.4, $p4);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} pci_free_consistent($p176, $i181, $p182, $i183);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i152 == 1;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p1, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i8($i154);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p157, $i155);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p1, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i8($i159);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p162, $i160);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p1, $mul.ref(0, 1320)), $mul.ref(1188, 1));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i8($i164);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p167, $i165);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p150, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p168, 1);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p150, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} INIT_LIST_HEAD($p169);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p150, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} list_add_tail($p170, $p171);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb45:
    assume $i126 == 1;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p127, $p128 := $p120, $p116;
    goto $bb48;

  $bb48:
    call $p129, $i130, $i131, $i132, $p134, $i135, $i136, $p137, $i138, $i139, $p140, $p141, $p143, $p144, $p146, $i147, $i148, $p127, $p128 := mptsas_add_device_component_starget_ir_loop_$bb48($p1, $i125, $p129, $i130, $i131, $i132, $p134, $i135, $i136, $p137, $i138, $i139, $p140, $p141, $p143, $p144, $p146, $i147, $i148, $p127, $p128);
    goto $bb48_last;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i130);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p127, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p127, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, $i125);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i148 == 1);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb56:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $p127, $p128 := $p144, $p127;
    goto $bb56_dummy;

  $bb50:
    assume $i132 == 1;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p128, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.0, $p134);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i136, $i138);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb52;

  $bb53:
    assume $i139 == 1;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p128, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} list_del($p140);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p128);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} kfree($p141);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb20;

  $bb20:
    call $i48, $p51, $i52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $p67, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $p76, $i77, $i78, $i79, $p81, $i82, $i83, $p84, $i85, $i86, $i87, $p89, $i90, $i91, $p92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $p102, $p103, $p104, $p105, $i106, $i107, $p75, $p108, $i109, $i110, $i111, $i112, $i47 := mptsas_add_device_component_starget_ir_loop_$bb20($p0, $p1, $p5, $p31, $p43, $i48, $p51, $i52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $p67, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $p76, $i77, $i78, $i79, $p81, $i82, $i83, $p84, $i85, $i86, $i87, $p89, $i90, $i91, $p92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $p102, $p103, $p104, $p105, $i106, $i107, $p75, $p108, $i109, $i110, $i111, $i112, $i47);
    goto $bb20_last;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 44)), $mul.ref(40, 1)), $mul.ref($i48, 4)), $mul.ref(3, 1));
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.88, $p51);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $i55 := mpt_raid_phys_disk_pg0($p0, $i54, $p5);
    call {:si_unique_call 957} {:cexpr "tmp___2"} boogie_si_record_i32($i55);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(5, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.89, $p57);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(4, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.90, $p61);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} mptsas_add_device_component_by_fw($p0, $i60, $i64);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} ldv_mutex_lock_12($p65);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1)), $mul.ref(0, 1));
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i71, $i73);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} ldv_mutex_unlock_13($p108);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i47, 1);
    call {:si_unique_call 958} {:cexpr "i"} boogie_si_record_i32($i109);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.88, $p43);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i112 := $sgt.i32($i111, $i109);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i112 == 1);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb42:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    $i47 := $i109;
    goto $bb42_dummy;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p75 := $p68;
    goto $bb29;

  $bb29:
    call $p76, $i77, $i78, $i79, $p81, $i82, $i83, $p84, $i85, $i86, $i87, $p89, $i90, $i91, $p92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $p102, $p103, $p104, $p105, $i106, $i107, $p75 := mptsas_add_device_component_starget_ir_loop_$bb29($p1, $p5, $i73, $p76, $i77, $i78, $i79, $p81, $i82, $i83, $p84, $i85, $i86, $i87, $p89, $i90, $i91, $p92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $p102, $p103, $p104, $p105, $i106, $i107, $p75);
    goto $bb29_last;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, $i73);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i107 == 1);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb39:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $p75 := $p103;
    goto $bb39_dummy;

  $bb31:
    assume $i79 == 1;
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(5, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.89, $p84);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i83, $i86);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb33;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(4, 1));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.90, $p92);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i91, $i94);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb33;

  $bb36:
    assume $i95 == 1;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p75, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, 1);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p75, $mul.ref(0, 56)), $mul.ref(50, 1));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, $i99);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i56 == 1;
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p18 := $p30;
    goto $bb3;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p18 := $p30;
    goto $bb3;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p18 := $p30;
    goto $bb3;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb3;

  $bb56_dummy:
    assume false;
    return;

  $bb48_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6832;

  $bb39_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6768;

  $bb42_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6729;
}



const sas_read_port_mode_page: ref;

axiom sas_read_port_mode_page == $sub.ref(0, 448142);

procedure sas_read_port_mode_page($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sas_read_port_mode_page($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 971} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mptsas_add_device_component_starget: ref;

axiom mptsas_add_device_component_starget == $sub.ref(0, 449174);

procedure mptsas_add_device_component_starget($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.9, $M.1, $M.2, $M.28, $M.26, $M.0, $CurrAddr, assertsPassed, $M.44;



implementation mptsas_add_device_component_starget($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i8;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $p40: ref;
  var $i41: i64;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var vslice_dummy_var_195: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1320)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p10 := mptsas_find_phyinfo_by_sas_address($p0, $i9);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.9;
    call {:si_unique_call 974} cmdloc_dummy_var_73 := $memset.i8(cmdloc_dummy_var_72, $p13, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.9 := cmdloc_dummy_var_73;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} vslice_dummy_var_195 := mptsas_sas_enclosure_pg0($p0, $p2, 268435456, $i17);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(6, 1));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.9, $p40);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} mptsas_add_device_component($p0, $i23, $i28, $i31, $i34, $i39, $i41);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const mptscsih_slave_configure: ref;

axiom mptscsih_slave_configure == $sub.ref(0, 450206);

procedure mptscsih_slave_configure($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mptscsih_slave_configure($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 1} true;
    call {:si_unique_call 977} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 978} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mptsas_add_device_component: ref;

axiom mptsas_add_device_component == $sub.ref(0, 451238);

procedure mptsas_add_device_component($p0: ref, $i1: i8, $i2: i8, $i3: i64, $i4: i32, $i5: i16, $i6: i64);
  free requires assertsPassed;
  modifies $M.0, $M.44, assertsPassed, $CurrAddr;



implementation mptsas_add_device_component($p0: ref, $i1: i8, $i2: i8, $i3: i64, $i4: i32, $i5: i16, $i6: i64)
{
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p21: ref;
  var $p22: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i8;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i8;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p71: ref;
  var $p96: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} {:cexpr "mptsas_add_device_component:arg:channel"} boogie_si_record_i8($i1);
    call {:si_unique_call 980} {:cexpr "mptsas_add_device_component:arg:id"} boogie_si_record_i8($i2);
    call {:si_unique_call 981} {:cexpr "mptsas_add_device_component:arg:sas_address"} boogie_si_record_i64($i3);
    call {:si_unique_call 982} {:cexpr "mptsas_add_device_component:arg:device_info"} boogie_si_record_i32($i4);
    call {:si_unique_call 983} {:cexpr "mptsas_add_device_component:arg:slot"} boogie_si_record_i16($i5);
    call {:si_unique_call 984} {:cexpr "mptsas_add_device_component:arg:enclosure_logical_id"} boogie_si_record_i64($i6);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} ldv_mutex_lock_10($p7);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1)), $mul.ref(0, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1));
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i17, $i19);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $p51 := kzalloc(56, 208);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $i2);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i1);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, $i3);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i4);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, $i5);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, $i6);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} INIT_LIST_HEAD($p63);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2248, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} list_add_tail($p64, $p65);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p68 := __scsi_iterate_devices($p67, $0.ref);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} ldv_mutex_unlock_11($p96);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i70 == 1;
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p71 := $p68;
    goto $bb27;

  $bb27:
    call $p72, $p74, $p75, $p76, $p78, $i79, $i80, $p81, $i82, $i83, $p85, $p86, $i87, $i88, $p90, $p91, $p92, $p93, $i94, $i95, $p71 := mptsas_add_device_component_loop_$bb27($p0, $i3, $p52, $p72, $p74, $p75, $p76, $p78, $i79, $i80, $p81, $i82, $i83, $p85, $p86, $i87, $i88, $p90, $p91, $p92, $p93, $i94, $i95, $p71);
    goto $bb27_last;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p72 := scsi_target($p71);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 1320)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, $i3);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p93 := __scsi_iterate_devices($p92, $p71);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i95 == 1);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb32:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $p71 := $p93;
    goto $bb32_dummy;

  $bb29:
    assume $i80 == 1;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p72, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, $i83);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p72, $mul.ref(0, 1320)), $mul.ref(1188, 1));
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, $i88);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p21, $p22 := $p14, $p10;
    goto $bb4;

  $bb4:
    call $p23, $i24, $i25, $i26, $p27, $i28, $i29, $p31, $i32, $i33, $i34, $i35, $p37, $i38, $i39, $i40, $i41, $p42, $p43, $p45, $p46, $p48, $i49, $i50, $p21, $p22 := mptsas_add_device_component_loop_$bb4($i1, $i2, $i3, $i19, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $p31, $i32, $i33, $i34, $i35, $p37, $i38, $i39, $i40, $i41, $p42, $p43, $p45, $p46, $p48, $i49, $i50, $p21, $p22);
    goto $bb4_last;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, $i19);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p21, $p22 := $p46, $p21;
    goto $bb17_dummy;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p22, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, $i3);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i1);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i33, $i34);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb8;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i2);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i39, $i40);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb8;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p22, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} list_del($p42);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p22);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} kfree($p43);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb10;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb32_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7042;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6967;
}



const ldv_mutex_lock_10: ref;

axiom ldv_mutex_lock_10 == $sub.ref(0, 452270);

procedure ldv_mutex_lock_10($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_mutex_lock_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_mutex_lock_sas_device_info_mutex($p0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} mutex_lock($p0);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_11: ref;

axiom ldv_mutex_unlock_11 == $sub.ref(0, 453302);

procedure ldv_mutex_unlock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_mutex_unlock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} ldv_mutex_unlock_sas_device_info_mutex($p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} mutex_unlock($p0);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const mpt_raid_phys_disk_pg0: ref;

axiom mpt_raid_phys_disk_pg0 == $sub.ref(0, 454334);

procedure mpt_raid_phys_disk_pg0($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mpt_raid_phys_disk_pg0($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 999} {:cexpr "mpt_raid_phys_disk_pg0:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1000} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1001} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mptsas_add_device_component_by_fw: ref;

axiom mptsas_add_device_component_by_fw == $sub.ref(0, 455366);

procedure mptsas_add_device_component_by_fw($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.55, $M.9, $M.28, $M.44, $CurrAddr, assertsPassed;



implementation mptsas_add_device_component_by_fw($p0: ref, $i1: i8, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i16;
  var $p32: ref;
  var $i33: i64;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var vslice_dummy_var_196: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1004} {:cexpr "mptsas_add_device_component_by_fw:arg:channel"} boogie_si_record_i8($i1);
    call {:si_unique_call 1005} {:cexpr "mptsas_add_device_component_by_fw:arg:id"} boogie_si_record_i8($i2);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i5, 8);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i6, $i7);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i9 := mptsas_sas_device_pg0($p0, $p3, 268435456, $i8);
    call {:si_unique_call 1007} {:cexpr "rc"} boogie_si_record_i32($i9);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p4);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_74 := $M.9;
    call {:si_unique_call 1008} cmdloc_dummy_var_75 := $memset.i8(cmdloc_dummy_var_74, $p11, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.9 := cmdloc_dummy_var_75;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.91, $p12);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} vslice_dummy_var_196 := mptsas_sas_enclosure_pg0($p0, $p4, 268435456, $i14);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.92, $p16);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(10, 1));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.93, $p20);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.94, $p24);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.95, $p26);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.96, $p28);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.9, $p32);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} mptsas_add_device_component($p0, $i19, $i23, $i25, $i27, $i31, $i33);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_12: ref;

axiom ldv_mutex_lock_12 == $sub.ref(0, 456398);

procedure ldv_mutex_lock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_mutex_lock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} ldv_mutex_lock_sas_device_info_mutex($p0);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} mutex_lock($p0);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 457430);

procedure ldv_mutex_unlock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_mutex_unlock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} ldv_mutex_unlock_sas_device_info_mutex($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} mutex_unlock($p0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_14: ref;

axiom ldv_mutex_lock_14 == $sub.ref(0, 458462);

procedure ldv_mutex_lock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_mutex_lock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} ldv_mutex_lock_sas_device_info_mutex($p0);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} mutex_lock($p0);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_15: ref;

axiom ldv_mutex_unlock_15 == $sub.ref(0, 459494);

procedure ldv_mutex_unlock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_mutex_unlock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} ldv_mutex_unlock_sas_device_info_mutex($p0);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} mutex_unlock($p0);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_25: ref;

axiom ldv_mutex_lock_25 == $sub.ref(0, 460526);

procedure ldv_mutex_lock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} ldv_mutex_lock_sas_topology_mutex($p0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} mutex_lock($p0);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_26: ref;

axiom ldv_mutex_unlock_26 == $sub.ref(0, 461558);

procedure ldv_mutex_unlock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} mutex_unlock($p0);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 462590);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} ldv_mutex_unlock_sas_topology_mutex($p0);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} mutex_unlock($p0);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const scsi_cmd_get_serial: ref;

axiom scsi_cmd_get_serial == $sub.ref(0, 463622);

procedure scsi_cmd_get_serial($p0: ref, $p1: ref);



const mptsas_qcmd_lck: ref;

axiom mptsas_qcmd_lck == $sub.ref(0, 464654);

procedure mptsas_qcmd_lck($p0: ref, $p1: ref) returns ($r: i32);



const scsi_print_command: ref;

axiom scsi_print_command == $sub.ref(0, 465686);

procedure scsi_print_command($p0: ref);



const mptscsih_qcmd: ref;

axiom mptscsih_qcmd == $sub.ref(0, 466718);

procedure mptscsih_qcmd($p0: ref, $p1: ref) returns ($r: i32);



const mptsas_expander_add: ref;

axiom mptsas_expander_add == $sub.ref(0, 467750);

procedure mptsas_expander_add($p0: ref, $i1: i16) returns ($r: ref);



const ldv_mutex_lock_48: ref;

axiom ldv_mutex_lock_48 == $sub.ref(0, 468782);

procedure ldv_mutex_lock_48($p0: ref);



const ldv_mutex_unlock_49: ref;

axiom ldv_mutex_unlock_49 == $sub.ref(0, 469814);

procedure ldv_mutex_unlock_49($p0: ref);



const main: ref;

axiom main == $sub.ref(0, 470846);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.19, $M.1, $M.2, $M.9, $M.10, $M.42, $M.43, $M.40, $M.162, $M.163, $M.39, $M.38, $M.37, $M.41, $M.11, $M.86, $M.26, $M.44, $M.25, $M.99, $M.98, $CurrAddr, $M.28, assertsPassed, $M.55, $M.61, $M.81, $M.4;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i18: i32;
  var $i2: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;

  $bb0:
    call {:si_unique_call 1025} $initialize();
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_initialize();
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} ldv_handler_precall();
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i0 := mptsas_init();
    call {:si_unique_call 1031} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb5;

  $bb5:
    call $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i18, $i2, $i33, $i34, $i35, vslice_dummy_var_197, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204 := main_loop_$bb5($i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i18, $i2, $i33, $i34, $i35, vslice_dummy_var_197, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204);
    goto $bb5_last;

  corral_source_split_7159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1033} $i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 1034} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
    call {:si_unique_call 1035} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb49;

  $bb49:
    assume !($i34 == 1);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i2, 0);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} ldv_handler_precall();
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} mptsas_exit();
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_check_final_state();
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1036} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1037} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1038} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i3, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i2 := $i18;
    goto corral_source_split_7209_dummy;

  $bb16:
    assume $i8 == 1;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} ldv_handler_precall();
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} mptsas_shutdown($u8);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  $bb14:
    assume $i7 == 1;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i2, 1);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i2;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i18 := $i32;
    goto $bb35;

  $bb43:
    assume $i31 == 1;
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} ldv_handler_precall();
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} mptsas_remove($u8);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb45;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i2, 0);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i2;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i18 := $i30;
    goto $bb35;

  $bb36:
    assume $i26 == 1;
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i27 := mptsas_probe($u8, $u9);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 1060} {:cexpr "res_mptsas_probe_91"} boogie_si_record_i32($i27);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} ldv_check_return_value($i27);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_check_return_value_probe($i27);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i2, 1);
    call {:si_unique_call 1065} {:cexpr "ldv_s_mptsas_driver_pci_driver"} boogie_si_record_i32($i29);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb42;

  $bb38:
    assume $i28 == 1;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i10 == 1);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} ldv_handler_precall();
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} vslice_dummy_var_199 := mptsas_smp_handler($u6, $u3, $u7);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i10 == 1;
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_handler_precall();
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} vslice_dummy_var_198 := mptsas_phy_reset($u2, $u5);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} ldv_handler_precall();
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} vslice_dummy_var_197 := mptsas_get_bay_identifier($u3);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i13 == 1);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} ldv_handler_precall();
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} vslice_dummy_var_201 := mptsas_get_enclosure_identifier($u3, $u4);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i13 == 1;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ldv_handler_precall();
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} vslice_dummy_var_200 := mptsas_get_linkerrors($u2);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  $bb25:
    assume $i12 == 1;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} ldv_handler_precall();
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} mptsas_target_destroy($u0);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  $bb23:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i15 == 1);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} ldv_handler_precall();
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} vslice_dummy_var_203 := mptsas_slave_configure($u1);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i15 == 1;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} ldv_handler_precall();
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vslice_dummy_var_202 := mptsas_slave_alloc($u1);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb18;

  $bb33:
    assume $i16 == 1;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} ldv_handler_precall();
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} vslice_dummy_var_204 := mptsas_target_alloc($u0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb48;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_7209_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7159;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 471878);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.98, $M.99, $M.25, $M.44, $M.26;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1068} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1069} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1070} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1071} {:cexpr "ldv_mutex_sas_device_info_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_mutex_sas_topology_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 472910);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    return;
}



const mptsas_init: ref;

axiom mptsas_init == $sub.ref(0, 473942);

procedure mptsas_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.37, $M.38, $M.39, $M.11, $M.86;



implementation mptsas_init() returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $i12: i8;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i5: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} vslice_dummy_var_205 := printk.ref.ref.ref(.str.58, .str.59, .str.60);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p1 := sas_attach_transport(mptsas_transport_functions);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $M.41 := $p1;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $p2 := $M.41;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $M.41;
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 568)), $mul.ref(544, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, mptsas_eh_timed_out);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i8 := mpt_register(mptscsih_io_done, 4, .str.61);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $M.37 := $i8;
    call {:si_unique_call 1076} {:cexpr "mptsasDoneCtx"} boogie_si_record_i8($i8);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i9 := mpt_register(mptscsih_taskmgmt_complete, 4, .str.62);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $M.38 := $i9;
    call {:si_unique_call 1078} {:cexpr "mptsasTaskCtx"} boogie_si_record_i8($i9);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $i10 := mpt_register(mptscsih_scandv_complete, 4, .str.63);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $M.39 := $i10;
    call {:si_unique_call 1080} {:cexpr "mptsasInternalCtx"} boogie_si_record_i8($i10);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i11 := mpt_register(mptsas_mgmt_done, 4, .str.64);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $M.11 := $i11;
    call {:si_unique_call 1082} {:cexpr "mptsasMgmtCtx"} boogie_si_record_i8($i11);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i12 := mpt_register(mptsas_taskmgmt_complete, 4, .str.65);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $M.86 := $i12;
    call {:si_unique_call 1084} {:cexpr "mptsasDeviceResetCtx"} boogie_si_record_i8($i12);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i13 := $M.37;
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_206 := mpt_event_register($i15, mptsas_event_process);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i17 := $M.37;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} vslice_dummy_var_207 := mpt_reset_register($i19, mptsas_ioc_reset);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i21 := __pci_register_driver(mptsas_driver, __this_module, .str.66);
    call {:si_unique_call 1088} {:cexpr "error"} boogie_si_record_i32($i21);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $p23 := $M.41;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} sas_release_transport($p23);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 474974);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_return_value_probe: ref;

axiom ldv_check_return_value_probe == $sub.ref(0, 476006);

procedure ldv_check_return_value_probe($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value_probe($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} {:cexpr "ldv_check_return_value_probe:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    return;
}



const mptsas_exit: ref;

axiom mptsas_exit == $sub.ref(0, 477038);

procedure mptsas_exit();
  free requires assertsPassed;



implementation mptsas_exit()
{
  var $p0: ref;
  var $i1: i8;
  var $i2: i32;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} pci_unregister_driver(mptsas_driver);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p0 := $M.41;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} sas_release_transport($p0);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i1 := $M.37;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} mpt_reset_deregister($i3);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i4 := $M.37;
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} mpt_event_deregister($i6);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i7 := $M.11;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} mpt_deregister($i9);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i10 := $M.39;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} mpt_deregister($i12);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i13 := $M.38;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} mpt_deregister($i15);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i16 := $M.37;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} mpt_deregister($i18);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i19 := $M.86;
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} mpt_deregister($i21);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 478070);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i0 := $M.98;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} ldv_error();
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.99;
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} ldv_error();
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.25;
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} ldv_error();
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.44;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} ldv_error();
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.26;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} ldv_error();
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 479102);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    return;
}



const sas_release_transport: ref;

axiom sas_release_transport == $sub.ref(0, 480134);

procedure sas_release_transport($p0: ref);
  free requires assertsPassed;



implementation sas_release_transport($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    return;
}



const mpt_reset_deregister: ref;

axiom mpt_reset_deregister == $sub.ref(0, 481166);

procedure mpt_reset_deregister($i0: i8);
  free requires assertsPassed;



implementation mpt_reset_deregister($i0: i8)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} {:cexpr "mpt_reset_deregister:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    return;
}



const mpt_event_deregister: ref;

axiom mpt_event_deregister == $sub.ref(0, 482198);

procedure mpt_event_deregister($i0: i8);
  free requires assertsPassed;



implementation mpt_event_deregister($i0: i8)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} {:cexpr "mpt_event_deregister:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    return;
}



const mpt_deregister: ref;

axiom mpt_deregister == $sub.ref(0, 483230);

procedure mpt_deregister($i0: i8);
  free requires assertsPassed;



implementation mpt_deregister($i0: i8)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} {:cexpr "mpt_deregister:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    return;
}



const sas_attach_transport: ref;

axiom sas_attach_transport == $sub.ref(0, 484262);

procedure sas_attach_transport($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sas_attach_transport($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $p1 := external_alloc();
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mptsas_eh_timed_out: ref;

axiom mptsas_eh_timed_out == $sub.ref(0, 485294);

procedure mptsas_eh_timed_out($p0: ref) returns ($r: i32);



const mptscsih_io_done: ref;

axiom mptscsih_io_done == $sub.ref(0, 486326);

procedure mptscsih_io_done($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const mpt_register: ref;

axiom mpt_register == $sub.ref(0, 487358);

procedure mpt_register($p0: ref, $i1: i32, $p2: ref) returns ($r: i8);
  free requires assertsPassed;



implementation mpt_register($p0: ref, $i1: i32, $p2: ref) returns ($r: i8)
{
  var $i3: i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1110} {:cexpr "mpt_register:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1111} $i3 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1112} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i3);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mptscsih_taskmgmt_complete: ref;

axiom mptscsih_taskmgmt_complete == $sub.ref(0, 488390);

procedure mptscsih_taskmgmt_complete($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const mptscsih_scandv_complete: ref;

axiom mptscsih_scandv_complete == $sub.ref(0, 489422);

procedure mptscsih_scandv_complete($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const mptsas_mgmt_done: ref;

axiom mptsas_mgmt_done == $sub.ref(0, 490454);

procedure mptsas_mgmt_done($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const mptsas_taskmgmt_complete: ref;

axiom mptsas_taskmgmt_complete == $sub.ref(0, 491486);

procedure mptsas_taskmgmt_complete($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const mptsas_event_process: ref;

axiom mptsas_event_process == $sub.ref(0, 492518);

procedure mptsas_event_process($p0: ref, $p1: ref) returns ($r: i32);



const mpt_event_register: ref;

axiom mpt_event_register == $sub.ref(0, 493550);

procedure mpt_event_register($i0: i8, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mpt_event_register($i0: i8, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1113} {:cexpr "mpt_event_register:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1114} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1115} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mptsas_ioc_reset: ref;

axiom mptsas_ioc_reset == $sub.ref(0, 494582);

procedure mptsas_ioc_reset($p0: ref, $i1: i32) returns ($r: i32);



const mpt_reset_register: ref;

axiom mpt_reset_register == $sub.ref(0, 495614);

procedure mpt_reset_register($i0: i8, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mpt_reset_register($i0: i8, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1116} {:cexpr "mpt_reset_register:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1117} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1118} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 496646);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1119} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mptscsih_ioc_reset: ref;

axiom mptscsih_ioc_reset == $sub.ref(0, 497678);

procedure mptscsih_ioc_reset($p0: ref, $i1: i32) returns ($r: i32);



const complete_: ref;

axiom complete_ == $sub.ref(0, 498710);

procedure complete_($p0: ref);



const mptsas_queue_rescan: ref;

axiom mptsas_queue_rescan == $sub.ref(0, 499742);

procedure mptsas_queue_rescan($p0: ref);



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 500774);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);



const mptsas_add_fw_event: ref;

axiom mptsas_add_fw_event == $sub.ref(0, 501806);

procedure mptsas_add_fw_event($p0: ref, $p1: ref, $i2: i64);



const __init_work: ref;

axiom __init_work == $sub.ref(0, 502838);

procedure __init_work($p0: ref, $i1: i32);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 503870);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const mptsas_firmware_event_work: ref;

axiom mptsas_firmware_event_work == $sub.ref(0, 504902);

procedure mptsas_firmware_event_work($p0: ref);



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 505934);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 506966);

procedure delayed_work_timer_fn($i0: i64);



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 507998);

procedure __bad_size_call_parameter();



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 509030);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);



const mptsas_not_responding_devices: ref;

axiom mptsas_not_responding_devices == $sub.ref(0, 510062);

procedure mptsas_not_responding_devices($p0: ref);



const mptsas_send_sas_event: ref;

axiom mptsas_send_sas_event == $sub.ref(0, 511094);

procedure mptsas_send_sas_event($p0: ref);



const mptsas_send_raid_event: ref;

axiom mptsas_send_raid_event == $sub.ref(0, 512126);

procedure mptsas_send_raid_event($p0: ref);



const mptsas_send_ir2_event: ref;

axiom mptsas_send_ir2_event == $sub.ref(0, 513158);

procedure mptsas_send_ir2_event($p0: ref);



const mptsas_broadcast_primative_work: ref;

axiom mptsas_broadcast_primative_work == $sub.ref(0, 514190);

procedure mptsas_broadcast_primative_work($p0: ref);



const mptsas_send_expander_event: ref;

axiom mptsas_send_expander_event == $sub.ref(0, 515222);

procedure mptsas_send_expander_event($p0: ref);



const mptsas_send_link_status_event: ref;

axiom mptsas_send_link_status_event == $sub.ref(0, 516254);

procedure mptsas_send_link_status_event($p0: ref);



const mptsas_handle_queue_full_event: ref;

axiom mptsas_handle_queue_full_event == $sub.ref(0, 517286);

procedure mptsas_handle_queue_full_event($p0: ref);



const ldv_mutex_lock_57: ref;

axiom ldv_mutex_lock_57 == $sub.ref(0, 518318);

procedure ldv_mutex_lock_57($p0: ref);



const ldv_mutex_unlock_58: ref;

axiom ldv_mutex_unlock_58 == $sub.ref(0, 519350);

procedure ldv_mutex_unlock_58($p0: ref);



const scsi_track_queue_full: ref;

axiom scsi_track_queue_full == $sub.ref(0, 520382);

procedure scsi_track_queue_full($p0: ref, $i1: i32) returns ($r: i32);



const mptsas_expander_event_add: ref;

axiom mptsas_expander_event_add == $sub.ref(0, 521414);

procedure mptsas_expander_event_add($p0: ref, $p1: ref);



const mptsas_expander_delete: ref;

axiom mptsas_expander_delete == $sub.ref(0, 522446);

procedure mptsas_expander_delete($p0: ref, $p1: ref, $i2: i8);



const mptsas_delete_expander_siblings: ref;

axiom mptsas_delete_expander_siblings == $sub.ref(0, 523478);

procedure mptsas_delete_expander_siblings($p0: ref, $p1: ref, $p2: ref);



const sas_port_delete: ref;

axiom sas_port_delete == $sub.ref(0, 524510);

procedure sas_port_delete($p0: ref);



const mptsas_del_end_device: ref;

axiom mptsas_del_end_device == $sub.ref(0, 525542);

procedure mptsas_del_end_device($p0: ref, $p1: ref);



const ldv_mutex_lock_46: ref;

axiom ldv_mutex_lock_46 == $sub.ref(0, 526574);

procedure ldv_mutex_lock_46($p0: ref);



const ldv_mutex_unlock_47: ref;

axiom ldv_mutex_unlock_47 == $sub.ref(0, 527606);

procedure ldv_mutex_unlock_47($p0: ref);



const ldv_mutex_lock_63: ref;

axiom ldv_mutex_lock_63 == $sub.ref(0, 528638);

procedure ldv_mutex_lock_63($p0: ref);



const ldv_mutex_unlock_64: ref;

axiom ldv_mutex_unlock_64 == $sub.ref(0, 529670);

procedure ldv_mutex_unlock_64($p0: ref);



const mptsas_requeue_fw_event: ref;

axiom mptsas_requeue_fw_event == $sub.ref(0, 530702);

procedure mptsas_requeue_fw_event($p0: ref, $p1: ref, $i2: i64);



const mpt_findImVolumes: ref;

axiom mpt_findImVolumes == $sub.ref(0, 531734);

procedure mpt_findImVolumes($p0: ref) returns ($r: i32);



const mptscsih_get_scsi_lookup: ref;

axiom mptscsih_get_scsi_lookup == $sub.ref(0, 532766);

procedure mptscsih_get_scsi_lookup($p0: ref, $i1: i32) returns ($r: ref);



const mptsas_issue_tm: ref;

axiom mptsas_issue_tm == $sub.ref(0, 533798);

procedure mptsas_issue_tm($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i64, $i5: i32, $i6: i64, $p7: ref) returns ($r: i32);



const ldv_mutex_unlock_65: ref;

axiom ldv_mutex_unlock_65 == $sub.ref(0, 534830);

procedure ldv_mutex_unlock_65($p0: ref);



const mpt_GetIocState: ref;

axiom mpt_GetIocState == $sub.ref(0, 535862);

procedure mpt_GetIocState($p0: ref, $i1: i32) returns ($r: i32);



const int_to_scsilun: ref;

axiom int_to_scsilun == $sub.ref(0, 536894);

procedure int_to_scsilun($i0: i32, $p1: ref);



const ldv_mutex_lock_mutex: ref;

axiom ldv_mutex_lock_mutex == $sub.ref(0, 537926);

procedure ldv_mutex_lock_mutex($p0: ref);



const mptsas_hotplug_work: ref;

axiom mptsas_hotplug_work == $sub.ref(0, 538958);

procedure mptsas_hotplug_work($p0: ref, $p1: ref, $p2: ref);



const mptsas_find_phyinfo_by_phys_disk_num: ref;

axiom mptsas_find_phyinfo_by_phys_disk_num == $sub.ref(0, 539990);

procedure mptsas_find_phyinfo_by_phys_disk_num($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: ref);



const mptsas_reprobe_target: ref;

axiom mptsas_reprobe_target == $sub.ref(0, 541022);

procedure mptsas_reprobe_target($p0: ref, $i1: i32);



const scsi_remove_device: ref;

axiom scsi_remove_device == $sub.ref(0, 542054);

procedure scsi_remove_device($p0: ref);



const mptsas_adding_inactive_raid_components: ref;

axiom mptsas_adding_inactive_raid_components == $sub.ref(0, 543086);

procedure mptsas_adding_inactive_raid_components($p0: ref, $i1: i8, $i2: i8);



const mptsas_reprobe_lun: ref;

axiom mptsas_reprobe_lun == $sub.ref(0, 544118);

procedure mptsas_reprobe_lun($p0: ref, $p1: ref);



const starget_for_each_device: ref;

axiom starget_for_each_device == $sub.ref(0, 545150);

procedure starget_for_each_device($p0: ref, $p1: ref, $p2: ref);



const scsi_device_reprobe: ref;

axiom scsi_device_reprobe == $sub.ref(0, 546182);

procedure scsi_device_reprobe($p0: ref) returns ($r: i32);



const device_reprobe: ref;

axiom device_reprobe == $sub.ref(0, 547214);

procedure device_reprobe($p0: ref) returns ($r: i32);



const mpt_raid_phys_disk_get_num_paths: ref;

axiom mpt_raid_phys_disk_get_num_paths == $sub.ref(0, 548246);

procedure mpt_raid_phys_disk_get_num_paths($p0: ref, $i1: i8) returns ($r: i32);



const mpt_raid_phys_disk_pg1: ref;

axiom mpt_raid_phys_disk_pg1 == $sub.ref(0, 549278);

procedure mpt_raid_phys_disk_pg1($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);



const ldv_mutex_lock_61: ref;

axiom ldv_mutex_lock_61 == $sub.ref(0, 550310);

procedure ldv_mutex_lock_61($p0: ref);



const ldv_mutex_unlock_62: ref;

axiom ldv_mutex_unlock_62 == $sub.ref(0, 551342);

procedure ldv_mutex_unlock_62($p0: ref);



const ldv_mutex_lock_50: ref;

axiom ldv_mutex_lock_50 == $sub.ref(0, 552374);

procedure ldv_mutex_lock_50($p0: ref);



const ldv_mutex_unlock_51: ref;

axiom ldv_mutex_unlock_51 == $sub.ref(0, 553406);

procedure ldv_mutex_unlock_51($p0: ref);



const mptsas_volume_delete: ref;

axiom mptsas_volume_delete == $sub.ref(0, 554438);

procedure mptsas_volume_delete($p0: ref, $i1: i8);



const ldv_mutex_unlock_52: ref;

axiom ldv_mutex_unlock_52 == $sub.ref(0, 555470);

procedure ldv_mutex_unlock_52($p0: ref);



const ldv_mutex_lock_53: ref;

axiom ldv_mutex_lock_53 == $sub.ref(0, 556502);

procedure ldv_mutex_lock_53($p0: ref);



const ldv_mutex_unlock_54: ref;

axiom ldv_mutex_unlock_54 == $sub.ref(0, 557534);

procedure ldv_mutex_unlock_54($p0: ref);



const mptsas_target_reset_queue: ref;

axiom mptsas_target_reset_queue == $sub.ref(0, 558566);

procedure mptsas_target_reset_queue($p0: ref, $p1: ref);



const mptsas_block_io_starget: ref;

axiom mptsas_block_io_starget == $sub.ref(0, 559598);

procedure mptsas_block_io_starget($p0: ref);



const mptsas_block_io_sdev: ref;

axiom mptsas_block_io_sdev == $sub.ref(0, 560630);

procedure mptsas_block_io_sdev($p0: ref, $p1: ref);



const scsi_device_set_state: ref;

axiom scsi_device_set_state == $sub.ref(0, 561662);

procedure scsi_device_set_state($p0: ref, $i1: i32) returns ($r: i32);



const mptscsih_taskmgmt_response_code: ref;

axiom mptscsih_taskmgmt_response_code == $sub.ref(0, 562694);

procedure mptscsih_taskmgmt_response_code($p0: ref, $i1: i8);



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 563726);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);



const mptsas_queue_device_delete: ref;

axiom mptsas_queue_device_delete == $sub.ref(0, 564758);

procedure mptsas_queue_device_delete($p0: ref, $p1: ref);



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 565790);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1121} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 1} true;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 566822);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 567854);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 568886);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 569918);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 570950);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 571982);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __VERIFIER_nondet_unsigned_char: ref;

axiom __VERIFIER_nondet_unsigned_char == $sub.ref(0, 573014);

procedure __VERIFIER_nondet_unsigned_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1122} $i0 := __SMACK_nondet_unsigned_char();
    call {:si_unique_call 1123} {:cexpr "smack:ext:__SMACK_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1124} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1125} __VERIFIER_assume($i6);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 1} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 255);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 574046);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 575078);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 576110);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 577142);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 578174);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 579206);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 580238);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1126} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1127} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1128} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1129} __VERIFIER_assume($i4);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 581270);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 582302);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 583334);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 584366);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 585398);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 586430);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 587462);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 588494);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 589526);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 590558);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1130} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1131} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1132} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1133} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1134} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1135} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1136} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1137} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1138} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1139} __VERIFIER_assume($i7);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1140} __VERIFIER_assume($i11);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 591590);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 592622);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 593654);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 594686);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 595718);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 596750);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 597782);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 598814);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 599846);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1141} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1143} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1144} __VERIFIER_assume($i10);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uchar: ref;

axiom __VERIFIER_nondet_uchar == $sub.ref(0, 600878);

procedure __VERIFIER_nondet_uchar() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uchar() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1145} $i0 := __VERIFIER_nondet_unsigned_char();
    call {:si_unique_call 1146} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1147} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 601910);

procedure __VERIFIER_nondet_uint() returns ($r: i32);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 602942);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1148} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1149} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1150} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 603974);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1151} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1152} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 605006);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 606038);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1153} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1154} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 607070);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 608102);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 609134);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 610166);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.43, $M.42, $M.40, $M.162, $M.163, $M.39, $M.38, $M.37, $M.41, $M.11, $M.86, $M.26, $M.44, $M.25, $M.99, $M.98, $M.0;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1155} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1156} {:cexpr "mpt_pt_clear"} boogie_si_record_i32(0);
    $M.42 := 8192;
    call {:si_unique_call 1157} {:cexpr "mpt_loadtime_max_sectors"} boogie_si_record_i32(8192);
    $M.40 := 16895;
    call {:si_unique_call 1158} {:cexpr "max_lun"} boogie_si_record_i32(16895);
    $M.162 := $store.i32($M.162, mptsas_pci_table, 4096);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(4, 1)), 80);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.162 := $store.i64($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4096);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(4, 1)), 84);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.162 := $store.i64($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(0, 1)), 4096);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(4, 1)), 86);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.162 := $store.i64($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(0, 1)), 4096);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(4, 1)), 88);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.162 := $store.i64($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(0, 1)), 4096);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(4, 1)), 98);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.162 := $store.i64($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(0, 1)), 4096);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(4, 1)), 89);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.162 := $store.i64($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(20, 1)), 0);
    $M.162 := $store.i64($M.162, $add.ref($add.ref($add.ref(mptsas_pci_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.163 := $store.ref($M.163, mptsas_driver, $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.66);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), mptsas_pci_table);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), mptsas_probe);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), mptsas_remove);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), mptscsih_suspend);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), mptscsih_resume);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), mptsas_shutdown);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.163 := $store.i8($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.163 := $store.i64($M.163, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref($add.ref($add.ref(mptsas_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.39 := 16;
    call {:si_unique_call 1159} {:cexpr "mptsasInternalCtx"} boogie_si_record_i8(16);
    $M.38 := 16;
    call {:si_unique_call 1160} {:cexpr "mptsasTaskCtx"} boogie_si_record_i8(16);
    $M.37 := 16;
    call {:si_unique_call 1161} {:cexpr "mptsasDoneCtx"} boogie_si_record_i8(16);
    $M.41 := $0.ref;
    $M.11 := 16;
    call {:si_unique_call 1162} {:cexpr "mptsasMgmtCtx"} boogie_si_record_i8(16);
    $M.86 := 16;
    call {:si_unique_call 1163} {:cexpr "mptsasDeviceResetCtx"} boogie_si_record_i8(16);
    $M.26 := 0;
    call {:si_unique_call 1164} {:cexpr "ldv_mutex_sas_topology_mutex"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1165} {:cexpr "ldv_mutex_sas_device_info_mutex"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 1166} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 1167} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 1168} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.167, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.165, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(9, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(16, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(19, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(23, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(24, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(16, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.98, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.116, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 4)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 4)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 4)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.94, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.115, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(10, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(14, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(10, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(18, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(19, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(8, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(22, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(25, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(26, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(27, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(28, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(29, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(5, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(9, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(13, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(19, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(22, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(24, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(25, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(26, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(27, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(28, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(29, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(30, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(32, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(33, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(34, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(36, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(37, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(38, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(39, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(40, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(41, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(42, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(43, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(44, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(45, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(46, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(47, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(48, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(49, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(50, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(51, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(52, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(53, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(54, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(55, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(56, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(57, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(58, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(59, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(60, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(61, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(62, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(63, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(64, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(65, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(66, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(67, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(68, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(69, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(70, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(71, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(72, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(73, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(74, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(75, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(76, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(77, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(78, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(79, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(80, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(81, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(82, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(83, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(84, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(85, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(86, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(87, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(88, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(89, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(90, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(91, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(92, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(93, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(94, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(95, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(96, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(97, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(98, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(99, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(100, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(101, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(102, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(103, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(104, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(105, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(106, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(107, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(108, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(109, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(110, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(111, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(112, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(113, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(114, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(115, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(116, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(117, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(118, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(119, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(120, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(121, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(122, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(123, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(124, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(125, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(126, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(127, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(128, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(129, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(130, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(131, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(132, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(133, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(134, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(135, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(136, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(137, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(138, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(139, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(140, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(141, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(142, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(143, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(144, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(145, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(146, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(147, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(148, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(149, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(150, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(151, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(152, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(153, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(154, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(155, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(156, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(157, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(158, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(159, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(160, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(161, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(162, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(163, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(164, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(165, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(166, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(167, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(168, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(169, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(170, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(171, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(172, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(173, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(174, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(175, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(176, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(177, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(178, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(179, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(180, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(181, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(182, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(183, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(184, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(185, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(186, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(187, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(188, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(189, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(190, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(191, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(192, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(193, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(194, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(195, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(196, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(197, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(198, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(199, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(200, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(201, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(202, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(203, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(204, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(205, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(206, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(207, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(208, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(209, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(210, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(211, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(212, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(213, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(214, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(215, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(216, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(217, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(218, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(219, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(220, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(221, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(222, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(223, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(224, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(225, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(226, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(227, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(228, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(229, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(230, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(231, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(232, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(233, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(234, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(235, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(236, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(237, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(238, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(239, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(240, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(241, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(242, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(243, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(244, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(245, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(246, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(247, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(248, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(249, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(250, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(251, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(252, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(253, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(254, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(255, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(256, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(257, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(258, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(259, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(260, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(261, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(262, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(263, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(264, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(265, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(266, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(267, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(268, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(269, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(270, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(271, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(272, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(273, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(274, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(275, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(276, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(277, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(278, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(279, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(280, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(281, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(282, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(283, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(284, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(285, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(286, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(287, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(288, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(289, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(290, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(291, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(292, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 294)), $mul.ref(293, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.4, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(8, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.153, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.151, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(7, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.80, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(12, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(15, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.82, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(11, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(22, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(25, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.90, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.130, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(24, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(26, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(27, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(28, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(29, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(30, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.134, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(9, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(16, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(19, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.128, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(14, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.120, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(15, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(18, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.127, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(18, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.86, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(20, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(22, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(24, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(25, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(26, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(28, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.148, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.150, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(20, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(21, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(23, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.76, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(7, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(15, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    call {:si_unique_call 1169} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 611198);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 612230);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 613262);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 614294);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 615326);

procedure devirtbounce.4(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 616358);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 617390);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 618422);

procedure devirtbounce.7(funcPtr: ref, arg: ref);



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 619454);

procedure devirtbounce.8(funcPtr: ref, arg: ref);



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 620486);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u2: ref;

const $u3: ref;

const $u4: ref;

const $u5: i32;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.43, $M.42, $M.40, $M.162, $M.163, $M.39, $M.38, $M.37, $M.41, $M.11, $M.86, $M.26, $M.44, $M.25, $M.99, $M.98, $M.0, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1170} __SMACK_static_init();
    call {:si_unique_call 1171} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.18, $M.19, $M.1, $M.2, $M.9, $M.10, $M.42, $M.43, $M.40, $M.162, $M.163, $M.39, $M.38, $M.37, $M.41, $M.11, $M.86, $M.26, $M.44, $M.25, $M.99, $M.98, $CurrAddr, $M.28, $M.55, $M.61, $M.81, $M.4;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation mptsas_get_enclosure_identifier_loop_$bb9(in_$p0: ref, in_$p15: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i42: i32, in_$i43: i16, in_$i44: i32, in_$i45: i1, in_$i20: i32, in_$p14: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i42: i32, out_$i43: i16, out_$i44: i32, out_$i45: i1, out_$i20: i32)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i42, out_$i43, out_$i44, out_$i45, out_$i20 := in_$p21, in_$p22, in_$i23, in_$p26, in_$i27, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i42, in_$i43, in_$i44, in_$i45, in_$i20;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_137;

  $bb15:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i42;
    goto $bb15_dummy;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i44, out_$i42);
    goto corral_source_split_169;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i43);
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.0, in_$p15);
    goto corral_source_split_167;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i20, 1);
    call {:si_unique_call 21} {:cexpr "i"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_166;

  $bb12:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$p32, out_$i33 := in_$p14, out_$i20;
    assume true;
    goto $bb12;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i27, out_$i30);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.0, out_$p26);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i20);
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_140;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_139;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i42, out_$i43, out_$i44, out_$i45, out_$i20 := mptsas_get_enclosure_identifier_loop_$bb9(in_$p0, in_$p15, out_$p21, out_$p22, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i42, out_$i43, out_$i44, out_$i45, out_$i20, in_$p14);
    return;

  exit:
    return;
}



procedure mptsas_get_enclosure_identifier_loop_$bb9(in_$p0: ref, in_$p15: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i42: i32, in_$i43: i16, in_$i44: i32, in_$i45: i1, in_$i20: i32, in_$p14: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i42: i32, out_$i43: i16, out_$i44: i32, out_$i45: i1, out_$i20: i32);



implementation mptsas_get_enclosure_identifier_loop_$bb4(in_$p0: ref, in_$i12: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i42: i32, in_$i43: i16, in_$i44: i32, in_$i45: i1, in_$i20: i32, in_$p19: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i42: i32, out_$i43: i16, out_$i44: i32, out_$i45: i1, out_$i20: i32, out_$p19: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p14: ref)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$i18, out_$p21, out_$p22, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i42, out_$i43, out_$i44, out_$i45, out_$i20, out_$p19, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p14 := in_$p15, in_$i16, in_$i17, in_$i18, in_$p21, in_$p22, in_$i23, in_$p26, in_$i27, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i42, in_$i43, in_$i44, in_$i45, in_$i20, in_$p19, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_128;

  $bb18:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p48;
    goto $bb18_dummy;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, in_$i12);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_174;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_173;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb8;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p14;
    goto $bb8;

  $bb16:
    assume !(out_$i45 == 1);
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i44, out_$i42);
    goto corral_source_split_169;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i43);
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.0, out_$p15);
    goto corral_source_split_167;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i20, 1);
    call {:si_unique_call 21} {:cexpr "i"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_166;

  $bb12:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$p32, out_$i33 := out_$p14, out_$i20;
    assume true;
    goto $bb12;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i27, out_$i30);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.0, out_$p26);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i20);
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_140;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_139;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p21, out_$p22, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i42, out_$i43, out_$i44, out_$i45, out_$i20 := mptsas_get_enclosure_identifier_loop_$bb9(in_$p0, out_$p15, out_$p21, out_$p22, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i42, out_$i43, out_$i44, out_$i45, out_$i20, out_$p14);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    out_$i20 := 0;
    goto $bb9;

  $bb15:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i42;
    assume false;
    return;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_135;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p14;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$i18 := $sgt.i32(out_$i17, 0);
    goto corral_source_split_133;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, out_$p15);
    goto corral_source_split_131;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$i18, out_$p21, out_$p22, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i42, out_$i43, out_$i44, out_$i45, out_$i20, out_$p19, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p14 := mptsas_get_enclosure_identifier_loop_$bb4(in_$p0, in_$i12, out_$p15, out_$i16, out_$i17, out_$i18, out_$p21, out_$p22, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i42, out_$i43, out_$i44, out_$i45, out_$i20, out_$p19, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p14);
    return;

  exit:
    return;
}



procedure mptsas_get_enclosure_identifier_loop_$bb4(in_$p0: ref, in_$i12: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i42: i32, in_$i43: i16, in_$i44: i32, in_$i45: i1, in_$i20: i32, in_$p19: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i42: i32, out_$i43: i16, out_$i44: i32, out_$i45: i1, out_$i20: i32, out_$p19: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p14: ref);



implementation mptsas_get_bay_identifier_loop_$bb9(in_$p0: ref, in_$p13: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i18: i32, in_$p12: ref) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i18: i32)
{

  entry:
    out_$p19, out_$p20, out_$i21, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i41, out_$i42, out_$i43, out_$i44, out_$i18 := in_$p19, in_$p20, in_$i21, in_$p24, in_$i25, in_$p27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i41, in_$i42, in_$i43, in_$i44, in_$i18;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_216;

  $bb15:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i41;
    goto $bb15_dummy;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, out_$i41);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, in_$p13);
    goto corral_source_split_242;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i18, 1);
    call {:si_unique_call 27} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_241;

  $bb12:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p30, out_$i31 := in_$p12, out_$i18;
    assume true;
    goto $bb12;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i25, out_$i28);
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i18);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_219;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p12, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$i21, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i41, out_$i42, out_$i43, out_$i44, out_$i18 := mptsas_get_bay_identifier_loop_$bb9(in_$p0, in_$p13, out_$p19, out_$p20, out_$i21, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i41, out_$i42, out_$i43, out_$i44, out_$i18, in_$p12);
    return;

  exit:
    return;
}



procedure mptsas_get_bay_identifier_loop_$bb9(in_$p0: ref, in_$p13: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i18: i32, in_$p12: ref) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i18: i32);



implementation mptsas_get_bay_identifier_loop_$bb4(in_$p0: ref, in_$i10: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i18: i32, in_$p17: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i18: i32, out_$p17: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p12: ref)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$i16, out_$p19, out_$p20, out_$i21, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i41, out_$i42, out_$i43, out_$i44, out_$i18, out_$p17, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p12 := in_$p13, in_$i14, in_$i15, in_$i16, in_$p19, in_$p20, in_$i21, in_$p24, in_$i25, in_$p27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i41, in_$i42, in_$i43, in_$i44, in_$i18, in_$p17, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  $bb18:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p47;
    goto $bb18_dummy;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, in_$i10);
    goto corral_source_split_253;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_252;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_251;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_250;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_249;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_248;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb8;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p12;
    goto $bb8;

  $bb16:
    assume !(out_$i44 == 1);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, out_$i41);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p13);
    goto corral_source_split_242;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i18, 1);
    call {:si_unique_call 27} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_241;

  $bb12:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p30, out_$i31 := out_$p12, out_$i18;
    assume true;
    goto $bb12;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i25, out_$i28);
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i18);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_219;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p12, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p19, out_$p20, out_$i21, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i41, out_$i42, out_$i43, out_$i44, out_$i18 := mptsas_get_bay_identifier_loop_$bb9(in_$p0, out_$p13, out_$p19, out_$p20, out_$i21, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i41, out_$i42, out_$i43, out_$i44, out_$i18, out_$p12);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_$i18 := 0;
    goto $bb9;

  $bb15:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i41;
    assume false;
    return;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p12;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i16 := $sgt.i32(out_$i15, 0);
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    goto corral_source_split_210;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$i16, out_$p19, out_$p20, out_$i21, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i41, out_$i42, out_$i43, out_$i44, out_$i18, out_$p17, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p12 := mptsas_get_bay_identifier_loop_$bb4(in_$p0, in_$i10, out_$p13, out_$i14, out_$i15, out_$i16, out_$p19, out_$p20, out_$i21, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i41, out_$i42, out_$i43, out_$i44, out_$i18, out_$p17, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p12);
    return;

  exit:
    return;
}



procedure mptsas_get_bay_identifier_loop_$bb4(in_$p0: ref, in_$i10: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i18: i32, in_$p17: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i18: i32, out_$p17: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p12: ref);



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation dev_to_shost_loop_$bb4(in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p4: ref, in_$p14: ref) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p4: ref, out_$p14: ref)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p4, out_$p14 := in_$p5, in_$p6, in_$i7, in_$i8, in_$p10, in_$p11, in_$i12, in_$i13, in_$p4, in_$p14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_956;

  $bb10:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p11;
    goto $bb10_dummy;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$p14 := out_$p11;
    assume true;
    goto $bb10;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_970;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} out_$i12 := scsi_is_host_device(out_$p11);
    call {:si_unique_call 227} {:cexpr "tmp"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_969;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_968;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_967;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i64(out_$i7, 0);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_959;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(out_$p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p4, out_$p14 := dev_to_shost_loop_$bb4(out_$p5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p4, out_$p14);
    return;

  exit:
    return;
}



procedure dev_to_shost_loop_$bb4(in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p4: ref, in_$p14: ref) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p4: ref, out_$p14: ref);



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation mptsas_probe_loop_$bb15(in_$p11: ref, in_$p34: ref, in_$i41: i64, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i39: i32, in_$i40: i32, in_$i55: i32) returns (out_$i41: i64, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i39: i32, out_$i40: i32, out_$i55: i32)
{

  entry:
    out_$i41, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$i40, out_$i55 := in_$i41, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i39, in_$i40, in_$i55;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1396;

  $bb20:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i50, out_$i51;
    goto $bb20_dummy;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i50;
    assume true;
    goto $bb20;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    out_$i54 := $sgt.i32(out_$i53, out_$i51);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.0, in_$p34);
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i40, 1);
    call {:si_unique_call 322} {:cexpr "ii"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_1409;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  $bb18:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i39;
    goto $bb19;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i49;
    goto $bb19;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i39, 1);
    call {:si_unique_call 321} {:cexpr "ioc_cap"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_1406;

  $bb17:
    assume out_$i48 == 1;
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i46, 8);
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(out_$i45);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i16($M.0, out_$p44);
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref(in_$p11, $mul.ref(0, 5712)), $mul.ref(1404, 1)), $mul.ref(out_$i41, 40)), $mul.ref(26, 1));
    goto corral_source_split_1399;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_1398;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i41, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$i40, out_$i55 := mptsas_probe_loop_$bb15(in_$p11, in_$p34, out_$i41, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$i40, out_$i55);
    return;

  exit:
    return;
}



procedure mptsas_probe_loop_$bb15(in_$p11: ref, in_$p34: ref, in_$i41: i64, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i39: i32, in_$i40: i32, in_$i55: i32) returns (out_$i41: i64, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i39: i32, out_$i40: i32, out_$i55: i32);



implementation mptsas_remove_loop_$bb13(in_$p2: ref, in_$p30: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i34: i32, in_$p28: ref) returns (out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i34: i32)
{

  entry:
    out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i34 := in_$p35, in_$p36, in_$i37, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i34;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  $bb15:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i41;
    goto $bb15_dummy;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, out_$i41);
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, in_$p30);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i34, 1);
    call {:si_unique_call 368} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} mptsas_port_delete(in_$p2, out_$p40);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 112)), $mul.ref(104, 1));
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_1728;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p28, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i34 := mptsas_remove_loop_$bb13(in_$p2, in_$p30, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i34, in_$p28);
    return;

  exit:
    return;
}



procedure mptsas_remove_loop_$bb13(in_$p2: ref, in_$p30: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i34: i32, in_$p28: ref) returns (out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i34: i32);
  modifies $M.0;



implementation mptsas_remove_loop_$bb8(in_$p2: ref, in_$i25: i64, in_$p29: ref, in_$p30: ref, in_$i31: i16, in_$i32: i32, in_$i33: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i34: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p27: ref, in_$p28: ref) returns (out_$p29: ref, out_$p30: ref, out_$i31: i16, out_$i32: i32, out_$i33: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i34: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p27: ref, out_$p28: ref)
{

  entry:
    out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i34, out_$p45, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p53, out_$i54, out_$i55, out_$p27, out_$p28 := in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p35, in_$p36, in_$i37, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i34, in_$p45, in_$p46, in_$p47, in_$p48, in_$p50, in_$p51, in_$p53, in_$i54, in_$i55, in_$p27, in_$p28;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1714;

  $bb18:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p27, out_$p28 := out_$p51, out_$p27;
    goto $bb18_dummy;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, in_$i25);
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p27, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p27, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} kfree(out_$p48);
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} kfree(out_$p47);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_1743;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_1742;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p28, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1741;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb12;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16:
    assume !(out_$i44 == 1);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, out_$i41);
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p30);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i34, 1);
    call {:si_unique_call 368} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} mptsas_port_delete(in_$p2, out_$p40);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 112)), $mul.ref(104, 1));
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_1728;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p28, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    call out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i34 := mptsas_remove_loop_$bb13(in_$p2, out_$p30, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i34, out_$p28);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    goto $bb13;

  $bb15:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i41;
    assume false;
    return;

  $bb10:
    assume out_$i33 == 1;
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i33 := $sgt.i32(out_$i32, 0);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i32(out_$i31);
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i16($M.0, out_$p30);
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p28, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} list_del(out_$p29);
    goto corral_source_split_1717;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i34, out_$p45, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p53, out_$i54, out_$i55, out_$p27, out_$p28 := mptsas_remove_loop_$bb8(in_$p2, in_$i25, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i34, out_$p45, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p53, out_$i54, out_$i55, out_$p27, out_$p28);
    return;

  exit:
    return;
}



procedure mptsas_remove_loop_$bb8(in_$p2: ref, in_$i25: i64, in_$p29: ref, in_$p30: ref, in_$i31: i16, in_$i32: i32, in_$i33: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i34: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p27: ref, in_$p28: ref) returns (out_$p29: ref, out_$p30: ref, out_$i31: i16, out_$i32: i32, out_$i33: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i34: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p27: ref, out_$p28: ref);
  modifies $M.0;



implementation mptsas_cleanup_fw_event_q_loop_$bb28(in_$p0: ref, in_$i67: i64, in_$p71: ref, in_$i72: i1, in_$i73: i8, in_$i74: i1, in_$p76: ref, in_$p77: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p69: ref, in_$p70: ref) returns (out_$p71: ref, out_$i72: i1, out_$i73: i8, out_$i74: i1, out_$p76: ref, out_$p77: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p69: ref, out_$p70: ref)
{

  entry:
    out_$p71, out_$i72, out_$i73, out_$i74, out_$p76, out_$p77, out_$p79, out_$i80, out_$i81, out_$p69, out_$p70 := in_$p71, in_$i72, in_$i73, in_$i74, in_$p76, in_$p77, in_$p79, in_$i80, in_$i81, in_$p69, in_$p70;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1869;

  $bb33:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$p69, out_$p70 := out_$p70, out_$p77;
    goto $bb33_dummy;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i64(out_$i80, in_$i67);
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p70, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_1880;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(out_$p70, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1879;

  $bb31:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} mptsas_free_fw_event(in_$p0, out_$p69);
    goto corral_source_split_1877;

  $bb30:
    assume out_$i74 == 1;
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i8.i1(out_$i73);
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i1.i8(out_$i72);
    call {:si_unique_call 391} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i73);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_$i72 := cancel_delayed_work(out_$p71);
    goto corral_source_split_1872;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p69, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p71, out_$i72, out_$i73, out_$i74, out_$p76, out_$p77, out_$p79, out_$i80, out_$i81, out_$p69, out_$p70 := mptsas_cleanup_fw_event_q_loop_$bb28(in_$p0, in_$i67, out_$p71, out_$i72, out_$i73, out_$i74, out_$p76, out_$p77, out_$p79, out_$i80, out_$i81, out_$p69, out_$p70);
    return;

  exit:
    return;
}



procedure mptsas_cleanup_fw_event_q_loop_$bb28(in_$p0: ref, in_$i67: i64, in_$p71: ref, in_$i72: i1, in_$i73: i8, in_$i74: i1, in_$p76: ref, in_$p77: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p69: ref, in_$p70: ref) returns (out_$p71: ref, out_$i72: i1, out_$i73: i8, out_$i74: i1, out_$p76: ref, out_$p77: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p69: ref, out_$p70: ref);



implementation mptsas_cleanup_fw_event_q_loop_$bb6(in_$p0: ref, in_$i19: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p21: ref, in_$p22: ref, in_vslice_dummy_var_100: i32) returns (out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p21: ref, out_$p22: ref, out_vslice_dummy_var_100: i32)
{

  entry:
    out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p37, out_$p38, out_$p40, out_$i41, out_$i42, out_$p21, out_$p22, out_vslice_dummy_var_100 := in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p30, in_$i31, in_$i32, in_$p34, in_$p35, in_$p37, in_$p38, in_$p40, in_$i41, in_$i42, in_$p21, in_$p22, in_vslice_dummy_var_100;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1807;

  $bb11:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p21, out_$p22 := out_$p38, out_$p21;
    goto $bb11_dummy;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, in_$i19);
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} kfree(out_$p35);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} list_del(out_$p34);
    goto corral_source_split_1823;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p22, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1822;

  $bb9:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_vslice_dummy_var_100 := printk.ref.ref.ref.i32(.str.54, out_$p28, .str.55, out_$i32);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.0, out_$p30);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_1815;

  $bb8:
    assume out_$i26 == 1;
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i32(out_$i24, 256);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_1810;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p37, out_$p38, out_$p40, out_$i41, out_$i42, out_$p21, out_$p22, out_vslice_dummy_var_100 := mptsas_cleanup_fw_event_q_loop_$bb6(in_$p0, in_$i19, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p37, out_$p38, out_$p40, out_$i41, out_$i42, out_$p21, out_$p22, out_vslice_dummy_var_100);
    return;

  exit:
    return;
}



procedure mptsas_cleanup_fw_event_q_loop_$bb6(in_$p0: ref, in_$i19: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p21: ref, in_$p22: ref, in_vslice_dummy_var_100: i32) returns (out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p21: ref, out_$p22: ref, out_vslice_dummy_var_100: i32);



implementation mptsas_del_device_components_loop_$bb4(in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p15: ref, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p15, out_$p16 := in_$p17, in_$p18, in_$p20, in_$p21, in_$p23, in_$i24, in_$i25, in_$p15, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16 := out_$p21, out_$p15;
    goto $bb6_dummy;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, in_$i13);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p15, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} kfree(out_$p18);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} list_del(out_$p17);
    goto corral_source_split_1973;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1972;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p15, out_$p16 := mptsas_del_device_components_loop_$bb4(in_$i13, out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p15, out_$p16);
    return;

  exit:
    return;
}



procedure mptsas_del_device_components_loop_$bb4(in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p15: ref, out_$p16: ref);



implementation mptsas_port_delete_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p20: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i24: i8, in_$p25: ref, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i24: i8, out_$p25: ref, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8)
{

  entry:
    out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i24, out_$p25, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21 := in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i24, in_$p25, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2026;

  $bb17:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i24, out_$p25 := out_$i36, out_$p37;
    goto $bb17_dummy;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i39, out_$i41);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, in_$p20);
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i16(out_$i36);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p25, $mul.ref(1, 112));
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i8(out_$i35);
    call {:si_unique_call 419} {:cexpr "i"} boogie_si_record_i8(out_$i36);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i34, 1);
    goto corral_source_split_2037;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i24);
    goto corral_source_split_2036;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i30 == 1;
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i28, out_$i29);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_2029;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2028;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p33, $0.ref);
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p25, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} mptsas_set_rphy(in_$p0, out_$p25, $0.ref);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 420} out_cmdloc_dummy_var_21 := $memset.i8(out_cmdloc_dummy_var_20, out_$p32, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_21;
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_2047;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p25, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_2046;

  $bb14:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i24, out_$p25, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21 := mptsas_port_delete_loop_$bb11(in_$p0, in_$p1, in_$p20, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i24, out_$p25, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21);
    return;

  exit:
    return;
}



procedure mptsas_port_delete_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p20: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i24: i8, in_$p25: ref, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i24: i8, out_$p25: ref, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8);
  modifies $M.0;



implementation mptsas_scan_sas_topology_loop_$bb13(in_$p0: ref, in_$p19: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i64: i32, in_$p65: ref, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$i25: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i64: i32, out_$p65: ref, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$i25: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32)
{

  entry:
    out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p60, out_$i61, out_$i62, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i25, out_vslice_dummy_var_107, out_vslice_dummy_var_108 := in_$p26, in_$p27, in_$i28, in_$p30, in_$p31, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$p44, in_$p45, in_$p48, in_$i49, in_$i50, in_$p52, in_$p53, in_$i54, in_$p56, in_$p57, in_$p60, in_$i61, in_$i62, in_$i64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i25, in_vslice_dummy_var_107, in_vslice_dummy_var_108;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2220;

  $bb19:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := out_$i64;
    goto $bb19_dummy;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$i69 := $sgt.i32(out_$i68, out_$i64);
    goto corral_source_split_2242;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i67);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i8($M.0, out_$p66);
    goto corral_source_split_2240;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2239;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, in_$p19);
    goto corral_source_split_2238;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i25, 1);
    call {:si_unique_call 466} {:cexpr "i"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_2237;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} scsi_device_put(out_$p37);
    goto corral_source_split_2235;

  $bb15:
    assume out_$i39 == 1;
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} out_$p37 := scsi_device_lookup(out_$p27, 1, out_$i36, 0);
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p34);
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(out_$p31, $mul.ref(0, 20)), $mul.ref(12, 1)), $mul.ref(out_$i28, 8)), $mul.ref(0, 1));
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2224;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_2223;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_2222;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} out_vslice_dummy_var_108 := scsi_add_device(out_$p53, 1, out_$i62, 0);
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i32(out_$i61);
    goto corral_source_split_2260;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p60);
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 20)), $mul.ref(12, 1)), $mul.ref(out_$i54, 8)), $mul.ref(0, 1));
    goto corral_source_split_2258;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2254;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_2253;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} out_vslice_dummy_var_107 := printk.ref.ref.i32.i32(.str.101, out_$p41, 1, out_$i50);
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_2251;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p48);
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 20)), $mul.ref(12, 1)), $mul.ref(out_$i42, 8)), $mul.ref(0, 1));
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2246;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_2245;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2244;

  $bb16:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p60, out_$i61, out_$i62, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i25, out_vslice_dummy_var_107, out_vslice_dummy_var_108 := mptsas_scan_sas_topology_loop_$bb13(in_$p0, in_$p19, out_$p26, out_$p27, out_$i28, out_$p30, out_$p31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p60, out_$i61, out_$i62, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i25, out_vslice_dummy_var_107, out_vslice_dummy_var_108);
    return;

  exit:
    return;
}



procedure mptsas_scan_sas_topology_loop_$bb13(in_$p0: ref, in_$p19: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i64: i32, in_$p65: ref, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$i25: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i64: i32, out_$p65: ref, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$i25: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32);



implementation mptsas_probe_hba_phys_loop_$bb37(in_$p0: ref, in_$p20: ref, in_$p154: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i169: i32, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$p173: ref, in_$i174: i16, in_$i175: i32, in_$i176: i1, in_$i158: i32, in_vslice_dummy_var_113: i32) returns (out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i169: i32, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$p173: ref, out_$i174: i16, out_$i175: i32, out_$i176: i1, out_$i158: i32, out_vslice_dummy_var_113: i32)
{

  entry:
    out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i169, out_$p170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i158, out_vslice_dummy_var_113 := in_$p159, in_$p160, in_$p161, in_$p162, in_$p163, in_$i164, in_$p165, in_$p166, in_$i167, in_$i169, in_$p170, in_$i171, in_$i172, in_$p173, in_$i174, in_$i175, in_$i176, in_$i158, in_vslice_dummy_var_113;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2478;

  $bb39:
    assume out_$i176 == 1;
    assume {:verifier.code 0} true;
    out_$i158 := out_$i169;
    goto $bb39_dummy;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    out_$i176 := $sgt.i32(out_$i175, out_$i169);
    goto corral_source_split_2498;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    out_$i175 := $zext.i16.i32(out_$i174);
    goto corral_source_split_2497;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_$i174 := $load.i16($M.0, in_$p154);
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p173, out_$i172);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$i172 := $add.i32(out_$i171, 1);
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i32($M.0, out_$p170);
    goto corral_source_split_2492;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i32(out_$i158, 1);
    call {:si_unique_call 491} {:cexpr "i"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_2490;

  SeqInstr_138:
    goto corral_source_split_2489;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} out_vslice_dummy_var_113 := mptsas_probe_one_phy(out_$p161, out_$p165, out_$i167, 1);
    goto SeqInstr_137;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.0, out_$p166);
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref(out_$p163, $mul.ref(out_$i164, 112));
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$i164 := $sext.i32.i64(out_$i158);
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$p163 := $load.ref($M.0, out_$p162);
    goto corral_source_split_2484;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p160, $mul.ref(0, 3032)), $mul.ref(712, 1));
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p160 := $load.ref($M.0, out_$p159);
    goto corral_source_split_2481;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39_dummy:
    call {:si_unique_call 1} out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i169, out_$p170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i158, out_vslice_dummy_var_113 := mptsas_probe_hba_phys_loop_$bb37(in_$p0, in_$p20, in_$p154, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i169, out_$p170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i158, out_vslice_dummy_var_113);
    return;

  exit:
    return;
}



procedure mptsas_probe_hba_phys_loop_$bb37(in_$p0: ref, in_$p20: ref, in_$p154: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i169: i32, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$p173: ref, in_$i174: i16, in_$i175: i32, in_$i176: i1, in_$i158: i32, in_vslice_dummy_var_113: i32) returns (out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i169: i32, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$p173: ref, out_$i174: i16, out_$i175: i32, out_$i176: i1, out_$i158: i32, out_vslice_dummy_var_113: i32);
  modifies $M.0, $M.4, $CurrAddr, $M.25, assertsPassed;



implementation mptsas_probe_hba_phys_loop_$bb23(in_$p0: ref, in_$p20: ref, in_$p68: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$p82: ref, in_$i83: i16, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$p100: ref, in_$i101: i16, in_$i102: i32, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p112: ref, in_$i113: i64, in_$p114: ref, in_$i115: i8, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$p132: ref, in_$i133: i16, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$i143: i64, in_$p146: ref, in_$i147: i16, in_$i148: i32, in_$i150: i32, in_$i151: i16, in_$i152: i32, in_$i153: i1, in_$i72: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32) returns (out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$p82: ref, out_$i83: i16, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$p100: ref, out_$i101: i16, out_$i102: i32, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p112: ref, out_$i113: i64, out_$p114: ref, out_$i115: i8, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$p132: ref, out_$i133: i16, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$i143: i64, out_$p146: ref, out_$i147: i16, out_$i148: i32, out_$i150: i32, out_$i151: i16, out_$i152: i32, out_$i153: i1, out_$i72: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32)
{

  entry:
    out_$p73, out_$p74, out_$i75, out_$p76, out_$p78, out_$p79, out_$i80, out_$p82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$p90, out_$p91, out_$i92, out_$p94, out_$p95, out_$p96, out_$i97, out_$p100, out_$i101, out_$i102, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p112, out_$i113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p120, out_$p121, out_$p122, out_$i123, out_$p126, out_$p127, out_$p128, out_$i129, out_$p132, out_$i133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$p140, out_$p141, out_$p142, out_$i143, out_$p146, out_$i147, out_$i148, out_$i150, out_$i151, out_$i152, out_$i153, out_$i72, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112 := in_$p73, in_$p74, in_$i75, in_$p76, in_$p78, in_$p79, in_$i80, in_$p82, in_$i83, in_$p84, in_$p85, in_$i86, in_$p89, in_$p90, in_$p91, in_$i92, in_$p94, in_$p95, in_$p96, in_$i97, in_$p100, in_$i101, in_$i102, in_$p104, in_$i105, in_$i106, in_$p107, in_$p108, in_$i109, in_$p112, in_$i113, in_$p114, in_$i115, in_$p116, in_$p117, in_$i118, in_$p120, in_$p121, in_$p122, in_$i123, in_$p126, in_$p127, in_$p128, in_$i129, in_$p132, in_$i133, in_$i134, in_$i135, in_$p136, in_$p137, in_$i138, in_$p140, in_$p141, in_$p142, in_$i143, in_$p146, in_$i147, in_$i148, in_$i150, in_$i151, in_$i152, in_$i153, in_$i72, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  $bb31:
    assume out_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := out_$i150;
    goto $bb31_dummy;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i153 := $sgt.i32(out_$i152, out_$i150);
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$i152 := $zext.i16.i32(out_$i151);
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i16($M.0, in_$p68);
    goto corral_source_split_2464;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i150 := $add.i32(out_$i72, 1);
    call {:si_unique_call 488} {:cexpr "i"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_2463;

  $bb29:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} out_vslice_dummy_var_112 := mptsas_sas_device_pg0(in_$p0, out_$p140, 536870912, out_$i148);
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.i16.i32(out_$i147);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i16($M.0, out_$p146);
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref($add.ref(out_$p142, $mul.ref(out_$i143, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2458;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    out_$i143 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2456;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.0, out_$p141);
    goto corral_source_split_2455;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p137, $mul.ref(out_$i138, 112)), $mul.ref(48, 1));
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    out_$i138 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.0, out_$p136);
    goto corral_source_split_2450;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2449;

  $bb28:
    assume out_$i135 == 1;
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i134, 0);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i16.i32(out_$i133);
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i16($M.0, out_$p132);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref($add.ref(out_$p128, $mul.ref(out_$i129, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$i129 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$p128 := $load.ref($M.0, out_$p127);
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p126, out_$i115);
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref($add.ref(out_$p122, $mul.ref(out_$i123, 112)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$i123 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.0, out_$p121);
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p120, out_$i115);
    goto corral_source_split_2432;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p117, $mul.ref(out_$i118, 112)), $mul.ref(2, 1));
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2427;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i115 := $trunc.i32.i8(out_$i72);
    call {:si_unique_call 486} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i115);
    goto corral_source_split_2426;

  $bb26:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p114, out_$i113);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2232, 1));
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i64($M.0, out_$p112);
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(out_$p108, $mul.ref(out_$i109, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_2421;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2417;

  $bb25:
    assume out_$i106 == 1;
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i64(out_$i105, 0);
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.0, out_$p104);
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2232, 1));
    goto corral_source_split_2412;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} out_vslice_dummy_var_111 := mptsas_sas_device_pg0(in_$p0, out_$p94, 536870912, out_$i102);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i16.i32(out_$i101);
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i16($M.0, out_$p100);
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref($add.ref(out_$p96, $mul.ref(out_$i97, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2406;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.0, out_$p95);
    goto corral_source_split_2405;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2404;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p91, $mul.ref(out_$i92, 112)), $mul.ref(8, 1));
    goto corral_source_split_2403;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto corral_source_split_2402;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_2400;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2399;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p89, out_$i83);
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p85, $mul.ref(out_$i86, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i16($M.0, out_$p82);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p79, $mul.ref(out_$i80, 112)), $mul.ref(0, 1));
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} out_vslice_dummy_var_110 := mptsas_sas_phy_pg0(in_$p0, out_$p76, 0, out_$i72);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(out_$p74, $mul.ref(out_$i75, 112));
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_2383;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p73, out_$p74, out_$i75, out_$p76, out_$p78, out_$p79, out_$i80, out_$p82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$p90, out_$p91, out_$i92, out_$p94, out_$p95, out_$p96, out_$i97, out_$p100, out_$i101, out_$i102, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p112, out_$i113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p120, out_$p121, out_$p122, out_$i123, out_$p126, out_$p127, out_$p128, out_$i129, out_$p132, out_$i133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$p140, out_$p141, out_$p142, out_$i143, out_$p146, out_$i147, out_$i148, out_$i150, out_$i151, out_$i152, out_$i153, out_$i72, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112 := mptsas_probe_hba_phys_loop_$bb23(in_$p0, in_$p20, in_$p68, out_$p73, out_$p74, out_$i75, out_$p76, out_$p78, out_$p79, out_$i80, out_$p82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$p90, out_$p91, out_$i92, out_$p94, out_$p95, out_$p96, out_$i97, out_$p100, out_$i101, out_$i102, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p112, out_$i113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p120, out_$p121, out_$p122, out_$i123, out_$p126, out_$p127, out_$p128, out_$i129, out_$p132, out_$i133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$p140, out_$p141, out_$p142, out_$i143, out_$p146, out_$i147, out_$i148, out_$i150, out_$i151, out_$i152, out_$i153, out_$i72, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112);
    return;

  exit:
    return;
}



procedure mptsas_probe_hba_phys_loop_$bb23(in_$p0: ref, in_$p20: ref, in_$p68: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$p82: ref, in_$i83: i16, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$p100: ref, in_$i101: i16, in_$i102: i32, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p112: ref, in_$i113: i64, in_$p114: ref, in_$i115: i8, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$p132: ref, in_$i133: i16, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$i143: i64, in_$p146: ref, in_$i147: i16, in_$i148: i32, in_$i150: i32, in_$i151: i16, in_$i152: i32, in_$i153: i1, in_$i72: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32) returns (out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$p82: ref, out_$i83: i16, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$p100: ref, out_$i101: i16, out_$i102: i32, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p112: ref, out_$i113: i64, out_$p114: ref, out_$i115: i8, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$p132: ref, out_$i133: i16, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$i143: i64, out_$p146: ref, out_$i147: i16, out_$i148: i32, out_$i150: i32, out_$i151: i16, out_$i152: i32, out_$i153: i1, out_$i72: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32);
  modifies $M.1, $M.2, $M.0, $M.55, $CurrAddr, $M.81;



implementation mptsas_probe_hba_phys_loop_$bb15(in_$p2: ref, in_$p11: ref, in_$p21: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$i31: i8, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p41: ref, in_$i42: i16, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p52: ref, in_$i53: i8, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i1, in_$i25: i32) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$i31: i8, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p41: ref, out_$i42: i16, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p52: ref, out_$i53: i8, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i1, out_$i25: i32)
{

  entry:
    out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$p32, out_$p33, out_$i34, out_$p36, out_$p37, out_$p38, out_$i39, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p47, out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i25 := in_$p26, in_$p27, in_$i28, in_$p30, in_$i31, in_$p32, in_$p33, in_$i34, in_$p36, in_$p37, in_$p38, in_$i39, in_$p41, in_$i42, in_$p43, in_$p44, in_$i45, in_$p47, in_$p48, in_$p49, in_$i50, in_$p52, in_$i53, in_$p54, in_$p55, in_$i56, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i25;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;

  $bb17:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := out_$i59;
    goto $bb17_dummy;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i61, out_$i59);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i16.i32(out_$i60);
    goto corral_source_split_2367;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i16($M.0, in_$p21);
    goto corral_source_split_2366;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i25, 1);
    call {:si_unique_call 481} {:cexpr "i"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p58, out_$i53);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p55, $mul.ref(out_$i56, 112)), $mul.ref(3, 1));
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i8($M.0, out_$p52);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p49, $mul.ref(out_$i50, 112)), $mul.ref(3, 1));
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p47, out_$i42);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 112)), $mul.ref(0, 1));
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p41);
    goto corral_source_split_2346;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p38, $mul.ref(out_$i39, 112)), $mul.ref(0, 1));
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p36, out_$i31);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p33, $mul.ref(out_$i34, 112)), $mul.ref(4, 1));
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.0, out_$p30);
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 112)), $mul.ref(4, 1));
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2331;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_2330;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2329;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$p32, out_$p33, out_$i34, out_$p36, out_$p37, out_$p38, out_$i39, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p47, out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i25 := mptsas_probe_hba_phys_loop_$bb15(in_$p2, in_$p11, in_$p21, out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$p32, out_$p33, out_$i34, out_$p36, out_$p37, out_$p38, out_$i39, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p47, out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i25);
    return;

  exit:
    return;
}



procedure mptsas_probe_hba_phys_loop_$bb15(in_$p2: ref, in_$p11: ref, in_$p21: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$i31: i8, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p41: ref, in_$i42: i16, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p52: ref, in_$i53: i8, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i1, in_$i25: i32) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$i31: i8, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p41: ref, out_$i42: i16, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p52: ref, out_$i53: i8, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i1, out_$i25: i32);
  modifies $M.0;



implementation mptsas_probe_expanders_loop_$bb30(in_$p48: ref, in_$p49: ref, in_$p65: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$i69: i32) returns (out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$i69: i32)
{

  entry:
    out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i69 := in_$p70, in_$p71, in_$i72, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i69;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2599;

  $bb32:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := out_$i75;
    goto $bb32_dummy;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i32(out_$i77, out_$i75);
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i32(out_$i76);
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i16($M.0, in_$p65);
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i69, 1);
    call {:si_unique_call 504} {:cexpr "i"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p74, in_$p48);
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 112)), $mul.ref(96, 1));
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i69);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_2602;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p49, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i69 := mptsas_probe_expanders_loop_$bb30(in_$p48, in_$p49, in_$p65, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i69);
    return;

  exit:
    return;
}



procedure mptsas_probe_expanders_loop_$bb30(in_$p48: ref, in_$p49: ref, in_$p65: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$i69: i32) returns (out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$i69: i32);
  modifies $M.0;



implementation mptsas_probe_expanders_loop_$bb11(in_$p1: ref, in_$i8: i32, in_$p14: ref, in_$p17: ref, in_$i22: i16, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i32: i16, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p38: ref, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i21: i32) returns (out_$i22: i16, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p31: ref, out_$i32: i16, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p38: ref, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i21: i32)
{

  entry:
    out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21 := in_$i22, in_$p23, in_$p24, in_$i25, in_$p27, in_$p28, in_$p29, in_$p31, in_$i32, in_$p33, in_$p34, in_$i35, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i21;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  $bb13:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i39;
    goto $bb13_dummy;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    out_$i42 := $sgt.i32(out_$i41, out_$i39);
    goto corral_source_split_2553;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_2552;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, in_$p17);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i21, 1);
    call {:si_unique_call 497} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p38, out_$i32);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 112)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i21);
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i16($M.0, out_$p31);
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(out_$p29, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_2542;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p27, out_$i22);
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 112)), $mul.ref(0, 1));
    goto corral_source_split_2538;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    goto corral_source_split_2537;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i21);
    goto corral_source_split_2536;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2535;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2534;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i32.i16(in_$i8);
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21 := mptsas_probe_expanders_loop_$bb11(in_$p1, in_$i8, in_$p14, in_$p17, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21);
    return;

  exit:
    return;
}



procedure mptsas_probe_expanders_loop_$bb11(in_$p1: ref, in_$i8: i32, in_$p14: ref, in_$p17: ref, in_$i22: i16, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i32: i16, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p38: ref, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i21: i32) returns (out_$i22: i16, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p31: ref, out_$i32: i16, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p38: ref, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i21: i32);
  modifies $M.0;



implementation mptsas_probe_expanders_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i16, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$i18: i16, in_$i19: i32, in_$i20: i1, in_$i22: i16, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i32: i16, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p38: ref, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i21: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p59: ref, in_$i60: i16, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$i69: i32, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$p88: ref, in_$p89: ref, in_$p91: ref, in_$i92: i64, in_vslice_dummy_var_115: i32) returns (out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$i7: i16, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$i18: i16, out_$i19: i32, out_$i20: i1, out_$i22: i16, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p31: ref, out_$i32: i16, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p38: ref, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i21: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p59: ref, out_$i60: i16, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$i69: i32, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$p88: ref, out_$p89: ref, out_$p91: ref, out_$i92: i64, out_vslice_dummy_var_115: i32)
{

  entry:
    out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i69, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p91, out_$i92, out_vslice_dummy_var_115 := in_$p4, in_$p5, in_$p6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i22, in_$p23, in_$p24, in_$i25, in_$p27, in_$p28, in_$p29, in_$p31, in_$i32, in_$p33, in_$p34, in_$i35, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i21, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68, in_$p70, in_$p71, in_$i72, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i69, in_$p79, in_$p80, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p88, in_$p89, in_$p91, in_$i92, in_vslice_dummy_var_115;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i47 == 1;
    goto $bb17_dummy;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_2564;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} out_$i46 := mptsas_sas_expander_pg0(in_$p0, in_$p1, 0, out_$i8);
    call {:si_unique_call 501} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_2563;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} kfree(out_$p45);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2558;

  SeqInstr_144:
    goto corral_source_split_2557;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} mptsas_expander_refresh(in_$p0, out_$p14);
    goto SeqInstr_143;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb10;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14:
    assume !(out_$i42 == 1);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    out_$i42 := $sgt.i32(out_$i41, out_$i39);
    goto corral_source_split_2553;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_2552;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, out_$p17);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i21, 1);
    call {:si_unique_call 497} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p38, out_$i32);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 112)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i21);
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i16($M.0, out_$p31);
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(out_$p29, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_2542;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p27, out_$i22);
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 112)), $mul.ref(0, 1));
    goto corral_source_split_2538;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    goto corral_source_split_2537;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i21);
    goto corral_source_split_2536;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2535;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2534;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i32.i16(out_$i8);
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb11:
    call out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21 := mptsas_probe_expanders_loop_$bb11(in_$p1, out_$i8, out_$p14, out_$p17, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    out_$i21 := 0;
    goto $bb11;

  $bb13:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i39;
    assume false;
    return;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_2529;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    out_$i20 := $sgt.i32(out_$i19, 0);
    goto corral_source_split_2527;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i16.i32(out_$i18);
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i16($M.0, out_$p17);
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2524;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_2521;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2520;

  SeqInstr_141:
    goto corral_source_split_2519;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} out_$p14 := mptsas_find_portinfo_by_sas_address(in_$p0, out_$i13);
    goto SeqInstr_140;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.0, out_$p12);
    goto corral_source_split_2518;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_2517;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2516;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i16.i32(out_$i7);
    call {:si_unique_call 495} {:cexpr "handle"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_2514;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i16($M.0, out_$p6);
    goto corral_source_split_2513;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p5, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2512;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.0, out_$p4);
    goto corral_source_split_2511;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2510;

  SeqInstr_153:
    goto corral_source_split_2631;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} mptsas_expander_refresh(in_$p0, out_$p49);
    goto SeqInstr_152;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} out_vslice_dummy_var_115 := printk.ref.ref.i32.i64(.str.2, out_$p84, out_$i87, out_$i92);
    goto corral_source_split_2630;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i64($M.0, out_$p91);
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(out_$p89, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_2628;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p88);
    goto corral_source_split_2627;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i16.i32(out_$i86);
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i16($M.0, out_$p85);
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p49, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_2622;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_2621;

  SeqInstr_150:
    goto corral_source_split_2620;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} ldv_mutex_unlock_56(out_$p82);
    goto SeqInstr_149;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} list_add_tail(out_$p80, out_$p81);
    goto corral_source_split_2618;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(1744, 1));
    goto corral_source_split_2617;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p49, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2616;

  SeqInstr_147:
    goto corral_source_split_2615;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} ldv_mutex_lock_55(out_$p79);
    goto SeqInstr_146;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(1760, 1));
    goto corral_source_split_2614;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb29;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb33:
    assume !(out_$i78 == 1);
    goto corral_source_split_2612;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i32(out_$i77, out_$i75);
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i32(out_$i76);
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i16($M.0, out_$p65);
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i69, 1);
    call {:si_unique_call 504} {:cexpr "i"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p74, out_$p48);
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 112)), $mul.ref(96, 1));
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i69);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_2602;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p49, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    call out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i69 := mptsas_probe_expanders_loop_$bb30(out_$p48, out_$p49, out_$p65, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i69);
    goto $bb30_last;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    out_$i69 := 0;
    goto $bb30;

  $bb32:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := out_$i75;
    assume false;
    return;

  $bb27:
    assume out_$i68 == 1;
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i67, 0);
    goto corral_source_split_2595;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    goto corral_source_split_2594;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i16($M.0, out_$p65);
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p49, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2592;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p64, out_$p63);
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p49, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2588;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p61, out_$i60);
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p49, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i16($M.0, out_$p59);
    goto corral_source_split_2585;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2584;

  $bb21:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i64(out_$i50, 0);
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_2569;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} out_$p48 := kzalloc(32, 208);
    goto corral_source_split_2568;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i69, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p91, out_$i92, out_vslice_dummy_var_115 := mptsas_probe_expanders_loop_$bb4(in_$p0, in_$p1, out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i69, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p91, out_$i92, out_vslice_dummy_var_115);
    return;

  exit:
    return;
}



procedure mptsas_probe_expanders_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i16, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$i18: i16, in_$i19: i32, in_$i20: i1, in_$i22: i16, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i32: i16, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p38: ref, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i21: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p59: ref, in_$i60: i16, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$i69: i32, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$p88: ref, in_$p89: ref, in_$p91: ref, in_$i92: i64, in_vslice_dummy_var_115: i32) returns (out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$i7: i16, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$i18: i16, out_$i19: i32, out_$i20: i1, out_$i22: i16, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p31: ref, out_$i32: i16, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p38: ref, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i21: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p59: ref, out_$i60: i16, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$i69: i32, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$p88: ref, out_$p89: ref, out_$p91: ref, out_$i92: i64, out_vslice_dummy_var_115: i32);
  modifies $M.0, $M.1, $M.2, $M.61, $CurrAddr, $M.55, $M.26, assertsPassed, $M.4, $M.25;



implementation mptsas_probe_devices_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i5: i16, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_vslice_dummy_var_116: i32) returns (out_$p4: ref, out_$i5: i16, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_vslice_dummy_var_116: i32)
{

  entry:
    out_$p4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_vslice_dummy_var_116 := in_$p4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_vslice_dummy_var_116;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i12 == 1;
    goto $bb9_dummy;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_2650;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} out_$i11 := mptsas_sas_device_pg0(in_$p0, in_$p1, 0, out_$i10);
    call {:si_unique_call 515} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2649;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i5);
    goto corral_source_split_2648;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_2646;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 0);
    goto corral_source_split_2644;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    out_$i8 := $and.i32(out_$i7, 1664);
    goto corral_source_split_2643;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.45, out_$p6);
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$i5 := $load.i16($M.45, out_$p4);
    call {:si_unique_call 513} {:cexpr "handle"} boogie_si_record_i16(out_$i5);
    goto corral_source_split_2640;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2639;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i17 == 1;
    goto $bb13;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i15, 1);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.45, out_$p13);
    goto corral_source_split_2655;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2654;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i32(out_$i20, 2);
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.45, out_$p18);
    goto corral_source_split_2662;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2661;

  $bb14:
    assume !(out_$i17 == 1);
    goto corral_source_split_2660;

  $bb18:
    assume out_$i25 == 1;
    goto corral_source_split_2671;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_2668;

  SeqInstr_156:
    goto corral_source_split_2667;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} out_$p23 := mptsas_refreshing_device_handles(in_$p0, in_$p1);
    goto SeqInstr_155;

  $bb16:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_2675;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_2674;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} out_$p26 := mptsas_get_rphy(out_$p23);
    goto corral_source_split_2673;

  $bb19:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} out_vslice_dummy_var_116 := mptsas_add_end_device(in_$p0, out_$p23);
    goto corral_source_split_2679;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_vslice_dummy_var_116 := mptsas_probe_devices_loop_$bb4(in_$p0, in_$p1, out_$p4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_vslice_dummy_var_116);
    return;

  exit:
    return;
}



procedure mptsas_probe_devices_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i5: i16, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_vslice_dummy_var_116: i32) returns (out_$p4: ref, out_$i5: i16, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_vslice_dummy_var_116: i32);
  modifies $M.1, $M.2, $M.0, $M.55, $CurrAddr, $M.26, assertsPassed;



implementation mptsas_refreshing_device_handles_loop_$bb11(in_$p1: ref, in_$p8: ref, in_$p12: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$i28: i8, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p50: ref, in_$p51: ref, in_$i52: i16, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$i60: i16, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p66: ref, in_$p67: ref, in_$i68: i16, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p74: ref, in_$i75: i32, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$i16: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$i28: i8, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p50: ref, out_$p51: ref, out_$i52: i16, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p58: ref, out_$p59: ref, out_$i60: i16, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p66: ref, out_$p67: ref, out_$i68: i16, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p74: ref, out_$i75: i32, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$i16: i32)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i47, out_$p50, out_$p51, out_$i52, out_$p53, out_$p54, out_$i55, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$i71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i16 := in_$p17, in_$p18, in_$i19, in_$p22, in_$i23, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$p29, in_$p30, in_$i31, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p42, in_$p43, in_$i44, in_$p45, in_$p46, in_$i47, in_$p50, in_$p51, in_$i52, in_$p53, in_$p54, in_$i55, in_$p58, in_$p59, in_$i60, in_$p61, in_$p62, in_$i63, in_$p66, in_$p67, in_$i68, in_$p69, in_$p70, in_$i71, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i16;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2715;

  $bb17:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i75;
    goto $bb17_dummy;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i32(out_$i77, out_$i75);
    goto corral_source_split_2732;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i32(out_$i76);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i16($M.0, in_$p12);
    goto corral_source_split_2730;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i16, 1);
    call {:si_unique_call 530} {:cexpr "i"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_2729;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i26 == 1;
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i23, out_$i25);
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.45, out_$p24);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i64($M.0, out_$p22);
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2718;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p74, out_$i68);
    goto corral_source_split_2781;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 112)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i16($M.45, out_$p67);
    goto corral_source_split_2775;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2774;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p66, out_$i60);
    goto corral_source_split_2773;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p62, $mul.ref(out_$i63, 112)), $mul.ref(48, 1)), $mul.ref(2, 1));
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i16($M.45, out_$p59);
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(2, 1));
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p58, out_$i52);
    goto corral_source_split_2765;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p54, $mul.ref(out_$i55, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    goto corral_source_split_2763;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i16($M.45, out_$p51);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p50, out_$i44);
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_2753;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.45, out_$p43);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p42, out_$i36);
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(out_$i39, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.45, out_$p35);
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(10, 1));
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p34, out_$i28);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 112)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.45, out_$p27);
    goto corral_source_split_2735;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2734;

  $bb14:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i47, out_$p50, out_$p51, out_$i52, out_$p53, out_$p54, out_$i55, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$i71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i16 := mptsas_refreshing_device_handles_loop_$bb11(in_$p1, in_$p8, in_$p12, out_$p17, out_$p18, out_$i19, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i47, out_$p50, out_$p51, out_$i52, out_$p53, out_$p54, out_$i55, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$i71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i16);
    return;

  exit:
    return;
}



procedure mptsas_refreshing_device_handles_loop_$bb11(in_$p1: ref, in_$p8: ref, in_$p12: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$i28: i8, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p50: ref, in_$p51: ref, in_$i52: i16, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$i60: i16, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p66: ref, in_$p67: ref, in_$i68: i16, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p74: ref, in_$i75: i32, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$i16: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$i28: i8, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p50: ref, out_$p51: ref, out_$i52: i16, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p58: ref, out_$p59: ref, out_$i60: i16, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p66: ref, out_$p67: ref, out_$i68: i16, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p74: ref, out_$i75: i32, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$i16: i32);
  modifies $M.0;



implementation mptsas_find_phyinfo_by_sas_address_loop_$bb9(in_$i1: i64, in_$p15: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i35: i32, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i19: i32, in_$p14: ref) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i35: i32, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i19: i32)
{

  entry:
    out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i41, out_$i42, out_$i43, out_$i44, out_$i19 := in_$p20, in_$p21, in_$i22, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$i29, in_$p32, in_$i33, in_$i34, in_$i35, in_$i41, in_$i42, in_$i43, in_$i44, in_$i19;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3438;

  $bb19:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i41;
    goto $bb19_dummy;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, out_$i41);
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, in_$p15);
    goto corral_source_split_3451;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i19, 1);
    call {:si_unique_call 591} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_3450;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume out_$i26 == 1;
    goto corral_source_split_3448;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} out_$i25 := mptsas_is_end_device(out_$p24);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 112)), $mul.ref(48, 1));
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i19);
    goto corral_source_split_3442;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_3441;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume out_$i34 == 1;
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i19;
    assume true;
    goto $bb15;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i1);
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.0, out_$p32);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(out_$i29, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i19);
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_3456;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3455;

  $bb12:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i41, out_$i42, out_$i43, out_$i44, out_$i19 := mptsas_find_phyinfo_by_sas_address_loop_$bb9(in_$i1, in_$p15, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i41, out_$i42, out_$i43, out_$i44, out_$i19, in_$p14);
    return;

  exit:
    return;
}



procedure mptsas_find_phyinfo_by_sas_address_loop_$bb9(in_$i1: i64, in_$p15: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i35: i32, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i19: i32, in_$p14: ref) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i35: i32, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i19: i32);



implementation mptsas_find_phyinfo_by_sas_address_loop_$bb4(in_$i1: i64, in_$i10: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i19: i32, in_$p40: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p13: ref, in_$p14: ref, in_$p52: ref) returns (out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i19: i32, out_$p40: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p13: ref, out_$p14: ref, out_$p52: ref)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i19, out_$p40, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p13, out_$p14, out_$p52 := in_$p15, in_$i16, in_$i17, in_$i18, in_$p20, in_$p21, in_$i22, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$i29, in_$p32, in_$i33, in_$i34, in_$i35, in_$p36, in_$p37, in_$i38, in_$p39, in_$i41, in_$i42, in_$i43, in_$i44, in_$i19, in_$p40, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p13, in_$p14, in_$p52;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3429;

  $bb22:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$p14 := out_$p40, out_$p47;
    goto $bb22_dummy;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p40;
    assume true;
    goto $bb22;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, in_$i10);
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_3473;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3471;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p13;
    goto $bb18;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p39;
    goto $bb18;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p37, $mul.ref(out_$i38, 112));
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i35);
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_3466;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3465;

  $bb16:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i19;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i1);
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.0, out_$p32);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(out_$i29, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i19);
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_3456;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3455;

  $bb12:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} out_$i25 := mptsas_is_end_device(out_$p24);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 112)), $mul.ref(48, 1));
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i19);
    goto corral_source_split_3442;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_3441;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i41, out_$i42, out_$i43, out_$i44, out_$i19 := mptsas_find_phyinfo_by_sas_address_loop_$bb9(in_$i1, out_$p15, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i41, out_$i42, out_$i43, out_$i44, out_$i19, out_$p14);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3438;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    out_$i19 := 0;
    goto $bb9;

  $bb19:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i41;
    assume false;
    return;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, out_$i41);
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p15);
    goto corral_source_split_3451;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i19, 1);
    call {:si_unique_call 591} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_3450;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume out_$i26 == 1;
    goto corral_source_split_3448;

  $bb15:
    assume out_$i34 == 1;
    goto corral_source_split_3463;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_3436;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    out_$i18 := $sgt.i32(out_$i17, 0);
    goto corral_source_split_3434;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, out_$p15);
    goto corral_source_split_3432;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3431;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb8;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb20:
    assume !(out_$i44 == 1);
    goto corral_source_split_3478;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i19, out_$p40, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p13, out_$p14, out_$p52 := mptsas_find_phyinfo_by_sas_address_loop_$bb4(in_$i1, in_$i10, out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i19, out_$p40, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p13, out_$p14, out_$p52);
    return;

  exit:
    return;
}



procedure mptsas_find_phyinfo_by_sas_address_loop_$bb4(in_$i1: i64, in_$i10: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i19: i32, in_$p40: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p13: ref, in_$p14: ref, in_$p52: ref) returns (out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i19: i32, out_$p40: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p13: ref, out_$p14: ref, out_$p52: ref);



implementation mptsas_find_portinfo_by_sas_address_loop_$bb16(in_$i1: i64, in_$p26: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$i42: i32, in_$i43: i16, in_$i44: i32, in_$i45: i1, in_$i31: i32, in_$p25: ref) returns (out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$i42: i32, out_$i43: i16, out_$i44: i32, out_$i45: i1, out_$i31: i32)
{

  entry:
    out_$p32, out_$p33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i31 := in_$p32, in_$p33, in_$i34, in_$p37, in_$i38, in_$i39, in_$p40, in_$i42, in_$i43, in_$i44, in_$i45, in_$i31;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3564;

  $bb22:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i42;
    goto $bb22_dummy;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i44, out_$i42);
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i43);
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.0, in_$p26);
    goto corral_source_split_3581;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i31, 1);
    call {:si_unique_call 604} {:cexpr "i"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_3580;

  $bb19:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$p40 := in_$p25;
    assume true;
    goto $bb19;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i38, in_$i1);
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.0, out_$p37);
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p33, $mul.ref(out_$i34, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_3570;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i31);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_3567;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p25, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p32, out_$p33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i31 := mptsas_find_portinfo_by_sas_address_loop_$bb16(in_$i1, in_$p26, out_$p32, out_$p33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i31, in_$p25);
    return;

  exit:
    return;
}



procedure mptsas_find_portinfo_by_sas_address_loop_$bb16(in_$i1: i64, in_$p26: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$i42: i32, in_$i43: i16, in_$i44: i32, in_$i45: i1, in_$i31: i32, in_$p25: ref) returns (out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$i42: i32, out_$i43: i16, out_$i44: i32, out_$i45: i1, out_$i31: i32);



implementation mptsas_find_portinfo_by_sas_address_loop_$bb11(in_$i1: i64, in_$i23: i64, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$i42: i32, in_$i43: i16, in_$i44: i32, in_$i45: i1, in_$i31: i32, in_$p30: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p25: ref) returns (out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$i42: i32, out_$i43: i16, out_$i44: i32, out_$i45: i1, out_$i31: i32, out_$p30: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p25: ref)
{

  entry:
    out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$p33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i31, out_$p30, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p25 := in_$p26, in_$i27, in_$i28, in_$i29, in_$p32, in_$p33, in_$i34, in_$p37, in_$i38, in_$i39, in_$p40, in_$i42, in_$i43, in_$i44, in_$i45, in_$i31, in_$p30, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p25;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3555;

  $bb25:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$p25 := out_$p48;
    goto $bb25_dummy;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, in_$i23);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_3588;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb15;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p25;
    goto $bb15;

  $bb23:
    assume !(out_$i45 == 1);
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i44, out_$i42);
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i43);
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.0, out_$p26);
    goto corral_source_split_3581;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i31, 1);
    call {:si_unique_call 604} {:cexpr "i"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_3580;

  $bb19:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p25;
    assume true;
    goto $bb19;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i38, in_$i1);
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.0, out_$p37);
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p33, $mul.ref(out_$i34, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_3570;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i31);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_3567;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    call out_$p32, out_$p33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i31 := mptsas_find_portinfo_by_sas_address_loop_$bb16(in_$i1, out_$p26, out_$p32, out_$p33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i31, out_$p25);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$i31 := 0;
    goto $bb16;

  $bb22:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i42;
    assume false;
    return;

  $bb13:
    assume out_$i29 == 1;
    goto corral_source_split_3562;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p25;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$i29 := $sgt.i32(out_$i28, 0);
    goto corral_source_split_3560;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3559;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i16($M.0, out_$p26);
    goto corral_source_split_3558;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3557;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$p33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i31, out_$p30, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p25 := mptsas_find_portinfo_by_sas_address_loop_$bb11(in_$i1, in_$i23, out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$p33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i31, out_$p30, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p25);
    return;

  exit:
    return;
}



procedure mptsas_find_portinfo_by_sas_address_loop_$bb11(in_$i1: i64, in_$i23: i64, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$i42: i32, in_$i43: i16, in_$i44: i32, in_$i45: i1, in_$i31: i32, in_$p30: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p25: ref) returns (out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$i42: i32, out_$i43: i16, out_$i44: i32, out_$i45: i1, out_$i31: i32, out_$p30: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p25: ref);



implementation mptsas_expander_refresh_loop_$bb32(in_$p0: ref, in_$p1: ref, in_$p105: ref, in_$p132: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$p141: ref, in_$i142: i32, in_$i144: i32, in_$p145: ref, in_$i146: i32, in_$i147: i32, in_$p148: ref, in_$i149: i16, in_$i150: i32, in_$i151: i1, in_$i136: i32, in_vslice_dummy_var_139: i32) returns (out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$p141: ref, out_$i142: i32, out_$i144: i32, out_$p145: ref, out_$i146: i32, out_$i147: i32, out_$p148: ref, out_$i149: i16, out_$i150: i32, out_$i151: i1, out_$i136: i32, out_vslice_dummy_var_139: i32)
{

  entry:
    out_$p137, out_$p138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i136, out_vslice_dummy_var_139 := in_$p137, in_$p138, in_$i139, in_$p140, in_$p141, in_$i142, in_$i144, in_$p145, in_$i146, in_$i147, in_$p148, in_$i149, in_$i150, in_$i151, in_$i136, in_vslice_dummy_var_139;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  $bb34:
    assume out_$i151 == 1;
    assume {:verifier.code 0} true;
    out_$i136 := out_$i144;
    goto $bb34_dummy;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$i151 := $sgt.i32(out_$i150, out_$i144);
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i16.i32(out_$i149);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i16($M.0, in_$p132);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p148, out_$i147);
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    out_$i147 := $add.i32(out_$i146, 1);
    goto corral_source_split_3767;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i32($M.0, out_$p145);
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(out_$i136, 1);
    call {:si_unique_call 619} {:cexpr "i"} boogie_si_record_i32(out_$i144);
    goto corral_source_split_3764;

  SeqInstr_204:
    goto corral_source_split_3763;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} out_vslice_dummy_var_139 := mptsas_probe_one_phy(in_$p105, out_$p140, out_$i142, 0);
    goto SeqInstr_203;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i32($M.0, out_$p141);
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2436, 1));
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref(out_$p138, $mul.ref(out_$i139, 112));
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$i139 := $sext.i32.i64(out_$i136);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.0, out_$p137);
    goto corral_source_split_3758;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p137, out_$p138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i136, out_vslice_dummy_var_139 := mptsas_expander_refresh_loop_$bb32(in_$p0, in_$p1, in_$p105, in_$p132, out_$p137, out_$p138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i136, out_vslice_dummy_var_139);
    return;

  exit:
    return;
}



procedure mptsas_expander_refresh_loop_$bb32(in_$p0: ref, in_$p1: ref, in_$p105: ref, in_$p132: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$p141: ref, in_$i142: i32, in_$i144: i32, in_$p145: ref, in_$i146: i32, in_$i147: i32, in_$p148: ref, in_$i149: i16, in_$i150: i32, in_$i151: i1, in_$i136: i32, in_vslice_dummy_var_139: i32) returns (out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$p141: ref, out_$i142: i32, out_$i144: i32, out_$p145: ref, out_$i146: i32, out_$i147: i32, out_$p148: ref, out_$i149: i16, out_$i150: i32, out_$i151: i1, out_$i136: i32, out_vslice_dummy_var_139: i32);
  modifies $M.0, $M.4, $CurrAddr, $M.25, assertsPassed;



implementation mptsas_expander_refresh_loop_$bb19(in_$i11: i64, in_$p97: ref, in_$p101: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p119: ref, in_$p120: ref, in_$p122: ref, in_$i123: i32, in_$i124: i16, in_$i125: i32, in_$i126: i1, in_$i106: i32, in_$p107: ref, in_$i128: i64, in_$i129: i1, in_$p130: ref, in_$p127: ref) returns (out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p119: ref, out_$p120: ref, out_$p122: ref, out_$i123: i32, out_$i124: i16, out_$i125: i32, out_$i126: i1, out_$i106: i32, out_$p107: ref, out_$i128: i64, out_$i129: i1, out_$p130: ref, out_$p127: ref)
{

  entry:
    out_$p108, out_$p109, out_$i110, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i106, out_$p107, out_$i128, out_$i129, out_$p130, out_$p127 := in_$p108, in_$p109, in_$i110, in_$p113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$p119, in_$p120, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i106, in_$p107, in_$i128, in_$i129, in_$p130, in_$p127;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3713;

  $bb24:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i106, out_$p107 := out_$i123, out_$p122;
    goto $bb24_dummy;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$p127 := out_$p122;
    assume true;
    goto $bb24;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$i126 := $sgt.i32(out_$i125, out_$i123);
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i16.i32(out_$i124);
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i16($M.0, in_$p101);
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    out_$i123 := $add.i32(out_$i106, 1);
    call {:si_unique_call 615} {:cexpr "i"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_3734;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3733;

  $bb22:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    out_$p122 := out_$p107;
    goto $bb23;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$p122 := out_$p120;
    goto $bb23;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} out_$p120 := mptsas_get_rphy(out_$p119);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref(out_$p117, $mul.ref(out_$i118, 112));
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.i32.i64(out_$i106);
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p97, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3726;

  $bb21:
    assume out_$i115 == 1;
    goto corral_source_split_3725;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i64(out_$i114, in_$i11);
    goto corral_source_split_3723;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i64($M.0, out_$p113);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($add.ref(out_$p109, $mul.ref(out_$i110, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i106);
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_3718;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p97, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3717;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb26:
    assume out_$i129 == 1;
    goto corral_source_split_3741;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    out_$p130 := out_$p107;
    assume true;
    goto $bb26;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i64(out_$i128, 0);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i128 := $p2i.ref.i64(out_$p107);
    goto corral_source_split_3714;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p108, out_$p109, out_$i110, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i106, out_$p107, out_$i128, out_$i129, out_$p130, out_$p127 := mptsas_expander_refresh_loop_$bb19(in_$i11, in_$p97, in_$p101, out_$p108, out_$p109, out_$i110, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i106, out_$p107, out_$i128, out_$i129, out_$p130, out_$p127);
    return;

  exit:
    return;
}



procedure mptsas_expander_refresh_loop_$bb19(in_$i11: i64, in_$p97: ref, in_$p101: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p119: ref, in_$p120: ref, in_$p122: ref, in_$i123: i32, in_$i124: i16, in_$i125: i32, in_$i126: i1, in_$i106: i32, in_$p107: ref, in_$i128: i64, in_$i129: i1, in_$p130: ref, in_$p127: ref) returns (out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p119: ref, out_$p120: ref, out_$p122: ref, out_$i123: i32, out_$i124: i16, out_$i125: i32, out_$i126: i1, out_$i106: i32, out_$p107: ref, out_$i128: i64, out_$i129: i1, out_$p130: ref, out_$p127: ref);



implementation mptsas_expander_refresh_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$p12: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p42: ref, in_$i43: i8, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p55: ref, in_$i56: i16, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p69: ref, in_$i70: i16, in_$i71: i32, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p77: ref, in_$i78: i8, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p84: ref, in_$i85: i32, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$i16: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p42: ref, out_$i43: i8, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p55: ref, out_$i56: i16, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p69: ref, out_$i70: i16, out_$i71: i32, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p77: ref, out_$i78: i8, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p84: ref, out_$i85: i32, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$i16: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p38, out_$p39, out_$i40, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p49, out_$p50, out_$p51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$i66, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i16, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138 := in_$p17, in_$p18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p24, in_$p25, in_$i26, in_$p28, in_$p29, in_$p30, in_$i31, in_$p34, in_$i35, in_$i36, in_$p38, in_$p39, in_$i40, in_$p42, in_$i43, in_$p44, in_$p45, in_$i46, in_$p49, in_$p50, in_$p51, in_$i52, in_$p55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$p63, in_$p64, in_$p65, in_$i66, in_$p69, in_$i70, in_$i71, in_$p73, in_$p74, in_$i75, in_$p77, in_$i78, in_$p79, in_$p80, in_$i81, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i16, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3613;

  $bb9:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i85;
    goto $bb9_dummy;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    out_$i88 := $sgt.i32(out_$i87, out_$i85);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i16.i32(out_$i86);
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i16($M.0, in_$p12);
    goto corral_source_split_3684;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i32(out_$i16, 1);
    call {:si_unique_call 610} {:cexpr "i"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_3683;

  $bb7:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p84, out_$i78);
    goto corral_source_split_3681;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(out_$p80, $mul.ref(out_$i81, 112)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    goto corral_source_split_3679;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i8($M.0, out_$p77);
    goto corral_source_split_3675;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p74, $mul.ref(out_$i75, 112)), $mul.ref(2, 1));
    goto corral_source_split_3674;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_3671;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} out_vslice_dummy_var_138 := mptsas_sas_device_pg0(in_$p0, out_$p63, 536870912, out_$i71);
    goto corral_source_split_3669;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(out_$i70);
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i16($M.0, out_$p69);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(out_$p65, $mul.ref(out_$i66, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p60, $mul.ref(out_$i61, 112)), $mul.ref(48, 1));
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3657;

  $bb6:
    assume out_$i58 == 1;
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i16.i32(out_$i56);
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i16($M.0, out_$p55);
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_3648;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p49, out_$i43);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 112)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3641;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.0, out_$p42);
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p39, $mul.ref(out_$i40, 112)), $mul.ref(2, 1));
    goto corral_source_split_3639;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_3636;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3635;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} out_vslice_dummy_var_137 := mptsas_sas_device_pg0(in_$p0, out_$p28, 536870912, out_$i36);
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i35);
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3629;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3627;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 112)), $mul.ref(8, 1));
    goto corral_source_split_3626;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto corral_source_split_3625;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3624;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_3623;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3622;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} out_vslice_dummy_var_136 := mptsas_sas_expander_pg1(in_$p0, out_$p20, 268435456, out_$i22);
    goto corral_source_split_3621;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i21, in_$i6);
    goto corral_source_split_3620;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$i21 := $shl.i32(out_$i16, 16);
    goto corral_source_split_3619;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p18, $mul.ref(out_$i19, 112));
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3616;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p38, out_$p39, out_$i40, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p49, out_$p50, out_$p51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$i66, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i16, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138 := mptsas_expander_refresh_loop_$bb4(in_$p0, in_$p1, in_$i6, in_$p12, out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p38, out_$p39, out_$i40, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p49, out_$p50, out_$p51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$i66, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i16, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138);
    return;

  exit:
    return;
}



procedure mptsas_expander_refresh_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$p12: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p42: ref, in_$i43: i8, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p55: ref, in_$i56: i16, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p69: ref, in_$i70: i16, in_$i71: i32, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p77: ref, in_$i78: i8, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p84: ref, in_$i85: i32, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$i16: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p42: ref, out_$i43: i8, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p55: ref, out_$i56: i16, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p69: ref, out_$i70: i16, out_$i71: i32, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p77: ref, out_$i78: i8, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p84: ref, out_$i85: i32, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$i16: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32);
  modifies $M.0, $M.1, $M.2, $M.55, $CurrAddr;



implementation mptsas_sas_expander_pg0_loop_$bb30(in_$p1: ref, in_$p7: ref, in_$p40: ref, in_$p78: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p87: ref, in_$p88: ref, in_$i89: i16, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p101: ref, in_$p102: ref, in_$i103: i16, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p109: ref, in_$i110: i32, in_$i111: i16, in_$i112: i32, in_$i113: i1, in_$i82: i32) returns (out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p87: ref, out_$p88: ref, out_$i89: i16, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p101: ref, out_$p102: ref, out_$i103: i16, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p109: ref, out_$i110: i32, out_$i111: i16, out_$i112: i32, out_$i113: i1, out_$i82: i32)
{

  entry:
    out_$p83, out_$p84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$i92, out_$p94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p101, out_$p102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i82 := in_$p83, in_$p84, in_$i85, in_$p87, in_$p88, in_$i89, in_$p90, in_$p91, in_$i92, in_$p94, in_$i95, in_$p96, in_$p97, in_$i98, in_$p101, in_$p102, in_$i103, in_$p104, in_$p105, in_$i106, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i82;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  $bb32:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := out_$i110;
    goto $bb32_dummy;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    out_$i113 := $sgt.i32(out_$i112, out_$i110);
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i16.i32(out_$i111);
    goto corral_source_split_3964;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i16($M.0, in_$p78);
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i32(out_$i82, 1);
    call {:si_unique_call 645} {:cexpr "i"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_3962;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p109, out_$i103);
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref(out_$p105, $mul.ref(out_$i106, 112)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3958;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3956;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i16($M.63, out_$p102);
    goto corral_source_split_3955;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p40, $mul.ref(0, 36)), $mul.ref(26, 1));
    goto corral_source_split_3954;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p101, out_$i95);
    goto corral_source_split_3953;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(out_$i98, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i64($M.61, in_$p7);
    goto corral_source_split_3947;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p94, out_$i89);
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p91, $mul.ref(out_$i92, 112)), $mul.ref(0, 1));
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i16($M.62, out_$p88);
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p40, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p87, in_$p1);
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p84, $mul.ref(out_$i85, 112)), $mul.ref(96, 1));
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_3934;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p83, out_$p84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$i92, out_$p94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p101, out_$p102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i82 := mptsas_sas_expander_pg0_loop_$bb30(in_$p1, in_$p7, in_$p40, in_$p78, out_$p83, out_$p84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$i92, out_$p94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p101, out_$p102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i82);
    return;

  exit:
    return;
}



procedure mptsas_sas_expander_pg0_loop_$bb30(in_$p1: ref, in_$p7: ref, in_$p40: ref, in_$p78: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p87: ref, in_$p88: ref, in_$i89: i16, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p101: ref, in_$p102: ref, in_$i103: i16, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p109: ref, in_$i110: i32, in_$i111: i16, in_$i112: i32, in_$i113: i1, in_$i82: i32) returns (out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p87: ref, out_$p88: ref, out_$i89: i16, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p101: ref, out_$p102: ref, out_$i103: i16, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p109: ref, out_$i110: i32, out_$i111: i16, out_$i112: i32, out_$i113: i1, out_$i82: i32);
  modifies $M.0;



implementation mptsas_find_portinfo_by_handle_loop_$bb9(in_$i1: i16, in_$p12: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i30: i32, in_$i31: i16, in_$i32: i32, in_$i33: i1, in_$i17: i32, in_$p11: ref) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i30: i32, out_$i31: i16, out_$i32: i32, out_$i33: i1, out_$i17: i32)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i17 := in_$p18, in_$p19, in_$i20, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i30, in_$i31, in_$i32, in_$i33, in_$i17;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  $bb15:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i30;
    goto $bb15_dummy;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i33 := $sgt.i32(out_$i32, out_$i30);
    goto corral_source_split_4150;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i32(out_$i31);
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i16($M.0, in_$p12);
    goto corral_source_split_4148;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i17, 1);
    call {:si_unique_call 674} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_4147;

  $bb12:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$p28 := in_$p11;
    assume true;
    goto $bb12;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i25, out_$i26);
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(in_$i1);
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i16($M.0, out_$p23);
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_4134;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i17 := mptsas_find_portinfo_by_handle_loop_$bb9(in_$i1, in_$p12, out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i17, in_$p11);
    return;

  exit:
    return;
}



procedure mptsas_find_portinfo_by_handle_loop_$bb9(in_$i1: i16, in_$p12: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i30: i32, in_$i31: i16, in_$i32: i32, in_$i33: i1, in_$i17: i32, in_$p11: ref) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i30: i32, out_$i31: i16, out_$i32: i32, out_$i33: i1, out_$i17: i32);



implementation mptsas_find_portinfo_by_handle_loop_$bb4(in_$i1: i16, in_$i9: i64, in_$p12: ref, in_$i13: i16, in_$i14: i32, in_$i15: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i30: i32, in_$i31: i16, in_$i32: i32, in_$i33: i1, in_$i17: i32, in_$p16: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i16, out_$i14: i32, out_$i15: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i30: i32, out_$i31: i16, out_$i32: i32, out_$i33: i1, out_$i17: i32, out_$p16: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i17, out_$p16, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p11 := in_$p12, in_$i13, in_$i14, in_$i15, in_$p18, in_$p19, in_$i20, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i30, in_$i31, in_$i32, in_$i33, in_$i17, in_$p16, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4122;

  $bb18:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p36;
    goto $bb18_dummy;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, in_$i9);
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4157;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_4156;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_4155;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4154;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb8;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p11;
    goto $bb8;

  $bb16:
    assume !(out_$i33 == 1);
    goto corral_source_split_4152;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i33 := $sgt.i32(out_$i32, out_$i30);
    goto corral_source_split_4150;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i32(out_$i31);
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i16($M.0, out_$p12);
    goto corral_source_split_4148;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i17, 1);
    call {:si_unique_call 674} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_4147;

  $bb12:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p11;
    assume true;
    goto $bb12;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i25, out_$i26);
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(in_$i1);
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i16($M.0, out_$p23);
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_4134;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i17 := mptsas_find_portinfo_by_handle_loop_$bb9(in_$i1, out_$p12, out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i17, out_$p11);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i17 := 0;
    goto $bb9;

  $bb15:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i30;
    assume false;
    return;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p11;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$i15 := $sgt.i32(out_$i14, 0);
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i16.i32(out_$i13);
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i16($M.0, out_$p12);
    goto corral_source_split_4125;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i17, out_$p16, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p11 := mptsas_find_portinfo_by_handle_loop_$bb4(in_$i1, in_$i9, out_$p12, out_$i13, out_$i14, out_$i15, out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i17, out_$p16, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p11);
    return;

  exit:
    return;
}



procedure mptsas_find_portinfo_by_handle_loop_$bb4(in_$i1: i16, in_$i9: i64, in_$p12: ref, in_$i13: i16, in_$i14: i32, in_$i15: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i30: i32, in_$i31: i16, in_$i32: i32, in_$i33: i1, in_$i17: i32, in_$p16: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i16, out_$i14: i32, out_$i15: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i30: i32, out_$i31: i16, out_$i32: i32, out_$i33: i1, out_$i17: i32, out_$p16: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p11: ref);



implementation mptsas_setup_wide_ports_loop_$bb92(in_$p0: ref, in_$p1: ref, in_$p230: ref, in_$p235: ref, in_$p236: ref, in_$i237: i64, in_$p239: ref, in_$p240: ref, in_$i241: i64, in_$i242: i1, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$i250: i16, in_$i251: i32, in_$p252: ref, in_$i253: i64, in_$p255: ref, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$p262: ref, in_$p263: ref, in_$p264: ref, in_$i266: i32, in_$i267: i16, in_$i268: i32, in_$i269: i1, in_$i234: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32) returns (out_$p235: ref, out_$p236: ref, out_$i237: i64, out_$p239: ref, out_$p240: ref, out_$i241: i64, out_$i242: i1, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$i250: i16, out_$i251: i32, out_$p252: ref, out_$i253: i64, out_$p255: ref, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$p262: ref, out_$p263: ref, out_$p264: ref, out_$i266: i32, out_$i267: i16, out_$i268: i32, out_$i269: i1, out_$i234: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32)
{

  entry:
    out_$p235, out_$p236, out_$i237, out_$p239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$p247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$i253, out_$p255, out_$i256, out_$i257, out_$i258, out_$p259, out_$p260, out_$p261, out_$p262, out_$p263, out_$p264, out_$i266, out_$i267, out_$i268, out_$i269, out_$i234, out_vslice_dummy_var_145, out_vslice_dummy_var_146 := in_$p235, in_$p236, in_$i237, in_$p239, in_$p240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$i246, in_$p247, in_$p248, in_$p249, in_$i250, in_$i251, in_$p252, in_$i253, in_$p255, in_$i256, in_$i257, in_$i258, in_$p259, in_$p260, in_$p261, in_$p262, in_$p263, in_$p264, in_$i266, in_$i267, in_$i268, in_$i269, in_$i234, in_vslice_dummy_var_145, in_vslice_dummy_var_146;
    goto $bb92, exit;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_4500;

  $bb104:
    assume out_$i269 == 1;
    assume {:verifier.code 0} true;
    out_$i234 := out_$i266;
    goto $bb104_dummy;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$i269 := $sgt.i32(out_$i268, out_$i266);
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    out_$i268 := $zext.i16.i32(out_$i267);
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$i267 := $load.i16($M.0, in_$p230);
    goto corral_source_split_4514;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i266 := $add.i32(out_$i234, 1);
    call {:si_unique_call 697} {:cexpr "i"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_4513;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume out_$i242 == 1;
    goto corral_source_split_4511;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i64(out_$i241, 0);
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$i241 := $p2i.ref.i64(out_$p240);
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$p240 := $load.ref($M.0, out_$p239);
    goto corral_source_split_4507;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$p239 := $add.ref($add.ref(out_$p236, $mul.ref(out_$i237, 112)), $mul.ref(104, 1));
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$i237 := $sext.i32.i64(out_$i234);
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$p236 := $load.ref($M.0, out_$p235);
    goto corral_source_split_4503;

  $bb93:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4502;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb102:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} out_vslice_dummy_var_146 := printk.ref.ref.ref.ref(.str.38, out_$p260, out_$p262, out_$p264);
    goto corral_source_split_4545;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    out_$p264 := $load.ref($M.0, out_$p263);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref(out_$p240, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    out_$p262 := $load.ref($M.0, out_$p261);
    goto corral_source_split_4542;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    out_$p261 := $add.ref($add.ref(out_$p240, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4541;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    out_$p260 := $bitcast.ref.ref(out_$p259);
    goto corral_source_split_4540;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    out_$p259 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4539;

  $bb101:
    assume out_$i258 == 1;
    goto corral_source_split_4538;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    out_$i258 := $ne.i32(out_$i257, 0);
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    out_$i257 := $and.i32(out_$i256, 2097152);
    goto corral_source_split_4535;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    out_$i256 := $load.i32($M.0, out_$p255);
    goto corral_source_split_4534;

  $bb100:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4533;

  $bb99:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} out_vslice_dummy_var_145 := printk.ref.ref.ref.ref.i32.i32.i64(.str.37, out_$p248, .str.31, out_$p240, out_$i234, out_$i251, out_$i253);
    goto corral_source_split_4531;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    out_$i253 := $load.i64($M.0, out_$p252);
    goto corral_source_split_4530;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref($add.ref(out_$p240, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4529;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    out_$i251 := $zext.i16.i32(out_$i250);
    goto corral_source_split_4528;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    out_$i250 := $load.i16($M.0, out_$p249);
    goto corral_source_split_4527;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref($add.ref(out_$p240, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    out_$p248 := $bitcast.ref.ref(out_$p247);
    goto corral_source_split_4525;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4524;

  $bb98:
    assume out_$i246 == 1;
    goto corral_source_split_4523;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    out_$i246 := $ne.i32(out_$i245, 0);
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    out_$i245 := $and.i32(out_$i244, 2097152);
    goto corral_source_split_4520;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i32($M.0, out_$p243);
    goto corral_source_split_4519;

  $bb97:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4518;

  $bb95:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb104_dummy:
    call {:si_unique_call 1} out_$p235, out_$p236, out_$i237, out_$p239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$p247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$i253, out_$p255, out_$i256, out_$i257, out_$i258, out_$p259, out_$p260, out_$p261, out_$p262, out_$p263, out_$p264, out_$i266, out_$i267, out_$i268, out_$i269, out_$i234, out_vslice_dummy_var_145, out_vslice_dummy_var_146 := mptsas_setup_wide_ports_loop_$bb92(in_$p0, in_$p1, in_$p230, out_$p235, out_$p236, out_$i237, out_$p239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$p247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$i253, out_$p255, out_$i256, out_$i257, out_$i258, out_$p259, out_$p260, out_$p261, out_$p262, out_$p263, out_$p264, out_$i266, out_$i267, out_$i268, out_$i269, out_$i234, out_vslice_dummy_var_145, out_vslice_dummy_var_146);
    return;

  exit:
    return;
}



procedure mptsas_setup_wide_ports_loop_$bb92(in_$p0: ref, in_$p1: ref, in_$p230: ref, in_$p235: ref, in_$p236: ref, in_$i237: i64, in_$p239: ref, in_$p240: ref, in_$i241: i64, in_$i242: i1, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$i250: i16, in_$i251: i32, in_$p252: ref, in_$i253: i64, in_$p255: ref, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$p262: ref, in_$p263: ref, in_$p264: ref, in_$i266: i32, in_$i267: i16, in_$i268: i32, in_$i269: i1, in_$i234: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32) returns (out_$p235: ref, out_$p236: ref, out_$i237: i64, out_$p239: ref, out_$p240: ref, out_$i241: i64, out_$i242: i1, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$i250: i16, out_$i251: i32, out_$p252: ref, out_$i253: i64, out_$p255: ref, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$p262: ref, out_$p263: ref, out_$p264: ref, out_$i266: i32, out_$i267: i16, out_$i268: i32, out_$i269: i1, out_$i234: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32);



implementation mptsas_setup_wide_ports_loop_$bb59(in_$p0: ref, in_$i89: i64, in_$p133: ref, in_$p145: ref, in_$p152: ref, in_$i153: i64, in_$i154: i1, in_$p157: ref, in_$i158: i64, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$i162: i64, in_$i163: i64, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$p172: ref, in_$i173: i64, in_$p175: ref, in_$p176: ref, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$i188: i16, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i193: i16, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i8, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i64, in_$p207: ref, in_$i208: i8, in_$i209: i32, in_$i210: i32, in_$i211: i64, in_$i212: i64, in_$p213: ref, in_$p214: ref, in_$i215: i16, in_$i216: i32, in_$i217: i32, in_$i218: i16, in_$p219: ref, in_$p155: ref, in_$i220: i32, in_$p221: ref, in_$i222: i16, in_$i223: i32, in_$i224: i1, in_$i149: i32, in_$p150: ref, in_vslice_dummy_var_144: i32) returns (out_$p152: ref, out_$i153: i64, out_$i154: i1, out_$p157: ref, out_$i158: i64, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$i162: i64, out_$i163: i64, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$p172: ref, out_$i173: i64, out_$p175: ref, out_$p176: ref, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$i188: i16, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i193: i16, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i8, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i64, out_$p207: ref, out_$i208: i8, out_$i209: i32, out_$i210: i32, out_$i211: i64, out_$i212: i64, out_$p213: ref, out_$p214: ref, out_$i215: i16, out_$i216: i32, out_$i217: i32, out_$i218: i16, out_$p219: ref, out_$p155: ref, out_$i220: i32, out_$p221: ref, out_$i222: i16, out_$i223: i32, out_$i224: i1, out_$i149: i32, out_$p150: ref, out_vslice_dummy_var_144: i32)
{

  entry:
    out_$p152, out_$i153, out_$i154, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p172, out_$i173, out_$p175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p155, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i149, out_$p150, out_vslice_dummy_var_144 := in_$p152, in_$i153, in_$i154, in_$p157, in_$i158, in_$i159, in_$p160, in_$p161, in_$i162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$p169, in_$p170, in_$p172, in_$i173, in_$p175, in_$p176, in_$i177, in_$i178, in_$p179, in_$p180, in_$p181, in_$p182, in_$p183, in_$p184, in_$p185, in_$p186, in_$p187, in_$i188, in_$p189, in_$p190, in_$p191, in_$p192, in_$i193, in_$i194, in_$i195, in_$p196, in_$p197, in_$p198, in_$p199, in_$p200, in_$p201, in_$i202, in_$i203, in_$i204, in_$p205, in_$i206, in_$p207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$p213, in_$p214, in_$i215, in_$i216, in_$i217, in_$i218, in_$p219, in_$p155, in_$i220, in_$p221, in_$i222, in_$i223, in_$i224, in_$i149, in_$p150, in_vslice_dummy_var_144;
    goto $bb59, exit;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4389;

  $bb83:
    assume out_$i224 == 1;
    assume {:verifier.code 0} true;
    out_$i149, out_$p150 := out_$i220, out_$p221;
    goto $bb83_dummy;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$i224 := $sgt.i32(out_$i223, out_$i220);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    out_$i223 := $zext.i16.i32(out_$i222);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i222 := $load.i16($M.0, in_$p145);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref(out_$p155, $mul.ref(1, 112));
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$i220 := $add.i32(out_$i149, 1);
    call {:si_unique_call 691} {:cexpr "j"} boogie_si_record_i32(out_$i220);
    goto corral_source_split_4398;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_4397;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$p155 := out_$p150;
    goto $bb63;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$p155 := out_$p150;
    goto $bb63;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$p155 := out_$p150;
    goto $bb63;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$p155 := out_$p150;
    goto $bb63;

  $bb61:
    assume out_$i154 == 1;
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i64(out_$i153, 0);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i64($M.0, out_$p152);
    goto corral_source_split_4392;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4391;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb65:
    assume out_$i159 == 1;
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$i159 := $ne.i64(out_$i158, in_$i89);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i64($M.0, out_$p157);
    goto corral_source_split_4405;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4404;

  $bb62:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb68:
    assume out_$i164 == 1;
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i64(out_$i162, out_$i163);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$i163 := $p2i.ref.i64(in_$p133);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i162 := $p2i.ref.i64(out_$p161);
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$p161 := $load.ref($M.0, out_$p160);
    goto corral_source_split_4411;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4410;

  $bb66:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p219, out_$i218);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(in_$p133, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    out_$i218 := $trunc.i32.i16(out_$i217);
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$i217 := $add.i32(out_$i216, 1);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$i216 := $zext.i16.i32(out_$i215);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i16($M.0, out_$p214);
    goto corral_source_split_4487;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(in_$p133, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4486;

  $bb81:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p213, out_$i212);
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref($add.ref(in_$p133, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4483;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$i212 := $or.i64(out_$i206, out_$i211);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i211 := $sext.i32.i64(out_$i210);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$i210 := $shl.i32(1, out_$i209);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$i209 := $zext.i8.i32(out_$i208);
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i8($M.0, out_$p207);
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4477;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i64($M.0, out_$p205);
    goto corral_source_split_4476;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref(in_$p133, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4475;

  $bb80:
    assume out_$i204 == 1;
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$i204 := $ule.i32(out_$i203, 63);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i8.i32(out_$i202);
    goto corral_source_split_4471;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i8($M.0, out_$p201);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4469;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p200, in_$p133);
    goto corral_source_split_4468;

  $bb79:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4467;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p199, 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} kfree(out_$p198);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$p198 := $bitcast.ref.ref(out_$p197);
    goto corral_source_split_4464;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$p197 := $load.ref($M.0, out_$p196);
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4462;

  $bb76:
    assume out_$i195 == 1;
    goto corral_source_split_4461;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 0);
    goto corral_source_split_4456;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$i194 := $zext.i16.i32(out_$i193);
    goto corral_source_split_4455;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i16($M.0, out_$p192);
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(out_$p191, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4453;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    out_$p191 := $load.ref($M.0, out_$p190);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4451;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p189, out_$i188);
    goto corral_source_split_4450;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(in_$p133, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i16($M.0, out_$p187);
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p186, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4447;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$p186 := $load.ref($M.0, out_$p185);
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p184, out_$p183);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref(in_$p133, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} out_$p183 := mptsas_get_starget(out_$p150);
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p182, out_$p181);
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p133, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} out_$p181 := mptsas_get_port(out_$p150);
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p180, out_$p179);
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p133, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4437;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} out_$p179 := mptsas_get_rphy(out_$p150);
    goto corral_source_split_4436;

  $bb74:
    assume out_$i178 == 1;
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i64(out_$i177, 0);
    goto corral_source_split_4433;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$i177 := $p2i.ref.i64(out_$p176);
    goto corral_source_split_4432;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    out_$p176 := $load.ref($M.0, out_$p175);
    goto corral_source_split_4431;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4430;

  $bb72:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} out_vslice_dummy_var_144 := printk.ref.ref.i32.i64(.str.36, out_$p170, out_$i149, out_$i173);
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i173 := $load.i64($M.0, out_$p172);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p169);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4424;

  $bb71:
    assume out_$i168 == 1;
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$i168 := $ne.i32(out_$i167, 0);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$i167 := $and.i32(out_$i166, 2097152);
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.0, out_$p165);
    goto corral_source_split_4419;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4418;

  $bb69:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(7, 1));
    goto corral_source_split_4459;

  $bb75:
    assume !(out_$i178 == 1);
    goto corral_source_split_4458;

  $bb83_dummy:
    call {:si_unique_call 1} out_$p152, out_$i153, out_$i154, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p172, out_$i173, out_$p175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p155, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i149, out_$p150, out_vslice_dummy_var_144 := mptsas_setup_wide_ports_loop_$bb59(in_$p0, in_$i89, in_$p133, in_$p145, out_$p152, out_$i153, out_$i154, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p172, out_$i173, out_$p175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p155, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i149, out_$p150, out_vslice_dummy_var_144);
    return;

  exit:
    return;
}



procedure mptsas_setup_wide_ports_loop_$bb59(in_$p0: ref, in_$i89: i64, in_$p133: ref, in_$p145: ref, in_$p152: ref, in_$i153: i64, in_$i154: i1, in_$p157: ref, in_$i158: i64, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$i162: i64, in_$i163: i64, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$p172: ref, in_$i173: i64, in_$p175: ref, in_$p176: ref, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$i188: i16, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i193: i16, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i8, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i64, in_$p207: ref, in_$i208: i8, in_$i209: i32, in_$i210: i32, in_$i211: i64, in_$i212: i64, in_$p213: ref, in_$p214: ref, in_$i215: i16, in_$i216: i32, in_$i217: i32, in_$i218: i16, in_$p219: ref, in_$p155: ref, in_$i220: i32, in_$p221: ref, in_$i222: i16, in_$i223: i32, in_$i224: i1, in_$i149: i32, in_$p150: ref, in_vslice_dummy_var_144: i32) returns (out_$p152: ref, out_$i153: i64, out_$i154: i1, out_$p157: ref, out_$i158: i64, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$i162: i64, out_$i163: i64, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$p172: ref, out_$i173: i64, out_$p175: ref, out_$p176: ref, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$i188: i16, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i193: i16, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i8, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i64, out_$p207: ref, out_$i208: i8, out_$i209: i32, out_$i210: i32, out_$i211: i64, out_$i212: i64, out_$p213: ref, out_$p214: ref, out_$i215: i16, out_$i216: i32, out_$i217: i32, out_$i218: i16, out_$p219: ref, out_$p155: ref, out_$i220: i32, out_$p221: ref, out_$i222: i16, out_$i223: i32, out_$i224: i1, out_$i149: i32, out_$p150: ref, out_vslice_dummy_var_144: i32);
  modifies $M.0;



implementation mptsas_setup_wide_ports_loop_$bb31(in_$p0: ref, in_$p1: ref, in_$p81: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$i97: i1, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i64, in_$p116: ref, in_$i117: i8, in_$i118: i32, in_$i119: i32, in_$i120: i64, in_$i121: i64, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i16, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$i142: i64, in_$p143: ref, in_$i144: i32, in_$p145: ref, in_$i146: i16, in_$i147: i32, in_$i148: i1, in_$p152: ref, in_$i153: i64, in_$i154: i1, in_$p157: ref, in_$i158: i64, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$i162: i64, in_$i163: i64, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$p172: ref, in_$i173: i64, in_$p175: ref, in_$p176: ref, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$i188: i16, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i193: i16, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i8, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i64, in_$p207: ref, in_$i208: i8, in_$i209: i32, in_$i210: i32, in_$i211: i64, in_$i212: i64, in_$p213: ref, in_$p214: ref, in_$i215: i16, in_$i216: i32, in_$i217: i32, in_$i218: i16, in_$p219: ref, in_$p155: ref, in_$i220: i32, in_$p221: ref, in_$i222: i16, in_$i223: i32, in_$i224: i1, in_$i149: i32, in_$p150: ref, in_$i98: i32, in_$p99: ref, in_$i225: i32, in_$p226: ref, in_$i227: i16, in_$i228: i32, in_$i229: i1, in_$i85: i32, in_$p86: ref, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32) returns (out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$i97: i1, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i64, out_$p116: ref, out_$i117: i8, out_$i118: i32, out_$i119: i32, out_$i120: i64, out_$i121: i64, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i16, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$i142: i64, out_$p143: ref, out_$i144: i32, out_$p145: ref, out_$i146: i16, out_$i147: i32, out_$i148: i1, out_$p152: ref, out_$i153: i64, out_$i154: i1, out_$p157: ref, out_$i158: i64, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$i162: i64, out_$i163: i64, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$p172: ref, out_$i173: i64, out_$p175: ref, out_$p176: ref, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$i188: i16, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i193: i16, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i8, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i64, out_$p207: ref, out_$i208: i8, out_$i209: i32, out_$i210: i32, out_$i211: i64, out_$i212: i64, out_$p213: ref, out_$p214: ref, out_$i215: i16, out_$i216: i32, out_$i217: i32, out_$i218: i16, out_$p219: ref, out_$p155: ref, out_$i220: i32, out_$p221: ref, out_$i222: i16, out_$i223: i32, out_$i224: i1, out_$i149: i32, out_$p150: ref, out_$i98: i32, out_$p99: ref, out_$i225: i32, out_$p226: ref, out_$i227: i16, out_$i228: i32, out_$i229: i1, out_$i85: i32, out_$p86: ref, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32)
{

  entry:
    out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i97, out_$p100, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$p152, out_$i153, out_$i154, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p172, out_$i173, out_$p175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p155, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i149, out_$p150, out_$i98, out_$p99, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$i85, out_$p86, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144 := in_$p88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$p94, in_$p95, in_$i97, in_$p100, in_$p101, in_$i102, in_$i103, in_$p104, in_$p105, in_$i106, in_$i107, in_$p108, in_$p109, in_$p110, in_$i111, in_$i112, in_$i113, in_$p114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p124, in_$i125, in_$i126, in_$i127, in_$p128, in_$p129, in_$p131, in_$p132, in_$p133, in_$p134, in_$i135, in_$i136, in_$i137, in_$i138, in_$p139, in_$p140, in_$i141, in_$i142, in_$p143, in_$i144, in_$p145, in_$i146, in_$i147, in_$i148, in_$p152, in_$i153, in_$i154, in_$p157, in_$i158, in_$i159, in_$p160, in_$p161, in_$i162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$p169, in_$p170, in_$p172, in_$i173, in_$p175, in_$p176, in_$i177, in_$i178, in_$p179, in_$p180, in_$p181, in_$p182, in_$p183, in_$p184, in_$p185, in_$p186, in_$p187, in_$i188, in_$p189, in_$p190, in_$p191, in_$p192, in_$i193, in_$i194, in_$i195, in_$p196, in_$p197, in_$p198, in_$p199, in_$p200, in_$p201, in_$i202, in_$i203, in_$i204, in_$p205, in_$i206, in_$p207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$p213, in_$p214, in_$i215, in_$i216, in_$i217, in_$i218, in_$p219, in_$p155, in_$i220, in_$p221, in_$i222, in_$i223, in_$i224, in_$i149, in_$p150, in_$i98, in_$p99, in_$i225, in_$p226, in_$i227, in_$i228, in_$i229, in_$i85, in_$p86, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  $bb86:
    assume out_$i229 == 1;
    assume {:verifier.code 0} true;
    out_$i85, out_$p86 := out_$i225, out_$p226;
    goto $bb86_dummy;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    out_$i229 := $sgt.i32(out_$i228, out_$i225);
    goto corral_source_split_4311;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$i228 := $zext.i16.i32(out_$i227);
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i16($M.0, in_$p81);
    goto corral_source_split_4309;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref(out_$p99, $mul.ref(1, 112));
    goto corral_source_split_4308;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$i225 := $add.i32(out_$i98, 1);
    call {:si_unique_call 687} {:cexpr "i"} boogie_si_record_i32(out_$i225);
    goto corral_source_split_4307;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4306;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i98, out_$p99 := out_$i85, out_$p132;
    goto $bb38;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i98, out_$p99 := out_$i85, out_$p132;
    goto $bb38;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$i98, out_$p99 := out_$i85, out_$p86;
    goto $bb38;

  $bb36:
    assume out_$i97 == 1;
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i64(out_$i89, 0);
    goto corral_source_split_4302;

  $bb34:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} out_vslice_dummy_var_142 := printk.ref.ref.i32.i64(.str.34, out_$p95, out_$i85, out_$i89);
    goto corral_source_split_4300;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p94);
    goto corral_source_split_4299;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4298;

  $bb33:
    assume out_$i93 == 1;
    goto corral_source_split_4297;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_4295;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    out_$i92 := $and.i32(out_$i91, 2097152);
    goto corral_source_split_4294;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    goto corral_source_split_4293;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4292;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i64($M.0, out_$p88);
    call {:si_unique_call 685} {:cexpr "sas_address"} boogie_si_record_i64(out_$i89);
    goto corral_source_split_4291;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(out_$p86, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4290;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb53:
    assume out_$i138 == 1;
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, out_$i85);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i137 := $add.i32(out_$i136, $sub.i32(0, 1));
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i16.i32(out_$i135);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i16($M.0, out_$p134);
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4368;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4367;

  $bb41:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$p132, out_$p133 := out_$p86, out_$p101;
    goto $bb52;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$p132, out_$p133 := out_$p86, out_$p104;
    goto $bb52;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p131, out_$p104);
    goto corral_source_split_4365;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p86, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4364;

  $bb50:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} out_vslice_dummy_var_143 := printk.ref.ref.i32.i64(.str.35, out_$p129, out_$i85, out_$i89);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$p129 := $bitcast.ref.ref(out_$p128);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4360;

  $bb49:
    assume out_$i127 == 1;
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$i126 := $and.i32(out_$i125, 2097152);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, out_$p124);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p123, 1);
    goto corral_source_split_4353;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p86, $mul.ref(0, 112)), $mul.ref(7, 1));
    goto corral_source_split_4352;

  $bb47:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p122, out_$i121);
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p105, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$i121 := $or.i64(out_$i115, out_$i120);
    goto corral_source_split_4348;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$i120 := $sext.i32.i64(out_$i119);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    out_$i119 := $shl.i32(1, out_$i118);
    goto corral_source_split_4346;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i8.i32(out_$i117);
    goto corral_source_split_4345;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i8($M.0, out_$p116);
    goto corral_source_split_4344;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p86, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4343;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i64($M.0, out_$p114);
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p105, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4341;

  $bb46:
    assume out_$i113 == 1;
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    out_$i113 := $ule.i32(out_$i112, 63);
    goto corral_source_split_4338;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i111);
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.0, out_$p110);
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p86, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p109, in_$p1);
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p105, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4333;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p108, 1);
    goto corral_source_split_4332;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p105, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4331;

  $bb43:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i64(out_$i106, 0);
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_4320;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} out_$p104 := kzalloc(48, 208);
    goto corral_source_split_4319;

  $bb40:
    assume out_$i103 == 1;
    goto corral_source_split_4318;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i64(out_$i102, 0);
    goto corral_source_split_4316;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    out_$i102 := $p2i.ref.i64(out_$p101);
    goto corral_source_split_4315;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_4314;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p86, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4313;

  $bb37:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i148 == 1);
    goto $bb58;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb84:
    assume !(out_$i224 == 1);
    goto corral_source_split_4494;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$i224 := $sgt.i32(out_$i223, out_$i220);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    out_$i223 := $zext.i16.i32(out_$i222);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i222 := $load.i16($M.0, out_$p145);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref(out_$p155, $mul.ref(1, 112));
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$i220 := $add.i32(out_$i149, 1);
    call {:si_unique_call 691} {:cexpr "j"} boogie_si_record_i32(out_$i220);
    goto corral_source_split_4398;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_4397;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$p155 := out_$p150;
    goto $bb63;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$p155 := out_$p150;
    goto $bb63;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$p155 := out_$p150;
    goto $bb63;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$p155 := out_$p150;
    goto $bb63;

  $bb61:
    assume out_$i154 == 1;
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i64(out_$i153, 0);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i64($M.0, out_$p152);
    goto corral_source_split_4392;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4391;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    call out_$p152, out_$i153, out_$i154, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p172, out_$i173, out_$p175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p155, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i149, out_$p150, out_vslice_dummy_var_144 := mptsas_setup_wide_ports_loop_$bb59(in_$p0, out_$i89, out_$p133, out_$p145, out_$p152, out_$i153, out_$i154, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p172, out_$i173, out_$p175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p155, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i149, out_$p150, out_vslice_dummy_var_144);
    goto $bb59_last;

  $bb59_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$i149, out_$p150 := out_$i144, out_$p143;
    goto $bb59;

  $bb83:
    assume out_$i224 == 1;
    assume {:verifier.code 0} true;
    out_$i149, out_$p150 := out_$i220, out_$p221;
    assume false;
    return;

  $bb56:
    assume out_$i148 == 1;
    goto corral_source_split_4387;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i148 := $sgt.i32(out_$i147, out_$i144);
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    out_$i147 := $zext.i16.i32(out_$i146);
    goto corral_source_split_4384;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i16($M.0, out_$p145);
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4382;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(out_$i85, 1);
    call {:si_unique_call 690} {:cexpr "j"} boogie_si_record_i32(out_$i144);
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref(out_$p140, $mul.ref(out_$i142, 112));
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    out_$i142 := $add.i64(out_$i141, 1);
    goto corral_source_split_4379;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i85);
    goto corral_source_split_4378;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    out_$p140 := $load.ref($M.0, out_$p139);
    goto corral_source_split_4377;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4376;

  $bb54:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb65:
    assume out_$i159 == 1;
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$i159 := $ne.i64(out_$i158, out_$i89);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i64($M.0, out_$p157);
    goto corral_source_split_4405;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4404;

  $bb62:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb68:
    assume out_$i164 == 1;
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i64(out_$i162, out_$i163);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$i163 := $p2i.ref.i64(out_$p133);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i162 := $p2i.ref.i64(out_$p161);
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$p161 := $load.ref($M.0, out_$p160);
    goto corral_source_split_4411;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4410;

  $bb66:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p219, out_$i218);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(out_$p133, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    out_$i218 := $trunc.i32.i16(out_$i217);
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$i217 := $add.i32(out_$i216, 1);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$i216 := $zext.i16.i32(out_$i215);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i16($M.0, out_$p214);
    goto corral_source_split_4487;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(out_$p133, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4486;

  $bb81:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p213, out_$i212);
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref($add.ref(out_$p133, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4483;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$i212 := $or.i64(out_$i206, out_$i211);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i211 := $sext.i32.i64(out_$i210);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$i210 := $shl.i32(1, out_$i209);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$i209 := $zext.i8.i32(out_$i208);
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i8($M.0, out_$p207);
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4477;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i64($M.0, out_$p205);
    goto corral_source_split_4476;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref(out_$p133, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4475;

  $bb80:
    assume out_$i204 == 1;
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$i204 := $ule.i32(out_$i203, 63);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i8.i32(out_$i202);
    goto corral_source_split_4471;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i8($M.0, out_$p201);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4469;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p200, out_$p133);
    goto corral_source_split_4468;

  $bb79:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4467;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p199, 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} kfree(out_$p198);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$p198 := $bitcast.ref.ref(out_$p197);
    goto corral_source_split_4464;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$p197 := $load.ref($M.0, out_$p196);
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4462;

  $bb76:
    assume out_$i195 == 1;
    goto corral_source_split_4461;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 0);
    goto corral_source_split_4456;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$i194 := $zext.i16.i32(out_$i193);
    goto corral_source_split_4455;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i16($M.0, out_$p192);
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(out_$p191, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4453;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    out_$p191 := $load.ref($M.0, out_$p190);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4451;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p189, out_$i188);
    goto corral_source_split_4450;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p133, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i16($M.0, out_$p187);
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p186, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4447;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$p186 := $load.ref($M.0, out_$p185);
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p184, out_$p183);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref(out_$p133, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} out_$p183 := mptsas_get_starget(out_$p150);
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p182, out_$p181);
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(out_$p133, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} out_$p181 := mptsas_get_port(out_$p150);
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p180, out_$p179);
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(out_$p133, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4437;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} out_$p179 := mptsas_get_rphy(out_$p150);
    goto corral_source_split_4436;

  $bb74:
    assume out_$i178 == 1;
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i64(out_$i177, 0);
    goto corral_source_split_4433;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$i177 := $p2i.ref.i64(out_$p176);
    goto corral_source_split_4432;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    out_$p176 := $load.ref($M.0, out_$p175);
    goto corral_source_split_4431;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4430;

  $bb72:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} out_vslice_dummy_var_144 := printk.ref.ref.i32.i64(.str.36, out_$p170, out_$i149, out_$i173);
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i173 := $load.i64($M.0, out_$p172);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p169);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4424;

  $bb71:
    assume out_$i168 == 1;
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$i168 := $ne.i32(out_$i167, 0);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$i167 := $and.i32(out_$i166, 2097152);
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.0, out_$p165);
    goto corral_source_split_4419;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4418;

  $bb69:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref(out_$p150, $mul.ref(0, 112)), $mul.ref(7, 1));
    goto corral_source_split_4459;

  $bb75:
    assume !(out_$i178 == 1);
    goto corral_source_split_4458;

  $bb86_dummy:
    call {:si_unique_call 1} out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i97, out_$p100, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$p152, out_$i153, out_$i154, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p172, out_$i173, out_$p175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p155, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i149, out_$p150, out_$i98, out_$p99, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$i85, out_$p86, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144 := mptsas_setup_wide_ports_loop_$bb31(in_$p0, in_$p1, in_$p81, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i97, out_$p100, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$p152, out_$i153, out_$i154, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p172, out_$i173, out_$p175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p155, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i149, out_$p150, out_$i98, out_$p99, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$i85, out_$p86, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144);
    return;

  exit:
    return;
}



procedure mptsas_setup_wide_ports_loop_$bb31(in_$p0: ref, in_$p1: ref, in_$p81: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$i97: i1, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i64, in_$p116: ref, in_$i117: i8, in_$i118: i32, in_$i119: i32, in_$i120: i64, in_$i121: i64, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i16, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$i142: i64, in_$p143: ref, in_$i144: i32, in_$p145: ref, in_$i146: i16, in_$i147: i32, in_$i148: i1, in_$p152: ref, in_$i153: i64, in_$i154: i1, in_$p157: ref, in_$i158: i64, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$i162: i64, in_$i163: i64, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$p172: ref, in_$i173: i64, in_$p175: ref, in_$p176: ref, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$i188: i16, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i193: i16, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i8, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i64, in_$p207: ref, in_$i208: i8, in_$i209: i32, in_$i210: i32, in_$i211: i64, in_$i212: i64, in_$p213: ref, in_$p214: ref, in_$i215: i16, in_$i216: i32, in_$i217: i32, in_$i218: i16, in_$p219: ref, in_$p155: ref, in_$i220: i32, in_$p221: ref, in_$i222: i16, in_$i223: i32, in_$i224: i1, in_$i149: i32, in_$p150: ref, in_$i98: i32, in_$p99: ref, in_$i225: i32, in_$p226: ref, in_$i227: i16, in_$i228: i32, in_$i229: i1, in_$i85: i32, in_$p86: ref, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32) returns (out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$i97: i1, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i64, out_$p116: ref, out_$i117: i8, out_$i118: i32, out_$i119: i32, out_$i120: i64, out_$i121: i64, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i16, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$i142: i64, out_$p143: ref, out_$i144: i32, out_$p145: ref, out_$i146: i16, out_$i147: i32, out_$i148: i1, out_$p152: ref, out_$i153: i64, out_$i154: i1, out_$p157: ref, out_$i158: i64, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$i162: i64, out_$i163: i64, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$p172: ref, out_$i173: i64, out_$p175: ref, out_$p176: ref, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$i188: i16, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i193: i16, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i8, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i64, out_$p207: ref, out_$i208: i8, out_$i209: i32, out_$i210: i32, out_$i211: i64, out_$i212: i64, out_$p213: ref, out_$p214: ref, out_$i215: i16, out_$i216: i32, out_$i217: i32, out_$i218: i16, out_$p219: ref, out_$p155: ref, out_$i220: i32, out_$p221: ref, out_$i222: i16, out_$i223: i32, out_$i224: i1, out_$i149: i32, out_$p150: ref, out_$i98: i32, out_$p99: ref, out_$i225: i32, out_$p226: ref, out_$i227: i16, out_$i228: i32, out_$i229: i1, out_$i85: i32, out_$p86: ref, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32);
  modifies $M.0, $CurrAddr;



implementation mptsas_setup_wide_ports_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p12: ref, in_$i13: i16, in_$i14: i32, in_$i15: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i16, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p16: ref, in_$i74: i32, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$i9: i32, in_$p10: ref, in_cmdloc_dummy_var_51: [ref]i8, in_cmdloc_dummy_var_52: [ref]i8, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32) returns (out_$p12: ref, out_$i13: i16, out_$i14: i32, out_$i15: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i16, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p16: ref, out_$i74: i32, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$i9: i32, out_$p10: ref, out_cmdloc_dummy_var_51: [ref]i8, out_cmdloc_dummy_var_52: [ref]i8, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p16, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i9, out_$p10, out_cmdloc_dummy_var_51, out_cmdloc_dummy_var_52, out_vslice_dummy_var_140, out_vslice_dummy_var_141 := in_$p12, in_$i13, in_$i14, in_$i15, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p16, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i9, in_$p10, in_cmdloc_dummy_var_51, in_cmdloc_dummy_var_52, in_vslice_dummy_var_140, in_vslice_dummy_var_141;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4183;

  $bb25:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$p10 := out_$i74, out_$p75;
    goto $bb25_dummy;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i32(out_$i77, out_$i74);
    goto corral_source_split_4197;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i32(out_$i76);
    goto corral_source_split_4196;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i16($M.0, in_$p5);
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(out_$p16, $mul.ref(1, 112));
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i9, 1);
    call {:si_unique_call 680} {:cexpr "i"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_4193;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4192;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p10;
    goto $bb8;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p10;
    goto $bb8;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p10;
    goto $bb8;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p10;
    goto $bb8;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i16.i32(out_$i13);
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i16($M.0, out_$p12);
    goto corral_source_split_4186;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_4200;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4199;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume out_$i24 == 1;
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i24 := $ule.i32(out_$i23, 1);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.0, out_$p21);
    goto corral_source_split_4207;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4206;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p73, $0.ref);
    goto corral_source_split_4275;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4274;

  $bb20:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} sas_port_delete_phy(out_$p70, out_$p72);
    goto corral_source_split_4272;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_4271;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4270;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_4269;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4268;

  $bb22:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} out_vslice_dummy_var_141 := dev_printk.ref.ref.ref.ref.i32.ref(.str.32, out_$p60, .str.33, out_$p62, out_$i65, out_$p67);
    goto corral_source_split_4266;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i64);
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.0, out_$p63);
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_4260;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4256;

  $bb21:
    assume out_$i57 == 1;
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i32(out_$i55, 8);
    goto corral_source_split_4252;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4250;

  $bb19:
    assume out_$i53 == 1;
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 682} out_cmdloc_dummy_var_52 := $memset.i8(out_cmdloc_dummy_var_51, out_$p49, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_52;
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p47, out_$i46);
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4239;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i64(out_$i39, out_$i45);
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i44);
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$i44 := $xor.i32(out_$i43, $sub.i32(0, 1));
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$i43 := $shl.i32(1, out_$i42);
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, out_$p40);
    goto corral_source_split_4233;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(2, 1));
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i64($M.0, out_$p38);
    goto corral_source_split_4231;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p37, out_$i36);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i16(out_$i35);
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$i35 := $sub.i32(out_$i34, 1);
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_4225;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_4224;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4223;

  $bb17:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} out_vslice_dummy_var_140 := printk.ref.ref.ref.ref.i32(.str.30, out_$p30, .str.31, out_$p18, out_$i9);
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_4219;

  $bb16:
    assume out_$i28 == 1;
    goto corral_source_split_4218;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_4216;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i32(out_$i26, 2097152);
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_4214;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(224, 1));
    goto corral_source_split_4213;

  $bb14:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p16, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i9, out_$p10, out_cmdloc_dummy_var_51, out_cmdloc_dummy_var_52, out_vslice_dummy_var_140, out_vslice_dummy_var_141 := mptsas_setup_wide_ports_loop_$bb4(in_$p0, in_$p5, out_$p12, out_$i13, out_$i14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p16, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i9, out_$p10, out_cmdloc_dummy_var_51, out_cmdloc_dummy_var_52, out_vslice_dummy_var_140, out_vslice_dummy_var_141);
    return;

  exit:
    return;
}



procedure mptsas_setup_wide_ports_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p12: ref, in_$i13: i16, in_$i14: i32, in_$i15: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i16, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p16: ref, in_$i74: i32, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$i9: i32, in_$p10: ref, in_cmdloc_dummy_var_51: [ref]i8, in_cmdloc_dummy_var_52: [ref]i8, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32) returns (out_$p12: ref, out_$i13: i16, out_$i14: i32, out_$i15: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i16, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p16: ref, out_$i74: i32, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$i9: i32, out_$p10: ref, out_cmdloc_dummy_var_51: [ref]i8, out_cmdloc_dummy_var_52: [ref]i8, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32);
  modifies $M.0;



implementation mptsas_probe_one_phy_loop_$bb128(in_$p4: ref, in_$p183: ref, in_$p184: ref, in_$p189: ref, in_$p190: ref, in_$i191: i64, in_$p194: ref, in_$i195: i64, in_$p196: ref, in_$i197: i64, in_$i198: i1, in_$i199: i32, in_$i200: i16, in_$i201: i32, in_$i202: i1, in_$i188: i32) returns (out_$p189: ref, out_$p190: ref, out_$i191: i64, out_$p194: ref, out_$i195: i64, out_$p196: ref, out_$i197: i64, out_$i198: i1, out_$i199: i32, out_$i200: i16, out_$i201: i32, out_$i202: i1, out_$i188: i32)
{

  entry:
    out_$p189, out_$p190, out_$i191, out_$p194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i188 := in_$p189, in_$p190, in_$i191, in_$p194, in_$i195, in_$p196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i188;
    goto $bb128, exit;

  $bb128:
    assume {:verifier.code 0} true;
    goto corral_source_split_4828;

  $bb133:
    assume out_$i202 == 1;
    assume {:verifier.code 0} true;
    out_$i188 := out_$i199;
    goto $bb133_dummy;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i202 := $sgt.i32(out_$i201, out_$i199);
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    out_$i201 := $zext.i16.i32(out_$i200);
    goto corral_source_split_4845;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i16($M.0, in_$p184);
    goto corral_source_split_4844;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i199 := $add.i32(out_$i188, 1);
    call {:si_unique_call 730} {:cexpr "i"} boogie_si_record_i32(out_$i199);
    goto corral_source_split_4843;

  $bb131:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i64(out_$i195, out_$i197);
    goto corral_source_split_4838;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i64($M.0, out_$p196);
    goto corral_source_split_4837;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    out_$i195 := $load.i64($M.0, out_$p194);
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref($add.ref(out_$p190, $mul.ref(out_$i191, 112)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4834;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    goto corral_source_split_4833;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$i191 := $sext.i32.i64(out_$i188);
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$p190 := $load.ref($M.0, out_$p189);
    goto corral_source_split_4831;

  $bb129:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(in_$p183, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb133_dummy:
    call {:si_unique_call 1} out_$p189, out_$p190, out_$i191, out_$p194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i188 := mptsas_probe_one_phy_loop_$bb128(in_$p4, in_$p183, in_$p184, out_$p189, out_$p190, out_$i191, out_$p194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i188);
    return;

  exit:
    return;
}



procedure mptsas_probe_one_phy_loop_$bb128(in_$p4: ref, in_$p183: ref, in_$p184: ref, in_$p189: ref, in_$p190: ref, in_$i191: i64, in_$p194: ref, in_$i195: i64, in_$p196: ref, in_$i197: i64, in_$i198: i1, in_$i199: i32, in_$i200: i16, in_$i201: i32, in_$i202: i1, in_$i188: i32) returns (out_$p189: ref, out_$p190: ref, out_$i191: i64, out_$p194: ref, out_$i195: i64, out_$p196: ref, out_$i197: i64, out_$i198: i1, out_$i199: i32, out_$i200: i16, out_$i201: i32, out_$i202: i1, out_$i188: i32);



implementation mptsas_find_vtarget_loop_$bb4(in_$p0: ref, in_$i1: i8, in_$i2: i8, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p20: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p9: ref, in_$p10: ref, in_$p56: ref) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p20: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p9: ref, out_$p10: ref, out_$p56: ref)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p20, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p9, out_$p10, out_$p56 := in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p20, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p9, in_$p10, in_$p56;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5238;

  $bb25:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p9, out_$p10 := out_$p20, out_$p53;
    goto $bb25_dummy;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    out_$p56 := out_$p20;
    assume true;
    goto $bb25;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_5257;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_5256;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} out_$p53 := __scsi_iterate_devices(out_$p52, out_$p10);
    goto corral_source_split_5255;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_5254;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_5253;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5252;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p50;
    goto $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p9;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p9;
    goto $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i19 == 1;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb7;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i64(out_$i14, 0);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_5243;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_5242;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_5241;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 2896)), $mul.ref(224, 1));
    goto corral_source_split_5240;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i64(out_$i18, 0);
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_5249;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5247;

  $bb8:
    assume !(out_$i15 == 1);
    goto corral_source_split_5246;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb14;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_5265;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 64);
    goto corral_source_split_5264;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_5263;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, out_$p23);
    goto corral_source_split_5262;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5261;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_5260;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5259;

  $bb10:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_5273;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_5272;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.0, out_$p30);
    goto corral_source_split_5271;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5270;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_5269;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5268;

  $bb15:
    assume !(out_$i27 == 1);
    goto corral_source_split_5267;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_5296;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p50 := out_$p9;
    goto $bb24;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    out_$p50 := out_$p49;
    goto $bb24;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_5294;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5293;

  $bb22:
    assume out_$i47 == 1;
    goto corral_source_split_5292;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i45, out_$i46);
    goto corral_source_split_5290;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(in_$i1);
    goto corral_source_split_5289;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_5288;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.0, out_$p43);
    goto corral_source_split_5287;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 24)), $mul.ref(11, 1));
    goto corral_source_split_5286;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_5285;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5284;

  $bb19:
    assume out_$i40 == 1;
    goto corral_source_split_5283;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i38, out_$i39);
    goto corral_source_split_5281;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(in_$i2);
    goto corral_source_split_5280;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_5279;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, out_$p36);
    goto corral_source_split_5278;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 24)), $mul.ref(10, 1));
    goto corral_source_split_5277;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_5276;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5275;

  $bb17:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb21;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p20, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p9, out_$p10, out_$p56 := mptsas_find_vtarget_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p20, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p9, out_$p10, out_$p56);
    return;

  exit:
    return;
}



procedure mptsas_find_vtarget_loop_$bb4(in_$p0: ref, in_$i1: i8, in_$i2: i8, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p20: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p9: ref, in_$p10: ref, in_$p56: ref) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p20: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p9: ref, out_$p10: ref, out_$p56: ref);



implementation mptsas_sas_io_unit_pg0_loop_$bb21(in_$p0: ref, in_$p1: ref, in_$p34: ref, in_$p63: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i8, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p77: ref, in_$i78: i64, in_$p81: ref, in_$i82: i8, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p87: ref, in_$i88: i64, in_$p91: ref, in_$i92: i8, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$p102: ref, in_$i103: i64, in_$p106: ref, in_$i107: i16, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$p112: ref, in_$i113: i32, in_$i114: i16, in_$i115: i32, in_$i116: i1, in_$i67: i32) returns (out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i8, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p77: ref, out_$i78: i64, out_$p81: ref, out_$i82: i8, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p87: ref, out_$i88: i64, out_$p91: ref, out_$i92: i8, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$p102: ref, out_$i103: i64, out_$p106: ref, out_$i107: i16, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$p112: ref, out_$i113: i32, out_$i114: i16, out_$i115: i32, out_$i116: i1, out_$i67: i32)
{

  entry:
    out_$p68, out_$p69, out_$i70, out_$p71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p77, out_$i78, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$p87, out_$i88, out_$p91, out_$i92, out_$p93, out_$p94, out_$i95, out_$p97, out_$p98, out_$p99, out_$i100, out_$p102, out_$i103, out_$p106, out_$i107, out_$p108, out_$p109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i67 := in_$p68, in_$p69, in_$i70, in_$p71, in_$i72, in_$p73, in_$p74, in_$i75, in_$p77, in_$i78, in_$p81, in_$i82, in_$p83, in_$p84, in_$i85, in_$p87, in_$i88, in_$p91, in_$i92, in_$p93, in_$p94, in_$i95, in_$p97, in_$p98, in_$p99, in_$i100, in_$p102, in_$i103, in_$p106, in_$i107, in_$p108, in_$p109, in_$i110, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i67;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5560;

  $bb23:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := out_$i113;
    goto $bb23_dummy;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    out_$i116 := $sgt.i32(out_$i115, out_$i113);
    goto corral_source_split_5610;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i16.i32(out_$i114);
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i16($M.0, in_$p63);
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i67, 1);
    call {:si_unique_call 828} {:cexpr "i"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p112, out_$i107);
    goto corral_source_split_5606;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p109, $mul.ref(out_$i110, 112)), $mul.ref(0, 1));
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    goto corral_source_split_5604;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i16($M.72, out_$p106);
    goto corral_source_split_5600;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref($add.ref(in_$p34, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(out_$i103, 16)), $mul.ref(10, 1));
    goto corral_source_split_5599;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    out_$i103 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p102, in_$p1);
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p99, $mul.ref(out_$i100, 112)), $mul.ref(96, 1));
    goto corral_source_split_5596;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p97, out_$i92);
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p94, $mul.ref(out_$i95, 112)), $mul.ref(4, 1));
    goto corral_source_split_5590;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    goto corral_source_split_5589;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5588;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_5587;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5586;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i8($M.72, out_$p91);
    goto corral_source_split_5585;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref($add.ref(in_$p34, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(out_$i88, 16)), $mul.ref(3, 1));
    goto corral_source_split_5584;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5583;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p87, out_$i82);
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p84, $mul.ref(out_$i85, 112)), $mul.ref(3, 1));
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5579;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5577;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.72, out_$p81);
    goto corral_source_split_5576;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref($add.ref(in_$p34, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(out_$i78, 16)), $mul.ref(0, 1));
    goto corral_source_split_5575;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5574;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p77, out_$i72);
    goto corral_source_split_5573;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p74, $mul.ref(out_$i75, 112)), $mul.ref(2, 1));
    goto corral_source_split_5572;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    goto corral_source_split_5571;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_5569;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5568;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i32.i8(out_$i67);
    goto corral_source_split_5567;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} mptsas_print_phy_data(in_$p0, out_$p71);
    goto corral_source_split_5566;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p69, $mul.ref(out_$i70, 16));
    goto corral_source_split_5565;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5564;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_5563;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p34, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5562;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p68, out_$p69, out_$i70, out_$p71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p77, out_$i78, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$p87, out_$i88, out_$p91, out_$i92, out_$p93, out_$p94, out_$i95, out_$p97, out_$p98, out_$p99, out_$i100, out_$p102, out_$i103, out_$p106, out_$i107, out_$p108, out_$p109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i67 := mptsas_sas_io_unit_pg0_loop_$bb21(in_$p0, in_$p1, in_$p34, in_$p63, out_$p68, out_$p69, out_$i70, out_$p71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p77, out_$i78, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$p87, out_$i88, out_$p91, out_$i92, out_$p93, out_$p94, out_$i95, out_$p97, out_$p98, out_$p99, out_$i100, out_$p102, out_$i103, out_$p106, out_$i107, out_$p108, out_$p109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i67);
    return;

  exit:
    return;
}



procedure mptsas_sas_io_unit_pg0_loop_$bb21(in_$p0: ref, in_$p1: ref, in_$p34: ref, in_$p63: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i8, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p77: ref, in_$i78: i64, in_$p81: ref, in_$i82: i8, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p87: ref, in_$i88: i64, in_$p91: ref, in_$i92: i8, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$p102: ref, in_$i103: i64, in_$p106: ref, in_$i107: i16, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$p112: ref, in_$i113: i32, in_$i114: i16, in_$i115: i32, in_$i116: i1, in_$i67: i32) returns (out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i8, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p77: ref, out_$i78: i64, out_$p81: ref, out_$i82: i8, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p87: ref, out_$i88: i64, out_$p91: ref, out_$i92: i8, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$p102: ref, out_$i103: i64, out_$p106: ref, out_$i107: i16, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$p112: ref, out_$i113: i32, out_$i114: i16, out_$i115: i32, out_$i116: i1, out_$i67: i32);
  modifies $M.0;



implementation mptsas_slave_alloc_loop_$bb17(in_$p28: ref, in_$p40: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i88: i32, in_$i89: i16, in_$i90: i32, in_$i91: i1, in_$i45: i32, in_$p39: ref) returns (out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i88: i32, out_$i89: i16, out_$i90: i32, out_$i91: i1, out_$i45: i32)
{

  entry:
    out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i88, out_$i89, out_$i90, out_$i91, out_$i45 := in_$p46, in_$p47, in_$i48, in_$p51, in_$i52, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i88, in_$i89, in_$i90, in_$i91, in_$i45;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6138;

  $bb26:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i88;
    goto $bb26_dummy;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$i91 := $sgt.i32(out_$i90, out_$i88);
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i16.i32(out_$i89);
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i16($M.0, in_$p40);
    goto corral_source_split_6153;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i88 := $add.i32(out_$i45, 1);
    call {:si_unique_call 888} {:cexpr "i"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i56 == 1;
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    out_$p57, out_$i58 := in_$p39, out_$i45;
    assume true;
    goto $bb19;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i52, out_$i55);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i64($M.0, out_$p54);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p28, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i64($M.0, out_$p51);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p47, $mul.ref(out_$i48, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_6141;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p39, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i88, out_$i89, out_$i90, out_$i91, out_$i45 := mptsas_slave_alloc_loop_$bb17(in_$p28, in_$p40, out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i88, out_$i89, out_$i90, out_$i91, out_$i45, in_$p39);
    return;

  exit:
    return;
}



procedure mptsas_slave_alloc_loop_$bb17(in_$p28: ref, in_$p40: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i88: i32, in_$i89: i16, in_$i90: i32, in_$i91: i1, in_$i45: i32, in_$p39: ref) returns (out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i88: i32, out_$i89: i16, out_$i90: i32, out_$i91: i1, out_$i45: i32);



implementation mptsas_slave_alloc_loop_$bb12(in_$p28: ref, in_$i37: i64, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i1, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i88: i32, in_$i89: i16, in_$i90: i32, in_$i91: i1, in_$i45: i32, in_$p44: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i1, in_$p39: ref) returns (out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i1, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i88: i32, out_$i89: i16, out_$i90: i32, out_$i91: i1, out_$i45: i32, out_$p44: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i1, out_$p39: ref)
{

  entry:
    out_$p40, out_$i41, out_$i42, out_$i43, out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i88, out_$i89, out_$i90, out_$i91, out_$i45, out_$p44, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p39 := in_$p40, in_$i41, in_$i42, in_$i43, in_$p46, in_$p47, in_$i48, in_$p51, in_$i52, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i88, in_$i89, in_$i90, in_$i91, in_$i45, in_$p44, in_$p93, in_$p94, in_$p95, in_$p96, in_$i97, in_$i98, in_$p39;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6129;

  $bb29:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$p39 := out_$p94;
    goto $bb29_dummy;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i64(out_$i97, in_$i37);
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$i97 := $p2i.ref.i64(out_$p96);
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6196;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p94);
    goto corral_source_split_6195;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_6194;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6193;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb16;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p39;
    goto $bb16;

  $bb27:
    assume !(out_$i91 == 1);
    goto corral_source_split_6191;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$i91 := $sgt.i32(out_$i90, out_$i88);
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i16.i32(out_$i89);
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i16($M.0, out_$p40);
    goto corral_source_split_6153;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i88 := $add.i32(out_$i45, 1);
    call {:si_unique_call 888} {:cexpr "i"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i56 == 1;
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    out_$p57, out_$i58 := out_$p39, out_$i45;
    assume true;
    goto $bb19;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i52, out_$i55);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i64($M.0, out_$p54);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p28, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i64($M.0, out_$p51);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p47, $mul.ref(out_$i48, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_6141;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p39, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    call out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i88, out_$i89, out_$i90, out_$i91, out_$i45 := mptsas_slave_alloc_loop_$bb17(in_$p28, out_$p40, out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i88, out_$i89, out_$i90, out_$i91, out_$i45, out_$p39);
    goto $bb17_last;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$i45 := 0;
    goto $bb17;

  $bb26:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i88;
    assume false;
    return;

  $bb14:
    assume out_$i43 == 1;
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p39;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$i43 := $sgt.i32(out_$i42, 0);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i41);
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i16($M.0, out_$p40);
    goto corral_source_split_6132;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p40, out_$i41, out_$i42, out_$i43, out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i88, out_$i89, out_$i90, out_$i91, out_$i45, out_$p44, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p39 := mptsas_slave_alloc_loop_$bb12(in_$p28, in_$i37, out_$p40, out_$i41, out_$i42, out_$i43, out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i88, out_$i89, out_$i90, out_$i91, out_$i45, out_$p44, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p39);
    return;

  exit:
    return;
}



procedure mptsas_slave_alloc_loop_$bb12(in_$p28: ref, in_$i37: i64, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i1, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i88: i32, in_$i89: i16, in_$i90: i32, in_$i91: i1, in_$i45: i32, in_$p44: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i1, in_$p39: ref) returns (out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i1, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i88: i32, out_$i89: i16, out_$i90: i32, out_$i91: i1, out_$i45: i32, out_$p44: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i1, out_$p39: ref);



implementation mptsas_target_alloc_loop_$bb31(in_$p73: ref, in_$p85: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p96: ref, in_$i97: i64, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$i103: i32, in_$i148: i32, in_$i149: i16, in_$i150: i32, in_$i151: i1, in_$i90: i32, in_$p84: ref) returns (out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p96: ref, out_$i97: i64, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$i103: i32, out_$i148: i32, out_$i149: i16, out_$i150: i32, out_$i151: i1, out_$i90: i32)
{

  entry:
    out_$p91, out_$p92, out_$i93, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i148, out_$i149, out_$i150, out_$i151, out_$i90 := in_$p91, in_$p92, in_$i93, in_$p96, in_$i97, in_$p99, in_$i100, in_$i101, in_$p102, in_$i103, in_$i148, in_$i149, in_$i150, in_$i151, in_$i90;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6362;

  $bb40:
    assume out_$i151 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := out_$i148;
    goto $bb40_dummy;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    out_$i151 := $sgt.i32(out_$i150, out_$i148);
    goto corral_source_split_6379;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i16.i32(out_$i149);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i16($M.0, in_$p85);
    goto corral_source_split_6377;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i148 := $add.i32(out_$i90, 1);
    call {:si_unique_call 911} {:cexpr "i"} boogie_si_record_i32(out_$i148);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i101 == 1;
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$p102, out_$i103 := in_$p84, out_$i90;
    assume true;
    goto $bb33;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i97, out_$i100);
    goto corral_source_split_6372;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i64($M.0, out_$p99);
    goto corral_source_split_6371;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref(in_$p73, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_6370;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i64($M.0, out_$p96);
    goto corral_source_split_6369;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6368;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    goto corral_source_split_6367;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i90);
    goto corral_source_split_6366;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_6365;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p84, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6364;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p91, out_$p92, out_$i93, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i148, out_$i149, out_$i150, out_$i151, out_$i90 := mptsas_target_alloc_loop_$bb31(in_$p73, in_$p85, out_$p91, out_$p92, out_$i93, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i148, out_$i149, out_$i150, out_$i151, out_$i90, in_$p84);
    return;

  exit:
    return;
}



procedure mptsas_target_alloc_loop_$bb31(in_$p73: ref, in_$p85: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p96: ref, in_$i97: i64, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$i103: i32, in_$i148: i32, in_$i149: i16, in_$i150: i32, in_$i151: i1, in_$i90: i32, in_$p84: ref) returns (out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p96: ref, out_$i97: i64, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$i103: i32, out_$i148: i32, out_$i149: i16, out_$i150: i32, out_$i151: i1, out_$i90: i32);



implementation mptsas_target_alloc_loop_$bb26(in_$p73: ref, in_$i82: i64, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p96: ref, in_$i97: i64, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$i103: i32, in_$i148: i32, in_$i149: i16, in_$i150: i32, in_$i151: i1, in_$i90: i32, in_$p89: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i64, in_$i158: i1, in_$p84: ref) returns (out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p96: ref, out_$i97: i64, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$i103: i32, out_$i148: i32, out_$i149: i16, out_$i150: i32, out_$i151: i1, out_$i90: i32, out_$p89: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i64, out_$i158: i1, out_$p84: ref)
{

  entry:
    out_$p85, out_$i86, out_$i87, out_$i88, out_$p91, out_$p92, out_$i93, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i148, out_$i149, out_$i150, out_$i151, out_$i90, out_$p89, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p84 := in_$p85, in_$i86, in_$i87, in_$i88, in_$p91, in_$p92, in_$i93, in_$p96, in_$i97, in_$p99, in_$i100, in_$i101, in_$p102, in_$i103, in_$i148, in_$i149, in_$i150, in_$i151, in_$i90, in_$p89, in_$p153, in_$p154, in_$p155, in_$p156, in_$i157, in_$i158, in_$p84;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6353;

  $bb43:
    assume out_$i158 == 1;
    assume {:verifier.code 0} true;
    out_$p84 := out_$p154;
    goto $bb43_dummy;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i64(out_$i157, in_$i82);
    goto corral_source_split_6437;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    out_$i157 := $p2i.ref.i64(out_$p156);
    goto corral_source_split_6436;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(out_$p155, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6435;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    out_$p155 := $bitcast.ref.ref(out_$p154);
    goto corral_source_split_6434;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    out_$p154 := $load.ref($M.0, out_$p153);
    goto corral_source_split_6433;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($add.ref(out_$p89, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6432;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i88 == 1);
    goto $bb30;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    out_$p89 := out_$p84;
    goto $bb30;

  $bb41:
    assume !(out_$i151 == 1);
    goto corral_source_split_6430;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    out_$i151 := $sgt.i32(out_$i150, out_$i148);
    goto corral_source_split_6379;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i16.i32(out_$i149);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i16($M.0, out_$p85);
    goto corral_source_split_6377;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i148 := $add.i32(out_$i90, 1);
    call {:si_unique_call 911} {:cexpr "i"} boogie_si_record_i32(out_$i148);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i101 == 1;
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$p102, out_$i103 := out_$p84, out_$i90;
    assume true;
    goto $bb33;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i97, out_$i100);
    goto corral_source_split_6372;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i64($M.0, out_$p99);
    goto corral_source_split_6371;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref(in_$p73, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_6370;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i64($M.0, out_$p96);
    goto corral_source_split_6369;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6368;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    goto corral_source_split_6367;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i90);
    goto corral_source_split_6366;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_6365;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p84, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6364;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    call out_$p91, out_$p92, out_$i93, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i148, out_$i149, out_$i150, out_$i151, out_$i90 := mptsas_target_alloc_loop_$bb31(in_$p73, out_$p85, out_$p91, out_$p92, out_$i93, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i148, out_$i149, out_$i150, out_$i151, out_$i90, out_$p84);
    goto $bb31_last;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6362;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    out_$i90 := 0;
    goto $bb31;

  $bb40:
    assume out_$i151 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := out_$i148;
    assume false;
    return;

  $bb28:
    assume out_$i88 == 1;
    goto corral_source_split_6360;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    out_$p89 := out_$p84;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    out_$i88 := $sgt.i32(out_$i87, 0);
    goto corral_source_split_6358;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i16.i32(out_$i86);
    goto corral_source_split_6357;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i16($M.0, out_$p85);
    goto corral_source_split_6356;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p84, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6355;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb43_dummy:
    call {:si_unique_call 1} out_$p85, out_$i86, out_$i87, out_$i88, out_$p91, out_$p92, out_$i93, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i148, out_$i149, out_$i150, out_$i151, out_$i90, out_$p89, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p84 := mptsas_target_alloc_loop_$bb26(in_$p73, in_$i82, out_$p85, out_$i86, out_$i87, out_$i88, out_$p91, out_$p92, out_$i93, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i148, out_$i149, out_$i150, out_$i151, out_$i90, out_$p89, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p84);
    return;

  exit:
    return;
}



procedure mptsas_target_alloc_loop_$bb26(in_$p73: ref, in_$i82: i64, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p96: ref, in_$i97: i64, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$i103: i32, in_$i148: i32, in_$i149: i16, in_$i150: i32, in_$i151: i1, in_$i90: i32, in_$p89: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i64, in_$i158: i1, in_$p84: ref) returns (out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p96: ref, out_$i97: i64, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$i103: i32, out_$i148: i32, out_$i149: i16, out_$i150: i32, out_$i151: i1, out_$i90: i32, out_$p89: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i64, out_$i158: i1, out_$p84: ref);



implementation mptsas_target_alloc_loop_$bb13(in_$p6: ref, in_$i20: i8, in_$p31: ref, in_$i40: i64, in_$p42: ref, in_$p43: ref, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i64, in_$p53: ref, in_$p54: ref, in_$p57: ref, in_$i58: i8, in_$i59: i8, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i38: i32, in_$i39: i8, in_$i66: i8) returns (out_$i40: i64, out_$p42: ref, out_$p43: ref, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i64, out_$p53: ref, out_$p54: ref, out_$p57: ref, out_$i58: i8, out_$i59: i8, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i38: i32, out_$i39: i8, out_$i66: i8)
{

  entry:
    out_$i40, out_$p42, out_$p43, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$p54, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i38, out_$i39, out_$i66 := in_$i40, in_$p42, in_$p43, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p53, in_$p54, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i38, in_$i39, in_$i66;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6297;

  $bb18:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i38, out_$i39 := out_$i60, out_$i59;
    goto $bb18_dummy;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i59;
    assume true;
    goto $bb18;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    out_$i65 := $sgt.i32(out_$i64, out_$i60);
    goto corral_source_split_6321;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i63);
    goto corral_source_split_6320;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.0, out_$p62);
    goto corral_source_split_6319;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p61, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, in_$p31);
    goto corral_source_split_6317;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i38, 1);
    call {:si_unique_call 909} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_6316;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6315;

  $bb16:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := out_$i39;
    goto $bb17;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i58;
    goto $bb17;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i8($M.0, out_$p57);
    call {:si_unique_call 908} {:cexpr "channel"} boogie_si_record_i8(out_$i58);
    goto corral_source_split_6313;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref($add.ref(out_$p54, $mul.ref(0, 20)), $mul.ref(12, 1)), $mul.ref(out_$i51, 8)), $mul.ref(1, 1));
    goto corral_source_split_6312;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_6311;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6310;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i38);
    goto corral_source_split_6309;

  $bb15:
    assume out_$i50 == 1;
    goto corral_source_split_6308;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i48, out_$i49);
    goto corral_source_split_6306;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(in_$i20);
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i47);
    goto corral_source_split_6304;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p46);
    goto corral_source_split_6303;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 20)), $mul.ref(12, 1)), $mul.ref(out_$i40, 8)), $mul.ref(0, 1));
    goto corral_source_split_6302;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_6301;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 5712)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6300;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i38);
    goto corral_source_split_6299;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i40, out_$p42, out_$p43, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$p54, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i38, out_$i39, out_$i66 := mptsas_target_alloc_loop_$bb13(in_$p6, in_$i20, in_$p31, out_$i40, out_$p42, out_$p43, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$p54, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i38, out_$i39, out_$i66);
    return;

  exit:
    return;
}



procedure mptsas_target_alloc_loop_$bb13(in_$p6: ref, in_$i20: i8, in_$p31: ref, in_$i40: i64, in_$p42: ref, in_$p43: ref, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i64, in_$p53: ref, in_$p54: ref, in_$p57: ref, in_$i58: i8, in_$i59: i8, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i38: i32, in_$i39: i8, in_$i66: i8) returns (out_$i40: i64, out_$p42: ref, out_$p43: ref, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i64, out_$p53: ref, out_$p54: ref, out_$p57: ref, out_$i58: i8, out_$i59: i8, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i38: i32, out_$i39: i8, out_$i66: i8);



implementation mptsas_target_destroy_loop_$bb17(in_$p0: ref, in_$p6: ref, in_$p30: ref, in_$p41: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p89: ref, in_$i90: i64, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$i97: i16, in_$i98: i32, in_$i99: i1, in_$i45: i32, in_$p40: ref, in_vslice_dummy_var_194: i32) returns (out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p89: ref, out_$i90: i64, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$i97: i16, out_$i98: i32, out_$i99: i1, out_$i45: i32, out_vslice_dummy_var_194: i32)
{

  entry:
    out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i45, out_vslice_dummy_var_194 := in_$p46, in_$p47, in_$i48, in_$p51, in_$i52, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$p65, in_$i66, in_$i67, in_$p68, in_$p69, in_$i70, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$p81, in_$i82, in_$i83, in_$p84, in_$p85, in_$i86, in_$p89, in_$i90, in_$p92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i45, in_vslice_dummy_var_194;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6511;

  $bb23:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i96;
    goto $bb23_dummy;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$i99 := $sgt.i32(out_$i98, out_$i96);
    goto corral_source_split_6528;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i16.i32(out_$i97);
    goto corral_source_split_6527;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i16($M.0, in_$p41);
    goto corral_source_split_6526;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i45, 1);
    call {:si_unique_call 926} {:cexpr "i"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_6525;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i56 == 1;
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i52, out_$i55);
    goto corral_source_split_6521;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i64($M.0, out_$p54);
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p30, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_6519;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i64($M.0, out_$p51);
    goto corral_source_split_6518;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p47, $mul.ref(out_$i48, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6517;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto corral_source_split_6516;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6515;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_6514;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6513;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} mptsas_set_starget(out_$p95, $0.ref);
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p93, $mul.ref(out_$i94, 112));
    goto corral_source_split_6564;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6563;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_6562;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} out_vslice_dummy_var_194 := dev_printk.ref.ref.ref.ref.i32.i32.i32.i64(.str.123, out_$p57, .str.158, out_$p59, out_$i67, out_$i75, out_$i83, out_$i90);
    goto corral_source_split_6560;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.0, out_$p89);
    goto corral_source_split_6559;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p85, $mul.ref(out_$i86, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6558;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    goto corral_source_split_6557;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.0, out_$p81);
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p77, $mul.ref(out_$i78, 112)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_6548;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.0, out_$p73);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(out_$p69, $mul.ref(out_$i70, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_6544;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    goto corral_source_split_6543;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6540;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_6539;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.0, out_$p65);
    goto corral_source_split_6538;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(out_$p61, $mul.ref(out_$i62, 112)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p6, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_6531;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1320)), $mul.ref(40, 1));
    goto corral_source_split_6530;

  $bb20:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i45, out_vslice_dummy_var_194 := mptsas_target_destroy_loop_$bb17(in_$p0, in_$p6, in_$p30, in_$p41, out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i45, in_$p40, out_vslice_dummy_var_194);
    return;

  exit:
    return;
}



procedure mptsas_target_destroy_loop_$bb17(in_$p0: ref, in_$p6: ref, in_$p30: ref, in_$p41: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p89: ref, in_$i90: i64, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$i97: i16, in_$i98: i32, in_$i99: i1, in_$i45: i32, in_$p40: ref, in_vslice_dummy_var_194: i32) returns (out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p89: ref, out_$i90: i64, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$i97: i16, out_$i98: i32, out_$i99: i1, out_$i45: i32, out_vslice_dummy_var_194: i32);
  modifies $M.0;



implementation mptsas_target_destroy_loop_$bb12(in_$p0: ref, in_$p6: ref, in_$p30: ref, in_$i38: i64, in_$p41: ref, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p89: ref, in_$i90: i64, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$i97: i16, in_$i98: i32, in_$i99: i1, in_$i45: i32, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p40: ref, in_vslice_dummy_var_194: i32) returns (out_$p41: ref, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p89: ref, out_$i90: i64, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$i97: i16, out_$i98: i32, out_$i99: i1, out_$i45: i32, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p40: ref, out_vslice_dummy_var_194: i32)
{

  entry:
    out_$p41, out_$i42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i45, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p40, out_vslice_dummy_var_194 := in_$p41, in_$i42, in_$i43, in_$i44, in_$p46, in_$p47, in_$i48, in_$p51, in_$i52, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$p65, in_$i66, in_$i67, in_$p68, in_$p69, in_$i70, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$p81, in_$i82, in_$i83, in_$p84, in_$p85, in_$i86, in_$p89, in_$i90, in_$p92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i45, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_$i106, in_$p40, in_vslice_dummy_var_194;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6502;

  $bb26:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$p40 := out_$p102;
    goto $bb26_dummy;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i64(out_$i105, in_$i38);
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    out_$i105 := $p2i.ref.i64(out_$p104);
    goto corral_source_split_6573;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(out_$p102);
    goto corral_source_split_6571;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_6570;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6569;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb16;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb24:
    assume !(out_$i99 == 1);
    goto corral_source_split_6567;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$i99 := $sgt.i32(out_$i98, out_$i96);
    goto corral_source_split_6528;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i16.i32(out_$i97);
    goto corral_source_split_6527;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i16($M.0, out_$p41);
    goto corral_source_split_6526;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i45, 1);
    call {:si_unique_call 926} {:cexpr "i"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_6525;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i56 == 1;
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i52, out_$i55);
    goto corral_source_split_6521;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i64($M.0, out_$p54);
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p30, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_6519;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i64($M.0, out_$p51);
    goto corral_source_split_6518;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p47, $mul.ref(out_$i48, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6517;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto corral_source_split_6516;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6515;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_6514;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6513;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    call out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i45, out_vslice_dummy_var_194 := mptsas_target_destroy_loop_$bb17(in_$p0, in_$p6, in_$p30, out_$p41, out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i45, out_$p40, out_vslice_dummy_var_194);
    goto $bb17_last;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6511;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$i45 := 0;
    goto $bb17;

  $bb23:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i96;
    assume false;
    return;

  $bb14:
    assume out_$i44 == 1;
    goto corral_source_split_6509;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, 0);
    goto corral_source_split_6507;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_6506;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p41);
    goto corral_source_split_6505;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6504;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} mptsas_set_starget(out_$p95, $0.ref);
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p93, $mul.ref(out_$i94, 112));
    goto corral_source_split_6564;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6563;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_6562;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} out_vslice_dummy_var_194 := dev_printk.ref.ref.ref.ref.i32.i32.i32.i64(.str.123, out_$p57, .str.158, out_$p59, out_$i67, out_$i75, out_$i83, out_$i90);
    goto corral_source_split_6560;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.0, out_$p89);
    goto corral_source_split_6559;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p85, $mul.ref(out_$i86, 112)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6558;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    goto corral_source_split_6557;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.0, out_$p81);
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p77, $mul.ref(out_$i78, 112)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_6548;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.0, out_$p73);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(out_$p69, $mul.ref(out_$i70, 112)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_6544;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    goto corral_source_split_6543;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6540;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_6539;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.0, out_$p65);
    goto corral_source_split_6538;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(out_$p61, $mul.ref(out_$i62, 112)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p6, $mul.ref(0, 5712)), $mul.ref(8, 1));
    goto corral_source_split_6531;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1320)), $mul.ref(40, 1));
    goto corral_source_split_6530;

  $bb20:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p41, out_$i42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i45, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p40, out_vslice_dummy_var_194 := mptsas_target_destroy_loop_$bb12(in_$p0, in_$p6, in_$p30, in_$i38, out_$p41, out_$i42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i45, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p40, out_vslice_dummy_var_194);
    return;

  exit:
    return;
}



procedure mptsas_target_destroy_loop_$bb12(in_$p0: ref, in_$p6: ref, in_$p30: ref, in_$i38: i64, in_$p41: ref, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p89: ref, in_$i90: i64, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$i97: i16, in_$i98: i32, in_$i99: i1, in_$i45: i32, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p40: ref, in_vslice_dummy_var_194: i32) returns (out_$p41: ref, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p89: ref, out_$i90: i64, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$i97: i16, out_$i98: i32, out_$i99: i1, out_$i45: i32, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p40: ref, out_vslice_dummy_var_194: i32);
  modifies $M.0;



implementation mptsas_del_device_component_by_os_loop_$bb4(in_$i1: i8, in_$i2: i8, in_$i14: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p16: ref, in_$p17: ref) returns (out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p32: ref, out_$p33: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p16: ref, out_$p17: ref)
{

  entry:
    out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$p35, out_$i36, out_$i37, out_$p16, out_$p17 := in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p32, in_$p33, in_$p35, in_$i36, in_$i37, in_$p16, in_$p17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6593;

  $bb12:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$p16, out_$p17 := out_$p33, out_$p16;
    goto $bb12_dummy;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, in_$i14);
    goto corral_source_split_6617;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_6616;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p16, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6615;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    goto corral_source_split_6614;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_6613;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6612;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p30, 1);
    goto corral_source_split_6610;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p17, $mul.ref(0, 56)), $mul.ref(51, 1));
    goto corral_source_split_6609;

  $bb9:
    assume out_$i29 == 1;
    goto corral_source_split_6608;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i27, out_$i28);
    goto corral_source_split_6606;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(in_$i2);
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_6603;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6602;

  $bb6:
    assume out_$i23 == 1;
    goto corral_source_split_6601;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i21, out_$i22);
    goto corral_source_split_6599;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i32(in_$i1);
    goto corral_source_split_6598;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_6597;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_6596;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_6595;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb8;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$p35, out_$i36, out_$i37, out_$p16, out_$p17 := mptsas_del_device_component_by_os_loop_$bb4(in_$i1, in_$i2, in_$i14, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$p35, out_$i36, out_$i37, out_$p16, out_$p17);
    return;

  exit:
    return;
}



procedure mptsas_del_device_component_by_os_loop_$bb4(in_$i1: i8, in_$i2: i8, in_$i14: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p16: ref, in_$p17: ref) returns (out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p32: ref, out_$p33: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p16: ref, out_$p17: ref);
  modifies $M.0;



implementation mptsas_add_device_component_starget_ir_loop_$bb48(in_$p1: ref, in_$i125: i64, in_$p129: ref, in_$i130: i8, in_$i131: i32, in_$i132: i1, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$p143: ref, in_$p144: ref, in_$p146: ref, in_$i147: i64, in_$i148: i1, in_$p127: ref, in_$p128: ref) returns (out_$p129: ref, out_$i130: i8, out_$i131: i32, out_$i132: i1, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$p143: ref, out_$p144: ref, out_$p146: ref, out_$i147: i64, out_$i148: i1, out_$p127: ref, out_$p128: ref)
{

  entry:
    out_$p129, out_$i130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p143, out_$p144, out_$p146, out_$i147, out_$i148, out_$p127, out_$p128 := in_$p129, in_$i130, in_$i131, in_$i132, in_$p134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$p140, in_$p141, in_$p143, in_$p144, in_$p146, in_$i147, in_$i148, in_$p127, in_$p128;
    goto $bb48, exit;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6832;

  $bb56:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$p127, out_$p128 := out_$p144, out_$p127;
    goto $bb56_dummy;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    out_$i148 := $ne.i64(out_$i147, in_$i125);
    goto corral_source_split_6858;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$i147 := $p2i.ref.i64(out_$p146);
    goto corral_source_split_6857;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(out_$p127, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6856;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    goto corral_source_split_6855;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.0, out_$p143);
    goto corral_source_split_6854;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($add.ref(out_$p127, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6853;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} kfree(out_$p141);
    goto corral_source_split_6851;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    out_$p141 := $bitcast.ref.ref(out_$p128);
    goto corral_source_split_6850;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} list_del(out_$p140);
    goto corral_source_split_6849;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p128, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6848;

  $bb53:
    assume out_$i139 == 1;
    goto corral_source_split_6847;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i136, out_$i138);
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.0, out_$p137);
    goto corral_source_split_6844;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_6843;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i8.i32(out_$i135);
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i8($M.0, out_$p134);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref(out_$p128, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_6840;

  $bb50:
    assume out_$i132 == 1;
    goto corral_source_split_6839;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i32(out_$i131, 0);
    goto corral_source_split_6837;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    out_$i131 := $zext.i8.i32(out_$i130);
    goto corral_source_split_6836;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i8($M.0, out_$p129);
    goto corral_source_split_6835;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p128, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i132 == 1);
    goto $bb52;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i139 == 1);
    goto $bb52;

  $bb56_dummy:
    call {:si_unique_call 1} out_$p129, out_$i130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p143, out_$p144, out_$p146, out_$i147, out_$i148, out_$p127, out_$p128 := mptsas_add_device_component_starget_ir_loop_$bb48(in_$p1, in_$i125, out_$p129, out_$i130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p143, out_$p144, out_$p146, out_$i147, out_$i148, out_$p127, out_$p128);
    return;

  exit:
    return;
}



procedure mptsas_add_device_component_starget_ir_loop_$bb48(in_$p1: ref, in_$i125: i64, in_$p129: ref, in_$i130: i8, in_$i131: i32, in_$i132: i1, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$p143: ref, in_$p144: ref, in_$p146: ref, in_$i147: i64, in_$i148: i1, in_$p127: ref, in_$p128: ref) returns (out_$p129: ref, out_$i130: i8, out_$i131: i32, out_$i132: i1, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$p143: ref, out_$p144: ref, out_$p146: ref, out_$i147: i64, out_$i148: i1, out_$p127: ref, out_$p128: ref);



implementation mptsas_add_device_component_starget_ir_loop_$bb29(in_$p1: ref, in_$p5: ref, in_$i73: i64, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$i87: i1, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i8, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$p75: ref) returns (out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$i87: i1, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i8, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$p75: ref)
{

  entry:
    out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p75 := in_$p76, in_$i77, in_$i78, in_$i79, in_$p81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$p89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p100, in_$p102, in_$p103, in_$p104, in_$p105, in_$i106, in_$i107, in_$p75;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_6768;

  $bb39:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$p75 := out_$p103;
    goto $bb39_dummy;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i64(out_$i106, in_$i73);
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p104, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(out_$p103);
    goto corral_source_split_6804;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_6803;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6802;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p100, out_$i99);
    goto corral_source_split_6800;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(50, 1));
    goto corral_source_split_6799;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i32.i8(out_$i98);
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.0, out_$p97);
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_6796;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p96, 1);
    goto corral_source_split_6795;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_6794;

  $bb36:
    assume out_$i95 == 1;
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i91, out_$i94);
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i8.i32(out_$i93);
    goto corral_source_split_6790;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i8($M.90, out_$p92);
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p5, $mul.ref(0, 120)), $mul.ref(4, 1));
    goto corral_source_split_6788;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i8.i32(out_$i90);
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i8($M.0, out_$p89);
    goto corral_source_split_6786;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_6785;

  $bb34:
    assume out_$i87 == 1;
    goto corral_source_split_6784;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i83, out_$i86);
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i8.i32(out_$i85);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i8($M.89, out_$p84);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p5, $mul.ref(0, 120)), $mul.ref(5, 1));
    goto corral_source_split_6779;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_6778;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.0, out_$p81);
    goto corral_source_split_6777;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_6776;

  $bb31:
    assume out_$i79 == 1;
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 0);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_6771;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6770;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1);
    goto $bb33;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb33;

  $bb39_dummy:
    call {:si_unique_call 1} out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p75 := mptsas_add_device_component_starget_ir_loop_$bb29(in_$p1, in_$p5, in_$i73, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p75);
    return;

  exit:
    return;
}



procedure mptsas_add_device_component_starget_ir_loop_$bb29(in_$p1: ref, in_$p5: ref, in_$i73: i64, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$i87: i1, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i8, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$p75: ref) returns (out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$i87: i1, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i8, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$p75: ref);
  modifies $M.0;



implementation mptsas_add_device_component_starget_ir_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p31: ref, in_$p43: ref, in_$i48: i64, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i8, in_$i59: i32, in_$i60: i8, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i8, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$i87: i1, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i8, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$p75: ref, in_$p108: ref, in_$i109: i32, in_$i110: i8, in_$i111: i32, in_$i112: i1, in_$i47: i32) returns (out_$i48: i64, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i8, out_$i59: i32, out_$i60: i8, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i8, out_$p65: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$i87: i1, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i8, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$p75: ref, out_$p108: ref, out_$i109: i32, out_$i110: i8, out_$i111: i32, out_$i112: i1, out_$i47: i32)
{

  entry:
    out_$i48, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p75, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i47 := in_$i48, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$p67, in_$p68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$p76, in_$i77, in_$i78, in_$i79, in_$p81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$p89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p100, in_$p102, in_$p103, in_$p104, in_$p105, in_$i106, in_$i107, in_$p75, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i47;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_6729;

  $bb42:
    assume out_$i112 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := out_$i109;
    goto $bb42_dummy;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i112 := $sgt.i32(out_$i111, out_$i109);
    goto corral_source_split_6744;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    out_$i111 := $zext.i8.i32(out_$i110);
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i8($M.88, in_$p43);
    goto corral_source_split_6742;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i47, 1);
    call {:si_unique_call 958} {:cexpr "i"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_6741;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i56 == 1;
    goto corral_source_split_6739;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_6737;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} out_$i55 := mpt_raid_phys_disk_pg0(in_$p0, out_$i54, in_$p5);
    call {:si_unique_call 957} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_6736;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i8(out_$i53);
    goto corral_source_split_6735;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.88, out_$p51);
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref($add.ref(in_$p31, $mul.ref(0, 44)), $mul.ref(40, 1)), $mul.ref(out_$i48, 4)), $mul.ref(3, 1));
    goto corral_source_split_6732;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_6731;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_300:
    goto corral_source_split_6812;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} ldv_mutex_unlock_13(out_$p108);
    goto SeqInstr_299;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_6811;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb28;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb40:
    assume !(out_$i107 == 1);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i64(out_$i106, out_$i73);
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p104, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(out_$p103);
    goto corral_source_split_6804;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_6803;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6802;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p100, out_$i99);
    goto corral_source_split_6800;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(50, 1));
    goto corral_source_split_6799;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i32.i8(out_$i98);
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.0, out_$p97);
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_6796;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p96, 1);
    goto corral_source_split_6795;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_6794;

  $bb36:
    assume out_$i95 == 1;
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i91, out_$i94);
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i8.i32(out_$i93);
    goto corral_source_split_6790;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i8($M.90, out_$p92);
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p5, $mul.ref(0, 120)), $mul.ref(4, 1));
    goto corral_source_split_6788;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i8.i32(out_$i90);
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i8($M.0, out_$p89);
    goto corral_source_split_6786;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_6785;

  $bb34:
    assume out_$i87 == 1;
    goto corral_source_split_6784;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i83, out_$i86);
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i8.i32(out_$i85);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i8($M.89, out_$p84);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p5, $mul.ref(0, 120)), $mul.ref(5, 1));
    goto corral_source_split_6779;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_6778;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.0, out_$p81);
    goto corral_source_split_6777;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_6776;

  $bb31:
    assume out_$i79 == 1;
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 0);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_6771;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6770;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    call out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p75 := mptsas_add_device_component_starget_ir_loop_$bb29(in_$p1, in_$p5, out_$i73, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p75);
    goto $bb29_last;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6768;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    out_$p75 := out_$p68;
    goto $bb29;

  $bb39:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$p75 := out_$p103;
    assume false;
    return;

  $bb26:
    assume out_$i74 == 1;
    goto corral_source_split_6766;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i71, out_$i73);
    goto corral_source_split_6764;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_6763;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2248, 1));
    goto corral_source_split_6762;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i71 := $p2i.ref.i64(out_$p70);
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p69, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_6759;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2248, 1)), $mul.ref(0, 1));
    goto corral_source_split_6757;

  SeqInstr_297:
    goto corral_source_split_6756;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} ldv_mutex_lock_12(out_$p65);
    goto SeqInstr_296;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(2264, 1));
    goto corral_source_split_6755;

  SeqInstr_294:
    goto corral_source_split_6754;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} mptsas_add_device_component_by_fw(in_$p0, out_$i60, out_$i64);
    goto SeqInstr_293;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i32.i8(out_$i63);
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.90, out_$p61);
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p5, $mul.ref(0, 120)), $mul.ref(4, 1));
    goto corral_source_split_6750;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i32.i8(out_$i59);
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32(out_$i58);
    goto corral_source_split_6748;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i8($M.89, out_$p57);
    goto corral_source_split_6747;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p5, $mul.ref(0, 120)), $mul.ref(5, 1));
    goto corral_source_split_6746;

  $bb23:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1);
    goto $bb33;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb33;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i48, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p75, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i47 := mptsas_add_device_component_starget_ir_loop_$bb20(in_$p0, in_$p1, in_$p5, in_$p31, in_$p43, out_$i48, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p75, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i47);
    return;

  exit:
    return;
}



procedure mptsas_add_device_component_starget_ir_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p31: ref, in_$p43: ref, in_$i48: i64, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i8, in_$i59: i32, in_$i60: i8, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i8, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$i87: i1, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i8, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$p75: ref, in_$p108: ref, in_$i109: i32, in_$i110: i8, in_$i111: i32, in_$i112: i1, in_$i47: i32) returns (out_$i48: i64, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i8, out_$i59: i32, out_$i60: i8, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i8, out_$p65: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$i87: i1, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i8, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$p75: ref, out_$p108: ref, out_$i109: i32, out_$i110: i8, out_$i111: i32, out_$i112: i1, out_$i47: i32);
  modifies $M.44, assertsPassed, $M.0, $M.1, $M.2, $M.55, $M.9, $M.28, $CurrAddr;



implementation mptsas_add_device_component_loop_$bb27(in_$p0: ref, in_$i3: i64, in_$p52: ref, in_$p72: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$i83: i8, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i8, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$p71: ref) returns (out_$p72: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$i83: i8, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i8, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$p71: ref)
{

  entry:
    out_$p72, out_$p74, out_$p75, out_$p76, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p85, out_$p86, out_$i87, out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p71 := in_$p72, in_$p74, in_$p75, in_$p76, in_$p78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$p85, in_$p86, in_$i87, in_$i88, in_$p90, in_$p91, in_$p92, in_$p93, in_$i94, in_$i95, in_$p71;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_7042;

  $bb32:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$p71 := out_$p93;
    goto $bb32_dummy;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i64(out_$i94, 0);
    goto corral_source_split_7068;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p93);
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} out_$p93 := __scsi_iterate_devices(out_$p92, out_$p71);
    goto corral_source_split_7066;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_7065;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5712)), $mul.ref(680, 1));
    goto corral_source_split_7064;

  $bb30:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p90, out_$i88);
    goto corral_source_split_7062;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref(in_$p52, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_7061;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i32.i8(out_$i87);
    goto corral_source_split_7060;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_7059;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p72, $mul.ref(0, 1320)), $mul.ref(1188, 1));
    goto corral_source_split_7058;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p85, out_$i83);
    goto corral_source_split_7057;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref(in_$p52, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7056;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i32.i8(out_$i82);
    goto corral_source_split_7055;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, out_$p81);
    goto corral_source_split_7054;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p72, $mul.ref(0, 1320)), $mul.ref(1192, 1));
    goto corral_source_split_7053;

  $bb29:
    assume out_$i80 == 1;
    goto corral_source_split_7052;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i64(out_$i79, in_$i3);
    goto corral_source_split_7050;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i64($M.0, out_$p78);
    goto corral_source_split_7049;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(out_$p76, $mul.ref(0, 1208)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_7048;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_7047;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_7046;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p72, $mul.ref(0, 1320)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_7045;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} out_$p72 := scsi_target(out_$p71);
    goto corral_source_split_7044;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p72, out_$p74, out_$p75, out_$p76, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p85, out_$p86, out_$i87, out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p71 := mptsas_add_device_component_loop_$bb27(in_$p0, in_$i3, in_$p52, out_$p72, out_$p74, out_$p75, out_$p76, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p85, out_$p86, out_$i87, out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p71);
    return;

  exit:
    return;
}



procedure mptsas_add_device_component_loop_$bb27(in_$p0: ref, in_$i3: i64, in_$p52: ref, in_$p72: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$i83: i8, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i8, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$p71: ref) returns (out_$p72: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$i83: i8, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i8, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$p71: ref);
  modifies $M.0;



implementation mptsas_add_device_component_loop_$bb4(in_$i1: i8, in_$i2: i8, in_$i3: i64, in_$i19: i64, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p21: ref, in_$p22: ref) returns (out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p21: ref, out_$p22: ref)
{

  entry:
    out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p48, out_$i49, out_$i50, out_$p21, out_$p22 := in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p45, in_$p46, in_$p48, in_$i49, in_$i50, in_$p21, in_$p22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6967;

  $bb17:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p21, out_$p22 := out_$p46, out_$p21;
    goto $bb17_dummy;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, in_$i19);
    goto corral_source_split_7003;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_7002;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p21, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7001;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_6999;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6998;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} kfree(out_$p43);
    goto corral_source_split_6982;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} list_del(out_$p42);
    goto corral_source_split_6980;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p22, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6979;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i41 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i29 == 1;
    goto $bb10;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, in_$i3);
    goto corral_source_split_6977;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p22, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6975;

  $bb6:
    assume out_$i26 == 1;
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_6971;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, out_$p23);
    goto corral_source_split_6970;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6969;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i39, out_$i40);
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(in_$i2);
    goto corral_source_split_6995;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i38);
    goto corral_source_split_6994;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.0, out_$p37);
    goto corral_source_split_6993;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_6992;

  $bb12:
    assume out_$i35 == 1;
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i33, out_$i34);
    goto corral_source_split_6989;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(in_$i1);
    goto corral_source_split_6988;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i8.i32(out_$i32);
    goto corral_source_split_6987;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i8($M.0, out_$p31);
    goto corral_source_split_6986;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 56)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_6985;

  $bb11:
    assume !(out_$i29 == 1);
    goto corral_source_split_6984;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb8;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb8;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p48, out_$i49, out_$i50, out_$p21, out_$p22 := mptsas_add_device_component_loop_$bb4(in_$i1, in_$i2, in_$i3, in_$i19, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p48, out_$i49, out_$i50, out_$p21, out_$p22);
    return;

  exit:
    return;
}



procedure mptsas_add_device_component_loop_$bb4(in_$i1: i8, in_$i2: i8, in_$i3: i64, in_$i19: i64, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p21: ref, in_$p22: ref) returns (out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p21: ref, out_$p22: ref);



implementation main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i18: i32, in_$i2: i32, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_vslice_dummy_var_197: i32, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: i32, in_vslice_dummy_var_200: i32, in_vslice_dummy_var_201: i32, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i18: i32, out_$i2: i32, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_vslice_dummy_var_197: i32, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: i32, out_vslice_dummy_var_200: i32, out_vslice_dummy_var_201: i32, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i18, out_$i2, out_$i33, out_$i34, out_$i35, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i18, in_$i2, in_$i33, in_$i34, in_$i35, in_vslice_dummy_var_197, in_vslice_dummy_var_198, in_vslice_dummy_var_199, in_vslice_dummy_var_200, in_vslice_dummy_var_201, in_vslice_dummy_var_202, in_vslice_dummy_var_203, in_vslice_dummy_var_204;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7159;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    out_$i2 := out_$i18;
    goto corral_source_split_7209_dummy;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7209;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i32;
    goto $bb35;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i30;
    goto $bb35;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  SeqInstr_372:
    goto corral_source_split_7207;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} out_vslice_dummy_var_204 := mptsas_target_alloc($u0);
    goto SeqInstr_371;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} ldv_handler_precall();
    goto corral_source_split_7206;

  $bb33:
    assume out_$i16 == 1;
    goto corral_source_split_7205;

  $bb29:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb23:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb8:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1036} out_$i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1037} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i3);
    call {:si_unique_call 1038} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb50:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    assume out_$i34 == 1;
    goto $bb48;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb49;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_7161;

  corral_source_split_7159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1033} out_$i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 1034} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i33);
    call {:si_unique_call 1035} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_7160;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i2, 0);
    goto corral_source_split_7233;

  $bb49:
    assume !(out_$i34 == 1);
    goto corral_source_split_7232;

  SeqInstr_366:
    goto corral_source_split_7199;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} out_vslice_dummy_var_202 := mptsas_slave_alloc($u1);
    goto SeqInstr_365;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} ldv_handler_precall();
    goto corral_source_split_7198;

  $bb31:
    assume out_$i15 == 1;
    goto corral_source_split_7197;

  $bb30:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  SeqInstr_369:
    goto corral_source_split_7203;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} out_vslice_dummy_var_203 := mptsas_slave_configure($u1);
    goto SeqInstr_368;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} ldv_handler_precall();
    goto corral_source_split_7202;

  $bb32:
    assume !(out_$i15 == 1);
    goto corral_source_split_7201;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} mptsas_target_destroy($u0);
    goto corral_source_split_7187;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} ldv_handler_precall();
    goto corral_source_split_7186;

  $bb25:
    assume out_$i12 == 1;
    goto corral_source_split_7185;

  $bb24:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} out_vslice_dummy_var_200 := mptsas_get_linkerrors($u2);
    goto corral_source_split_7191;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ldv_handler_precall();
    goto corral_source_split_7190;

  $bb27:
    assume out_$i13 == 1;
    goto corral_source_split_7189;

  $bb26:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  SeqInstr_363:
    goto corral_source_split_7195;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} out_vslice_dummy_var_201 := mptsas_get_enclosure_identifier($u3, $u4);
    goto SeqInstr_362;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} ldv_handler_precall();
    goto corral_source_split_7194;

  $bb28:
    assume !(out_$i13 == 1);
    goto corral_source_split_7193;

  SeqInstr_354:
    goto corral_source_split_7175;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} out_vslice_dummy_var_197 := mptsas_get_bay_identifier($u3);
    goto SeqInstr_353;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} ldv_handler_precall();
    goto corral_source_split_7174;

  $bb19:
    assume out_$i9 == 1;
    goto corral_source_split_7173;

  $bb10:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb9:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i3, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  SeqInstr_357:
    goto corral_source_split_7179;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} out_vslice_dummy_var_198 := mptsas_phy_reset($u2, $u5);
    goto SeqInstr_356;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_handler_precall();
    goto corral_source_split_7178;

  $bb21:
    assume out_$i10 == 1;
    goto corral_source_split_7177;

  $bb20:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  SeqInstr_360:
    goto corral_source_split_7183;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} out_vslice_dummy_var_199 := mptsas_smp_handler($u6, $u3, $u7);
    goto SeqInstr_359;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} ldv_handler_precall();
    goto corral_source_split_7182;

  $bb22:
    assume !(out_$i10 == 1);
    goto corral_source_split_7181;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_7224;

  $bb37:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := out_$i2;
    goto $bb42;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i29;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i2, 1);
    call {:si_unique_call 1065} {:cexpr "ldv_s_mptsas_driver_pci_driver"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_7222;

  $bb39:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_7215;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_check_return_value_probe(out_$i27);
    goto corral_source_split_7214;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} ldv_check_return_value(out_$i27);
    goto corral_source_split_7213;

  SeqInstr_375:
    call {:si_unique_call 1060} {:cexpr "res_mptsas_probe_91"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_7212;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} out_$i27 := mptsas_probe($u8, $u9);
    goto SeqInstr_374;

  $bb36:
    assume out_$i26 == 1;
    goto corral_source_split_7211;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i2, 0);
    goto corral_source_split_7164;

  $bb12:
    assume out_$i6 == 1;
    goto corral_source_split_7163;

  $bb11:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i3, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_7230;

  $bb44:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i2;
    goto $bb45;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    out_$i32 := 0;
    goto $bb45;

  SeqInstr_378:
    goto corral_source_split_7228;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} mptsas_remove($u8);
    goto SeqInstr_377;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} ldv_handler_precall();
    goto corral_source_split_7227;

  $bb43:
    assume out_$i31 == 1;
    goto corral_source_split_7226;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i2, 1);
    goto corral_source_split_7167;

  $bb14:
    assume out_$i7 == 1;
    goto corral_source_split_7166;

  $bb13:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i3, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} mptsas_shutdown($u8);
    goto corral_source_split_7171;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} ldv_handler_precall();
    goto corral_source_split_7170;

  $bb16:
    assume out_$i8 == 1;
    goto corral_source_split_7169;

  $bb15:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i3, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb18;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb18;

  corral_source_split_7209_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i18, out_$i2, out_$i33, out_$i34, out_$i35, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204 := main_loop_$bb5(out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i18, out_$i2, out_$i33, out_$i34, out_$i35, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i18: i32, in_$i2: i32, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_vslice_dummy_var_197: i32, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: i32, in_vslice_dummy_var_200: i32, in_vslice_dummy_var_201: i32, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i18: i32, out_$i2: i32, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_vslice_dummy_var_197: i32, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: i32, out_vslice_dummy_var_200: i32, out_vslice_dummy_var_201: i32, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: i32);
  modifies $M.0, $M.26, assertsPassed, $CurrAddr, $M.2, $M.1, $M.9, $M.28, $M.55, $M.44, $M.10, $M.25, $M.18, $M.19, $M.42, $M.61, $M.81, $M.4;


