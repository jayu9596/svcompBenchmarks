var $M.0: [ref]i8;

var $M.2: [ref]i8;

var $M.3: [ref]i32;

var $M.4: [ref]i32;

var $M.7: [ref]ref;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i24;

var $M.13: [ref]i8;

var $M.15: [ref]ref;

var $M.16: [ref]i32;

var $M.17: [ref]i8;

var $M.18: [ref]i8;

var $M.19: i32;

var $M.38: i8;

var $M.39: [ref]ref;

var $M.40: [ref]ref;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]i24;

var $M.44: [ref]i8;

var $M.45: i32;

var $M.46: [ref]i32;

var $M.49: ref;

var $M.50: i32;

var $M.51: ref;

var $M.52: i32;

var $M.53: ref;

var $M.54: i32;

var $M.55: ref;

var $M.56: i32;

var $M.57: ref;

var $M.60: [ref]ref;

var $M.61: [ref]ref;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]i16;

var $M.65: [ref]ref;

var $M.69: [ref]i32;

var $M.71: [ref]i64;

var $M.72: [ref]i8;

var $M.73: ref;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: ref;

var $M.99: ref;

var $M.100: ref;

var $M.104: [ref]i8;

var $M.105: [ref]i8;

var $M.106: [ref]i8;

var $M.107: [ref]i8;

var $M.108: [ref]i8;

var $M.109: [ref]i8;

var $M.110: [ref]i8;

var $M.111: [ref]i8;

var $M.112: [ref]i8;

var $M.113: [ref]i8;

var $M.114: [ref]i8;

var $M.115: [ref]i8;

var $M.116: [ref]i8;

var $M.117: [ref]i8;

var $M.118: [ref]i8;

var $M.119: [ref]i8;

var $M.120: [ref]i8;

var $M.121: [ref]i8;

var $M.122: [ref]i8;

var $M.123: [ref]i8;

var $M.124: [ref]i8;

var $M.125: [ref]i8;

var $M.126: [ref]i8;

var $M.127: [ref]i8;

var $M.128: [ref]i8;

var $M.129: [ref]i8;

var $M.130: [ref]i8;

var $M.131: [ref]i8;

var $M.132: [ref]i8;

var $M.133: [ref]i8;

var $M.134: [ref]i8;

var $M.135: [ref]i8;

var $M.136: [ref]i8;

var $M.137: [ref]i8;

var $M.138: [ref]i8;

var $M.139: [ref]i8;

var $M.140: [ref]i8;

var $M.141: [ref]i8;

var $M.142: [ref]i8;

var $M.143: [ref]i8;

var $M.144: [ref]i8;

var $M.145: [ref]i8;

var $M.146: [ref]i8;

var $M.147: [ref]i8;

var $M.148: [ref]i8;

var $M.149: [ref]i8;

var $M.150: [ref]i8;

var $M.151: [ref]i8;

var $M.152: [ref]i8;

var $M.153: [ref]i8;

var $M.154: [ref]i8;

var $M.155: [ref]i8;

var $M.156: [ref]i8;

var $M.157: [ref]i8;

var $M.158: [ref]i8;

var $M.159: [ref]i8;

var $M.160: [ref]i8;

var $M.161: [ref]i8;

var $M.162: [ref]i8;

var $M.163: [ref]i8;

var $M.278: [ref]i8;

var $M.279: [ref]i8;

var $M.280: [ref]i8;

var $M.281: [ref]i8;

var $M.282: [ref]i8;

var $M.283: [ref]i8;

var $M.284: [ref]i8;

var $M.285: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 592392);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_rio_add_device: ref;

axiom __ksymtab_rio_add_device == $sub.ref(0, 2068);

const {:count 15} __kstrtab_rio_add_device: ref;

axiom __kstrtab_rio_add_device == $sub.ref(0, 3107);

const dev_attr_sys_size: ref;

axiom dev_attr_sys_size == $sub.ref(0, 4179);

const dev_attr_port_destid: ref;

axiom dev_attr_port_destid == $sub.ref(0, 5251);

const {:count 3} rio_mport_attrs: ref;

axiom rio_mport_attrs == $sub.ref(0, 6299);

const rio_mport_group: ref;

axiom rio_mport_group == $sub.ref(0, 7355);

const bus_attr_scan: ref;

axiom bus_attr_scan == $sub.ref(0, 8427);

const {:count 2} rio_bus_attrs: ref;

axiom rio_bus_attrs == $sub.ref(0, 9467);

const rio_bus_group: ref;

axiom rio_bus_group == $sub.ref(0, 10523);

const dev_attr_hopcount: ref;

axiom dev_attr_hopcount == $sub.ref(0, 11595);

const dev_attr_lnext: ref;

axiom dev_attr_lnext == $sub.ref(0, 12667);

const dev_attr_routes: ref;

axiom dev_attr_routes == $sub.ref(0, 13739);

const rio_config_attr: ref;

axiom rio_config_attr == $sub.ref(0, 14835);

const dev_attr_modalias: ref;

axiom dev_attr_modalias == $sub.ref(0, 15907);

const dev_attr_destid: ref;

axiom dev_attr_destid == $sub.ref(0, 16979);

const dev_attr_lprev: ref;

axiom dev_attr_lprev == $sub.ref(0, 18051);

const dev_attr_asm_rev: ref;

axiom dev_attr_asm_rev == $sub.ref(0, 19123);

const dev_attr_asm_vid: ref;

axiom dev_attr_asm_vid == $sub.ref(0, 20195);

const dev_attr_asm_did: ref;

axiom dev_attr_asm_did == $sub.ref(0, 21267);

const dev_attr_device_rev: ref;

axiom dev_attr_device_rev == $sub.ref(0, 22339);

const dev_attr_vid: ref;

axiom dev_attr_vid == $sub.ref(0, 23411);

const dev_attr_did: ref;

axiom dev_attr_did == $sub.ref(0, 24483);

const {:count 10} rio_dev_attrs: ref;

axiom rio_dev_attrs == $sub.ref(0, 25587);

const rio_dev_group: ref;

axiom rio_dev_group == $sub.ref(0, 26643);

const {:count 12} __kstrtab_rio_dev_put: ref;

axiom __kstrtab_rio_dev_put == $sub.ref(0, 27679);

const {:count 12} __kstrtab_rio_dev_get: ref;

axiom __kstrtab_rio_dev_get == $sub.ref(0, 28715);

const {:count 13} __kstrtab_rio_bus_type: ref;

axiom __kstrtab_rio_bus_type == $sub.ref(0, 29752);

const {:count 22} __kstrtab_rio_unregister_driver: ref;

axiom __kstrtab_rio_unregister_driver == $sub.ref(0, 30798);

const {:count 20} __kstrtab_rio_register_driver: ref;

axiom __kstrtab_rio_register_driver == $sub.ref(0, 31842);

const {:count 16} __kstrtab_rio_mport_class: ref;

axiom __kstrtab_rio_mport_class == $sub.ref(0, 32882);

const {:count 18} __kstrtab_rio_attach_device: ref;

axiom __kstrtab_rio_attach_device == $sub.ref(0, 33924);

const {:count 24} __kstrtab_rio_mport_send_doorbell: ref;

axiom __kstrtab_rio_mport_send_doorbell == $sub.ref(0, 34972);

const rio_doorbell_lock: ref;

axiom rio_doorbell_lock == $sub.ref(0, 36068);

const {:count 26} __kstrtab_rio_mport_write_config_32: ref;

axiom __kstrtab_rio_mport_write_config_32 == $sub.ref(0, 37118);

const {:count 26} __kstrtab_rio_mport_write_config_16: ref;

axiom __kstrtab_rio_mport_write_config_16 == $sub.ref(0, 38168);

const {:count 25} __kstrtab_rio_mport_write_config_8: ref;

axiom __kstrtab_rio_mport_write_config_8 == $sub.ref(0, 39217);

const {:count 25} __kstrtab_rio_mport_read_config_32: ref;

axiom __kstrtab_rio_mport_read_config_32 == $sub.ref(0, 40266);

const {:count 25} __kstrtab_rio_mport_read_config_16: ref;

axiom __kstrtab_rio_mport_read_config_16 == $sub.ref(0, 41315);

const {:count 24} __kstrtab_rio_mport_read_config_8: ref;

axiom __kstrtab_rio_mport_read_config_8 == $sub.ref(0, 42363);

const {:count 28} __kstrtab___rio_local_write_config_32: ref;

axiom __kstrtab___rio_local_write_config_32 == $sub.ref(0, 43415);

const {:count 28} __kstrtab___rio_local_write_config_16: ref;

axiom __kstrtab___rio_local_write_config_16 == $sub.ref(0, 44467);

const {:count 27} __kstrtab___rio_local_write_config_8: ref;

axiom __kstrtab___rio_local_write_config_8 == $sub.ref(0, 45518);

const {:count 27} __kstrtab___rio_local_read_config_32: ref;

axiom __kstrtab___rio_local_read_config_32 == $sub.ref(0, 46569);

const {:count 27} __kstrtab___rio_local_read_config_16: ref;

axiom __kstrtab___rio_local_read_config_16 == $sub.ref(0, 47620);

const {:count 26} __kstrtab___rio_local_read_config_8: ref;

axiom __kstrtab___rio_local_read_config_8 == $sub.ref(0, 48670);

const rio_config_lock: ref;

axiom rio_config_lock == $sub.ref(0, 49766);

const {:count 16} __kstrtab_rio_init_mports: ref;

axiom __kstrtab_rio_init_mports == $sub.ref(0, 50806);

const {:count 22} __kstrtab_rio_release_outb_mbox: ref;

axiom __kstrtab_rio_release_outb_mbox == $sub.ref(0, 51852);

const {:count 22} __kstrtab_rio_request_outb_mbox: ref;

axiom __kstrtab_rio_request_outb_mbox == $sub.ref(0, 52898);

const {:count 21} __kstrtab_rio_release_inb_mbox: ref;

axiom __kstrtab_rio_release_inb_mbox == $sub.ref(0, 53943);

const {:count 21} __kstrtab_rio_request_inb_mbox: ref;

axiom __kstrtab_rio_request_inb_mbox == $sub.ref(0, 54988);

const {:count 23} __kstrtab_rio_release_outb_dbell: ref;

axiom __kstrtab_rio_release_outb_dbell == $sub.ref(0, 56035);

const {:count 23} __kstrtab_rio_request_outb_dbell: ref;

axiom __kstrtab_rio_request_outb_dbell == $sub.ref(0, 57082);

const {:count 22} __kstrtab_rio_release_inb_dbell: ref;

axiom __kstrtab_rio_release_inb_dbell == $sub.ref(0, 58128);

const {:count 22} __kstrtab_rio_request_inb_dbell: ref;

axiom __kstrtab_rio_request_inb_dbell == $sub.ref(0, 59174);

const {:count 12} __kstrtab_rio_get_asm: ref;

axiom __kstrtab_rio_get_asm == $sub.ref(0, 60210);

const {:count 15} __kstrtab_rio_get_device: ref;

axiom __kstrtab_rio_get_device == $sub.ref(0, 61249);

const {:count 24} __kstrtab_rio_local_get_device_id: ref;

axiom __kstrtab_rio_local_get_device_id == $sub.ref(0, 62297);

const {:count 19} __kstrtab_rio_register_mport: ref;

axiom __kstrtab_rio_register_mport == $sub.ref(0, 63340);

const {:count 8} hdid: ref;

axiom hdid == $sub.ref(0, 64396);

const ids_num: ref;

axiom ids_num == $sub.ref(0, 65424);

const {:count 20} __kstrtab_rio_unregister_scan: ref;

axiom __kstrtab_rio_unregister_scan == $sub.ref(0, 66468);

const {:count 18} __kstrtab_rio_register_scan: ref;

axiom __kstrtab_rio_register_scan == $sub.ref(0, 67510);

const rio_scans: ref;

axiom rio_scans == $sub.ref(0, 68550);

const rio_mports: ref;

axiom rio_mports == $sub.ref(0, 69590);

const rio_mport_list_lock: ref;

axiom rio_mport_list_lock == $sub.ref(0, 70774);

const {:count 22} __kstrtab_rio_dma_prep_slave_sg: ref;

axiom __kstrtab_rio_dma_prep_slave_sg == $sub.ref(0, 71820);

const {:count 18} __kstrtab_rio_dma_prep_xfer: ref;

axiom __kstrtab_rio_dma_prep_xfer == $sub.ref(0, 72862);

const {:count 16} __kstrtab_rio_release_dma: ref;

axiom __kstrtab_rio_release_dma == $sub.ref(0, 73902);

const {:count 16} __kstrtab_rio_request_dma: ref;

axiom __kstrtab_rio_request_dma == $sub.ref(0, 74942);

const {:count 22} __kstrtab_rio_request_mport_dma: ref;

axiom __kstrtab_rio_request_mport_dma == $sub.ref(0, 75988);

const {:count 20} __kstrtab_rio_route_clr_table: ref;

axiom __kstrtab_rio_route_clr_table == $sub.ref(0, 77032);

const {:count 20} __kstrtab_rio_route_get_entry: ref;

axiom __kstrtab_rio_route_get_entry == $sub.ref(0, 78076);

const {:count 20} __kstrtab_rio_route_add_entry: ref;

axiom __kstrtab_rio_route_add_entry == $sub.ref(0, 79120);

const {:count 18} __kstrtab_rio_unlock_device: ref;

axiom __kstrtab_rio_unlock_device == $sub.ref(0, 80162);

const {:count 16} __kstrtab_rio_lock_device: ref;

axiom __kstrtab_rio_lock_device == $sub.ref(0, 81202);

const {:count 22} __kstrtab_rio_mport_get_feature: ref;

axiom __kstrtab_rio_mport_get_feature == $sub.ref(0, 82248);

const {:count 18} __kstrtab_rio_mport_get_efb: ref;

axiom __kstrtab_rio_mport_get_efb == $sub.ref(0, 83290);

const {:count 23} __kstrtab_rio_inb_pwrite_handler: ref;

axiom __kstrtab_rio_inb_pwrite_handler == $sub.ref(0, 84337);

const {:count 25} __kstrtab_rio_mport_chk_dev_access: ref;

axiom __kstrtab_rio_mport_chk_dev_access == $sub.ref(0, 85386);

const {:count 22} __kstrtab_rio_enable_rx_tx_port: ref;

axiom __kstrtab_rio_enable_rx_tx_port == $sub.ref(0, 86432);

const {:count 21} __kstrtab_rio_set_port_lockout: ref;

axiom __kstrtab_rio_set_port_lockout == $sub.ref(0, 87477);

const {:count 16} __kstrtab_rio_get_comptag: ref;

axiom __kstrtab_rio_get_comptag == $sub.ref(0, 88517);

const {:count 22} __kstrtab_rio_mport_get_physefb: ref;

axiom __kstrtab_rio_mport_get_physefb == $sub.ref(0, 89563);

const {:count 21} __kstrtab_rio_unmap_inb_region: ref;

axiom __kstrtab_rio_unmap_inb_region == $sub.ref(0, 90608);

const {:count 19} __kstrtab_rio_map_inb_region: ref;

axiom __kstrtab_rio_map_inb_region == $sub.ref(0, 91651);

const rio_mmap_lock: ref;

axiom rio_mmap_lock == $sub.ref(0, 92747);

const {:count 23} __kstrtab_rio_release_inb_pwrite: ref;

axiom __kstrtab_rio_release_inb_pwrite == $sub.ref(0, 93794);

const {:count 23} __kstrtab_rio_request_inb_pwrite: ref;

axiom __kstrtab_rio_request_inb_pwrite == $sub.ref(0, 94841);

const rio_devices: ref;

axiom rio_devices == $sub.ref(0, 95881);

const rio_global_list_lock: ref;

axiom rio_global_list_lock == $sub.ref(0, 96977);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 98005);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 99033);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 100061);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 101089);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 102117);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 103145);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 104173);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 105201);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 106229);

const ldv_state_variable_19: ref;

axiom ldv_state_variable_19 == $sub.ref(0, 107257);

const rio_config_attr_group1: ref;

axiom rio_config_attr_group1 == $sub.ref(0, 108289);

const ldv_state_variable_18: ref;

axiom ldv_state_variable_18 == $sub.ref(0, 109317);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 110345);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 111373);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 112401);

const rio_config_attr_group2: ref;

axiom rio_config_attr_group2 == $sub.ref(0, 113433);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 114461);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 115489);

const rio_config_attr_group0: ref;

axiom rio_config_attr_group0 == $sub.ref(0, 116521);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 117549);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 118577);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 119605);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 120633);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 121661);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 122689);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 123717);

const rio_bus_type_group0: ref;

axiom rio_bus_type_group0 == $sub.ref(0, 124749);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 125777);

const rio_wq: ref;

axiom rio_wq == $sub.ref(0, 126809);

const next_portid: ref;

axiom next_portid == $sub.ref(0, 127834);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 128862);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 129894);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 130922);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 131950);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 132978);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 134010);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 135042);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 136074);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 137102);

const {:count 2} rio_mport_groups: ref;

axiom rio_mport_groups == $sub.ref(0, 138142);

const {:count 2} rio_bus_groups: ref;

axiom rio_bus_groups == $sub.ref(0, 139182);

const {:count 2} rio_dev_groups: ref;

axiom rio_dev_groups == $sub.ref(0, 140222);

const __ksymtab_rio_dev_put: ref;

axiom __ksymtab_rio_dev_put == $sub.ref(0, 141262);

const __ksymtab_rio_dev_get: ref;

axiom __ksymtab_rio_dev_get == $sub.ref(0, 142302);

const __ksymtab_rio_bus_type: ref;

axiom __ksymtab_rio_bus_type == $sub.ref(0, 143342);

const __ksymtab_rio_unregister_driver: ref;

axiom __ksymtab_rio_unregister_driver == $sub.ref(0, 144382);

const __ksymtab_rio_register_driver: ref;

axiom __ksymtab_rio_register_driver == $sub.ref(0, 145422);

const rio_bus_type: ref;

axiom rio_bus_type == $sub.ref(0, 146606);

const __ksymtab_rio_mport_class: ref;

axiom __ksymtab_rio_mport_class == $sub.ref(0, 147646);

const rio_mport_class: ref;

axiom rio_mport_class == $sub.ref(0, 148790);

const __ksymtab_rio_attach_device: ref;

axiom __ksymtab_rio_attach_device == $sub.ref(0, 149830);

const __ksymtab_rio_mport_send_doorbell: ref;

axiom __ksymtab_rio_mport_send_doorbell == $sub.ref(0, 150870);

const __ksymtab_rio_mport_write_config_32: ref;

axiom __ksymtab_rio_mport_write_config_32 == $sub.ref(0, 151910);

const __ksymtab_rio_mport_write_config_16: ref;

axiom __ksymtab_rio_mport_write_config_16 == $sub.ref(0, 152950);

const __ksymtab_rio_mport_write_config_8: ref;

axiom __ksymtab_rio_mport_write_config_8 == $sub.ref(0, 153990);

const __ksymtab_rio_mport_read_config_32: ref;

axiom __ksymtab_rio_mport_read_config_32 == $sub.ref(0, 155030);

const __ksymtab_rio_mport_read_config_16: ref;

axiom __ksymtab_rio_mport_read_config_16 == $sub.ref(0, 156070);

const __ksymtab_rio_mport_read_config_8: ref;

axiom __ksymtab_rio_mport_read_config_8 == $sub.ref(0, 157110);

const __ksymtab___rio_local_write_config_32: ref;

axiom __ksymtab___rio_local_write_config_32 == $sub.ref(0, 158150);

const __ksymtab___rio_local_write_config_16: ref;

axiom __ksymtab___rio_local_write_config_16 == $sub.ref(0, 159190);

const __ksymtab___rio_local_write_config_8: ref;

axiom __ksymtab___rio_local_write_config_8 == $sub.ref(0, 160230);

const __ksymtab___rio_local_read_config_32: ref;

axiom __ksymtab___rio_local_read_config_32 == $sub.ref(0, 161270);

const __ksymtab___rio_local_read_config_16: ref;

axiom __ksymtab___rio_local_read_config_16 == $sub.ref(0, 162310);

const __ksymtab___rio_local_read_config_8: ref;

axiom __ksymtab___rio_local_read_config_8 == $sub.ref(0, 163350);

const __ksymtab_rio_init_mports: ref;

axiom __ksymtab_rio_init_mports == $sub.ref(0, 164390);

const __ksymtab_rio_release_outb_mbox: ref;

axiom __ksymtab_rio_release_outb_mbox == $sub.ref(0, 165430);

const __ksymtab_rio_request_outb_mbox: ref;

axiom __ksymtab_rio_request_outb_mbox == $sub.ref(0, 166470);

const __ksymtab_rio_release_inb_mbox: ref;

axiom __ksymtab_rio_release_inb_mbox == $sub.ref(0, 167510);

const __ksymtab_rio_request_inb_mbox: ref;

axiom __ksymtab_rio_request_inb_mbox == $sub.ref(0, 168550);

const __ksymtab_rio_release_outb_dbell: ref;

axiom __ksymtab_rio_release_outb_dbell == $sub.ref(0, 169590);

const __ksymtab_rio_request_outb_dbell: ref;

axiom __ksymtab_rio_request_outb_dbell == $sub.ref(0, 170630);

const __ksymtab_rio_release_inb_dbell: ref;

axiom __ksymtab_rio_release_inb_dbell == $sub.ref(0, 171670);

const __ksymtab_rio_request_inb_dbell: ref;

axiom __ksymtab_rio_request_inb_dbell == $sub.ref(0, 172710);

const __ksymtab_rio_get_asm: ref;

axiom __ksymtab_rio_get_asm == $sub.ref(0, 173750);

const __ksymtab_rio_get_device: ref;

axiom __ksymtab_rio_get_device == $sub.ref(0, 174790);

const __ksymtab_rio_local_get_device_id: ref;

axiom __ksymtab_rio_local_get_device_id == $sub.ref(0, 175830);

const __ksymtab_rio_register_mport: ref;

axiom __ksymtab_rio_register_mport == $sub.ref(0, 176870);

const __ksymtab_rio_unregister_scan: ref;

axiom __ksymtab_rio_unregister_scan == $sub.ref(0, 177910);

const __ksymtab_rio_register_scan: ref;

axiom __ksymtab_rio_register_scan == $sub.ref(0, 178950);

const __ksymtab_rio_dma_prep_slave_sg: ref;

axiom __ksymtab_rio_dma_prep_slave_sg == $sub.ref(0, 179990);

const __ksymtab_rio_dma_prep_xfer: ref;

axiom __ksymtab_rio_dma_prep_xfer == $sub.ref(0, 181030);

const __ksymtab_rio_release_dma: ref;

axiom __ksymtab_rio_release_dma == $sub.ref(0, 182070);

const __ksymtab_rio_request_dma: ref;

axiom __ksymtab_rio_request_dma == $sub.ref(0, 183110);

const __ksymtab_rio_request_mport_dma: ref;

axiom __ksymtab_rio_request_mport_dma == $sub.ref(0, 184150);

const __ksymtab_rio_route_clr_table: ref;

axiom __ksymtab_rio_route_clr_table == $sub.ref(0, 185190);

const __ksymtab_rio_route_get_entry: ref;

axiom __ksymtab_rio_route_get_entry == $sub.ref(0, 186230);

const __ksymtab_rio_route_add_entry: ref;

axiom __ksymtab_rio_route_add_entry == $sub.ref(0, 187270);

const __ksymtab_rio_unlock_device: ref;

axiom __ksymtab_rio_unlock_device == $sub.ref(0, 188310);

const __ksymtab_rio_lock_device: ref;

axiom __ksymtab_rio_lock_device == $sub.ref(0, 189350);

const __ksymtab_rio_mport_get_feature: ref;

axiom __ksymtab_rio_mport_get_feature == $sub.ref(0, 190390);

const __ksymtab_rio_mport_get_efb: ref;

axiom __ksymtab_rio_mport_get_efb == $sub.ref(0, 191430);

const __ksymtab_rio_inb_pwrite_handler: ref;

axiom __ksymtab_rio_inb_pwrite_handler == $sub.ref(0, 192470);

const __ksymtab_rio_mport_chk_dev_access: ref;

axiom __ksymtab_rio_mport_chk_dev_access == $sub.ref(0, 193510);

const __ksymtab_rio_enable_rx_tx_port: ref;

axiom __ksymtab_rio_enable_rx_tx_port == $sub.ref(0, 194550);

const __ksymtab_rio_set_port_lockout: ref;

axiom __ksymtab_rio_set_port_lockout == $sub.ref(0, 195590);

const __ksymtab_rio_get_comptag: ref;

axiom __ksymtab_rio_get_comptag == $sub.ref(0, 196630);

const __ksymtab_rio_mport_get_physefb: ref;

axiom __ksymtab_rio_mport_get_physefb == $sub.ref(0, 197670);

const __ksymtab_rio_unmap_inb_region: ref;

axiom __ksymtab_rio_unmap_inb_region == $sub.ref(0, 198710);

const __ksymtab_rio_map_inb_region: ref;

axiom __ksymtab_rio_map_inb_region == $sub.ref(0, 199750);

const __ksymtab_rio_release_inb_pwrite: ref;

axiom __ksymtab_rio_release_inb_pwrite == $sub.ref(0, 200790);

const __ksymtab_rio_request_inb_pwrite: ref;

axiom __ksymtab_rio_request_inb_pwrite == $sub.ref(0, 201830);

const {:count 49} .str.38: ref;

axiom .str.38 == $sub.ref(0, 202903);

const .str: ref;

axiom .str == $sub.ref(0, 203935);

const {:count 22} .str.1: ref;

axiom .str.1 == $sub.ref(0, 204981);

const {:count 199} .str.2: ref;

axiom .str.2 == $sub.ref(0, 206204);

const {:count 78} .str.3: ref;

axiom .str.3 == $sub.ref(0, 207306);

const {:count 23} .str.4: ref;

axiom .str.4 == $sub.ref(0, 208353);

const {:count 44} .str.5: ref;

axiom .str.5 == $sub.ref(0, 209421);

const {:count 33} .str.6: ref;

axiom .str.6 == $sub.ref(0, 210478);

const {:count 46} .str.7: ref;

axiom .str.7 == $sub.ref(0, 211548);

const {:count 33} .str.8: ref;

axiom .str.8 == $sub.ref(0, 212605);

const {:count 43} .str.9: ref;

axiom .str.9 == $sub.ref(0, 213672);

const {:count 33} .str.10: ref;

axiom .str.10 == $sub.ref(0, 214729);

const {:count 38} .str.11: ref;

axiom .str.11 == $sub.ref(0, 215791);

const {:count 39} .str.12: ref;

axiom .str.12 == $sub.ref(0, 216854);

const {:count 38} .str.13: ref;

axiom .str.13 == $sub.ref(0, 217916);

const {:count 38} .str.14: ref;

axiom .str.14 == $sub.ref(0, 218978);

const {:count 20} .str.44: ref;

axiom .str.44 == $sub.ref(0, 220022);

const {:count 46} .str.45: ref;

axiom .str.45 == $sub.ref(0, 221092);

const {:count 39} .str.46: ref;

axiom .str.46 == $sub.ref(0, 222155);

const {:count 43} .str.47: ref;

axiom .str.47 == $sub.ref(0, 223222);

const {:count 33} .str.48: ref;

axiom .str.48 == $sub.ref(0, 224279);

const {:count 69} .str.49: ref;

axiom .str.49 == $sub.ref(0, 225372);

const {:count 40} .str.50: ref;

axiom .str.50 == $sub.ref(0, 226436);

const {:count 33} .str.51: ref;

axiom .str.51 == $sub.ref(0, 227493);

const {:count 45} .str.52: ref;

axiom .str.52 == $sub.ref(0, 228562);

const {:count 18} .str.41: ref;

axiom .str.41 == $sub.ref(0, 229604);

const {:count 30} .str.42: ref;

axiom .str.42 == $sub.ref(0, 230658);

const {:count 34} .str.43: ref;

axiom .str.43 == $sub.ref(0, 231716);

const {:count 16} .str.15: ref;

axiom .str.15 == $sub.ref(0, 232756);

const {:count 40} .str.16: ref;

axiom .str.16 == $sub.ref(0, 233820);

const {:count 18} .str.17: ref;

axiom .str.17 == $sub.ref(0, 234862);

const {:count 47} .str.18: ref;

axiom .str.18 == $sub.ref(0, 235933);

const {:count 26} .str.19: ref;

axiom .str.19 == $sub.ref(0, 236983);

const {:count 18} .str.20: ref;

axiom .str.20 == $sub.ref(0, 238025);

const {:count 18} .str.21: ref;

axiom .str.21 == $sub.ref(0, 239067);

const {:count 25} .str.22: ref;

axiom .str.22 == $sub.ref(0, 240116);

const {:count 20} .str.23: ref;

axiom .str.23 == $sub.ref(0, 241160);

const {:count 46} .str.31: ref;

axiom .str.31 == $sub.ref(0, 242230);

const {:count 10} .str.32: ref;

axiom .str.32 == $sub.ref(0, 243264);

const {:count 41} .str.33: ref;

axiom .str.33 == $sub.ref(0, 244329);

const {:count 19} .str.34: ref;

axiom .str.34 == $sub.ref(0, 245372);

const {:count 25} .str.35: ref;

axiom .str.35 == $sub.ref(0, 246421);

const {:count 18} .str.36: ref;

axiom .str.36 == $sub.ref(0, 247463);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 10} .str.24: ref;

axiom .str.24 == $sub.ref(0, 248497);

const {:count 8} .str.25: ref;

axiom .str.25 == $sub.ref(0, 249529);

const {:count 30} .str.26: ref;

axiom .str.26 == $sub.ref(0, 250583);

const {:count 33} .str.27: ref;

axiom .str.27 == $sub.ref(0, 251640);

const {:count 16} .str.28: ref;

axiom .str.28 == $sub.ref(0, 252680);

const {:count 16} .str.29: ref;

axiom .str.29 == $sub.ref(0, 253720);

const {:count 34} .str.30: ref;

axiom .str.30 == $sub.ref(0, 254778);

const {:count 18} .str.55: ref;

axiom .str.55 == $sub.ref(0, 255820);

const {:count 37} .str.56: ref;

axiom .str.56 == $sub.ref(0, 256881);

const {:count 13} .str.37: ref;

axiom .str.37 == $sub.ref(0, 257918);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 40} .str.59: ref;

axiom .str.59 == $sub.ref(0, 258982);

const {:count 21} .str.39: ref;

axiom .str.39 == $sub.ref(0, 260027);

const {:count 14} .str.40: ref;

axiom .str.40 == $sub.ref(0, 261065);

const {:count 30} .str.53: ref;

axiom .str.53 == $sub.ref(0, 262119);

const {:count 20} .str.54: ref;

axiom .str.54 == $sub.ref(0, 263163);

const {:count 16} .str.57: ref;

axiom .str.57 == $sub.ref(0, 264203);

const {:count 18} .str.58: ref;

axiom .str.58 == $sub.ref(0, 265245);

const {:count 4} .str.60: ref;

axiom .str.60 == $sub.ref(0, 266273);

const {:count 8} .str.76: ref;

axiom .str.76 == $sub.ref(0, 267305);

const {:count 4} .str.61: ref;

axiom .str.61 == $sub.ref(0, 268333);

const {:count 11} .str.62: ref;

axiom .str.62 == $sub.ref(0, 269368);

const {:count 8} .str.82: ref;

axiom .str.82 == $sub.ref(0, 270400);

const {:count 8} .str.63: ref;

axiom .str.63 == $sub.ref(0, 271432);

const {:count 8} .str.64: ref;

axiom .str.64 == $sub.ref(0, 272464);

const {:count 8} .str.65: ref;

axiom .str.65 == $sub.ref(0, 273496);

const {:count 6} .str.66: ref;

axiom .str.66 == $sub.ref(0, 274526);

const {:count 5} .str.83: ref;

axiom .str.83 == $sub.ref(0, 275555);

const {:count 4} .str.77: ref;

axiom .str.77 == $sub.ref(0, 276583);

const {:count 7} .str.67: ref;

axiom .str.67 == $sub.ref(0, 277614);

const {:count 9} .str.68: ref;

axiom .str.68 == $sub.ref(0, 278647);

const {:count 32} .str.80: ref;

axiom .str.80 == $sub.ref(0, 279703);

const {:count 7} .str.69: ref;

axiom .str.69 == $sub.ref(0, 280734);

const {:count 7} .str.70: ref;

axiom .str.70 == $sub.ref(0, 281765);

const {:count 11} .str.81: ref;

axiom .str.81 == $sub.ref(0, 282800);

const {:count 6} .str.71: ref;

axiom .str.71 == $sub.ref(0, 283830);

const {:count 6} .str.78: ref;

axiom .str.78 == $sub.ref(0, 284860);

const {:count 9} .str.72: ref;

axiom .str.72 == $sub.ref(0, 285893);

const {:count 8} .str.84: ref;

axiom .str.84 == $sub.ref(0, 286925);

const {:count 5} .str.73: ref;

axiom .str.73 == $sub.ref(0, 287954);

const {:count 12} .str.74: ref;

axiom .str.74 == $sub.ref(0, 288990);

const {:count 9} .str.75: ref;

axiom .str.75 == $sub.ref(0, 290023);

const {:count 4} .str.79: ref;

axiom .str.79 == $sub.ref(0, 291051);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 292083);

const {:count 3} .str.1.180: ref;

axiom .str.1.180 == $sub.ref(0, 293110);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 294148);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 295176);

const rio_add_device: ref;

axiom rio_add_device == $sub.ref(0, 296208);

procedure rio_add_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rio_add_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;
  var vslice_dummy_var_7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(104, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $i2 := device_add($p1);
    call {:si_unique_call 1} {:cexpr "err"} boogie_si_record_i32($i2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} spin_lock(rio_global_list_lock);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(0, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} list_add_tail($p5, rio_devices);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} spin_unlock(rio_global_list_lock);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} vslice_dummy_var_7 := rio_create_sysfs_dev_files($p0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 297240);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const device_add: ref;

axiom device_add == $sub.ref(0, 298272);

procedure device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 7} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 299304);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} _raw_spin_lock($p2);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 300336);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} __list_add($p0, $p3, $p1);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 301368);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} _raw_spin_unlock($p2);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    return;
}



const rio_create_sysfs_dev_files: ref;

axiom rio_create_sysfs_dev_files == $sub.ref(0, 302400);

procedure rio_create_sysfs_dev_files($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rio_create_sysfs_dev_files($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var vslice_dummy_var_8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(104, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i2 := device_create_bin_file($p1, rio_config_attr);
    call {:si_unique_call 12} {:cexpr "err"} boogie_si_record_i32($i2);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p19 := rio_name($p0);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_8 := printk.ref.ref(.str.38, $p19);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(60, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 268435456);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(104, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i9 := device_create_file($p8, dev_attr_routes);
    call {:si_unique_call 14} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, $i2);
    call {:si_unique_call 15} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(104, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i12 := device_create_file($p11, dev_attr_lnext);
    call {:si_unique_call 17} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $i10);
    call {:si_unique_call 18} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(104, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i15 := device_create_file($p14, dev_attr_hopcount);
    call {:si_unique_call 20} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, $i13);
    call {:si_unique_call 21} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb6;
}



const device_create_bin_file: ref;

axiom device_create_bin_file == $sub.ref(0, 303432);

procedure device_create_bin_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_bin_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 1} true;
    call {:si_unique_call 24} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 25} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 304464);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 1} true;
    call {:si_unique_call 26} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 27} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rio_name: ref;

axiom rio_name == $sub.ref(0, 305496);

procedure rio_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rio_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(104, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p2 := dev_name($p1);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 306528);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 1} true;
    call {:si_unique_call 29} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 30} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 1} true;
    call {:si_unique_call 31} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 32} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 307560);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p9 := kobject_name($p8);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 308592);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 309624);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 310656);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 311688);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    return;
}



const rio_request_inb_pwrite: ref;

axiom rio_request_inb_pwrite == $sub.ref(0, 312720);

procedure rio_request_inb_pwrite($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rio_request_inb_pwrite($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} spin_lock(rio_global_list_lock);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2424, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2424, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} spin_unlock(rio_global_list_lock);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;
}



const rio_release_inb_pwrite: ref;

axiom rio_release_inb_pwrite == $sub.ref(0, 313752);

procedure rio_release_inb_pwrite($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rio_release_inb_pwrite($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} spin_lock(rio_global_list_lock);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2424, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} spin_unlock(rio_global_list_lock);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2424, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const rio_map_inb_region: ref;

axiom rio_map_inb_region == $sub.ref(0, 314784);

procedure rio_map_inb_region($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i32) returns ($r: i32);



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 315816);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 316848);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 1} true;
    call {:si_unique_call 38} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 39} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 317880);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 318912);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    return;
}



const rio_unmap_inb_region: ref;

axiom rio_unmap_inb_region == $sub.ref(0, 319944);

procedure rio_unmap_inb_region($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation rio_unmap_inb_region($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} {:cexpr "rio_unmap_inb_region:arg:lstart"} boogie_si_record_i64($i1);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p8 := spinlock_check(rio_mmap_lock);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 46} {:cexpr "flags"} boogie_si_record_i64($i9);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 47} devirtbounce.1($p13, $p0, $i1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} spin_unlock_irqrestore(rio_mmap_lock, $i9);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rio_mport_get_physefb: ref;

axiom rio_mport_get_physefb == $sub.ref(0, 320976);

procedure rio_mport_get_physefb($p0: ref, $i1: i32, $i2: i16, $i3: i8) returns ($r: i32);



const rio_mport_get_efb: ref;

axiom rio_mport_get_efb == $sub.ref(0, 322008);

procedure rio_mport_get_efb($p0: ref, $i1: i32, $i2: i16, $i3: i8, $i4: i32) returns ($r: i32);



const rio_local_read_config_32: ref;

axiom rio_local_read_config_32 == $sub.ref(0, 323040);

procedure rio_local_read_config_32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const rio_mport_read_config_32: ref;

axiom rio_mport_read_config_32 == $sub.ref(0, 324072);

procedure rio_mport_read_config_32($p0: ref, $i1: i16, $i2: i8, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.3, $CurrAddr;



implementation rio_mport_read_config_32($p0: ref, $i1: i16, $i2: i8, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 50} {:cexpr "rio_mport_read_config_32:arg:destid"} boogie_si_record_i16($i1);
    call {:si_unique_call 51} {:cexpr "rio_mport_read_config_32:arg:hopcount"} boogie_si_record_i8($i2);
    call {:si_unique_call 52} {:cexpr "rio_mport_read_config_32:arg:offset"} boogie_si_record_i32($i3);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p5, 0);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, 3);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p9 := spinlock_check(rio_config_lock);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i10 := _raw_spin_lock_irqsave($p9);
    call {:si_unique_call 55} {:cexpr "flags"} boogie_si_record_i64($i10);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i2);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    call {:si_unique_call 56} $i22 := devirtbounce.2($p14, $p0, $i17, $i19, $i21, $i3, 4, $p5);
    call {:si_unique_call 57} {:cexpr "res"} boogie_si_record_i32($i22);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.4, $p5);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p4, $i23);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} spin_unlock_irqrestore(rio_config_lock, $i10);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i8 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i8 := 129;
    goto $bb3;
}



const __rio_local_read_config_32: ref;

axiom __rio_local_read_config_32 == $sub.ref(0, 325104);

procedure __rio_local_read_config_32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const rio_get_comptag: ref;

axiom rio_get_comptag == $sub.ref(0, 326136);

procedure rio_get_comptag($i0: i32, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rio_get_comptag($i0: i32, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p7: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p11: ref;
  var $i22: i64;
  var $i23: i1;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} {:cexpr "rio_get_comptag:arg:comp_tag"} boogie_si_record_i32($i0);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} spin_lock(rio_global_list_lock);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, rio_devices);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p7 := $p8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p7);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} spin_unlock(rio_global_list_lock);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p11 := $p7;
    goto $bb7;

  $bb7:
    call $p12, $p13, $i14, $i15, $p16, $p18, $p19, $i20, $i21, $p11, $i22, $i23 := rio_get_comptag_loop_$bb7($i0, $p12, $p13, $i14, $i15, $p16, $p18, $p19, $i20, $i21, $p11, $i22, $i23);
    goto $bb7_last;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p11);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $p2i.ref.i64(rio_devices));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2448)), $mul.ref(76, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i0);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p16 := $p11;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p19;
    goto $bb13_dummy;

  $bb9:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb11;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2448)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.7, $p5);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_209;
}



const rio_set_port_lockout: ref;

axiom rio_set_port_lockout == $sub.ref(0, 327168);

procedure rio_set_port_lockout($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $CurrAddr;



implementation rio_set_port_lockout($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var vslice_dummy_var_9: i32;
  var vslice_dummy_var_10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 63} {:cexpr "rio_set_port_lockout:arg:pnum"} boogie_si_record_i32($i1);
    call {:si_unique_call 64} {:cexpr "rio_set_port_lockout:arg:lock"} boogie_si_record_i32($i2);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i1, 32);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i5, $i6);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 92);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_9 := rio_read_config_32($p0, $i8, $p3);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i2, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.3, $p3);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 3));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p3, $i14);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i1, 32);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i16, $i17);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 92);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.3, $p3);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_10 := rio_write_config_32($p0, $i19, $i20);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.3, $p3);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 2);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p3, $i12);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rio_read_config_32: ref;

axiom rio_read_config_32 == $sub.ref(0, 328200);

procedure rio_read_config_32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.3, $CurrAddr;



implementation rio_read_config_32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} {:cexpr "rio_read_config_32:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(32, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2432, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2434, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i15 := rio_mport_read_config_32($p6, $i10, $i14, $i1, $p2);
    call {:si_unique_call 69} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rio_write_config_32: ref;

axiom rio_write_config_32 == $sub.ref(0, 329232);

procedure rio_write_config_32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rio_write_config_32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "rio_write_config_32:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 71} {:cexpr "rio_write_config_32:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(32, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2432, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2434, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i15 := rio_mport_write_config_32($p6, $i10, $i14, $i1, $i2);
    call {:si_unique_call 73} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rio_mport_write_config_32: ref;

axiom rio_mport_write_config_32 == $sub.ref(0, 330264);

procedure rio_mport_write_config_32($p0: ref, $i1: i16, $i2: i8, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rio_mport_write_config_32($p0: ref, $i1: i16, $i2: i8, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} {:cexpr "rio_mport_write_config_32:arg:destid"} boogie_si_record_i16($i1);
    call {:si_unique_call 75} {:cexpr "rio_mport_write_config_32:arg:hopcount"} boogie_si_record_i8($i2);
    call {:si_unique_call 76} {:cexpr "rio_mport_write_config_32:arg:offset"} boogie_si_record_i32($i3);
    call {:si_unique_call 77} {:cexpr "rio_mport_write_config_32:arg:value"} boogie_si_record_i32($i4);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i3, 3);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p8 := spinlock_check(rio_config_lock);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 80} {:cexpr "flags"} boogie_si_record_i64($i9);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i1);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i2);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 81} $i21 := devirtbounce.4($p13, $p0, $i16, $i18, $i20, $i3, 4, $i4);
    call {:si_unique_call 82} {:cexpr "res"} boogie_si_record_i32($i21);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} spin_unlock_irqrestore(rio_config_lock, $i9);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i7 := 129;
    goto $bb3;
}



const rio_enable_rx_tx_port: ref;

axiom rio_enable_rx_tx_port == $sub.ref(0, 331296);

procedure rio_enable_rx_tx_port($p0: ref, $i1: i32, $i2: i16, $i3: i8, $i4: i8) returns ($r: i32);



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 332328);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 85} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 333360);

procedure __dynamic_pr_debug.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    return;
}



const rio_local_write_config_32: ref;

axiom rio_local_write_config_32 == $sub.ref(0, 334392);

procedure rio_local_write_config_32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const __rio_local_write_config_32: ref;

axiom __rio_local_write_config_32 == $sub.ref(0, 335424);

procedure __rio_local_write_config_32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const rio_mport_chk_dev_access: ref;

axiom rio_mport_chk_dev_access == $sub.ref(0, 336456);

procedure rio_mport_chk_dev_access($p0: ref, $i1: i16, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.3, $CurrAddr;



implementation rio_mport_chk_dev_access($p0: ref, $i1: i16, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $i10: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 87} {:cexpr "rio_mport_chk_dev_access:arg:destid"} boogie_si_record_i16($i1);
    call {:si_unique_call 88} {:cexpr "rio_mport_chk_dev_access:arg:hopcount"} boogie_si_record_i8($i2);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i2);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i8 := rio_mport_read_config_32($p0, $i5, $i7, 0, $p3);
    call {:si_unique_call 90} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $i11, $i12, $i14, $i15, $i10 := rio_mport_chk_dev_access_loop_$bb4($p0, $p3, $i5, $i7, $i11, $i12, $i14, $i15, $i10);
    goto $bb4_last;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    call {:si_unique_call 91} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb10, $bb11;

  $bb11:
    assume !(1 == 1);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i14 := rio_mport_read_config_32($p0, $i5, $i7, 0, $p3);
    call {:si_unique_call 94} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i15 == 1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb16_dummy;

  $bb10:
    assume 1 == 1;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} __const_udelay(4295000);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb8;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_341;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 337488);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    return;
}



const rio_inb_pwrite_handler: ref;

axiom rio_inb_pwrite_handler == $sub.ref(0, 338520);

procedure rio_inb_pwrite_handler($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.16, $M.4, $M.3, $M.0, $CurrAddr;



implementation rio_inb_pwrite_handler($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i24;
  var $i29: i24;
  var $i30: i24;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i24;
  var $i85: i24;
  var $i86: i24;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i8;
  var $i138: i32;
  var $i139: i8;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i24;
  var $i157: i24;
  var $i158: i24;
  var $p159: ref;
  var $p160: ref;
  var $i161: i8;
  var $i162: i64;
  var $i163: i64;
  var $i164: i64;
  var $i165: i1;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i32;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i24;
  var $i202: i24;
  var $i203: i24;
  var $p204: ref;
  var $p205: ref;
  var $i206: i8;
  var $i207: i64;
  var $i208: i64;
  var $i209: i64;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $i213: i32;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i219: i32;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i223: i32;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i32;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i32;
  var $i254: i32;
  var $i255: i32;
  var $i256: i32;
  var $i257: i32;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i24;
  var $i266: i24;
  var $i267: i24;
  var $p268: ref;
  var $p269: ref;
  var $i270: i8;
  var $i271: i64;
  var $i272: i64;
  var $i273: i64;
  var $i274: i1;
  var $p275: ref;
  var $p276: ref;
  var $i277: i32;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $i281: i32;
  var $i282: i32;
  var $i283: i32;
  var $i284: i32;
  var $i285: i32;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $i295: i24;
  var $i296: i24;
  var $i297: i24;
  var $p298: ref;
  var $p299: ref;
  var $i300: i8;
  var $i301: i64;
  var $i302: i64;
  var $i303: i64;
  var $i304: i1;
  var $i305: i32;
  var $i306: i32;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $i310: i32;
  var $i311: i32;
  var $i312: i32;
  var $i313: i32;
  var $i314: i32;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i32;
  var $i320: i32;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $i330: i24;
  var $i331: i24;
  var $i332: i24;
  var $p333: ref;
  var $p334: ref;
  var $i335: i8;
  var $i336: i64;
  var $i337: i64;
  var $i338: i64;
  var $i339: i1;
  var $i340: i32;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $i344: i32;
  var $i345: i32;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $i350: i32;
  var $i351: i32;
  var $i352: i32;
  var $i353: i32;
  var $i354: i32;
  var $i355: i32;
  var $i41: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 131071);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p18 := rio_get_comptag($i17, $0.ref);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p1, $p18);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.15, $p1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p42, .str);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p43, .str.4);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p44, .str.2);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p45, .str.6);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.12, $p47);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 887);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p47, $i50);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p51, 1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.13, $p52);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 115} {:cexpr "tmp___1"} boogie_si_record_i64($i56);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.15, $p1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 2448)), $mul.ref(2424, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p0);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 255);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p5, $i74);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.15, $p1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i76 := rio_chk_dev_access($p75);
    call {:si_unique_call 121} {:cexpr "tmp___5"} boogie_si_record_i32($i76);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.15, $p1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 2448)), $mul.ref(60, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 268435456);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.15, $p1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.15, $p1);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.15, $p1);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.15, $p1);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.16, $p5);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i146 := $mul.i32($i145, 32);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i144, $i146);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i147, 88);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_14 := rio_read_config_32($p141, $i148, $p2);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p150, .str);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p151, .str.4);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p152, .str.2);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p153, .str.10);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i156 := $load.i24($M.12, $p155);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i157 := $and.i24($i156, $sub.i24(0, 262144));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i158 := $or.i24($i157, 952);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p155, $i158);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p159, 1);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.13, $p160);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i64($i161);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i163 := $and.i64($i162, 1);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i164 := ldv__builtin_expect($i163, 0);
    call {:si_unique_call 134} {:cexpr "tmp___7"} boogie_si_record_i64($i164);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i164, 0);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.3, $p2);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, 2);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i170 == 1);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.15, $p1);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p225, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p227, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.0, $p228);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.16, $p5);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i231 := $shl.i32(1, $i230);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i232 := $and.i32($i229, $i231);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i232, 0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.15, $p1);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.15, $p1);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p279, $mul.ref(0, 2448)), $mul.ref(84, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.0, $p280);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.16, $p5);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i283 := $add.i32($i282, 1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i284 := $mul.i32($i283, 64);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i285 := $add.i32($i281, $i284);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} vslice_dummy_var_17 := rio_read_config_32($p278, $i285, $p3);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.3, $p3);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.15, $p1);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.15, $p1);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p317, $mul.ref(0, 2448)), $mul.ref(84, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p318);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i320 := $add.i32($i319, 8);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vslice_dummy_var_21 := rio_read_config_32($p316, $i320, $p4);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.3, $p4);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.15, $p1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.15, $p1);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p348, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, $p349);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i351 := $load.i32($M.16, $p5);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i352 := $mul.i32($i351, 32);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i353 := $add.i32($i350, $i352);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i354 := $add.i32($i353, 88);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i355 := $load.i32($M.3, $p2);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} vslice_dummy_var_23 := rio_write_config_32($p347, $i354, $i355);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb68:
    assume $i323 == 1;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p324, .str);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p325, .str.4);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p326, .str.2);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p327, .str.14);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p329 := $bitcast.ref.ref($p328);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i330 := $load.i24($M.12, $p329);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i331 := $and.i24($i330, $sub.i24(0, 262144));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i332 := $or.i24($i331, 1004);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p329, $i332);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p333, 1);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.13, $p334);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i64($i335);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i337 := $and.i64($i336, 1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i338 := ldv__builtin_expect($i337, 0);
    call {:si_unique_call 157} {:cexpr "tmp___14"} boogie_si_record_i64($i338);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i339 := $ne.i64($i338, 0);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.15, $p1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p342 := $load.ref($M.15, $p1);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p342, $mul.ref(0, 2448)), $mul.ref(84, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i344 := $load.i32($M.0, $p343);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i345 := $add.i32($i344, 8);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} vslice_dummy_var_22 := rio_write_config_32($p341, $i345, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i339 == 1;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i340 := $load.i32($M.3, $p4);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} __dynamic_pr_debug.ref.ref.i32($p13, .str.14, $i340);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb62:
    assume $i288 == 1;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p289, .str);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p290, .str.4);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p291, .str.2);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p292, .str.13);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p294 := $bitcast.ref.ref($p293);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i295 := $load.i24($M.12, $p294);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i296 := $and.i24($i295, $sub.i24(0, 262144));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i297 := $or.i24($i296, 994);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p294, $i297);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p298, 1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i300 := $load.i8($M.13, $p299);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i64($i300);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i302 := $and.i64($i301, 1);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i303 := ldv__builtin_expect($i302, 0);
    call {:si_unique_call 152} {:cexpr "tmp___13"} boogie_si_record_i64($i303);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i304 := $ne.i64($i303, 0);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.15, $p1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.15, $p1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p308, $mul.ref(0, 2448)), $mul.ref(84, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p309);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.16, $p5);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i312 := $add.i32($i311, 1);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i313 := $mul.i32($i312, 64);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i314 := $add.i32($i310, $i313);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} vslice_dummy_var_20 := rio_write_config_32($p307, $i314, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i304 == 1;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.16, $p5);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i306 := $load.i32($M.3, $p3);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} __dynamic_pr_debug.ref.ref.i32.i32($p12, .str.13, $i305, $i306);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb56:
    assume $i233 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.15, $p1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p234, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p235);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p236, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.0, $p237);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.16, $p5);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i240 := $shl.i32(1, $i239);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i241 := $xor.i32($i240, $sub.i32(0, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i242 := $and.i32($i238, $i241);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.15, $p1);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p243, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p244);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p245, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p246, $i242);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.15, $p1);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.16, $p5);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} vslice_dummy_var_18 := rio_set_port_lockout($p247, $i248, 1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.15, $p1);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.15, $p1);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p251, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.0, $p252);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.16, $p5);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i255 := $mul.i32($i254, 32);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i256 := $add.i32($i253, $i255);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i257 := $add.i32($i256, 72);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} vslice_dummy_var_19 := rio_write_config_32($p250, $i257, $sub.i32(0, 2147483648));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p259, .str);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p260, .str.4);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p261, .str.2);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p262, .str.12);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p263);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i265 := $load.i24($M.12, $p264);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i266 := $and.i24($i265, $sub.i24(0, 262144));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i267 := $or.i24($i266, 986);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p264, $i267);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p268, 1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i270 := $load.i8($M.13, $p269);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i271 := $zext.i8.i64($i270);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i272 := $and.i64($i271, 1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i273 := ldv__builtin_expect($i272, 0);
    call {:si_unique_call 148} {:cexpr "tmp___12"} boogie_si_record_i64($i273);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i274 := $ne.i64($i273, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i274 == 1;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.15, $p1);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $p276 := rio_name($p275);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.16, $p5);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __dynamic_pr_debug.ref.ref.ref.i32($p11, .str.12, $p276, $i277);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb41:
    assume $i170 == 1;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.15, $p1);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.16, $p5);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i177 := $shl.i32(1, $i176);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i175, $i177);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.3, $p2);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i215 := $and.i32($i214, 65792);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 0);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume $i216 == 1;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.15, $p1);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.16, $p5);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.3, $p2);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i220 := rio_clr_err_stopped($p217, $i218, $i219);
    call {:si_unique_call 142} {:cexpr "tmp___10"} boogie_si_record_i32($i220);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i221 == 1;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.15, $p1);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.16, $p5);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_16 := rio_clr_err_stopped($p222, $i223, 0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb43:
    assume $i179 == 1;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.15, $p1);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p180, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p182, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.16, $p5);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i186 := $shl.i32(1, $i185);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i187 := $or.i32($i184, $i186);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.15, $p1);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p190, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p191, $i187);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.15, $p1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.16, $p5);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} vslice_dummy_var_15 := rio_set_port_lockout($p192, $i193, 0);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p195, .str);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p196, .str.4);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p197, .str.2);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p198, .str.11);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i201 := $load.i24($M.12, $p200);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i202 := $and.i24($i201, $sub.i24(0, 262144));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i203 := $or.i24($i202, 961);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p200, $i203);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p204, 1);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.13, $p205);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i64($i206);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i208 := $and.i64($i207, 1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i209 := ldv__builtin_expect($i208, 0);
    call {:si_unique_call 138} {:cexpr "tmp___9"} boogie_si_record_i64($i209);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i210 := $ne.i64($i209, 0);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i210 == 1;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.15, $p1);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $p212 := rio_name($p211);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.16, $p5);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} __dynamic_pr_debug.ref.ref.ref.i32($p10, .str.11, $p212, $i213);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb38:
    assume $i165 == 1;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.16, $p5);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.3, $p2);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} __dynamic_pr_debug.ref.ref.i32.i32($p9, .str.10, $i166, $i167);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i118 == 1;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.15, $p1);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb34;

  $bb35:
    assume $i127 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.15, $p1);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.15, $p1);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.16, $p5);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i136);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i8($i138);
    call {:si_unique_call 131} vslice_dummy_var_13 := devirtbounce.7($p134, $p135, $i139);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i108 == 1;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.15, $p1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p110 := rio_name($p109);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} vslice_dummy_var_12 := printk.ref.ref(.str.9, $p110);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb6;

  $bb26:
    assume $i104 == 1;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb6;

  $bb17:
    assume $i77 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p78, .str);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p79, .str.4);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p80, .str.2);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p81, .str.7);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i84 := $load.i24($M.12, $p83);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i85 := $and.i24($i84, $sub.i24(0, 262144));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i86 := $or.i24($i85, 920);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p83, $i86);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p87, 1);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.13, $p88);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i64($i89);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i92 := ldv__builtin_expect($i91, 0);
    call {:si_unique_call 123} {:cexpr "tmp___2"} boogie_si_record_i64($i92);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.15, $p1);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i95 := rio_chk_dev_route($p94, $p1, $p5);
    call {:si_unique_call 126} {:cexpr "tmp___4"} boogie_si_record_i32($i95);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i96 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.15, $p1);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p98 := rio_name($p97);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} vslice_dummy_var_11 := printk.ref.ref(.str.8, $p98);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 5);
    goto $bb6;

  $bb19:
    assume $i93 == 1;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} __dynamic_pr_debug.ref.ref($p8, .str.7);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i64 == 1;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.15, $p1);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 2448)), $mul.ref(2424, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.15, $p1);
    call {:si_unique_call 118} $i69 := devirtbounce.6($p67, $p68, $p0, 0);
    call {:si_unique_call 119} {:cexpr "rc"} boogie_si_record_i32($i69);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i70 == 1;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb6;

  $bb8:
    assume $i57 == 1;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.15, $p1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p59 := rio_name($p58);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} __dynamic_pr_debug.ref.ref.ref($p7, .str.6, $p59);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p22, .str);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p23, .str.4);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p24, .str.2);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p25, .str.5);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i28 := $load.i24($M.12, $p27);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i29 := $and.i24($i28, $sub.i24(0, 262144));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i30 := $or.i24($i29, 883);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p27, $i30);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p31, 1);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.13, $p32);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i64($i33);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 1);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 112} {:cexpr "tmp"} boogie_si_record_i64($i36);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 5);
    goto $bb6;

  $bb3:
    assume $i37 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} __dynamic_pr_debug.ref.ref.ref.i32($p6, .str.5, .str.4, $i40);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rio_chk_dev_access: ref;

axiom rio_chk_dev_access == $sub.ref(0, 339552);

procedure rio_chk_dev_access($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.3, $CurrAddr;



implementation rio_chk_dev_access($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(32, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2432, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2434, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i13 := rio_mport_chk_dev_access($p4, $i8, $i12);
    call {:si_unique_call 162} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const rio_chk_dev_route: ref;

axiom rio_chk_dev_route == $sub.ref(0, 340584);

procedure rio_chk_dev_route($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.3, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.15, $M.16, $CurrAddr;



implementation rio_chk_dev_route($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p11: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p27: ref;
  var $p10: ref;
  var $p19: ref;
  var $p20: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i24;
  var $i74: i24;
  var $i75: i24;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $i66: i32;
  var $i37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2440, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p10 := $p0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p10, $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p20);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p20, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p19, $mul.ref(0, 2448)), $mul.ref(2432, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i64($i43);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p41, $mul.ref($i44, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    call {:si_unique_call 168} {:cexpr "p_port"} boogie_si_record_i32($i47);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 255);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i48 == 1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p67, .str);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p68, .str.41);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p69, .str.2);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p70, .str.43);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i73 := $load.i24($M.12, $p72);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i74 := $and.i24($i73, $sub.i24(0, 262144));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i75 := $or.i24($i74, 692);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p72, $i75);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p76, 1);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.13, $p77);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i64($i78);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i79, 1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 172} {:cexpr "tmp___3"} boogie_si_record_i64($i81);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32(0, 5);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i37 := $i66;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb25:
    assume $i82 == 1;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p83 := rio_name($p19);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} __dynamic_pr_debug.ref.ref.ref($p5, .str.43, $p83);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p49, .str);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p50, .str.41);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p51, .str.2);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p52, .str.42);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.12, $p54);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 687);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p54, $i57);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p58, 1);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.13, $p59);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 170} {:cexpr "tmp___1"} boogie_si_record_i64($i63);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p1, $p20);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p2, $i47);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb24;

  $bb21:
    assume $i64 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p65 := rio_name($p20);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} __dynamic_pr_debug.ref.ref.ref.i32($p4, .str.42, $p65, $i47);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 5);
    goto $bb17;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p11 := $p0;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $i15, $p16, $p21, $p22, $p23, $p24, $i25, $i26, $p11, $p28, $p29, $p30, $i31, $i32, $i33, $p34, $p27 := rio_chk_dev_route_loop_$bb4($p3, $p12, $p13, $i14, $i15, $p16, $p21, $p22, $p23, $p24, $i25, $i26, $p11, $p28, $p29, $p30, $i31, $i32, $i33, $p34, $p27);
    goto $bb4_last;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref(0, 2448)), $mul.ref(2440, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2448)), $mul.ref(60, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 268435456);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p34 := $p11;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p10 := $p34;
    goto $bb3;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2448)), $mul.ref(2440, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i14 := rio_read_config_32($p13, 0, $p3);
    call {:si_unique_call 167} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p16 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 2448)), $mul.ref(2440, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2448)), $mul.ref(2440, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p27 := $p22;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p10 := $p27;
    goto $bb3;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p22;
    goto $bb10_dummy;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2448)), $mul.ref(2440, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p16, $p18;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_854;
}



const rio_clr_err_stopped: ref;

axiom rio_clr_err_stopped == $sub.ref(0, 341616);

procedure rio_clr_err_stopped($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation rio_clr_err_stopped($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i24;
  var $i100: i24;
  var $i101: i24;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i24;
  var $i120: i24;
  var $i121: i24;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $i128: i1;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i146: i32;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i24;
  var $i169: i24;
  var $i170: i24;
  var $p171: ref;
  var $p172: ref;
  var $i173: i8;
  var $i174: i64;
  var $i175: i64;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i24;
  var $i191: i24;
  var $i192: i24;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i64;
  var $i197: i64;
  var $i198: i64;
  var $i199: i1;
  var $i200: i32;
  var $i201: i32;
  var $i202: i32;
  var $i203: i1;
  var $i204: i64;
  var $i205: i1;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i24;
  var $i213: i24;
  var $i214: i24;
  var $p215: ref;
  var $p216: ref;
  var $i217: i8;
  var $i218: i64;
  var $i219: i64;
  var $i220: i64;
  var $i221: i1;
  var $p222: ref;
  var $i223: i32;
  var $i224: i32;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i24;
  var $i239: i24;
  var $i240: i24;
  var $p241: ref;
  var $p242: ref;
  var $i243: i8;
  var $i244: i64;
  var $i245: i64;
  var $i246: i64;
  var $i247: i1;
  var $i248: i32;
  var $i249: i32;
  var $i250: i32;
  var $i251: i1;
  var $i252: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 188} {:cexpr "rio_clr_err_stopped:arg:pnum"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p3, $i2);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i1);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2448, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 112)), $mul.ref(112, 1)), $mul.ref($i14, 8));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.3, $p3);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.3, $p3);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 65536);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.3, $p3);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i202 := $and.i32($i201, 256);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i203 := $ne.i32($i202, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.3, $p3);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i250 := $and.i32($i249, 65792);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 0);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i252 := $zext.i1.i32($i251);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $r := $i252;
    return;

  $bb41:
    assume $i203 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i204 := $p2i.ref.i64($p19);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i205 := $ne.i64($i204, 0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb43;

  $bb44:
    assume $i205 == 1;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p206, .str);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p207, .str.44);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p208, .str.2);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p209, .str.52);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i212 := $load.i24($M.12, $p211);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i213 := $and.i24($i212, $sub.i24(0, 262144));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i214 := $or.i24($i213, 851);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p211, $i214);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p215, 1);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.13, $p216);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i64($i217);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i219 := $and.i64($i218, 1);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i220 := ldv__builtin_expect($i219, 0);
    call {:si_unique_call 222} {:cexpr "tmp___7"} boogie_si_record_i64($i220);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i221 := $ne.i64($i220, 0);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p19, $mul.ref(0, 2448)), $mul.ref(64, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.0, $p222);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i224 := $and.i32($i223, 255);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_29 := rio_get_input_status($p19, $i224, $0.ref);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} __const_udelay(214750);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i228 := $mul.i32($i1, 32);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i229 := $add.i32($i227, $i228);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i230 := $add.i32($i229, 88);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_30 := rio_read_config_32($p0, $i230, $p3);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p232, .str);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p233, .str.44);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p234, .str.2);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p235, .str.51);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i238 := $load.i24($M.12, $p237);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i239 := $and.i24($i238, $sub.i24(0, 262144));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i240 := $or.i24($i239, 859);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p237, $i240);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p241, 1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.13, $p242);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i64($i243);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i245 := $and.i64($i244, 1);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i246 := ldv__builtin_expect($i245, 0);
    call {:si_unique_call 228} {:cexpr "tmp___8"} boogie_si_record_i64($i246);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i247 := $ne.i64($i246, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i247 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.3, $p3);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} __dynamic_pr_debug.ref.ref.i32.i32($p13, .str.51, $i1, $i248);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i221 == 1;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} __dynamic_pr_debug.ref.ref($p12, .str.52);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p31, .str);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p32, .str.44);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p33, .str.2);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p34, .str.45);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.12, $p36);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 795);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p36, $i39);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p40, 1);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.13, $p41);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 191} {:cexpr "tmp"} boogie_si_record_i64($i45);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i47 := rio_get_input_status($p0, $i1, $p4);
    call {:si_unique_call 194} {:cexpr "tmp___1"} boogie_si_record_i32($i47);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p65, .str);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p66, .str.44);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p67, .str.2);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p68, .str.47);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.12, $p70);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 805);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p70, $i73);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p74, 1);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.13, $p75);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 202} {:cexpr "tmp___2"} boogie_si_record_i64($i79);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.3, $p4);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 2016);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i84 := $lshr.i32($i83, 5);
    call {:si_unique_call 204} {:cexpr "far_ackid"} boogie_si_record_i32($i84);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.3, $p4);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 31);
    call {:si_unique_call 205} {:cexpr "far_linkstat"} boogie_si_record_i32($i86);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i89 := $mul.i32($i1, 32);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i88, $i89);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, 72);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} vslice_dummy_var_26 := rio_read_config_32($p0, $i91, $p4);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p93, .str);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p94, .str.44);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p95, .str.2);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p96, .str.48);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i99 := $load.i24($M.12, $p98);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i100 := $and.i24($i99, $sub.i24(0, 262144));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i101 := $or.i24($i100, 811);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p98, $i101);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p102, 1);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.13, $p103);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i64($i104);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i106 := $and.i64($i105, 1);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i107 := ldv__builtin_expect($i106, 0);
    call {:si_unique_call 208} {:cexpr "tmp___3"} boogie_si_record_i64($i107);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.3, $p4);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 1056964608);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i112 := $lshr.i32($i111, 24);
    call {:si_unique_call 210} {:cexpr "near_ackid"} boogie_si_record_i32($i112);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p113, .str);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p114, .str.44);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p115, .str.2);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p116, .str.49);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i119 := $load.i24($M.12, $p118);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i120 := $and.i24($i119, $sub.i24(0, 262144));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i121 := $or.i24($i120, 815);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p118, $i121);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p122, 1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.13, $p123);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i64($i124);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i126 := $and.i64($i125, 1);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i127 := ldv__builtin_expect($i126, 0);
    call {:si_unique_call 212} {:cexpr "tmp___4"} boogie_si_record_i64($i127);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.3, $p4);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i129, 16128);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i131 := $lshr.i32($i130, 8);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, $i84);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i132 == 1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.3, $p4);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 63);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, $i84);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i180 := $mul.i32($i1, 32);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i181 := $add.i32($i179, $i180);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i182 := $add.i32($i181, 88);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_25 := rio_read_config_32($p0, $i182, $p3);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p184, .str);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p185, .str.44);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p186, .str.2);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p187, .str.51);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i190 := $load.i24($M.12, $p189);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i191 := $and.i24($i190, $sub.i24(0, 262144));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i192 := $or.i24($i191, 847);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p189, $i192);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p193, 1);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.13, $p194);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i64($i195);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i197 := $and.i64($i196, 1);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i198 := ldv__builtin_expect($i197, 0);
    call {:si_unique_call 200} {:cexpr "tmp___6"} boogie_si_record_i64($i198);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i199 == 1;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.3, $p3);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} __dynamic_pr_debug.ref.ref.i32.i32($p11, .str.51, $i1, $i200);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i138 := $mul.i32($i1, 32);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i137, $i138);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i139, 72);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i141 := $shl.i32($i112, 24);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i142 := $shl.i32($i84, 8);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i143 := $or.i32($i141, $i142);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i144 := $or.i32($i143, $i84);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} vslice_dummy_var_27 := rio_write_config_32($p0, $i140, $i144);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i146 := $add.i32($i84, 1);
    call {:si_unique_call 215} {:cexpr "far_ackid"} boogie_si_record_i32($i146);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p19);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i148 == 1);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p162, .str);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p163, .str.44);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p164, .str.2);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p165, .str.50);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i168 := $load.i24($M.12, $p167);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i169 := $and.i24($i168, $sub.i24(0, 262144));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i170 := $or.i24($i169, 841);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p167, $i170);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p171, 1);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.13, $p172);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i64($i173);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i175 := $and.i64($i174, 1);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i176 := ldv__builtin_expect($i175, 0);
    call {:si_unique_call 218} {:cexpr "tmp___5"} boogie_si_record_i64($i176);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i177 == 1;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} __dynamic_pr_debug.ref.ref($p10, .str.50);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i148 == 1;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p19, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p19, $mul.ref(0, 2448)), $mul.ref(64, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 255);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i154 := $mul.i32($i153, 32);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i155 := $add.i32($i150, $i154);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i155, 72);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i157 := $shl.i32($i146, 24);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i158 := $shl.i32($i112, 8);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i159 := $or.i32($i157, $i158);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i160 := $or.i32($i159, $i112);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} vslice_dummy_var_28 := rio_write_config_32($p19, $i156, $i160);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb26;

  $bb22:
    assume $i128 == 1;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} __dynamic_pr_debug.ref.ref.i32.i32.i32.i32($p9, .str.49, $i1, $i84, $i86, $i112);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i108 == 1;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.3, $p4);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} __dynamic_pr_debug.ref.ref.i32.i32($p8, .str.48, $i1, $i109);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i80 == 1;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.3, $p4);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} __dynamic_pr_debug.ref.ref.i32.i32($p7, .str.47, $i1, $i81);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume $i48 == 1;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p49, .str);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p50, .str.44);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p51, .str.2);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p52, .str.46);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.12, $p54);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 800);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p54, $i57);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p58, 1);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.13, $p59);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 196} {:cexpr "tmp___0"} boogie_si_record_i64($i63);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i64 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} __dynamic_pr_debug.ref.ref($p6, .str.46);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i46 == 1;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} __dynamic_pr_debug.ref.ref($p5, .str.45);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i24 := $mul.i32($i1, 32);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i23, $i24);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 88);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_24 := rio_read_config_32($p0, $i26, $p3);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rio_get_input_status: ref;

axiom rio_get_input_status == $sub.ref(0, 342648);

procedure rio_get_input_status($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.3, $CurrAddr;



implementation rio_get_input_status($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i20: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i44: i32;
  var $i45: i1;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 231} {:cexpr "rio_get_input_status:arg:pnum"} boogie_si_record_i32($i1);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i1, 2);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 32);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i13, $i15);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_32 := rio_write_config_32($p0, $i16, 4);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p2);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} __const_udelay(214750);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i1, 32);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i22, $i23);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 68);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vslice_dummy_var_33 := rio_read_config_32($p0, $i25, $p3);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.3, $p3);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} __const_udelay(214750);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i1, 32);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i31, $i32);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 68);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_34 := rio_read_config_32($p0, $i34, $p3);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.3, $p3);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} __const_udelay(214750);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i40 := $mul.i32($i1, 32);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i39, $i40);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 68);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_35 := rio_read_config_32($p0, $i42, $p3);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.3, $p3);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 5);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.3, $p3);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p2, $i29);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb11;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(80, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i1, 32);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i7, $i8);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 68);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_31 := rio_read_config_32($p0, $i10, $p3);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} __const_udelay(214750);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rio_mport_get_feature: ref;

axiom rio_mport_get_feature == $sub.ref(0, 343680);

procedure rio_mport_get_feature($p0: ref, $i1: i32, $i2: i16, $i3: i8, $i4: i32) returns ($r: i32);



const rio_lock_device: ref;

axiom rio_lock_device == $sub.ref(0, 344712);

procedure rio_lock_device($p0: ref, $i1: i16, $i2: i8, $i3: i32) returns ($r: i32);



const rio_unlock_device: ref;

axiom rio_unlock_device == $sub.ref(0, 345744);

procedure rio_unlock_device($p0: ref, $i1: i16, $i2: i8) returns ($r: i32);



const rio_route_add_entry: ref;

axiom rio_route_add_entry == $sub.ref(0, 346776);

procedure rio_route_add_entry($p0: ref, $i1: i16, $i2: i16, $i3: i8, $i4: i32) returns ($r: i32);



const rio_std_route_add_entry: ref;

axiom rio_std_route_add_entry == $sub.ref(0, 347808);

procedure rio_std_route_add_entry($p0: ref, $i1: i16, $i2: i8, $i3: i16, $i4: i16, $i5: i8) returns ($r: i32);



const ldv_try_module_get_10: ref;

axiom ldv_try_module_get_10 == $sub.ref(0, 348840);

procedure ldv_try_module_get_10($p0: ref) returns ($r: i1);



const ldv_module_put_11: ref;

axiom ldv_module_put_11 == $sub.ref(0, 349872);

procedure ldv_module_put_11($p0: ref);



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 350904);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i3 := $M.19;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.19;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $M.19 := $i6;
    call {:si_unique_call 242} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} ldv_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 351936);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} __VERIFIER_error();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 352968);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i3 := ldv_undef_int();
    call {:si_unique_call 245} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i5 := $M.19;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.19 := $i6;
    call {:si_unique_call 246} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 354000);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 1} true;
    call {:si_unique_call 247} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 249} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rio_route_get_entry: ref;

axiom rio_route_get_entry == $sub.ref(0, 355032);

procedure rio_route_get_entry($p0: ref, $i1: i16, $i2: i16, $p3: ref, $i4: i32) returns ($r: i32);



const rio_std_route_get_entry: ref;

axiom rio_std_route_get_entry == $sub.ref(0, 356064);

procedure rio_std_route_get_entry($p0: ref, $i1: i16, $i2: i8, $i3: i16, $i4: i16, $p5: ref) returns ($r: i32);



const ldv_try_module_get_12: ref;

axiom ldv_try_module_get_12 == $sub.ref(0, 357096);

procedure ldv_try_module_get_12($p0: ref) returns ($r: i1);



const ldv_module_put_13: ref;

axiom ldv_module_put_13 == $sub.ref(0, 358128);

procedure ldv_module_put_13($p0: ref);



const rio_route_clr_table: ref;

axiom rio_route_clr_table == $sub.ref(0, 359160);

procedure rio_route_clr_table($p0: ref, $i1: i16, $i2: i32) returns ($r: i32);



const rio_std_route_clr_table: ref;

axiom rio_std_route_clr_table == $sub.ref(0, 360192);

procedure rio_std_route_clr_table($p0: ref, $i1: i16, $i2: i8, $i3: i16) returns ($r: i32);



const ldv_try_module_get_14: ref;

axiom ldv_try_module_get_14 == $sub.ref(0, 361224);

procedure ldv_try_module_get_14($p0: ref) returns ($r: i1);



const ldv_module_put_15: ref;

axiom ldv_module_put_15 == $sub.ref(0, 362256);

procedure ldv_module_put_15($p0: ref);



const rio_request_mport_dma: ref;

axiom rio_request_mport_dma == $sub.ref(0, 363288);

procedure rio_request_mport_dma($p0: ref) returns ($r: ref);



const __dma_cap_zero: ref;

axiom __dma_cap_zero == $sub.ref(0, 364320);

procedure __dma_cap_zero($p0: ref);



const __dma_cap_set: ref;

axiom __dma_cap_set == $sub.ref(0, 365352);

procedure __dma_cap_set($i0: i32, $p1: ref);



const rio_chan_filter: ref;

axiom rio_chan_filter == $sub.ref(0, 366384);

procedure rio_chan_filter($p0: ref, $p1: ref) returns ($r: i1);



const __dma_request_channel: ref;

axiom __dma_request_channel == $sub.ref(0, 367416);

procedure __dma_request_channel($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 368448);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 250} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 251} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 369480);

procedure set_bit($i0: i64, $p1: ref);



const bitmap_zero: ref;

axiom bitmap_zero == $sub.ref(0, 370512);

procedure bitmap_zero($p0: ref, $i1: i32);



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 371544);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const rio_request_dma: ref;

axiom rio_request_dma == $sub.ref(0, 372576);

procedure rio_request_dma($p0: ref) returns ($r: ref);



const rio_release_dma: ref;

axiom rio_release_dma == $sub.ref(0, 373608);

procedure rio_release_dma($p0: ref);
  free requires assertsPassed;



implementation rio_release_dma($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} dma_release_channel($p0);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    return;
}



const dma_release_channel: ref;

axiom dma_release_channel == $sub.ref(0, 374640);

procedure dma_release_channel($p0: ref);
  free requires assertsPassed;



implementation dma_release_channel($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    return;
}



const rio_dma_prep_xfer: ref;

axiom rio_dma_prep_xfer == $sub.ref(0, 375672);

procedure rio_dma_prep_xfer($p0: ref, $i1: i16, $p2: ref, $i3: i32, $i4: i64) returns ($r: ref);



const dmaengine_prep_rio_sg: ref;

axiom dmaengine_prep_rio_sg == $sub.ref(0, 376704);

procedure dmaengine_prep_rio_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64, $p5: ref) returns ($r: ref);



const rio_dma_prep_slave_sg: ref;

axiom rio_dma_prep_slave_sg == $sub.ref(0, 377736);

procedure rio_dma_prep_slave_sg($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i64) returns ($r: ref);



const rio_register_scan: ref;

axiom rio_register_scan == $sub.ref(0, 378768);

procedure rio_register_scan($i0: i32, $p1: ref) returns ($r: i32);



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 379800);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 380832);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 381864);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 382896);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 383928);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 255} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p2 := ldv_malloc($i0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 384960);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 257} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 1} true;
    call {:si_unique_call 258} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 259} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 260} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $p4 := malloc($i0);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 262} __VERIFIER_assume($i7);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 385992);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 263} $r := $malloc($i0);
    return;
}



const rio_unregister_scan: ref;

axiom rio_unregister_scan == $sub.ref(0, 387024);

procedure rio_unregister_scan($i0: i32, $p1: ref) returns ($r: i32);



const list_del: ref;

axiom list_del == $sub.ref(0, 388056);

procedure list_del($p0: ref);



const kfree: ref;

axiom kfree == $sub.ref(0, 389088);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} free_($p0);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 390120);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 265} $free($p0);
    return;
}



const rio_register_mport: ref;

axiom rio_register_mport == $sub.ref(0, 391152);

procedure rio_register_mport($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.0, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation rio_register_mport($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i8: i8;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p61: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i24;
  var $i95: i24;
  var $i96: i24;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i7: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i3 := $M.38;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 7);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $M.38;
    call {:si_unique_call 269} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i9 := $M.38;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.38 := $i12;
    call {:si_unique_call 270} {:cexpr "next_portid"} boogie_si_record_i8($i12);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i8);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i17 := rio_get_hdid($i16);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1128, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1200, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_37 := dev_set_name.ref.ref.i32($p20, .str.32, $i23);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1200, 1)), $mul.ref(1384, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, rio_mport_class);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1200, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i28 := device_register($p27);
    call {:si_unique_call 274} {:cexpr "res"} boogie_si_record_i32($i28);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $M.39 := $store.ref($M.39, $p34, .str);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.40 := $store.ref($M.40, $p35, .str.34);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p36, .str.2);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p37, .str.35);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.43, $p39);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 1934);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $M.43 := $store.i24($M.43, $p39, $i42);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p43, 1);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.44, $p44);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 277} {:cexpr "tmp___0"} boogie_si_record_i64($i48);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} mutex_lock_nested(rio_mport_list_lock, 0);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(16, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} list_add_tail($p54, rio_mports);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, rio_scans);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref($sub.ref(0, 8), 32));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p56, $mul.ref($sub.ref(0, 8), 32)), $mul.ref(8, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, $p2i.ref.i64(rio_scans));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} mutex_unlock(rio_mport_list_lock);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p88, .str);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p89, .str.34);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p90, .str.2);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p91, .str.36);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i94 := $load.i24($M.12, $p93);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i95 := $and.i24($i94, $sub.i24(0, 262144));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i96 := $or.i24($i95, 1953);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p93, $i96);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p97, 1);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.13, $p98);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i64($i99);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i101 := $and.i64($i100, 1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 283} {:cexpr "tmp___1"} boogie_si_record_i64($i102);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb29:
    assume $i103 == 1;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1160, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} __dynamic_pr_debug.ref.ref.ref.ref.i32($p2, .str.36, .str.34, $p105, $i108);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p61 := $p57;
    goto $bb14;

  $bb14:
    call $p62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $p61 := rio_register_mport_loop_$bb14($p0, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $p61);
    goto $bb14_last;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p61, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i64, $i66);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i67 == 1);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p61, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, $sub.i32(0, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p61, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref($sub.ref(0, 8), 32));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p83, $mul.ref($sub.ref(0, 8), 32)), $mul.ref(8, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, $p2i.ref.i64(rio_scans));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i87 == 1);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb26:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $p61 := $p84;
    goto $bb26_dummy;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p61, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $p72);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p61, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i76, $i78);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i79 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb17;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1200, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p50, .str.35, $i53);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1200, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} dev_err.ref.ref.i32.i32($p30, .str.33, $i33, $i28);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_36 := printk.ref(.str.31);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;
}



const rio_get_hdid: ref;

axiom rio_get_hdid == $sub.ref(0, 392184);

procedure rio_get_hdid($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rio_get_hdid($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} {:cexpr "rio_get_hdid:arg:index"} boogie_si_record_i32($i0);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i1 := $M.45;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i3 := $M.45;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, $i0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i0, 7);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i0);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(hdid, $mul.ref(0, 32)), $mul.ref($i7, 4));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.46, $p8);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 393216);

procedure dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 286} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 287} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const device_register: ref;

axiom device_register == $sub.ref(0, 394248);

procedure device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 288} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 289} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 395280);

procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 396312);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    return;
}



const rio_local_get_device_id: ref;

axiom rio_local_get_device_id == $sub.ref(0, 397344);

procedure rio_local_get_device_id($p0: ref) returns ($r: i16);



const rio_get_device: ref;

axiom rio_get_device == $sub.ref(0, 398376);

procedure rio_get_device($i0: i16, $i1: i16, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.16, $M.4, $M.3, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $CurrAddr, $M.19, assertsPassed;



implementation rio_get_device($i0: i16, $i1: i16, $p2: ref) returns ($r: ref)
{
  var $i3: i32;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} {:cexpr "rio_get_device:arg:vid"} boogie_si_record_i16($i0);
    call {:si_unique_call 291} {:cexpr "rio_get_device:arg:did"} boogie_si_record_i16($i1);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i0);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p7 := rio_get_asm($i4, $i6, $sub.i16(0, 1), $sub.i16(0, 1), $p2);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const rio_get_asm: ref;

axiom rio_get_asm == $sub.ref(0, 399408);

procedure rio_get_asm($i0: i16, $i1: i16, $i2: i16, $i3: i16, $p4: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.16, $M.4, $M.3, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $CurrAddr, $M.19, assertsPassed;



implementation rio_get_asm($i0: i16, $i1: i16, $i2: i16, $i3: i16, $p4: ref) returns ($r: ref)
{
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p24: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p53: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p28: ref;
  var $i64: i64;
  var $i65: i1;
  var $p59: ref;
  var $p66: ref;
  var vslice_dummy_var_38: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} {:cexpr "rio_get_asm:arg:vid"} boogie_si_record_i16($i0);
    call {:si_unique_call 294} {:cexpr "rio_get_asm:arg:did"} boogie_si_record_i16($i1);
    call {:si_unique_call 295} {:cexpr "rio_get_asm:arg:asm_vid"} boogie_si_record_i16($i2);
    call {:si_unique_call 296} {:cexpr "rio_get_asm:arg:asm_did"} boogie_si_record_i16($i3);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i5 := preempt_count();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 298} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 2096896);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 299} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 301} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_38 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} spin_lock(rio_global_list_lock);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p4);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, rio_devices);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p24 := $p25;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p24);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p59 := $0.ref;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} rio_dev_put($p4);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p66 := rio_dev_get($p59);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} spin_unlock(rio_global_list_lock);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $r := $p66;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p28 := $p24;
    goto $bb10;

  $bb10:
    call $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $p54, $i55, $i56, $i57, $i58, $p53, $p60, $p61, $i62, $i63, $p28, $i64, $i65 := rio_get_asm_loop_$bb10($i0, $i1, $i2, $i3, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $p54, $i55, $i56, $i57, $i58, $p53, $p60, $p61, $i62, $i63, $p28, $i64, $i65);
    goto $bb10_last;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p28);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, $p2i.ref.i64(rio_devices));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i65 == 1);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb37:
    assume $i65 == 1;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 65535);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i31 == 1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref(0, 2448)), $mul.ref(44, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i0);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i34, $i35);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i63 == 1);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb35:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $p28 := $p61;
    goto $bb35_dummy;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 65535);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i38 == 1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p29, $mul.ref(0, 2448)), $mul.ref(42, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i1);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i41, $i42);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb17;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i2);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 65535);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i45 == 1);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p29, $mul.ref(0, 2448)), $mul.ref(54, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i2);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i48, $i49);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb17;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i3);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 65535);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p53 := $p28;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i52 == 1);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p29, $mul.ref(0, 2448)), $mul.ref(52, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i3);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i56, $i57);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p53 := $p28;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb17;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p59 := $p53;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb29;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb24;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb19;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb13;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2448)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} warn_slowpath_null(.str.2, 1133);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb35_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1671;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 400440);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.16, $M.4, $M.3, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $CurrAddr, $M.19, assertsPassed;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i0 := devirtbounce.13(0, __preempt_count);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 309} {:cexpr "pfo_ret__"} boogie_si_record_i32($i0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 2147483647);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 401472);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    return;
}



const rio_dev_put: ref;

axiom rio_dev_put == $sub.ref(0, 402504);

procedure rio_dev_put($p0: ref);
  free requires assertsPassed;



implementation rio_dev_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(104, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} put_device($p3);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rio_dev_get: ref;

axiom rio_dev_get == $sub.ref(0, 403536);

procedure rio_dev_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rio_dev_get($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var vslice_dummy_var_39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(104, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} vslice_dummy_var_39 := get_device($p3);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_device: ref;

axiom get_device == $sub.ref(0, 404568);

procedure get_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p1 := external_alloc();
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 405600);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    return;
}



const rio_request_inb_dbell: ref;

axiom rio_request_inb_dbell == $sub.ref(0, 406632);

procedure rio_request_inb_dbell($p0: ref, $p1: ref, $i2: i16, $i3: i16, $p4: ref) returns ($r: i32);



const rio_init_dbell_res: ref;

axiom rio_init_dbell_res == $sub.ref(0, 407664);

procedure rio_init_dbell_res($p0: ref, $i1: i16, $i2: i16);



const request_resource: ref;

axiom request_resource == $sub.ref(0, 408696);

procedure request_resource($p0: ref, $p1: ref) returns ($r: i32);



const rio_setup_inb_dbell: ref;

axiom rio_setup_inb_dbell == $sub.ref(0, 409728);

procedure rio_setup_inb_dbell($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const rio_release_inb_dbell: ref;

axiom rio_release_inb_dbell == $sub.ref(0, 410760);

procedure rio_release_inb_dbell($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);



const release_resource: ref;

axiom release_resource == $sub.ref(0, 411792);

procedure release_resource($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation release_resource($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 1} true;
    call {:si_unique_call 314} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 315} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rio_request_outb_dbell: ref;

axiom rio_request_outb_dbell == $sub.ref(0, 412824);

procedure rio_request_outb_dbell($p0: ref, $i1: i16, $i2: i16) returns ($r: ref);



const rio_release_outb_dbell: ref;

axiom rio_release_outb_dbell == $sub.ref(0, 413856);

procedure rio_release_outb_dbell($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rio_release_outb_dbell($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i2 := release_resource($p1);
    call {:si_unique_call 317} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} kfree($p3);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rio_request_inb_mbox: ref;

axiom rio_request_inb_mbox == $sub.ref(0, 414888);

procedure rio_request_inb_mbox($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);



const rio_init_mbox_res: ref;

axiom rio_init_mbox_res == $sub.ref(0, 415920);

procedure rio_init_mbox_res($p0: ref, $i1: i32, $i2: i32);



const rio_release_inb_mbox: ref;

axiom rio_release_inb_mbox == $sub.ref(0, 416952);

procedure rio_release_inb_mbox($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rio_release_inb_mbox($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} {:cexpr "rio_release_inb_mbox:arg:mbox"} boogie_si_record_i32($i1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 38);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 320} devirtbounce.15($p11, $p0, $i1);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1000, 1)), $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i17 := release_resource($p16);
    call {:si_unique_call 322} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const rio_request_outb_mbox: ref;

axiom rio_request_outb_mbox == $sub.ref(0, 417984);

procedure rio_request_outb_mbox($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);



const rio_release_outb_mbox: ref;

axiom rio_release_outb_mbox == $sub.ref(0, 419016);

procedure rio_release_outb_mbox($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rio_release_outb_mbox($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "rio_release_outb_mbox:arg:mbox"} boogie_si_record_i32($i1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(56, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 38);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(56, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 324} devirtbounce.15($p11, $p0, $i1);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1064, 1)), $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i17 := release_resource($p16);
    call {:si_unique_call 326} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const rio_init_mports: ref;

axiom rio_init_mports == $sub.ref(0, 420048);

procedure rio_init_mports() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $CurrAddr, assertsPassed, $M.50, $M.52, $M.54, $M.56, $M.51, $M.53, $M.55, $M.57, $M.15, $M.16, $M.4, $M.3, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44;



implementation rio_init_mports() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $i29: i8;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i41: i32;
  var $i40: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p15: ref;
  var $i16: i32;
  var $i50: i32;
  var $i14: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $i79: i64;
  var $p81: ref;
  var $i82: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p95: ref;
  var $i96: i64;
  var $p99: ref;
  var $i100: i64;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p107: ref;
  var $i109: i32;
  var $i110: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p70: ref;
  var $i71: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i24;
  var $i127: i24;
  var $i128: i24;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i64;
  var $i133: i64;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i7: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i4 := $M.38;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} mutex_lock_nested(rio_mport_list_lock, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, rio_mports);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 16), 2880));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 16), 2880)), $mul.ref(16, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, $p2i.ref.i64(rio_mports));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i14 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} mutex_unlock(rio_mport_list_lock);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i14, 0);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $p52 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.25, 0, 0, $p0, .str.24);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $M.49 := $p52;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p53 := $M.49;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i14);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p58 := kcalloc($i57, 88, 208);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} mutex_lock_nested(rio_mport_list_lock, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, rio_mports);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref($sub.ref(0, 16), 2880));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p65, $mul.ref($sub.ref(0, 16), 2880)), $mul.ref(16, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, $p2i.ref.i64(rio_mports));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p119 := $M.49;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} ldv_flush_workqueue_23($p119);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} mutex_unlock(rio_mport_list_lock);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p120, .str);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p121, .str.29);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p122, .str.2);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p123, .str.30);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i126 := $load.i24($M.12, $p125);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i127 := $and.i24($i126, $sub.i24(0, 262144));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i128 := $or.i24($i127, 1894);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p125, $i128);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p129, 1);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.13, $p130);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i64($i131);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i133 := $and.i64($i132, 1);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i134 := ldv__builtin_expect($i133, 0);
    call {:si_unique_call 354} {:cexpr "tmp___2"} boogie_si_record_i64($i134);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p136 := $M.49;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} ldv_destroy_workqueue_24($p136);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p59);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} kfree($p137);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} vslice_dummy_var_41 := rio_init();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i135 == 1;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} __dynamic_pr_debug.ref.ref($p3, .str.30);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i69 == 1;
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p70, $i71 := $p66, 0;
    goto $bb35;

  $bb35:
    call $p72, $i73, $i74, $p75, $p76, $i77, $i78, $i79, $p81, $i82, $p84, $p85, $i86, $p89, $p90, $p91, $i92, $p95, $i96, $p99, $i100, $p103, $p104, $i105, $p107, $i109, $i110, $p112, $p113, $p114, $p115, $p116, $i117, $i118, $p70, $i71, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_44 := rio_init_mports_loop_$bb35($p1, $p2, $p59, $p72, $i73, $i74, $p75, $p76, $i77, $i78, $i79, $p81, $i82, $p84, $p85, $i86, $p89, $p90, $p91, $i92, $p95, $i96, $p99, $i100, $p103, $p104, $i105, $p107, $i109, $i110, $p112, $p113, $p114, $p115, $p116, $i117, $i118, $p70, $i71, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_44);
    goto $bb35_last;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p70, $mul.ref(0, 2880)), $mul.ref(1128, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i110 := $i71;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 2880)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p114, $mul.ref($sub.ref(0, 16), 2880));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p114, $mul.ref($sub.ref(0, 16), 2880)), $mul.ref(16, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, $p2i.ref.i64(rio_mports));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i118 == 1);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb43:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $p70, $i71 := $p115, $i110;
    goto $bb43_dummy;

  $bb37:
    assume $i74 == 1;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p70, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb39;

  $bb40:
    assume $i78 == 1;
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i71);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p59, $mul.ref($i79, 88)), $mul.ref(80, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $p70);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i71);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p59, $mul.ref($i82, 88)), $mul.ref(0, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} __init_work($p84, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p85, 137438953408);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i71);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p59, $mul.ref($i86, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p2);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 346} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p90, $p91, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i71);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p59, $mul.ref($i92, 88)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} lockdep_init_map($p95, .str.28, $p1, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i71);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p59, $mul.ref($i96, 88)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} INIT_LIST_HEAD($p99);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i71);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p59, $mul.ref($i100, 88)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, disc_work_handler);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p104 := $M.49;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i71);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p59, $mul.ref($i105, 88)), $mul.ref(0, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_44 := queue_work($p104, $p107);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i71, 1);
    call {:si_unique_call 350} {:cexpr "n"} boogie_si_record_i32($i109);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i110 := $i109;
    goto $bb42;

  $bb29:
    assume $i61 == 1;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} vslice_dummy_var_43 := printk.ref(.str.27);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p63 := $M.49;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} ldv_destroy_workqueue_22($p63);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i55 == 1;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} vslice_dummy_var_42 := printk.ref(.str.26);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p15, $i16 := $p10, 0;
    goto $bb8;

  $bb8:
    call $p17, $i18, $i19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $i28, $i29, $i30, $p31, $p32, $p33, $p34, $p36, $p37, $p38, $p39, $i41, $i40, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $p15, $i16, $i50, vslice_dummy_var_40 := rio_init_mports_loop_$bb8($p17, $i18, $i19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $i28, $i29, $i30, $p31, $p32, $p33, $p34, $p36, $p37, $p38, $p39, $i41, $i40, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $p15, $i16, $i50, vslice_dummy_var_40);
    goto $bb8_last;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref(0, 2880)), $mul.ref(1128, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i19 := $sge.i32($i18, 0);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i16, 1);
    call {:si_unique_call 332} {:cexpr "n"} boogie_si_record_i32($i41);
    assume {:verifier.code 0} true;
    $i40 := $i41;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 2880)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 16), 2880));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p45, $mul.ref($sub.ref(0, 16), 2880)), $mul.ref(16, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $p2i.ref.i64(rio_mports));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i50 := $i40;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i14 := $i50;
    goto $bb7;

  $bb19:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $p15, $i16 := $p46, $i40;
    goto $bb19_dummy;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i40 := $i16;
    goto $bb18;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p15, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i28 := ldv_try_module_get_20($p27);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i28);
    call {:si_unique_call 334} {:cexpr "tmp"} boogie_si_record_i8($i29);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p15, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 335} vslice_dummy_var_40 := devirtbounce.16($p34, $p15, 0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p15, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} ldv_module_put_21($p39);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb43_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1915;

  $bb19_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;
}



const ldv_try_module_get_20: ref;

axiom ldv_try_module_get_20 == $sub.ref(0, 421080);

procedure ldv_try_module_get_20($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.19;



implementation ldv_try_module_get_20($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 359} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_21: ref;

axiom ldv_module_put_21 == $sub.ref(0, 422112);

procedure ldv_module_put_21($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_module_put_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} ldv_module_put($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 423144);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 362} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p5 := external_alloc();
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 424176);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 365} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 366} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_destroy_workqueue_22: ref;

axiom ldv_destroy_workqueue_22 == $sub.ref(0, 425208);

procedure ldv_destroy_workqueue_22($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.50, $M.52, $M.54, $M.56, $M.19, $CurrAddr, assertsPassed;



implementation ldv_destroy_workqueue_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} destroy_workqueue($p0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} call_and_disable_all_1(2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 426240);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 427272);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 428304);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 429336);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    return;
}



const disc_work_handler: ref;

axiom disc_work_handler == $sub.ref(0, 430368);

procedure disc_work_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $CurrAddr, assertsPassed;



implementation disc_work_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p3, .str);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p4, .str.55);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, .str.2);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p6, .str.56);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.12, $p8);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1825);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p8, $i11);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p12, 1);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.13, $p13);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 374} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i34 := ldv_try_module_get_18($p33);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 377} {:cexpr "tmp___0"} boogie_si_record_i8($i35);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i36 == 1;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    call {:si_unique_call 378} vslice_dummy_var_45 := devirtbounce.16($p42, $p44, 0);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} ldv_module_put_19($p51);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2880)), $mul.ref(1160, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} __dynamic_pr_debug.ref.ref.i32.ref($p1, .str.56, $i23, $p27);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 431400);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.51, $M.50, $M.53, $M.52, $M.55, $M.54, $M.57, $M.56;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i2 := ldv_queue_work_on_5(8192, $p0, $p1);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 381} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_flush_workqueue_23: ref;

axiom ldv_flush_workqueue_23 == $sub.ref(0, 432432);

procedure ldv_flush_workqueue_23($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.50, $M.52, $M.54, $M.56, $M.19, $CurrAddr, assertsPassed;



implementation ldv_flush_workqueue_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} flush_workqueue($p0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} call_and_disable_all_1(2);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_24: ref;

axiom ldv_destroy_workqueue_24 == $sub.ref(0, 433464);

procedure ldv_destroy_workqueue_24($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.50, $M.52, $M.54, $M.56, $M.19, $CurrAddr, assertsPassed;



implementation ldv_destroy_workqueue_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} destroy_workqueue($p0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} call_and_disable_all_1(2);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const rio_init: ref;

axiom rio_init == $sub.ref(0, 434496);

procedure rio_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.16, $M.4, $M.3, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $CurrAddr, $M.19, assertsPassed;



implementation rio_init() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p0 := rio_get_device($sub.i16(0, 1), $sub.i16(0, 1), $0.ref);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p3 := $p0;
    goto $bb4;

  $bb4:
    call $p4, $i5, $i6, $p3 := rio_init_loop_$bb4($p4, $i5, $i6, $p3);
    goto $bb4_last;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} rio_fixup_device($p3);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p4 := rio_get_device($sub.i16(0, 1), $sub.i16(0, 1), $p3);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb6_dummy;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2121;
}



const rio_fixup_device: ref;

axiom rio_fixup_device == $sub.ref(0, 435528);

procedure rio_fixup_device($p0: ref);
  free requires assertsPassed;



implementation rio_fixup_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 436560);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_1: ref;

axiom call_and_disable_all_1 == $sub.ref(0, 437592);

procedure call_and_disable_all_1($i0: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.50, $M.52, $M.54, $M.56, $M.19, $CurrAddr, assertsPassed;



implementation call_and_disable_all_1($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} {:cexpr "call_and_disable_all_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i1 := $M.50;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.52;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.54;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.56;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p12 := $M.57;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} call_and_disable_work_1($p12);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p9 := $M.55;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} call_and_disable_work_1($p9);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p6 := $M.53;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} call_and_disable_work_1($p6);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p3 := $M.51;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} call_and_disable_work_1($p3);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const call_and_disable_work_1: ref;

axiom call_and_disable_work_1 == $sub.ref(0, 438624);

procedure call_and_disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.50, $M.52, $M.54, $M.56, $M.19, $CurrAddr, assertsPassed;



implementation call_and_disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i1 := $M.50;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i3 := $M.50;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.52;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i11 := $M.52;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.54;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i19 := $M.54;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.56;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i27 := $M.56;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p30 := $M.57;
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} disc_work_handler($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 401} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p22 := $M.55;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} disc_work_handler($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 399} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p14 := $M.53;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} disc_work_handler($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 397} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p6 := $M.51;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} disc_work_handler($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 395} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 439656);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    return;
}



const ldv_queue_work_on_5: ref;

axiom ldv_queue_work_on_5 == $sub.ref(0, 440688);

procedure ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.51, $M.50, $M.53, $M.52, $M.55, $M.54, $M.57, $M.56;



implementation ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} {:cexpr "ldv_queue_work_on_5:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 404} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 405} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} activate_work_1($p2, 2);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 441720);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 407} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 1} true;
    call {:si_unique_call 408} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 409} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 442752);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.51, $M.50, $M.53, $M.52, $M.55, $M.54, $M.57, $M.56;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i2 := $M.50;
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.52;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.54;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.56;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $M.57 := $p0;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.56 := $i1;
    call {:si_unique_call 414} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $M.55 := $p0;
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.54 := $i1;
    call {:si_unique_call 413} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.53 := $p0;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $M.52 := $i1;
    call {:si_unique_call 412} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.51 := $p0;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $M.50 := $i1;
    call {:si_unique_call 411} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_try_module_get_18: ref;

axiom ldv_try_module_get_18 == $sub.ref(0, 443784);

procedure ldv_try_module_get_18($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.19;



implementation ldv_try_module_get_18($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 416} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_19: ref;

axiom ldv_module_put_19 == $sub.ref(0, 444816);

procedure ldv_module_put_19($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_module_put_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} ldv_module_put($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 445848);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 419} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 420} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const __rio_local_read_config_8: ref;

axiom __rio_local_read_config_8 == $sub.ref(0, 446880);

procedure __rio_local_read_config_8($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const __rio_local_read_config_16: ref;

axiom __rio_local_read_config_16 == $sub.ref(0, 447912);

procedure __rio_local_read_config_16($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const __rio_local_write_config_8: ref;

axiom __rio_local_write_config_8 == $sub.ref(0, 448944);

procedure __rio_local_write_config_8($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);



const __rio_local_write_config_16: ref;

axiom __rio_local_write_config_16 == $sub.ref(0, 449976);

procedure __rio_local_write_config_16($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);



const rio_mport_read_config_8: ref;

axiom rio_mport_read_config_8 == $sub.ref(0, 451008);

procedure rio_mport_read_config_8($p0: ref, $i1: i16, $i2: i8, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.63, $CurrAddr;



implementation rio_mport_read_config_8($p0: ref, $i1: i16, $i2: i8, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 423} {:cexpr "rio_mport_read_config_8:arg:destid"} boogie_si_record_i16($i1);
    call {:si_unique_call 424} {:cexpr "rio_mport_read_config_8:arg:hopcount"} boogie_si_record_i8($i2);
    call {:si_unique_call 425} {:cexpr "rio_mport_read_config_8:arg:offset"} boogie_si_record_i32($i3);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p5, 0);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p6 := spinlock_check(rio_config_lock);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 428} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.60, $p8);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.61, $p10);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.62, $p12);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i2);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 429} $i19 := devirtbounce.2($p11, $p0, $i14, $i16, $i18, $i3, 1, $p5);
    call {:si_unique_call 430} {:cexpr "res"} boogie_si_record_i32($i19);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.4, $p5);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p4, $i21);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} spin_unlock_irqrestore(rio_config_lock, $i7);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;
}



const rio_mport_read_config_16: ref;

axiom rio_mport_read_config_16 == $sub.ref(0, 452040);

procedure rio_mport_read_config_16($p0: ref, $i1: i16, $i2: i8, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.64, $CurrAddr;



implementation rio_mport_read_config_16($p0: ref, $i1: i16, $i2: i8, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 433} {:cexpr "rio_mport_read_config_16:arg:destid"} boogie_si_record_i16($i1);
    call {:si_unique_call 434} {:cexpr "rio_mport_read_config_16:arg:hopcount"} boogie_si_record_i8($i2);
    call {:si_unique_call 435} {:cexpr "rio_mport_read_config_16:arg:offset"} boogie_si_record_i32($i3);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p5, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, 1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $p9 := spinlock_check(rio_config_lock);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i10 := _raw_spin_lock_irqsave($p9);
    call {:si_unique_call 438} {:cexpr "flags"} boogie_si_record_i64($i10);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.60, $p11);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.61, $p13);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.62, $p15);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i1);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i2);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    call {:si_unique_call 439} $i22 := devirtbounce.2($p14, $p0, $i17, $i19, $i21, $i3, 2, $p5);
    call {:si_unique_call 440} {:cexpr "res"} boogie_si_record_i32($i22);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.4, $p5);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $M.64 := $store.i16($M.64, $p4, $i24);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} spin_unlock_irqrestore(rio_config_lock, $i10);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i8 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i8 := 129;
    goto $bb3;
}



const rio_mport_write_config_8: ref;

axiom rio_mport_write_config_8 == $sub.ref(0, 453072);

procedure rio_mport_write_config_8($p0: ref, $i1: i16, $i2: i8, $i3: i32, $i4: i8) returns ($r: i32);
  free requires assertsPassed;



implementation rio_mport_write_config_8($p0: ref, $i1: i16, $i2: i8, $i3: i32, $i4: i8) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} {:cexpr "rio_mport_write_config_8:arg:destid"} boogie_si_record_i16($i1);
    call {:si_unique_call 443} {:cexpr "rio_mport_write_config_8:arg:hopcount"} boogie_si_record_i8($i2);
    call {:si_unique_call 444} {:cexpr "rio_mport_write_config_8:arg:offset"} boogie_si_record_i32($i3);
    call {:si_unique_call 445} {:cexpr "rio_mport_write_config_8:arg:value"} boogie_si_record_i8($i4);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p5 := spinlock_check(rio_config_lock);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 448} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.60, $p7);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.65, $p9);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.62, $p11);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i1);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i2);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i4);
    call {:si_unique_call 449} $i19 := devirtbounce.4($p10, $p0, $i13, $i15, $i17, $i3, 1, $i18);
    call {:si_unique_call 450} {:cexpr "res"} boogie_si_record_i32($i19);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} spin_unlock_irqrestore(rio_config_lock, $i6);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;
}



const rio_mport_write_config_16: ref;

axiom rio_mport_write_config_16 == $sub.ref(0, 454104);

procedure rio_mport_write_config_16($p0: ref, $i1: i16, $i2: i8, $i3: i32, $i4: i16) returns ($r: i32);
  free requires assertsPassed;



implementation rio_mport_write_config_16($p0: ref, $i1: i16, $i2: i8, $i3: i32, $i4: i16) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "rio_mport_write_config_16:arg:destid"} boogie_si_record_i16($i1);
    call {:si_unique_call 453} {:cexpr "rio_mport_write_config_16:arg:hopcount"} boogie_si_record_i8($i2);
    call {:si_unique_call 454} {:cexpr "rio_mport_write_config_16:arg:offset"} boogie_si_record_i32($i3);
    call {:si_unique_call 455} {:cexpr "rio_mport_write_config_16:arg:value"} boogie_si_record_i16($i4);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i3, 1);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p8 := spinlock_check(rio_config_lock);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 458} {:cexpr "flags"} boogie_si_record_i64($i9);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1136, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.60, $p10);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.65, $p12);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.62, $p14);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i1);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i2);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i4);
    call {:si_unique_call 459} $i22 := devirtbounce.4($p13, $p0, $i16, $i18, $i20, $i3, 2, $i21);
    call {:si_unique_call 460} {:cexpr "res"} boogie_si_record_i32($i22);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} spin_unlock_irqrestore(rio_config_lock, $i9);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i7 := 129;
    goto $bb3;
}



const rio_mport_send_doorbell: ref;

axiom rio_mport_send_doorbell == $sub.ref(0, 455136);

procedure rio_mport_send_doorbell($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);



const rio_attach_device: ref;

axiom rio_attach_device == $sub.ref(0, 456168);

procedure rio_attach_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rio_attach_device($p0: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(104, 1)), $mul.ref(488, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, rio_bus_type);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    return;
}



const rio_match_bus: ref;

axiom rio_match_bus == $sub.ref(0, 457200);

procedure rio_match_bus($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rio_match_bus($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 104), 2448));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 72), 192)), $mul.ref(24, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p10 := rio_match_device($p7, $p3);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rio_uevent: ref;

axiom rio_uevent == $sub.ref(0, 458232);

procedure rio_uevent($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rio_uevent($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 104), 2448));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(44, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(42, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(54, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(52, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i21 := add_uevent_var.ref.ref.i32.i32.i32.i32($p1, .str.59, $i11, $i14, $i17, $i20);
    call {:si_unique_call 464} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const rio_device_probe: ref;

axiom rio_device_probe == $sub.ref(0, 459264);

procedure rio_device_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rio_device_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i19: i32;
  var vslice_dummy_var_46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(496, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 72), 192));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 104), 2448));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(96, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 19);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i19 := $i33;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 72), 192)), $mul.ref(32, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 72), 192)), $mul.ref(24, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 72), 192)), $mul.ref(24, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p22 := rio_match_device($p21, $p6);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} vslice_dummy_var_46 := rio_dev_get($p6);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p22);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i30 := $sge.i32($i29, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} rio_dev_put($p6);
    assume {:verifier.code 0} true;
    $i32 := $i29;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(96, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p4);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb15;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 72), 192)), $mul.ref(32, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    call {:si_unique_call 467} $i28 := devirtbounce.18($p27, $p6, $p22);
    call {:si_unique_call 468} {:cexpr "error"} boogie_si_record_i32($i28);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb12;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 19);
    goto $bb8;
}



const rio_device_remove: ref;

axiom rio_device_remove == $sub.ref(0, 460296);

procedure rio_device_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $CurrAddr, assertsPassed;



implementation rio_device_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 104), 2448));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(96, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} rio_dev_put($p2);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(96, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 470} devirtbounce.19($p12, $p2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const rio_match_device: ref;

axiom rio_match_device == $sub.ref(0, 461328);

procedure rio_match_device($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rio_match_device($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $p40: ref;
  var $p49: ref;
  var $p2: ref;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i1;
  var $p48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p2 := $p0;
    goto $bb1;

  $bb1:
    call $p3, $i4, $i5, $i6, $p7, $i8, $i9, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $p41, $i42, $i43, $p44, $i45, $i46, $i47, $p40, $p49, $p2, $p50, $i51, $i52, $i53, $p54, $i55, $i56, $i57 := rio_match_device_loop_$bb1($p1, $p3, $i4, $i5, $i6, $p7, $i8, $i9, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $p41, $i42, $i43, $p44, $i45, $i46, $i47, $p40, $p49, $p2, $p50, $i51, $i52, $i53, $p54, $i55, $i56, $i57);
    goto $bb1_last;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i53 == 1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p48 := $0.ref;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $r := $p48;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 65535);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 2448)), $mul.ref(44, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i9, $i12);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p2 := $p49;
    goto corral_source_split_2578_dummy;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 65535);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 2448)), $mul.ref(42, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i20, $i23);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb8;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 65535);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i28 == 1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 2448)), $mul.ref(54, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i31, $i34);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 65535);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p40 := $p2;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i39 == 1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 2448)), $mul.ref(52, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i43, $i46);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p40 := $p2;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb8;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p48 := $p40;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb20;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb15;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb10;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb27;

  corral_source_split_2578_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2512;
}



const add_uevent_var: ref;

axiom add_uevent_var == $sub.ref(0, 462360);

procedure add_uevent_var.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation add_uevent_var.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 472} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rio_register_driver: ref;

axiom rio_register_driver == $sub.ref(0, 463392);

procedure rio_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rio_register_driver($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, rio_bus_type);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i8 := driver_register($p7);
    call {:si_unique_call 475} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const driver_register: ref;

axiom driver_register == $sub.ref(0, 464424);

procedure driver_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 476} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 477} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rio_unregister_driver: ref;

axiom rio_unregister_driver == $sub.ref(0, 465456);

procedure rio_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation rio_unregister_driver($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} driver_unregister($p1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    return;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 466488);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    return;
}



const did_show: ref;

axiom did_show == $sub.ref(0, 467520);

procedure did_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation did_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(42, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i8 := sprintf.ref.ref.i32($p2, .str.76, $i7);
    call {:si_unique_call 480} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 468552);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



procedure sprintf.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



const vid_show: ref;

axiom vid_show == $sub.ref(0, 469584);

procedure vid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(44, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i8 := sprintf.ref.ref.i32($p2, .str.76, $i7);
    call {:si_unique_call 482} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const device_rev_show: ref;

axiom device_rev_show == $sub.ref(0, 470616);

procedure device_rev_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation device_rev_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(48, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i7 := sprintf.ref.ref.i32($p2, .str.82, $i6);
    call {:si_unique_call 484} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const asm_did_show: ref;

axiom asm_did_show == $sub.ref(0, 471648);

procedure asm_did_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation asm_did_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(52, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i8 := sprintf.ref.ref.i32($p2, .str.76, $i7);
    call {:si_unique_call 486} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const asm_vid_show: ref;

axiom asm_vid_show == $sub.ref(0, 472680);

procedure asm_vid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation asm_vid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(54, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i8 := sprintf.ref.ref.i32($p2, .str.76, $i7);
    call {:si_unique_call 488} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const asm_rev_show: ref;

axiom asm_rev_show == $sub.ref(0, 473712);

procedure asm_rev_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation asm_rev_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(56, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i8 := sprintf.ref.ref.i32($p2, .str.76, $i7);
    call {:si_unique_call 490} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const lprev_show: ref;

axiom lprev_show == $sub.ref(0, 474744);

procedure lprev_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation lprev_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2440, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p12 := .str.83;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i13 := sprintf.ref.ref.ref($p2, .str.77, $p12);
    call {:si_unique_call 493} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2440, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p11 := rio_name($p10);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p12 := $p11;
    goto $bb3;
}



const destid_show: ref;

axiom destid_show == $sub.ref(0, 475776);

procedure destid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation destid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2432, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i8 := sprintf.ref.ref.i32($p2, .str.76, $i7);
    call {:si_unique_call 495} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const modalias_show: ref;

axiom modalias_show == $sub.ref(0, 476808);

procedure modalias_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation modalias_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(44, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(42, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(54, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(52, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i17 := sprintf.ref.ref.i32.i32.i32.i32($p2, .str.80, $i7, $i10, $i13, $i16);
    call {:si_unique_call 497} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;
}



const rio_read_config: ref;

axiom rio_read_config == $sub.ref(0, 477840);

procedure rio_read_config($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.3, $M.63, $M.64, $CurrAddr;



implementation rio_read_config($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i64) returns ($r: i64)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i1;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $i30: i32;
  var $i28: i64;
  var $i29: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i37: i8;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $i42: i64;
  var $i43: i32;
  var $i44: i64;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i64;
  var $p54: ref;
  var $i55: i16;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i32;
  var $i62: i64;
  var $i63: i32;
  var $i64: i1;
  var $i69: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i8;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i8;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i8;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $i94: i32;
  var $i95: i1;
  var $i67: i32;
  var $i68: i64;
  var $i96: i64;
  var $i97: i32;
  var $i65: i64;
  var $i66: i32;
  var $i98: i1;
  var $i99: i32;
  var $i101: i16;
  var $i102: i32;
  var $i103: i32;
  var $i104: i8;
  var $i105: i64;
  var $p106: ref;
  var $i107: i16;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $i113: i32;
  var $i114: i64;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i119: i8;
  var $i120: i64;
  var $p121: ref;
  var $i21: i64;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p6 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $p7 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p9 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p10 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 503} {:cexpr "rio_read_config:arg:off"} boogie_si_record_i64($i4);
    call {:si_unique_call 504} {:cexpr "rio_read_config:arg:count"} boogie_si_record_i64($i5);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 16), 1424));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 104), 2448));
    call {:si_unique_call 505} {:cexpr "rio_read_config:arg:init_off"} boogie_si_record_i64($i4);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i15 := capable(21);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 507} {:cexpr "tmp"} boogie_si_record_i8($i16);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 256;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i20 := $sle.i64($i19, $i4);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i4, $i5);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i18);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i64($i22, $i23);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i5);
    call {:si_unique_call 510} {:cexpr "size"} boogie_si_record_i32($i30);
    assume {:verifier.code 0} true;
    $i28, $i29 := $i5, $i30;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i4);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 1);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i42, $i43 := $i4, $i29;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i42, 3);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i42, $i43;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i32($i63, 3);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i65, $i66 := $i62, $i63;
    assume {:branchcond $i64} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i98 := $ugt.i32($i66, 1);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i114, $i115 := $i65, $i66;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i21 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb34:
    assume $i116 == 1;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i64.i32($i114);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_51 := rio_read_config_8($p14, $i117, $p10);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.63, $p10);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i120 := $sub.i64($i114, $i4);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p3, $mul.ref($i120, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, $i119);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i98 == 1;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i64.i32($i65);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} vslice_dummy_var_50 := rio_read_config_16($p14, $i99, $p9);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.64, $p9);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i103 := $ashr.i32($i102, 8);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i105 := $sub.i64($i65, $i4);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p3, $mul.ref($i105, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, $i104);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.64, $p9);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i16.i8($i107);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i109 := $sub.i64($i65, $i4);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 1);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p3, $mul.ref($i110, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, $i108);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i112 := $add.i64($i65, 2);
    call {:si_unique_call 521} {:cexpr "off"} boogie_si_record_i64($i112);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i113 := $sub.i32($i66, 2);
    call {:si_unique_call 522} {:cexpr "size"} boogie_si_record_i32($i113);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i114, $i115 := $i112, $i113;
    goto $bb33;

  $bb23:
    assume $i64 == 1;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i67, $i68 := $i63, $i62;
    goto $bb26;

  $bb26:
    call $i69, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $i67, $i68, $i96, $i97, vslice_dummy_var_49 := rio_read_config_loop_$bb26($p3, $i4, $p8, $p14, $i69, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $i67, $i68, $i96, $i97, vslice_dummy_var_49);
    goto $bb26_last;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i64.i32($i68);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} vslice_dummy_var_49 := rio_read_config_32($p14, $i69, $p8);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.3, $p8);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i72 := $lshr.i32($i71, 24);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i74 := $sub.i64($i68, $i4);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p3, $mul.ref($i74, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, $i73);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.3, $p8);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i77 := $lshr.i32($i76, 16);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i79 := $sub.i64($i68, $i4);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 1);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p3, $mul.ref($i80, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, $i78);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.3, $p8);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i83 := $lshr.i32($i82, 8);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i85 := $sub.i64($i68, $i4);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 2);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p3, $mul.ref($i86, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i84);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.3, $p8);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i90 := $sub.i64($i68, $i4);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 3);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p3, $mul.ref($i91, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i89);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i68, 4);
    call {:si_unique_call 518} {:cexpr "off"} boogie_si_record_i64($i93);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i67, 4);
    call {:si_unique_call 519} {:cexpr "size"} boogie_si_record_i32($i94);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i94, 3);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i96, $i97 := $i93, $i94;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i65, $i66 := $i96, $i97;
    goto $bb25;

  $bb28:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i67, $i68 := $i94, $i93;
    goto $bb28_dummy;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i32($i43, 2);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb19;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i42);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} vslice_dummy_var_48 := rio_read_config_16($p14, $i47, $p7);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.64, $p7);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i51 := $ashr.i32($i50, 8);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i53 := $sub.i64($i42, $i4);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p3, $mul.ref($i53, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i52);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.64, $p7);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i16.i8($i55);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i57 := $sub.i64($i42, $i4);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p3, $mul.ref($i58, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i56);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i42, 2);
    call {:si_unique_call 515} {:cexpr "off"} boogie_si_record_i64($i60);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i43, 2);
    call {:si_unique_call 516} {:cexpr "size"} boogie_si_record_i32($i61);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i60, $i61;
    goto $bb22;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i29, 0);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb13;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i4);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_47 := rio_read_config_8($p14, $i35, $p6);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.63, $p6);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i38 := $sub.i64($i4, $i4);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p3, $mul.ref($i38, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i37);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i4, 1);
    call {:si_unique_call 512} {:cexpr "off"} boogie_si_record_i64($i40);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i29, 1);
    call {:si_unique_call 513} {:cexpr "size"} boogie_si_record_i32($i41);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i42, $i43 := $i40, $i41;
    goto $bb16;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i4);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i18, $i25);
    call {:si_unique_call 508} {:cexpr "size"} boogie_si_record_i32($i26);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    call {:si_unique_call 509} {:cexpr "count"} boogie_si_record_i64($i27);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i27, $i26;
    goto $bb10;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i18 := 16777216;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2784;
}



const rio_write_config: ref;

axiom rio_write_config == $sub.ref(0, 478872);

procedure rio_write_config($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i64) returns ($r: i64);
  free requires assertsPassed;



implementation rio_write_config($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i64) returns ($r: i64)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $i31: i64;
  var $i32: i32;
  var $i33: i64;
  var $i34: i32;
  var $i35: i64;
  var $i36: i1;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i16;
  var $i43: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $i57: i64;
  var $i58: i32;
  var $i59: i64;
  var $i60: i32;
  var $i61: i1;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i64;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i93: i64;
  var $i94: i32;
  var $i95: i1;
  var $i64: i32;
  var $i65: i64;
  var $i96: i64;
  var $i97: i32;
  var $i62: i64;
  var $i63: i32;
  var $i98: i1;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i8;
  var $i103: i16;
  var $i104: i64;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i16;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i16;
  var $i114: i32;
  var $i115: i32;
  var $i116: i16;
  var $i118: i64;
  var $i119: i32;
  var $i120: i64;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i64;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i8;
  var $i12: i64;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} {:cexpr "rio_write_config:arg:off"} boogie_si_record_i64($i4);
    call {:si_unique_call 525} {:cexpr "rio_write_config:arg:count"} boogie_si_record_i64($i5);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 16), 1424));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 104), 2448));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i5);
    call {:si_unique_call 526} {:cexpr "size"} boogie_si_record_i32($i10);
    call {:si_unique_call 527} {:cexpr "rio_write_config:arg:init_off"} boogie_si_record_i64($i4);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i64($i4, 16777215);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i4, $i5);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64($i13, 16777216);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i18, $i19 := $i5, $i10;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i4);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i4, $i19;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i33, 3);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i59, $i60 := $i33, $i34;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i61 := $ugt.i32($i60, 3);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i59, $i60;
    assume {:branchcond $i61} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i98 := $ugt.i32($i63, 1);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i120, $i121 := $i62, $i63;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i12 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb31:
    assume $i122 == 1;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i64.i32($i120);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i124 := $sub.i64($i120, $i4);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p3, $mul.ref($i124, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i8($i127);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_56 := rio_write_config_8($p9, $i123, $i128);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i98 == 1;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i99 := $sub.i64($i62, $i4);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 1);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p3, $mul.ref($i100, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i16($i102);
    call {:si_unique_call 545} {:cexpr "val___1"} boogie_si_record_i16($i103);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i104 := $sub.i64($i62, $i4);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p3, $mul.ref($i104, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i108 := $shl.i32($i107, 8);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i110 := $sext.i16.i32($i109);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i111 := $sext.i16.i32($i103);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i112 := $or.i32($i110, $i111);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i16($i112);
    call {:si_unique_call 546} {:cexpr "val___1"} boogie_si_record_i16($i113);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i64.i32($i62);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i113);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_55 := rio_write_config_16($p9, $i114, $i116);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i118 := $add.i64($i62, 2);
    call {:si_unique_call 548} {:cexpr "off"} boogie_si_record_i64($i118);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i119 := $sub.i32($i63, 2);
    call {:si_unique_call 549} {:cexpr "size"} boogie_si_record_i32($i119);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i120, $i121 := $i118, $i119;
    goto $bb30;

  $bb20:
    assume $i61 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i60, $i59;
    goto $bb23;

  $bb23:
    call $i66, $i67, $p68, $i69, $i70, $i71, $i72, $p73, $i74, $i75, $i76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i93, $i94, $i95, $i64, $i65, $i96, $i97, vslice_dummy_var_54 := rio_write_config_loop_$bb23($p3, $i4, $p9, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $p73, $i74, $i75, $i76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i93, $i94, $i95, $i64, $i65, $i96, $i97, vslice_dummy_var_54);
    goto $bb23_last;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i66 := $sub.i64($i65, $i4);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 3);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p3, $mul.ref($i67, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    call {:si_unique_call 538} {:cexpr "val___0"} boogie_si_record_i32($i70);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i71 := $sub.i64($i65, $i4);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 2);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p3, $mul.ref($i72, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i76 := $shl.i32($i75, 8);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i76, $i70);
    call {:si_unique_call 539} {:cexpr "val___0"} boogie_si_record_i32($i77);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i78 := $sub.i64($i65, $i4);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 1);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p3, $mul.ref($i79, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32($i82, 16);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i83, $i77);
    call {:si_unique_call 540} {:cexpr "val___0"} boogie_si_record_i32($i84);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i85 := $sub.i64($i65, $i4);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p3, $mul.ref($i85, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i89 := $shl.i32($i88, 24);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i90 := $or.i32($i89, $i84);
    call {:si_unique_call 541} {:cexpr "val___0"} boogie_si_record_i32($i90);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i65);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_54 := rio_write_config_32($p9, $i91, $i90);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i65, 4);
    call {:si_unique_call 543} {:cexpr "off"} boogie_si_record_i64($i93);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i64, 4);
    call {:si_unique_call 544} {:cexpr "size"} boogie_si_record_i32($i94);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i94, 3);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i96, $i97 := $i93, $i94;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i96, $i97;
    goto $bb22;

  $bb25:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i64, $i65 := $i94, $i93;
    goto $bb25_dummy;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i32($i34, 2);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb16;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i38 := $sub.i64($i33, $i4);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 1);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p3, $mul.ref($i39, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i16($i41);
    call {:si_unique_call 533} {:cexpr "val"} boogie_si_record_i16($i42);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i43 := $sub.i64($i33, $i4);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p3, $mul.ref($i43, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i47 := $shl.i32($i46, 8);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i49 := $sext.i16.i32($i48);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i50 := $sext.i16.i32($i42);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i49, $i50);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    call {:si_unique_call 534} {:cexpr "val"} boogie_si_record_i16($i52);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i33);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i52);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_53 := rio_write_config_16($p9, $i53, $i55);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i33, 2);
    call {:si_unique_call 536} {:cexpr "off"} boogie_si_record_i64($i57);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i34, 2);
    call {:si_unique_call 537} {:cexpr "size"} boogie_si_record_i32($i58);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i59, $i60 := $i57, $i58;
    goto $bb19;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i19, 0);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i4);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i4, $i4);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p3, $mul.ref($i25, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_52 := rio_write_config_8($p9, $i24, $i29);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i4, 1);
    call {:si_unique_call 531} {:cexpr "off"} boogie_si_record_i64($i31);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i19, 1);
    call {:si_unique_call 532} {:cexpr "size"} boogie_si_record_i32($i32);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i31, $i32;
    goto $bb13;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i4);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(16777216, $i15);
    call {:si_unique_call 528} {:cexpr "size"} boogie_si_record_i32($i16);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    call {:si_unique_call 529} {:cexpr "count"} boogie_si_record_i64($i17);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i17, $i16;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2926;
}



const rio_write_config_8: ref;

axiom rio_write_config_8 == $sub.ref(0, 479904);

procedure rio_write_config_8($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation rio_write_config_8($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} {:cexpr "rio_write_config_8:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 552} {:cexpr "rio_write_config_8:arg:data"} boogie_si_record_i8($i2);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(32, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2432, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2434, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i2);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i17 := rio_mport_write_config_8($p6, $i10, $i14, $i1, $i16);
    call {:si_unique_call 554} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const rio_write_config_16: ref;

axiom rio_write_config_16 == $sub.ref(0, 480936);

procedure rio_write_config_16($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation rio_write_config_16($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} {:cexpr "rio_write_config_16:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 556} {:cexpr "rio_write_config_16:arg:data"} boogie_si_record_i16($i2);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(32, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2432, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2434, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i2);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i17 := rio_mport_write_config_16($p6, $i10, $i14, $i1, $i16);
    call {:si_unique_call 558} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const capable: ref;

axiom capable == $sub.ref(0, 481968);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 559} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 1} true;
    call {:si_unique_call 560} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 561} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rio_read_config_8: ref;

axiom rio_read_config_8 == $sub.ref(0, 483000);

procedure rio_read_config_8($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.63, $CurrAddr;



implementation rio_read_config_8($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} {:cexpr "rio_read_config_8:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(32, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2432, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2434, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i15 := rio_mport_read_config_8($p6, $i10, $i14, $i1, $p2);
    call {:si_unique_call 564} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rio_read_config_16: ref;

axiom rio_read_config_16 == $sub.ref(0, 484032);

procedure rio_read_config_16($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.64, $CurrAddr;



implementation rio_read_config_16($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} {:cexpr "rio_read_config_16:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(32, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2432, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2448)), $mul.ref(2434, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i15 := rio_mport_read_config_16($p6, $i10, $i14, $i1, $p2);
    call {:si_unique_call 567} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const routes_show: ref;

axiom routes_show == $sub.ref(0, 485064);

procedure routes_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation routes_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p17: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i6: i32;
  var $p7: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(32, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i6, $p7 := 0, $p2;
    goto $bb1;

  $bb1:
    call $p8, $p9, $p10, $p11, $i12, $p13, $i14, $i15, $i16, $p18, $p19, $p20, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $p28, $p17, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $i36, $i37, $i6, $p7, $p38 := routes_show_loop_$bb1($p3, $p5, $p8, $p9, $p10, $p11, $i12, $p13, $i14, $i15, $i16, $p18, $p19, $p20, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $p28, $p17, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $i36, $i37, $i6, $p7, $p38);
    goto $bb1_last;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2448, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i6);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 255);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2448, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i6);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i26 := sprintf.ref.ref.i32.i32($p7, .str.81, $i6, $i25);
    call {:si_unique_call 570} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p7, $mul.ref($i27, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p17 := $p28;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i6, 1);
    call {:si_unique_call 568} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p5);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2880)), $mul.ref(1148, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.69, $p33);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i36 := (if $i35 == 1 then 65536 else 256);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i36, $i29);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p38 := $p17;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p2);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i41 := $sub.i64($i39, $i40);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb7:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i6, $p7 := $i29, $p17;
    goto $bb7_dummy;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p17 := $p7;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3070;
}



const lnext_show: ref;

axiom lnext_show == $sub.ref(0, 486096);

procedure lnext_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation lnext_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p35: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i15: i32;
  var $p16: ref;
  var $p44: ref;
  var $p14: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(60, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 268435456);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p45 := $p2;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p2);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i48 := $sub.i64($i46, $i47);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(64, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 65280);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i11, 8);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i13 := $ult.i32(0, $i12);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p14 := $p2;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p45 := $p14;
    goto $bb14;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i15, $p16 := 0, $p2;
    goto $bb6;

  $bb6:
    call $i17, $p18, $p19, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $p29, $p30, $p31, $i32, $i33, $p34, $i36, $i37, $p38, $p35, $i39, $i40, $i41, $i42, $i43, $i15, $p16, $p44 := lnext_show_loop_$bb6($p3, $p9, $i17, $p18, $p19, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $p29, $p30, $p31, $i32, $i33, $p34, $i36, $i37, $p38, $p35, $i39, $i40, $i41, $i42, $i43, $i15, $p16, $p44);
    goto $bb6_last;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i15);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2448, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(112, 1)), $mul.ref($i17, 8));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i36 := sprintf.ref.ref($p16, .str.78);
    call {:si_unique_call 575} {:cexpr "tmp___1"} boogie_si_record_i32($i36);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p16, $mul.ref($i37, 1));
    assume {:verifier.code 0} true;
    $p35 := $p38;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i15, 1);
    call {:si_unique_call 576} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p9);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 65280);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i42 := $lshr.i32($i41, 8);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i43 := $ult.i32($i39, $i42);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p44 := $p35;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p14 := $p44;
    goto $bb5;

  $bb11:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i15, $p16 := $i39, $p35;
    goto $bb11_dummy;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i15);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2448, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 112)), $mul.ref(112, 1)), $mul.ref($i25, 8));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p31 := rio_name($p30);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i32 := sprintf.ref.ref.ref($p16, .str.77, $p31);
    call {:si_unique_call 573} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p16, $mul.ref($i33, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p35 := $p34;
    goto $bb10;

  $bb11_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3128;
}



const hopcount_show: ref;

axiom hopcount_show == $sub.ref(0, 487128);

procedure hopcount_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation hopcount_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2434, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i8 := sprintf.ref.ref.i32($p2, .str.84, $i7);
    call {:si_unique_call 578} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const bus_scan_store: ref;

axiom bus_scan_store == $sub.ref(0, 488160);

procedure bus_scan_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.49, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $CurrAddr, assertsPassed, $M.50, $M.52, $M.54, $M.56, $M.51, $M.53, $M.55, $M.57, $M.15, $M.16, $M.4, $M.3, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44;



implementation bus_scan_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i10: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 580} {:cexpr "bus_scan_store:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i4 := kstrtol($p1, 0, $p3);
    call {:si_unique_call 582} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.71, $p3);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, $sub.i64(0, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.71, $p3);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i12 := $slt.i64($i11, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i12 == 1);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.71, $p3);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i64($i13, 7);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.71, $p3);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i17 := rio_mport_scan($i16);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 586} {:cexpr "rc"} boogie_si_record_i32($i17);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i10, 0);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i10;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i6 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i2);
    call {:si_unique_call 587} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb17;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 22);
    goto $bb3;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i9 := rio_init_mports();
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 584} {:cexpr "rc"} boogie_si_record_i32($i9);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb7;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 22);
    goto $bb3;
}



const kstrtol: ref;

axiom kstrtol == $sub.ref(0, 489192);

procedure kstrtol($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtol($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} {:cexpr "kstrtol:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i3 := kstrtoll($p0, $i1, $p2);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rio_mport_scan: ref;

axiom rio_mport_scan == $sub.ref(0, 490224);

procedure rio_mport_scan($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation rio_mport_scan($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p7: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i43: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "rio_mport_scan:arg:mport_id"} boogie_si_record_i32($i0);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} mutex_lock_nested(rio_mport_list_lock, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, rio_mports);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 16), 2880));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 2880)), $mul.ref(16, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, $p2i.ref.i64(rio_mports));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} mutex_unlock(rio_mport_list_lock);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 19);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $p12, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p7 := rio_mport_scan_loop_$bb4($i0, $p8, $i9, $i10, $i11, $p12, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p7);
    goto $bb4_last;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p12 := $p7;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2880)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($sub.ref(0, 16), 2880));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 16), 2880)), $mul.ref(16, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(rio_mports));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p17;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $i30 := ldv_try_module_get_16($p29);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 596} {:cexpr "tmp"} boogie_si_record_i8($i31);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} mutex_unlock(rio_mport_list_lock);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p12, $mul.ref(0, 2880)), $mul.ref(1128, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i37 := $sge.i32($i36, 0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p12, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    call {:si_unique_call 601} $i48 := devirtbounce.16($p47, $p12, 1);
    call {:si_unique_call 602} {:cexpr "rc"} boogie_si_record_i32($i48);
    assume {:verifier.code 0} true;
    $i43 := $i48;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p12, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} ldv_module_put_17($p52);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i21 := $i43;
    goto $bb13;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p12, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    call {:si_unique_call 599} $i42 := devirtbounce.16($p41, $p12, 0);
    call {:si_unique_call 600} {:cexpr "rc"} boogie_si_record_i32($i42);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb25;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} mutex_unlock(rio_mport_list_lock);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 19);
    goto $bb13;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb19;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} mutex_unlock(rio_mport_list_lock);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb13;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3224;
}



const ldv_try_module_get_16: ref;

axiom ldv_try_module_get_16 == $sub.ref(0, 491256);

procedure ldv_try_module_get_16($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.19;



implementation ldv_try_module_get_16($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 605} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_17: ref;

axiom ldv_module_put_17 == $sub.ref(0, 492288);

procedure ldv_module_put_17($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_module_put_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} ldv_module_put($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const kstrtoll: ref;

axiom kstrtoll == $sub.ref(0, 493320);

procedure kstrtoll($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoll($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 607} {:cexpr "kstrtoll:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 1} true;
    call {:si_unique_call 608} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 609} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const port_destid_show: ref;

axiom port_destid_show == $sub.ref(0, 494352);

procedure port_destid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation port_destid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1200), 2880));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 1200), 2880)), $mul.ref(1128, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i9 := sprintf.ref.ref.i32($p2, .str.76, $i8);
    call {:si_unique_call 611} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const sys_size_show: ref;

axiom sys_size_show == $sub.ref(0, 495384);

procedure sys_size_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation sys_size_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1200), 2880));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 1200), 2880)), $mul.ref(1148, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i9 := sprintf.ref.ref.i32($p2, .str.79, $i8);
    call {:si_unique_call 613} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 496416);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p1 := calloc(1, $i0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 616} __VERIFIER_assume($i4);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 497448);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.72;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 618} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.72;
    call {:si_unique_call 619} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.72 := cmdloc_dummy_var_4;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 498480);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.50, $M.52, $M.54, $M.56;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 620} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 621} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 622} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 623} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 499512);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_bus_type_19: ref;

axiom ldv_initialize_bus_type_19 == $sub.ref(0, 500544);

procedure ldv_initialize_bus_type_19();
  free requires assertsPassed;
  modifies $M.73, $M.0, $CurrAddr;



implementation ldv_initialize_bus_type_19()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.73 := $p0;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_bus_type_18: ref;

axiom ldv_initialize_bus_type_18 == $sub.ref(0, 501576);

procedure ldv_initialize_bus_type_18();
  free requires assertsPassed;
  modifies $M.73, $M.0, $CurrAddr;



implementation ldv_initialize_bus_type_18()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.73 := $p0;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 502608);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.74, $M.75, $M.76, $M.77, $M.50, $M.52, $M.54, $M.56, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.0, $M.95, $M.96, $M.73, $M.97, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.2, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.46, $M.45, $M.140, $M.141, $M.18, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.17, $M.99, $M.100, $M.98, $M.49, $M.38, $M.55, $M.57, $M.53, $M.51, $M.19, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285, $CurrAddr, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.72, $M.4, $M.3, assertsPassed, $M.63, $M.64, $M.15, $M.16, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i1;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    call {:si_unique_call 626} $initialize();
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p0 := ldv_init_zalloc(2336);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p2 := ldv_init_zalloc(120);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p4 := ldv_init_zalloc(2336);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p6 := ldv_init_zalloc(120);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} ldv_initialize();
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.74 := 0;
    call {:si_unique_call 633} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $M.75 := 0;
    call {:si_unique_call 634} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 635} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 636} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} work_init_1();
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 639} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 640} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 641} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 642} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 643} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 644} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 645} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $M.86 := 0;
    call {:si_unique_call 646} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 647} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 648} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 649} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 650} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 651} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $M.92 := 0;
    call {:si_unique_call 652} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.93 := 0;
    call {:si_unique_call 653} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $M.94 := 0;
    call {:si_unique_call 654} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i58, $i59, $p60, $i62, $i63, $p64, $i66, $i67, $p68, $i70, $i71, $p72, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $p131, $i133, $i134, $p135, $i137, $i138, $p139, $i141, $i142, $p143, $i145, $i146, $p147, $i149, $i150, $i151, $i152, $i153, $i154, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66 := main_loop_$bb1($p1, $p3, $p5, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i58, $i59, $p60, $i62, $i63, $p64, $i66, $i67, $p68, $i70, $i71, $p72, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $p131, $i133, $i134, $p135, $i137, $i138, $p139, $i141, $i142, $p143, $i145, $i146, $p147, $i149, $i150, $i151, $i152, $i153, $i154, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i8, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i8, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_stop();
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb49_dummy;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i153 := $M.94;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb200:
    assume $i154 == 1;
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} ldv_main_exported_5();
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i151 := $M.93;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb197:
    assume $i152 == 1;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_main_exported_10();
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i113 := $M.92;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb158:
    assume $i114 == 1;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} $i115 := __VERIFIER_nondet_int();
    call {:si_unique_call 724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i115);
    call {:si_unique_call 725} {:cexpr "tmp___6"} boogie_si_record_i32($i115);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i115, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i115, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ldv_stop();
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb165:
    assume $i118 == 1;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i145 := $M.92;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 2);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb191:
    assume $i146 == 1;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p147 := $M.73;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} vslice_dummy_var_66 := rio_device_remove($p147);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 739} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i149 := $M.80;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i150 := $sub.i32($i149, 1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $M.80 := $i150;
    call {:si_unique_call 740} {:cexpr "ref_cnt"} boogie_si_record_i32($i150);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    goto $bb193;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb163:
    assume $i117 == 1;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i137 := $M.92;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 1);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i141 := $M.92;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 2);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb188:
    assume $i142 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p143 := $M.73;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} vslice_dummy_var_65 := rio_match_bus($p143, $p7);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 737} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume $i138 == 1;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p139 := $M.73;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} vslice_dummy_var_64 := rio_match_bus($p139, $p7);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 735} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb161:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i115, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i119 == 1);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i129 := $M.92;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i133 := $M.92;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 2);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb182:
    assume $i134 == 1;
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p135 := $M.73;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} vslice_dummy_var_63 := rio_uevent($p135, $p5);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 733} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb179:
    assume $i130 == 1;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p131 := $M.73;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} vslice_dummy_var_62 := rio_uevent($p131, $p5);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 731} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb168:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i115, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb167;

  $bb170:
    assume $i120 == 1;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i121 := $M.92;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 1);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb172:
    assume $i122 == 1;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p123 := $M.73;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i124 := rio_device_probe($p123);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $M.97 := $i124;
    call {:si_unique_call 727} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i124);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i125 := $M.97;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb174:
    assume $i126 == 1;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i127 := $M.80;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i127, 1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $M.80 := $i128;
    call {:si_unique_call 729} {:cexpr "ref_cnt"} boogie_si_record_i32($i128);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb7:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i15 == 1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i111 := $M.91;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb155:
    assume $i112 == 1;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} ldv_main_exported_4();
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    goto $bb157;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i15 == 1;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i109 := $M.90;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb152:
    assume $i110 == 1;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ldv_main_exported_8();
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb5:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i8, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i8, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i8, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i18 == 1);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i107 := $M.89;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb149:
    assume $i108 == 1;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} ldv_main_exported_15();
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb22:
    assume $i18 == 1;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i105 := $M.88;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb146:
    assume $i106 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} ldv_main_exported_14();
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i103 := $M.87;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb143:
    assume $i104 == 1;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} ldv_main_exported_12();
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb18:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i8, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i19 == 1);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i101 := $M.86;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb140:
    assume $i102 == 1;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} ldv_main_exported_9();
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb24:
    assume $i19 == 1;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i99 := $M.85;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb137:
    assume $i100 == 1;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} ldv_main_exported_3();
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb3:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i23 == 1);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i97 := $M.84;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb134:
    assume $i98 == 1;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} ldv_main_exported_6();
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb32:
    assume $i23 == 1;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i95 := $M.83;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb131:
    assume $i96 == 1;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} ldv_main_exported_13();
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb30:
    assume $i22 == 1;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i93 := $M.82;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb128:
    assume $i94 == 1;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} ldv_main_exported_16();
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb28:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i24 == 1);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i76 := $M.81;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb98:
    assume $i77 == 1;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 681} $i78 := __VERIFIER_nondet_int();
    call {:si_unique_call 682} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i78);
    call {:si_unique_call 683} {:cexpr "tmp___5"} boogie_si_record_i32($i78);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i78, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} ldv_stop();
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb103:
    assume $i80 == 1;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i86 := $M.81;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116:
    assume $i87 == 1;
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i88 := rio_bus_init();
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $M.96 := $i88;
    call {:si_unique_call 688} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i88);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i89 := $M.96;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i91 := $M.96;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb121:
    assume $i92 == 1;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 711} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} ldv_check_final_state();
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb118:
    assume $i90 == 1;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 689} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 690} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} ldv_initialize_bin_attribute_5();
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 692} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 693} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} ldv_initialize_bus_type_19();
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 695} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 696} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 697} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 698} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 699} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 700} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 701} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 702} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 703} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 704} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 705} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} ldv_initialize_bus_type_18();
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 707} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 708} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 709} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 710} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb101:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i78, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb105;

  $bb106:
    assume $i81 == 1;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i82 := $M.81;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 3);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb108:
    assume $i83 == 1;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i84 := $M.80;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb110;

  $bb111:
    assume $i85 == 1;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} ldv_module_exit();
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 685} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb34:
    assume $i24 == 1;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i38 := $M.79;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb59:
    assume $i39 == 1;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 662} $i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 663} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i40);
    call {:si_unique_call 664} {:cexpr "tmp___4"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} ldv_stop();
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb66:
    assume $i43 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i70 := $M.79;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 2);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb92:
    assume $i71 == 1;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p72 := $M.73;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_61 := rio_device_remove($p72);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 678} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i74 := $M.80;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i74, 1);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $M.80 := $i75;
    call {:si_unique_call 679} {:cexpr "ref_cnt"} boogie_si_record_i32($i75);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i42 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i62 := $M.79;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i66 := $M.79;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 2);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb89:
    assume $i67 == 1;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p68 := $M.73;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} vslice_dummy_var_60 := rio_match_bus($p68, $p3);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 676} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(2);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume $i63 == 1;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p64 := $M.73;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_59 := rio_match_bus($p64, $p3);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 674} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb62:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i44 == 1);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i54 := $M.79;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 1);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i58 := $M.79;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 2);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb83:
    assume $i59 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p60 := $M.73;
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_58 := rio_uevent($p60, $p1);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 672} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(2);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume $i55 == 1;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p56 := $M.73;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_57 := rio_uevent($p56, $p1);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 670} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb69:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb68;

  $bb71:
    assume $i45 == 1;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i46 := $M.79;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb73:
    assume $i47 == 1;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p48 := $M.73;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i49 := rio_device_probe($p48);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.95 := $i49;
    call {:si_unique_call 666} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i49);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i50 := $M.95;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i51 == 1;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 667} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(2);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i52 := $M.80;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.80 := $i53;
    call {:si_unique_call 668} {:cexpr "ref_cnt"} boogie_si_record_i32($i53);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb26:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i27 == 1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb40:
    assume $i27 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i36 := $M.77;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb56:
    assume $i37 == 1;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} ldv_main_exported_2();
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb38:
    assume $i26 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i34 := $M.76;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb53:
    assume $i35 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} ldv_main_exported_17();
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb36:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i28 == 1);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i32 := $M.75;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb50:
    assume $i33 == 1;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} ldv_main_exported_7();
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb42:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb15;

  $bb44:
    assume $i29 == 1;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i30 := $M.74;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i31 == 1;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} ldv_main_exported_11();
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb49_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 655} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 656} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 657} {:cexpr "tmp___3"} boogie_si_record_i32($i8);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 503640);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_11: ref;

axiom ldv_main_exported_11 == $sub.ref(0, 504672);

procedure ldv_main_exported_11();
  free requires assertsPassed;
  modifies $M.74, $M.0, $CurrAddr;



implementation ldv_main_exported_11()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_67: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 748} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 749} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 750} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} ldv_stop();
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i7 := $M.74;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_67 := destid_show($p3, $p1, $p4);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 752} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_7: ref;

axiom ldv_main_exported_7 == $sub.ref(0, 505704);

procedure ldv_main_exported_7();
  free requires assertsPassed;
  modifies $M.75, $M.0, $CurrAddr;



implementation ldv_main_exported_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_68: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 1} true;
    call {:si_unique_call 757} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 758} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 759} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_stop();
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i7 := $M.75;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_68 := lnext_show($p3, $p1, $p4);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_17: ref;

axiom ldv_main_exported_17 == $sub.ref(0, 506736);

procedure ldv_main_exported_17();
  free requires assertsPassed;
  modifies $M.76, $M.0, $CurrAddr;



implementation ldv_main_exported_17()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_69: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 1} true;
    call {:si_unique_call 766} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 767} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 768} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} ldv_stop();
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i7 := $M.76;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} vslice_dummy_var_69 := did_show($p1, $p4, $p2);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 770} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 507768);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.77, $M.0, $CurrAddr;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_70: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 777} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} ldv_stop();
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i7 := $M.77;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_70 := sys_size_show($p1, $p4, $p2);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 779} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_module_exit: ref;

axiom ldv_module_exit == $sub.ref(0, 508800);

procedure ldv_module_exit();
  free requires assertsPassed;



implementation ldv_module_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    return;
}



const rio_bus_init: ref;

axiom rio_bus_init == $sub.ref(0, 509832);

procedure rio_bus_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation rio_bus_init() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i1 := __class_register(rio_mport_class, $p0);
    call {:si_unique_call 783} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i3 := bus_register(rio_bus_type);
    call {:si_unique_call 785} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} class_unregister(rio_mport_class);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_initialize_bin_attribute_5: ref;

axiom ldv_initialize_bin_attribute_5 == $sub.ref(0, 510864);

procedure ldv_initialize_bin_attribute_5();
  free requires assertsPassed;
  modifies $M.98, $M.99, $M.100, $M.0, $CurrAddr;



implementation ldv_initialize_bin_attribute_5()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p0 := ldv_init_zalloc(296);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $M.98 := $p0;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 788} $p2 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 789} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p2);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $M.99 := $p2;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p4 := ldv_init_zalloc(72);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.100 := $p4;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_16: ref;

axiom ldv_main_exported_16 == $sub.ref(0, 511896);

procedure ldv_main_exported_16();
  free requires assertsPassed;
  modifies $M.82, $M.0, $CurrAddr;



implementation ldv_main_exported_16()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_71: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $p0 := ldv_init_zalloc(1);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p1 := ldv_init_zalloc(48);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p3 := ldv_init_zalloc(1416);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 1} true;
    call {:si_unique_call 794} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 795} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 796} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} ldv_stop();
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i7 := $M.82;
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_71 := vid_show($p4, $p2, $p0);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 798} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_13: ref;

axiom ldv_main_exported_13 == $sub.ref(0, 512928);

procedure ldv_main_exported_13();
  free requires assertsPassed;
  modifies $M.83, $M.0, $CurrAddr;



implementation ldv_main_exported_13()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_72: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 1} true;
    call {:si_unique_call 803} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 804} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 805} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} ldv_stop();
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i7 := $M.83;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_72 := asm_vid_show($p3, $p1, $p4);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 513960);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.84, $M.0, $CurrAddr;



implementation ldv_main_exported_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_73: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 1} true;
    call {:si_unique_call 812} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 813} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 814} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} ldv_stop();
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i7 := $M.84;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_73 := modalias_show($p3, $p1, $p4);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 816} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 514992);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.85, $M.0, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_74: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p2 := ldv_init_zalloc(48);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 1} true;
    call {:si_unique_call 821} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 822} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 823} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} ldv_stop();
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i7 := $M.85;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_74 := port_destid_show($p1, $p3, $p4);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 825} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_9: ref;

axiom ldv_main_exported_9 == $sub.ref(0, 516024);

procedure ldv_main_exported_9();
  free requires assertsPassed;
  modifies $M.86, $M.0, $CurrAddr;



implementation ldv_main_exported_9()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_75: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 830} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 831} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 832} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} ldv_stop();
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i7 := $M.86;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_75 := routes_show($p3, $p1, $p4);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 834} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_12: ref;

axiom ldv_main_exported_12 == $sub.ref(0, 517056);

procedure ldv_main_exported_12();
  free requires assertsPassed;
  modifies $M.87, $M.0, $CurrAddr;



implementation ldv_main_exported_12()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_76: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p0 := ldv_init_zalloc(1);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p1 := ldv_init_zalloc(1416);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 1} true;
    call {:si_unique_call 839} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 840} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 841} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} ldv_stop();
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i7 := $M.87;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} vslice_dummy_var_76 := asm_rev_show($p2, $p4, $p0);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 843} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_14: ref;

axiom ldv_main_exported_14 == $sub.ref(0, 518088);

procedure ldv_main_exported_14();
  free requires assertsPassed;
  modifies $M.88, $M.0, $CurrAddr;



implementation ldv_main_exported_14()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_77: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p0 := ldv_init_zalloc(1);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p1 := ldv_init_zalloc(48);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p3 := ldv_init_zalloc(1416);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 1} true;
    call {:si_unique_call 848} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 849} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 850} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} ldv_stop();
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i7 := $M.88;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} vslice_dummy_var_77 := asm_did_show($p4, $p2, $p0);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 852} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_15: ref;

axiom ldv_main_exported_15 == $sub.ref(0, 519120);

procedure ldv_main_exported_15();
  free requires assertsPassed;
  modifies $M.89, $M.0, $CurrAddr;



implementation ldv_main_exported_15()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_78: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p0 := ldv_init_zalloc(1);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p1 := ldv_init_zalloc(1416);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 857} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 858} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 859} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} ldv_stop();
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i7 := $M.89;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_78 := device_rev_show($p2, $p4, $p0);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 861} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_8: ref;

axiom ldv_main_exported_8 == $sub.ref(0, 520152);

procedure ldv_main_exported_8();
  free requires assertsPassed;
  modifies $M.90, $M.0, $CurrAddr;



implementation ldv_main_exported_8()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_79: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p2 := ldv_init_zalloc(48);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 866} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 867} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 868} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_stop();
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i7 := $M.90;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_79 := lprev_show($p1, $p3, $p4);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 521184);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.72, $M.49, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.91, $M.19, $CurrAddr, assertsPassed, $M.50, $M.52, $M.54, $M.56, $M.51, $M.53, $M.55, $M.57, $M.15, $M.16, $M.4, $M.3, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var vslice_dummy_var_80: ref;
  var vslice_dummy_var_81: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $p1 := ldv_init_zalloc(1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p2 := ldv_init_zalloc(160);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} vslice_dummy_var_80 := ldv_memset($p4, 0, 8);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 1} true;
    call {:si_unique_call 876} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 877} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 878} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_stop();
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i7 == 1;
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i8 := $M.91;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.72, $p0);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} vslice_dummy_var_81 := bus_scan_store($p3, $p1, $i10);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 880} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_10: ref;

axiom ldv_main_exported_10 == $sub.ref(0, 522216);

procedure ldv_main_exported_10();
  free requires assertsPassed;
  modifies $M.93, $M.0, $CurrAddr;



implementation ldv_main_exported_10()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_82: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 1} true;
    call {:si_unique_call 885} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 886} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 887} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_stop();
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i7 := $M.93;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_82 := hopcount_show($p1, $p4, $p2);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 523248);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.72, $M.94, $M.0, $M.4, $M.3, $M.80, $M.63, $M.64, $CurrAddr;



implementation ldv_main_exported_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i36: i32;
  var $i37: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i44: i32;
  var $i45: i32;
  var vslice_dummy_var_83: ref;
  var vslice_dummy_var_84: ref;
  var vslice_dummy_var_85: ref;
  var vslice_dummy_var_86: ref;
  var vslice_dummy_var_87: i64;
  var vslice_dummy_var_88: i64;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} vslice_dummy_var_83 := ldv_memset($p6, 0, 8);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_84 := ldv_memset($p8, 0, 8);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} vslice_dummy_var_85 := ldv_memset($p10, 0, 8);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} vslice_dummy_var_86 := ldv_memset($p12, 0, 8);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 1} true;
    call {:si_unique_call 901} $i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 902} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
    call {:si_unique_call 903} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ldv_stop();
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i41 := $M.94;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_90 := ldv_probe_5();
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $M.94 := 2;
    call {:si_unique_call 912} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i44 := $M.80;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.80 := $i45;
    call {:si_unique_call 913} {:cexpr "ref_cnt"} boogie_si_record_i32($i45);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i36 := $M.94;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vslice_dummy_var_89 := ldv_release_5();
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i39 := $M.80;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 1);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.80 := $i40;
    call {:si_unique_call 910} {:cexpr "ref_cnt"} boogie_si_record_i32($i40);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i28 := $M.94;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 2);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p30 := $M.99;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p31 := $M.98;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p32 := $M.100;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.72, $p2);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.72, $p0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_88 := rio_read_config($p30, $p31, $p32, $p4, $i33, $i34);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $M.94 := 2;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb8;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i20 := $M.94;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p22 := $M.99;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p23 := $M.98;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p24 := $M.100;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.72, $p3);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.72, $p1);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} vslice_dummy_var_87 := rio_write_config($p22, $p23, $p24, $p5, $i25, $i26);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.94 := 2;
    call {:si_unique_call 905} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 524280);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i0 := $M.19;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} ldv_error();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const ldv_release_5: ref;

axiom ldv_release_5 == $sub.ref(0, 525312);

procedure ldv_release_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 1} true;
    call {:si_unique_call 916} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 917} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_5: ref;

axiom ldv_probe_5 == $sub.ref(0, 526344);

procedure ldv_probe_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 1} true;
    call {:si_unique_call 918} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 919} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __class_register: ref;

axiom __class_register == $sub.ref(0, 527376);

procedure __class_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __class_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 1} true;
    call {:si_unique_call 920} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 921} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const bus_register: ref;

axiom bus_register == $sub.ref(0, 528408);

procedure bus_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bus_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 1} true;
    call {:si_unique_call 922} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 923} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const class_unregister: ref;

axiom class_unregister == $sub.ref(0, 529440);

procedure class_unregister($p0: ref);
  free requires assertsPassed;



implementation class_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 530472);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 924} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 1} true;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 531504);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 532536);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 533568);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 534600);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 535632);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 536664);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 537696);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 538728);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 539760);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 540792);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 541824);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 542856);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 543888);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 925} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 926} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 927} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 928} __VERIFIER_assume($i4);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 544920);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 545952);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 546984);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 548016);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 549048);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 550080);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 551112);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 552144);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 553176);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 930} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 931} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 1} true;
    call {:si_unique_call 932} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 933} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 934} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 1} true;
    call {:si_unique_call 935} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 936} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 937} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 1} true;
    call {:si_unique_call 938} __VERIFIER_assume($i7);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} __VERIFIER_assume($i11);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 554208);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 555240);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 556272);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 557304);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 558336);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 559368);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 560400);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 561432);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 562464);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 1} true;
    call {:si_unique_call 940} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 941} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 942} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} __VERIFIER_assume($i10);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 563496);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 1} true;
    call {:si_unique_call 944} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 945} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 946} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 564528);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 1} true;
    call {:si_unique_call 947} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 948} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 565560);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 566592);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 949} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 950} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 567624);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 568656);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 569688);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 951} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 952} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 1} true;
    call {:si_unique_call 953} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 954} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $p6 := malloc($i5);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 956} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 570720);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 571752);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.104, $M.0, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.2, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.46, $M.45, $M.140, $M.141, $M.18, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.17, $M.97, $M.96, $M.95, $M.91, $M.75, $M.80, $M.85, $M.86, $M.92, $M.99, $M.79, $M.76, $M.74, $M.88, $M.100, $M.87, $M.77, $M.98, $M.83, $M.82, $M.94, $M.81, $M.84, $M.93, $M.89, $M.73, $M.90, $M.49, $M.38, $M.50, $M.55, $M.54, $M.52, $M.56, $M.57, $M.53, $M.51, $M.19, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 957} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.104 := $store.i8($M.104, __kstrtab_rio_add_device, 114);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(1, 1)), 105);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(2, 1)), 111);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(4, 1)), 97);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(5, 1)), 100);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(6, 1)), 100);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(8, 1)), 100);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(10, 1)), 118);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(__kstrtab_rio_add_device, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.ref($M.0, dev_attr_sys_size, .str.75);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(32, 1)), sys_size_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_sys_size, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_port_destid, .str.74);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(32, 1)), port_destid_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_port_destid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rio_mport_attrs, dev_attr_port_destid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_attrs, $mul.ref(0, 24)), $mul.ref(1, 8)), dev_attr_sys_size);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_attrs, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    $M.0 := $store.ref($M.0, rio_mport_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_group, $mul.ref(0, 32)), $mul.ref(16, 1)), rio_mport_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, bus_attr_scan, .str.73);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 144);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_scan, $mul.ref(0, 48)), $mul.ref(40, 1)), bus_scan_store);
    $M.0 := $store.ref($M.0, rio_bus_attrs, bus_attr_scan);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, rio_bus_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_group, $mul.ref(0, 32)), $mul.ref(16, 1)), rio_bus_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.105 := $store.ref($M.105, dev_attr_hopcount, .str.72);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.105 := $store.ref($M.105, $add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.ref($M.105, $add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(32, 1)), hopcount_show);
    $M.105 := $store.ref($M.105, $add.ref($add.ref(dev_attr_hopcount, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.105 := $store.ref($M.105, dev_attr_lnext, .str.71);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.105 := $store.ref($M.105, $add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.ref($M.105, $add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(32, 1)), lnext_show);
    $M.105 := $store.ref($M.105, $add.ref($add.ref(dev_attr_lnext, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.105 := $store.ref($M.105, dev_attr_routes, .str.70);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.105 := $store.ref($M.105, $add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.105 := $store.ref($M.105, $add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(32, 1)), routes_show);
    $M.105 := $store.ref($M.105, $add.ref($add.ref(dev_attr_routes, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.106 := $store.ref($M.106, rio_config_attr, .str.69);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.106 := $store.ref($M.106, $add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i64($M.106, $add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(32, 1)), 16777216);
    $M.106 := $store.ref($M.106, $add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(40, 1)), $0.ref);
    $M.106 := $store.ref($M.106, $add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(48, 1)), rio_read_config);
    $M.106 := $store.ref($M.106, $add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(56, 1)), rio_write_config);
    $M.106 := $store.ref($M.106, $add.ref($add.ref(rio_config_attr, $mul.ref(0, 72)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_modalias, .str.68);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(32, 1)), modalias_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_modalias, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_destid, .str.67);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(32, 1)), destid_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_destid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_lprev, .str.66);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(32, 1)), lprev_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_lprev, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_asm_rev, .str.65);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(32, 1)), asm_rev_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_asm_rev, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_asm_vid, .str.64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(32, 1)), asm_vid_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_asm_vid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_asm_did, .str.63);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(32, 1)), asm_did_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_asm_did, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_device_rev, .str.62);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(32, 1)), device_rev_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_device_rev, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_vid, .str.61);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(32, 1)), vid_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_vid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_did, .str.60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(32, 1)), did_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_did, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rio_dev_attrs, dev_attr_did);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_attrs, $mul.ref(0, 80)), $mul.ref(1, 8)), dev_attr_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_attrs, $mul.ref(0, 80)), $mul.ref(2, 8)), dev_attr_device_rev);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_attrs, $mul.ref(0, 80)), $mul.ref(3, 8)), dev_attr_asm_did);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_attrs, $mul.ref(0, 80)), $mul.ref(4, 8)), dev_attr_asm_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_attrs, $mul.ref(0, 80)), $mul.ref(5, 8)), dev_attr_asm_rev);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_attrs, $mul.ref(0, 80)), $mul.ref(6, 8)), dev_attr_lprev);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_attrs, $mul.ref(0, 80)), $mul.ref(7, 8)), dev_attr_destid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_attrs, $mul.ref(0, 80)), $mul.ref(8, 8)), dev_attr_modalias);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_attrs, $mul.ref(0, 80)), $mul.ref(9, 8)), $0.ref);
    $M.0 := $store.ref($M.0, rio_dev_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_group, $mul.ref(0, 32)), $mul.ref(16, 1)), rio_dev_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.107 := $store.i8($M.107, __kstrtab_rio_dev_put, 114);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(1, 1)), 105);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(2, 1)), 111);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(4, 1)), 100);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(6, 1)), 118);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(8, 1)), 112);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(9, 1)), 117);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_rio_dev_put, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.108 := $store.i8($M.108, __kstrtab_rio_dev_get, 114);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(1, 1)), 105);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(2, 1)), 111);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(4, 1)), 100);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(6, 1)), 118);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(8, 1)), 103);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_rio_dev_get, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.109 := $store.i8($M.109, __kstrtab_rio_bus_type, 114);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(1, 1)), 105);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(2, 1)), 111);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(4, 1)), 98);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(5, 1)), 117);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(6, 1)), 115);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(8, 1)), 116);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(9, 1)), 121);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(10, 1)), 112);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_rio_bus_type, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.110 := $store.i8($M.110, __kstrtab_rio_unregister_driver, 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(4, 1)), 117);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(5, 1)), 110);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(6, 1)), 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(7, 1)), 101);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(8, 1)), 103);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(9, 1)), 105);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(10, 1)), 115);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(11, 1)), 116);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(13, 1)), 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(15, 1)), 100);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(16, 1)), 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(17, 1)), 105);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(18, 1)), 118);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(20, 1)), 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_rio_unregister_driver, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.111 := $store.i8($M.111, __kstrtab_rio_register_driver, 114);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(2, 1)), 111);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(6, 1)), 103);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(7, 1)), 105);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(8, 1)), 115);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(9, 1)), 116);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(10, 1)), 101);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(11, 1)), 114);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(13, 1)), 100);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(15, 1)), 105);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(16, 1)), 118);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(18, 1)), 114);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_rio_register_driver, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.112 := $store.i8($M.112, __kstrtab_rio_mport_class, 114);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(2, 1)), 111);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(4, 1)), 109);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(5, 1)), 112);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(6, 1)), 111);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(10, 1)), 99);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(14, 1)), 115);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_rio_mport_class, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.113 := $store.i8($M.113, __kstrtab_rio_attach_device, 114);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(5, 1)), 116);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(6, 1)), 116);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(8, 1)), 99);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(9, 1)), 104);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(11, 1)), 100);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(13, 1)), 118);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_rio_attach_device, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.114 := $store.i8($M.114, __kstrtab_rio_mport_send_doorbell, 114);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(1, 1)), 105);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(2, 1)), 111);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(4, 1)), 109);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(5, 1)), 112);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(6, 1)), 111);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(7, 1)), 114);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(8, 1)), 116);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(9, 1)), 95);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(10, 1)), 115);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(11, 1)), 101);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(12, 1)), 110);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(13, 1)), 100);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(15, 1)), 100);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(16, 1)), 111);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(17, 1)), 111);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(18, 1)), 114);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(19, 1)), 98);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(20, 1)), 101);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(21, 1)), 108);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(22, 1)), 108);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_rio_mport_send_doorbell, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i32($M.2, rio_doorbell_lock, 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(rio_doorbell_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(rio_doorbell_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(rio_doorbell_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_doorbell_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_doorbell_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_doorbell_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_doorbell_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.58);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_doorbell_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_doorbell_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.115 := $store.i8($M.115, __kstrtab_rio_mport_write_config_32, 114);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(2, 1)), 111);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(4, 1)), 109);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(5, 1)), 112);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(6, 1)), 111);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(7, 1)), 114);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(8, 1)), 116);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(9, 1)), 95);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(10, 1)), 119);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(11, 1)), 114);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(12, 1)), 105);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(13, 1)), 116);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(15, 1)), 95);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(16, 1)), 99);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(17, 1)), 111);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(18, 1)), 110);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(19, 1)), 102);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(20, 1)), 105);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(21, 1)), 103);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(22, 1)), 95);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(23, 1)), 51);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(24, 1)), 50);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_rio_mport_write_config_32, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.116 := $store.i8($M.116, __kstrtab_rio_mport_write_config_16, 114);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(2, 1)), 111);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(4, 1)), 109);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(5, 1)), 112);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(6, 1)), 111);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(7, 1)), 114);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(8, 1)), 116);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(9, 1)), 95);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(10, 1)), 119);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(11, 1)), 114);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(12, 1)), 105);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(13, 1)), 116);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(15, 1)), 95);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(16, 1)), 99);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(17, 1)), 111);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(18, 1)), 110);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(19, 1)), 102);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(20, 1)), 105);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(21, 1)), 103);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(22, 1)), 95);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(23, 1)), 49);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(24, 1)), 54);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_rio_mport_write_config_16, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.117 := $store.i8($M.117, __kstrtab_rio_mport_write_config_8, 114);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(1, 1)), 105);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(2, 1)), 111);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(4, 1)), 109);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(5, 1)), 112);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(6, 1)), 111);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(7, 1)), 114);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(8, 1)), 116);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(9, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(10, 1)), 119);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(11, 1)), 114);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(12, 1)), 105);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(13, 1)), 116);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(17, 1)), 111);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(18, 1)), 110);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(19, 1)), 102);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(20, 1)), 105);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(21, 1)), 103);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(22, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(23, 1)), 56);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_rio_mport_write_config_8, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, __kstrtab_rio_mport_read_config_32, 114);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(1, 1)), 105);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(2, 1)), 111);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(4, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(5, 1)), 112);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(6, 1)), 111);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(7, 1)), 114);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(8, 1)), 116);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(9, 1)), 95);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(10, 1)), 114);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(11, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(12, 1)), 97);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(13, 1)), 100);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(14, 1)), 95);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(15, 1)), 99);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(16, 1)), 111);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(17, 1)), 110);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(18, 1)), 102);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(19, 1)), 105);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(20, 1)), 103);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(21, 1)), 95);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(22, 1)), 51);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(23, 1)), 50);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_rio_mport_read_config_32, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.119 := $store.i8($M.119, __kstrtab_rio_mport_read_config_16, 114);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(1, 1)), 105);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(2, 1)), 111);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(4, 1)), 109);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(5, 1)), 112);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(6, 1)), 111);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(7, 1)), 114);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(8, 1)), 116);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(9, 1)), 95);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(10, 1)), 114);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(11, 1)), 101);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(12, 1)), 97);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(13, 1)), 100);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(14, 1)), 95);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(15, 1)), 99);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(16, 1)), 111);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(17, 1)), 110);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(18, 1)), 102);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(19, 1)), 105);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(20, 1)), 103);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(21, 1)), 95);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(22, 1)), 49);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(23, 1)), 54);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_rio_mport_read_config_16, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.120 := $store.i8($M.120, __kstrtab_rio_mport_read_config_8, 114);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(1, 1)), 105);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(2, 1)), 111);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(4, 1)), 109);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(5, 1)), 112);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(6, 1)), 111);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(7, 1)), 114);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(8, 1)), 116);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(9, 1)), 95);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(10, 1)), 114);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(11, 1)), 101);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(12, 1)), 97);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(13, 1)), 100);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(15, 1)), 99);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(16, 1)), 111);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(17, 1)), 110);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(18, 1)), 102);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(19, 1)), 105);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(20, 1)), 103);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(21, 1)), 95);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(22, 1)), 56);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_rio_mport_read_config_8, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.121 := $store.i8($M.121, __kstrtab___rio_local_write_config_32, 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(1, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(2, 1)), 114);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(3, 1)), 105);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(4, 1)), 111);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(5, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(6, 1)), 108);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(7, 1)), 111);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(8, 1)), 99);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(9, 1)), 97);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(10, 1)), 108);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(11, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(12, 1)), 119);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(13, 1)), 114);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(14, 1)), 105);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(15, 1)), 116);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(16, 1)), 101);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(17, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(18, 1)), 99);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(19, 1)), 111);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(20, 1)), 110);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(21, 1)), 102);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(22, 1)), 105);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(23, 1)), 103);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(24, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(25, 1)), 51);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(26, 1)), 50);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab___rio_local_write_config_32, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.122 := $store.i8($M.122, __kstrtab___rio_local_write_config_16, 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(1, 1)), 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(2, 1)), 114);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(3, 1)), 105);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(4, 1)), 111);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(5, 1)), 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(6, 1)), 108);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(7, 1)), 111);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(8, 1)), 99);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(9, 1)), 97);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(10, 1)), 108);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(11, 1)), 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(12, 1)), 119);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(13, 1)), 114);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(14, 1)), 105);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(15, 1)), 116);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(16, 1)), 101);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(17, 1)), 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(18, 1)), 99);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(19, 1)), 111);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(20, 1)), 110);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(21, 1)), 102);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(22, 1)), 105);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(23, 1)), 103);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(24, 1)), 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(25, 1)), 49);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(26, 1)), 54);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab___rio_local_write_config_16, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.123 := $store.i8($M.123, __kstrtab___rio_local_write_config_8, 95);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(1, 1)), 95);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(2, 1)), 114);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(3, 1)), 105);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(4, 1)), 111);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(6, 1)), 108);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(7, 1)), 111);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(8, 1)), 99);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(9, 1)), 97);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(10, 1)), 108);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(11, 1)), 95);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(12, 1)), 119);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(13, 1)), 114);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(14, 1)), 105);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(15, 1)), 116);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(16, 1)), 101);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(17, 1)), 95);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(18, 1)), 99);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(19, 1)), 111);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(20, 1)), 110);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(21, 1)), 102);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(22, 1)), 105);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(23, 1)), 103);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(24, 1)), 95);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(25, 1)), 56);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab___rio_local_write_config_8, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.124 := $store.i8($M.124, __kstrtab___rio_local_read_config_32, 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(1, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(2, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(3, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(4, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(6, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(7, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(8, 1)), 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(9, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(10, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(11, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(12, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(13, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(14, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(15, 1)), 100);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(16, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(17, 1)), 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(18, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(19, 1)), 110);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(20, 1)), 102);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(21, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(22, 1)), 103);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(23, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(24, 1)), 51);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(25, 1)), 50);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab___rio_local_read_config_32, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.125 := $store.i8($M.125, __kstrtab___rio_local_read_config_16, 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(1, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(2, 1)), 114);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(3, 1)), 105);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(4, 1)), 111);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(6, 1)), 108);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(7, 1)), 111);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(8, 1)), 99);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(9, 1)), 97);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(10, 1)), 108);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(11, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(12, 1)), 114);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(13, 1)), 101);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(14, 1)), 97);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(15, 1)), 100);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(16, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(17, 1)), 99);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(18, 1)), 111);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(19, 1)), 110);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(20, 1)), 102);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(21, 1)), 105);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(22, 1)), 103);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(23, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(24, 1)), 49);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(25, 1)), 54);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab___rio_local_read_config_16, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.126 := $store.i8($M.126, __kstrtab___rio_local_read_config_8, 95);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(1, 1)), 95);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(2, 1)), 114);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(3, 1)), 105);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(4, 1)), 111);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(5, 1)), 95);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(6, 1)), 108);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(7, 1)), 111);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(8, 1)), 99);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(9, 1)), 97);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(10, 1)), 108);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(11, 1)), 95);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(12, 1)), 114);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(13, 1)), 101);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(14, 1)), 97);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(15, 1)), 100);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(17, 1)), 99);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(18, 1)), 111);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(19, 1)), 110);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(20, 1)), 102);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(21, 1)), 105);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(22, 1)), 103);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(23, 1)), 95);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(24, 1)), 56);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab___rio_local_read_config_8, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i32($M.2, rio_config_lock, 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(rio_config_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(rio_config_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(rio_config_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.57);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_config_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.127 := $store.i8($M.127, __kstrtab_rio_init_mports, 114);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(2, 1)), 111);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(4, 1)), 105);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(11, 1)), 111);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(12, 1)), 114);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(14, 1)), 115);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_rio_init_mports, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.128 := $store.i8($M.128, __kstrtab_rio_release_outb_mbox, 114);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(4, 1)), 114);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(6, 1)), 108);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(7, 1)), 101);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(8, 1)), 97);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(9, 1)), 115);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(11, 1)), 95);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(13, 1)), 117);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(14, 1)), 116);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(15, 1)), 98);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(17, 1)), 109);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(18, 1)), 98);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(19, 1)), 111);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(20, 1)), 120);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_rio_release_outb_mbox, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.129 := $store.i8($M.129, __kstrtab_rio_request_outb_mbox, 114);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(4, 1)), 114);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(6, 1)), 113);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(9, 1)), 115);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(10, 1)), 116);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(11, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(13, 1)), 117);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(14, 1)), 116);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(15, 1)), 98);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(17, 1)), 109);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(18, 1)), 98);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(19, 1)), 111);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(20, 1)), 120);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_rio_request_outb_mbox, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.130 := $store.i8($M.130, __kstrtab_rio_release_inb_mbox, 114);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(2, 1)), 111);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(4, 1)), 114);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(6, 1)), 108);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(7, 1)), 101);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(8, 1)), 97);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(9, 1)), 115);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(12, 1)), 105);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(13, 1)), 110);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(14, 1)), 98);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(16, 1)), 109);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(17, 1)), 98);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(18, 1)), 111);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(19, 1)), 120);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_rio_release_inb_mbox, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.131 := $store.i8($M.131, __kstrtab_rio_request_inb_mbox, 114);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(2, 1)), 111);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(4, 1)), 114);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(6, 1)), 113);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(7, 1)), 117);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(9, 1)), 115);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(12, 1)), 105);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(13, 1)), 110);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(14, 1)), 98);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(16, 1)), 109);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(17, 1)), 98);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(18, 1)), 111);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(19, 1)), 120);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_rio_request_inb_mbox, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.132 := $store.i8($M.132, __kstrtab_rio_release_outb_dbell, 114);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(2, 1)), 111);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(4, 1)), 114);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(6, 1)), 108);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(8, 1)), 97);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(9, 1)), 115);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(10, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(13, 1)), 117);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(15, 1)), 98);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(16, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(17, 1)), 100);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(18, 1)), 98);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(20, 1)), 108);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(21, 1)), 108);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_rio_release_outb_dbell, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.133 := $store.i8($M.133, __kstrtab_rio_request_outb_dbell, 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(2, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(4, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(6, 1)), 113);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(9, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(10, 1)), 116);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(13, 1)), 117);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(15, 1)), 98);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(16, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(17, 1)), 100);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(18, 1)), 98);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(20, 1)), 108);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(21, 1)), 108);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_rio_request_outb_dbell, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.134 := $store.i8($M.134, __kstrtab_rio_release_inb_dbell, 114);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(4, 1)), 114);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(6, 1)), 108);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(7, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(8, 1)), 97);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(9, 1)), 115);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(11, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(12, 1)), 105);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(13, 1)), 110);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(14, 1)), 98);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(15, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(16, 1)), 100);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(17, 1)), 98);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(18, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(19, 1)), 108);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(20, 1)), 108);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_rio_release_inb_dbell, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.135 := $store.i8($M.135, __kstrtab_rio_request_inb_dbell, 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(4, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(6, 1)), 113);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(9, 1)), 115);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(10, 1)), 116);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(11, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(12, 1)), 105);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(13, 1)), 110);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(14, 1)), 98);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(15, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(16, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(17, 1)), 98);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(18, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(19, 1)), 108);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(20, 1)), 108);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_rio_request_inb_dbell, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.136 := $store.i8($M.136, __kstrtab_rio_get_asm, 114);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(1, 1)), 105);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(2, 1)), 111);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(4, 1)), 103);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(6, 1)), 116);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(9, 1)), 115);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(10, 1)), 109);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_rio_get_asm, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.137 := $store.i8($M.137, __kstrtab_rio_get_device, 114);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(1, 1)), 105);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(2, 1)), 111);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(4, 1)), 103);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(6, 1)), 116);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(8, 1)), 100);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(10, 1)), 118);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_rio_get_device, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.138 := $store.i8($M.138, __kstrtab_rio_local_get_device_id, 114);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(1, 1)), 105);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(2, 1)), 111);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(4, 1)), 108);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(5, 1)), 111);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(6, 1)), 99);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(7, 1)), 97);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(8, 1)), 108);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(9, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(10, 1)), 103);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(11, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(12, 1)), 116);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(13, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(14, 1)), 100);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(15, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(16, 1)), 118);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(17, 1)), 105);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(18, 1)), 99);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(19, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(20, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(21, 1)), 105);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(22, 1)), 100);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_rio_local_get_device_id, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.139 := $store.i8($M.139, __kstrtab_rio_register_mport, 114);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(1, 1)), 105);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(2, 1)), 111);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(4, 1)), 114);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(5, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(6, 1)), 103);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(7, 1)), 105);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(8, 1)), 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(10, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(11, 1)), 114);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(13, 1)), 109);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(14, 1)), 112);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(15, 1)), 111);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(16, 1)), 114);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_rio_register_mport, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.46 := $store.i32($M.46, hdid, 0);
    $M.46 := $store.i32($M.46, $add.ref($add.ref(hdid, $mul.ref(0, 32)), $mul.ref(1, 4)), 0);
    $M.46 := $store.i32($M.46, $add.ref($add.ref(hdid, $mul.ref(0, 32)), $mul.ref(2, 4)), 0);
    $M.46 := $store.i32($M.46, $add.ref($add.ref(hdid, $mul.ref(0, 32)), $mul.ref(3, 4)), 0);
    $M.46 := $store.i32($M.46, $add.ref($add.ref(hdid, $mul.ref(0, 32)), $mul.ref(4, 4)), 0);
    $M.46 := $store.i32($M.46, $add.ref($add.ref(hdid, $mul.ref(0, 32)), $mul.ref(5, 4)), 0);
    $M.46 := $store.i32($M.46, $add.ref($add.ref(hdid, $mul.ref(0, 32)), $mul.ref(6, 4)), 0);
    $M.46 := $store.i32($M.46, $add.ref($add.ref(hdid, $mul.ref(0, 32)), $mul.ref(7, 4)), 0);
    $M.45 := 0;
    call {:si_unique_call 958} {:cexpr "ids_num"} boogie_si_record_i32(0);
    $M.140 := $store.i8($M.140, __kstrtab_rio_unregister_scan, 114);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(2, 1)), 111);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(4, 1)), 117);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(5, 1)), 110);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(6, 1)), 114);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(7, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(8, 1)), 103);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(9, 1)), 105);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(10, 1)), 115);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(11, 1)), 116);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(13, 1)), 114);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(15, 1)), 115);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(16, 1)), 99);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(17, 1)), 97);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(18, 1)), 110);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_rio_unregister_scan, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.141 := $store.i8($M.141, __kstrtab_rio_register_scan, 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(4, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(6, 1)), 103);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(7, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(8, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(10, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(13, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(14, 1)), 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(15, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(16, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_rio_register_scan, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.ref($M.0, rio_scans, rio_scans);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_scans, $mul.ref(0, 16)), $mul.ref(8, 1)), rio_scans);
    $M.0 := $store.ref($M.0, rio_mports, rio_mports);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mports, $mul.ref(0, 16)), $mul.ref(8, 1)), rio_mports);
    $M.18 := $store.i32($M.18, rio_mport_list_lock, 1);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.53);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.18 := $store.i64($M.18, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(rio_mport_list_lock, $mul.ref(80, 1)));
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(rio_mport_list_lock, $mul.ref(80, 1)));
    $M.18 := $store.ref($M.18, $add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), rio_mport_list_lock);
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.54);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.18 := $store.i64($M.18, $add.ref($add.ref($add.ref(rio_mport_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.142 := $store.i8($M.142, __kstrtab_rio_dma_prep_slave_sg, 114);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(5, 1)), 109);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(7, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(8, 1)), 112);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(9, 1)), 114);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(13, 1)), 115);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(14, 1)), 108);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(15, 1)), 97);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(16, 1)), 118);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(17, 1)), 101);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(18, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(19, 1)), 115);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(20, 1)), 103);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_rio_dma_prep_slave_sg, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.143 := $store.i8($M.143, __kstrtab_rio_dma_prep_xfer, 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(4, 1)), 100);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(5, 1)), 109);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(6, 1)), 97);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(8, 1)), 112);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(9, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(10, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(11, 1)), 112);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(13, 1)), 120);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(14, 1)), 102);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(16, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_rio_dma_prep_xfer, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.144 := $store.i8($M.144, __kstrtab_rio_release_dma, 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(2, 1)), 111);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(4, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(5, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(6, 1)), 108);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(7, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(8, 1)), 97);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(9, 1)), 115);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(11, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(12, 1)), 100);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(13, 1)), 109);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(14, 1)), 97);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_rio_release_dma, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.145 := $store.i8($M.145, __kstrtab_rio_request_dma, 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(2, 1)), 111);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(4, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(5, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(6, 1)), 113);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(7, 1)), 117);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(8, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(9, 1)), 115);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(10, 1)), 116);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(11, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(12, 1)), 100);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(13, 1)), 109);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(14, 1)), 97);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_rio_request_dma, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.146 := $store.i8($M.146, __kstrtab_rio_request_mport_dma, 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(4, 1)), 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(6, 1)), 113);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(9, 1)), 115);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(10, 1)), 116);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(11, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(12, 1)), 109);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(13, 1)), 112);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(14, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(15, 1)), 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(16, 1)), 116);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(18, 1)), 100);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(19, 1)), 109);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(20, 1)), 97);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_rio_request_mport_dma, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.147 := $store.i8($M.147, __kstrtab_rio_route_clr_table, 114);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(2, 1)), 111);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(5, 1)), 111);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(6, 1)), 117);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(10, 1)), 99);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(11, 1)), 108);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(12, 1)), 114);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(14, 1)), 116);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(15, 1)), 97);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(16, 1)), 98);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(17, 1)), 108);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_rio_route_clr_table, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.148 := $store.i8($M.148, __kstrtab_rio_route_get_entry, 114);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(2, 1)), 111);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(5, 1)), 111);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(6, 1)), 117);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(10, 1)), 103);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(15, 1)), 110);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(17, 1)), 114);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(18, 1)), 121);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_rio_route_get_entry, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.149 := $store.i8($M.149, __kstrtab_rio_route_add_entry, 114);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(2, 1)), 111);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(5, 1)), 111);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(6, 1)), 117);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(10, 1)), 97);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(11, 1)), 100);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(12, 1)), 100);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(15, 1)), 110);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(17, 1)), 114);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(18, 1)), 121);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_rio_route_add_entry, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.150 := $store.i8($M.150, __kstrtab_rio_unlock_device, 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(4, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(5, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(6, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(7, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(8, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(9, 1)), 107);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(11, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(13, 1)), 118);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_rio_unlock_device, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.151 := $store.i8($M.151, __kstrtab_rio_lock_device, 114);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(2, 1)), 111);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(4, 1)), 108);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(5, 1)), 111);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(6, 1)), 99);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(7, 1)), 107);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(9, 1)), 100);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(11, 1)), 118);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_rio_lock_device, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.152 := $store.i8($M.152, __kstrtab_rio_mport_get_feature, 114);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(4, 1)), 109);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(5, 1)), 112);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(6, 1)), 111);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(7, 1)), 114);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(9, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(10, 1)), 103);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(12, 1)), 116);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(14, 1)), 102);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(16, 1)), 97);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(17, 1)), 116);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(18, 1)), 117);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(19, 1)), 114);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_rio_mport_get_feature, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.153 := $store.i8($M.153, __kstrtab_rio_mport_get_efb, 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(4, 1)), 109);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(5, 1)), 112);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(6, 1)), 111);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(7, 1)), 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(10, 1)), 103);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(12, 1)), 116);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(13, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(14, 1)), 101);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(15, 1)), 102);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(16, 1)), 98);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_rio_mport_get_efb, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.154 := $store.i8($M.154, __kstrtab_rio_inb_pwrite_handler, 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(2, 1)), 111);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(4, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(5, 1)), 110);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(6, 1)), 98);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(8, 1)), 112);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(9, 1)), 119);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(10, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(11, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(12, 1)), 116);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(15, 1)), 104);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(16, 1)), 97);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(17, 1)), 110);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(18, 1)), 100);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(19, 1)), 108);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_rio_inb_pwrite_handler, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.155 := $store.i8($M.155, __kstrtab_rio_mport_chk_dev_access, 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(1, 1)), 105);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(2, 1)), 111);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(4, 1)), 109);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(5, 1)), 112);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(6, 1)), 111);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(7, 1)), 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(8, 1)), 116);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(9, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(10, 1)), 99);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(11, 1)), 104);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(12, 1)), 107);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(13, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(14, 1)), 100);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(15, 1)), 101);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(16, 1)), 118);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(17, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(18, 1)), 97);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(19, 1)), 99);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(20, 1)), 99);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(21, 1)), 101);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(22, 1)), 115);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(23, 1)), 115);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_rio_mport_chk_dev_access, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.156 := $store.i8($M.156, __kstrtab_rio_enable_rx_tx_port, 114);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(4, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(5, 1)), 110);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(7, 1)), 98);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(8, 1)), 108);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(11, 1)), 114);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(12, 1)), 120);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(14, 1)), 116);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(15, 1)), 120);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(17, 1)), 112);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(18, 1)), 111);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(19, 1)), 114);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(20, 1)), 116);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_rio_enable_rx_tx_port, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.157 := $store.i8($M.157, __kstrtab_rio_set_port_lockout, 114);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(2, 1)), 111);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(4, 1)), 115);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(6, 1)), 116);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(8, 1)), 112);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(9, 1)), 111);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(10, 1)), 114);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(13, 1)), 108);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(14, 1)), 111);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(15, 1)), 99);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(16, 1)), 107);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(18, 1)), 117);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_rio_set_port_lockout, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.158 := $store.i8($M.158, __kstrtab_rio_get_comptag, 114);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(2, 1)), 111);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(4, 1)), 103);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(5, 1)), 101);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(6, 1)), 116);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(8, 1)), 99);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(9, 1)), 111);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(10, 1)), 109);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(11, 1)), 112);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(13, 1)), 97);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(14, 1)), 103);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_rio_get_comptag, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.159 := $store.i8($M.159, __kstrtab_rio_mport_get_physefb, 114);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(4, 1)), 109);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(5, 1)), 112);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(6, 1)), 111);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(7, 1)), 114);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(9, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(10, 1)), 103);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(12, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(14, 1)), 112);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(15, 1)), 104);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(16, 1)), 121);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(17, 1)), 115);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(18, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(19, 1)), 102);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(20, 1)), 98);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_rio_mport_get_physefb, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.160 := $store.i8($M.160, __kstrtab_rio_unmap_inb_region, 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(2, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(4, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(5, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(6, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(8, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(10, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(11, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(12, 1)), 98);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(16, 1)), 103);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(18, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(19, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_rio_unmap_inb_region, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.161 := $store.i8($M.161, __kstrtab_rio_map_inb_region, 114);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(1, 1)), 105);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(2, 1)), 111);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(4, 1)), 109);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(5, 1)), 97);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(6, 1)), 112);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(8, 1)), 105);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(9, 1)), 110);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(10, 1)), 98);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(12, 1)), 114);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(14, 1)), 103);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(16, 1)), 111);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(17, 1)), 110);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_rio_map_inb_region, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i32($M.2, rio_mmap_lock, 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(rio_mmap_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(rio_mmap_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(rio_mmap_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_mmap_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_mmap_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_mmap_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_mmap_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.40);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_mmap_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_mmap_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.162 := $store.i8($M.162, __kstrtab_rio_release_inb_pwrite, 114);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(2, 1)), 111);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(4, 1)), 114);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(6, 1)), 108);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(8, 1)), 97);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(9, 1)), 115);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(10, 1)), 101);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(12, 1)), 105);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(13, 1)), 110);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(14, 1)), 98);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(16, 1)), 112);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(17, 1)), 119);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(18, 1)), 114);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(19, 1)), 105);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(20, 1)), 116);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_rio_release_inb_pwrite, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.163 := $store.i8($M.163, __kstrtab_rio_request_inb_pwrite, 114);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(2, 1)), 111);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(4, 1)), 114);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(6, 1)), 113);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(9, 1)), 115);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(10, 1)), 116);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(12, 1)), 105);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(13, 1)), 110);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(14, 1)), 98);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(16, 1)), 112);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(17, 1)), 119);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(18, 1)), 114);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(19, 1)), 105);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(20, 1)), 116);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_rio_request_inb_pwrite, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.ref($M.0, rio_devices, rio_devices);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_devices, $mul.ref(0, 16)), $mul.ref(8, 1)), rio_devices);
    $M.17 := $store.i32($M.17, rio_global_list_lock, 0);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref($add.ref(rio_global_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref($add.ref(rio_global_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(rio_global_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_global_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_global_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rio_global_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_global_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.39);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_global_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.17 := $store.i64($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_global_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.97 := 0;
    call {:si_unique_call 959} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 960} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 961} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 962} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 965} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 966} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 968} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    $M.99 := $0.ref;
    $M.79 := 0;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 970} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 972} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.100 := $0.ref;
    $M.87 := 0;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.98 := $0.ref;
    $M.83 := 0;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 980} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.73 := $0.ref;
    $M.90 := 0;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.49 := $0.ref;
    $M.38 := 0;
    call {:si_unique_call 983} {:cexpr "next_portid"} boogie_si_record_i8(0);
    $M.50 := 0;
    call {:si_unique_call 984} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.55 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 985} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 986} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 987} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.57 := $0.ref;
    $M.53 := $0.ref;
    $M.51 := $0.ref;
    $M.19 := 1;
    call {:si_unique_call 988} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.0 := $store.ref($M.0, rio_mport_groups, rio_mport_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, rio_bus_groups, rio_bus_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, rio_dev_groups, rio_dev_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_dev_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, rio_bus_type, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(32, 1)), rio_bus_groups);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(40, 1)), rio_dev_groups);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(56, 1)), rio_match_bus);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(64, 1)), rio_uevent);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(72, 1)), rio_device_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(80, 1)), rio_device_remove);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rio_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, rio_mport_class, .str.37);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(24, 1)), rio_mport_groups);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rio_mport_class, $mul.ref(0, 120)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.i8($M.0, .str, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(12, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(15, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.4, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(15, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.44, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(7, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.17, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(13, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.23, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(8, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.34, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.37, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.18 := $store.i8($M.18, .str.39, 114);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(2, 1)), 111);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(4, 1)), 103);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(5, 1)), 108);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(7, 1)), 98);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(8, 1)), 97);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(9, 1)), 108);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(12, 1)), 105);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(13, 1)), 115);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(16, 1)), 108);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(19, 1)), 107);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.39, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 4)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 4)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.278 := $store.i8($M.278, .str.76, 48);
    $M.278 := $store.i8($M.278, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.278 := $store.i8($M.278, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.278 := $store.i8($M.278, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.278 := $store.i8($M.278, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(4, 1)), 52);
    $M.278 := $store.i8($M.278, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.278 := $store.i8($M.278, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.278 := $store.i8($M.278, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.61, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 4)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 4)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.62, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(9, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.279 := $store.i8($M.279, .str.82, 48);
    $M.279 := $store.i8($M.279, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.279 := $store.i8($M.279, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.279 := $store.i8($M.279, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.279 := $store.i8($M.279, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(4, 1)), 56);
    $M.279 := $store.i8($M.279, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.279 := $store.i8($M.279, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.279 := $store.i8($M.279, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.65, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.66, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 6)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 6)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.83, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.280 := $store.i8($M.280, .str.77, 37);
    $M.280 := $store.i8($M.280, $add.ref($add.ref(.str.77, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.280 := $store.i8($M.280, $add.ref($add.ref(.str.77, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.280 := $store.i8($M.280, $add.ref($add.ref(.str.77, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.281 := $store.i8($M.281, .str.80, 114);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(1, 1)), 97);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(2, 1)), 112);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(3, 1)), 105);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(4, 1)), 100);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(5, 1)), 105);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(6, 1)), 111);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(7, 1)), 58);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(8, 1)), 118);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(9, 1)), 37);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(10, 1)), 48);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(11, 1)), 52);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(12, 1)), 88);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(13, 1)), 100);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(14, 1)), 37);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(15, 1)), 48);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(16, 1)), 52);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(17, 1)), 88);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(18, 1)), 97);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(19, 1)), 118);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(20, 1)), 37);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(21, 1)), 48);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(22, 1)), 52);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(23, 1)), 88);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(24, 1)), 97);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(25, 1)), 100);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(26, 1)), 37);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(27, 1)), 48);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(28, 1)), 52);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(29, 1)), 88);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(30, 1)), 10);
    $M.281 := $store.i8($M.281, $add.ref($add.ref(.str.80, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.282 := $store.i8($M.282, .str.81, 37);
    $M.282 := $store.i8($M.282, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(1, 1)), 48);
    $M.282 := $store.i8($M.282, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(2, 1)), 52);
    $M.282 := $store.i8($M.282, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(3, 1)), 120);
    $M.282 := $store.i8($M.282, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(4, 1)), 32);
    $M.282 := $store.i8($M.282, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(5, 1)), 37);
    $M.282 := $store.i8($M.282, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(6, 1)), 48);
    $M.282 := $store.i8($M.282, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(7, 1)), 50);
    $M.282 := $store.i8($M.282, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(8, 1)), 120);
    $M.282 := $store.i8($M.282, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(9, 1)), 10);
    $M.282 := $store.i8($M.282, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.283 := $store.i8($M.283, .str.78, 110);
    $M.283 := $store.i8($M.283, $add.ref($add.ref(.str.78, $mul.ref(0, 6)), $mul.ref(1, 1)), 117);
    $M.283 := $store.i8($M.283, $add.ref($add.ref(.str.78, $mul.ref(0, 6)), $mul.ref(2, 1)), 108);
    $M.283 := $store.i8($M.283, $add.ref($add.ref(.str.78, $mul.ref(0, 6)), $mul.ref(3, 1)), 108);
    $M.283 := $store.i8($M.283, $add.ref($add.ref(.str.78, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.283 := $store.i8($M.283, $add.ref($add.ref(.str.78, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.284 := $store.i8($M.284, .str.84, 48);
    $M.284 := $store.i8($M.284, $add.ref($add.ref(.str.84, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.284 := $store.i8($M.284, $add.ref($add.ref(.str.84, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.284 := $store.i8($M.284, $add.ref($add.ref(.str.84, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.284 := $store.i8($M.284, $add.ref($add.ref(.str.84, $mul.ref(0, 8)), $mul.ref(4, 1)), 50);
    $M.284 := $store.i8($M.284, $add.ref($add.ref(.str.84, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.284 := $store.i8($M.284, $add.ref($add.ref(.str.84, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.284 := $store.i8($M.284, $add.ref($add.ref(.str.84, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.73, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.74, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.75, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 9)), $mul.ref(1, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 9)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 9)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 9)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 9)), $mul.ref(6, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 9)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.285 := $store.i8($M.285, .str.79, 37);
    $M.285 := $store.i8($M.285, $add.ref($add.ref(.str.79, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.285 := $store.i8($M.285, $add.ref($add.ref(.str.79, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.285 := $store.i8($M.285, $add.ref($add.ref(.str.79, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    call {:si_unique_call 989} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 572784);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: i32) returns ($r: i32);



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 573816);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(rio_unmap_inb_region, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 990} rio_unmap_inb_region(arg, arg1);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 574848);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i16, arg3: i8, arg4: i32, arg5: i32, arg6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i16, arg3: i8, arg4: i32, arg5: i32, arg6: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 575880);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32, arg4: ref) returns ($r: i32);



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 576912);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i16, arg3: i8, arg4: i32, arg5: i32, arg6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i16, arg3: i8, arg4: i32, arg5: i32, arg6: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 577944);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32, arg4: i32) returns ($r: i32);



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 578976);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 580008);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i8) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(rio_release_outb_mbox, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    $i7 := $eq.ref(rio_release_inb_mbox, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i8.i32(arg1);
    call {:si_unique_call 991} $i3 := rio_release_inb_mbox($p1, $i2);
    $r := $i3;
    return;

  $bb3:
    assume $i8 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $i5 := $zext.i8.i32(arg1);
    call {:si_unique_call 992} $i6 := rio_release_outb_mbox($p4, $i5);
    $r := $i6;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 581040);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i16, arg2: i8, arg3: i16, arg4: i16, arg5: i8) returns ($r: i32);



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 582072);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i16, arg2: i8, arg3: i16, arg4: i16, arg5: ref) returns ($r: i32);



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 583104);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i16, arg2: i8, arg3: i16) returns ($r: i32);



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 584136);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 585168);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i64, arg5: ref) returns ($r: ref);



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 586200);

procedure devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.16, $M.4, $M.3, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $CurrAddr, $M.19, assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i21 := $eq.ref(rio_register_driver, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i21 == 1);
    $i20 := $eq.ref(rio_device_remove, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i20 == 1);
    $i19 := $eq.ref(rio_device_probe, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i19 == 1);
    $i18 := $eq.ref(rio_register_mport, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i18 == 1);
    $i17 := $eq.ref(rio_inb_pwrite_handler, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i17 == 1);
    $i16 := $eq.ref(rio_release_inb_pwrite, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i16 == 1);
    $i15 := $eq.ref(rio_add_device, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 993} $i2 := rio_add_device($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i16 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 994} $i4 := rio_release_inb_pwrite($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 995} $i6 := rio_inb_pwrite_handler($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 996} $i8 := rio_register_mport($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i19 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 997} $i10 := rio_device_probe($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i20 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 998} $i12 := rio_device_remove($p11);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    $r := $i12;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 999} $i14 := rio_register_driver($p13);
    $r := $i14;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 587232);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 588264);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(rio_unmap_inb_region, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    $i1 := $zext.i32.i64(arg1);
    call {:si_unique_call 1000} rio_unmap_inb_region(arg, $i1);
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 589296);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(rio_release_outb_mbox, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(rio_release_inb_mbox, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1001} $i1 := rio_release_inb_mbox(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 1002} $i2 := rio_release_outb_mbox(arg, arg1);
    $r := $i2;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 590328);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: i16, arg3: i16) returns ($r: i32);



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 591360);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(rio_uevent, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(rio_match_bus, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i13 == 1);
    $i12 := $eq.ref(rio_release_outb_dbell, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i12 == 1);
    $i11 := $eq.ref(rio_request_inb_pwrite, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1003} $i2 := rio_request_inb_pwrite(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1004} $i4 := rio_release_outb_dbell(arg, $p3);
    $r := $i4;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1005} $i7 := rio_match_bus($p5, $p6);
    $r := $i7;
    return;

  $bb5:
    assume $i14 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1006} $i10 := rio_uevent($p8, $p9);
    $r := $i10;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 592392);

procedure devirtbounce.19(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(rio_unregister_driver, $p0);
    assume {:branchcond $i8} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i8 == 1);
    $i7 := $eq.ref(rio_attach_device, $p0);
    assume {:branchcond $i7} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i7 == 1);
    $i6 := $eq.ref(disc_work_handler, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i6 == 1);
    $i5 := $eq.ref(rio_dev_put, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i5 == 1);
    $i4 := $eq.ref(rio_release_dma, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1007} rio_release_dma($p1);
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 1008} rio_dev_put(arg);
    return;

  $bb4:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1009} disc_work_handler($p2);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    call {:si_unique_call 1010} rio_attach_device(arg);
    return;

  $bb6:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1011} rio_unregister_driver($p3);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.104, $M.0, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.2, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.46, $M.45, $M.140, $M.141, $M.18, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.17, $M.97, $M.96, $M.95, $M.91, $M.75, $M.80, $M.85, $M.86, $M.92, $M.99, $M.79, $M.76, $M.74, $M.88, $M.100, $M.87, $M.77, $M.98, $M.83, $M.82, $M.94, $M.81, $M.84, $M.93, $M.89, $M.73, $M.90, $M.49, $M.38, $M.50, $M.55, $M.54, $M.52, $M.56, $M.57, $M.53, $M.51, $M.19, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1012} __SMACK_static_init();
    call {:si_unique_call 1013} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.74, $M.75, $M.76, $M.77, $M.50, $M.52, $M.54, $M.56, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.0, $M.95, $M.96, $M.73, $M.97, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.2, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.46, $M.45, $M.140, $M.141, $M.18, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.17, $M.99, $M.100, $M.98, $M.49, $M.38, $M.55, $M.57, $M.53, $M.51, $M.19, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285, $CurrAddr, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.72, $M.4, $M.3, $M.63, $M.64, $M.15, $M.16, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation rio_get_comptag_loop_$bb7(in_$i0: i32, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p11: ref, in_$i22: i64, in_$i23: i1) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p11: ref, out_$i22: i64, out_$i23: i1)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p18, out_$p19, out_$i20, out_$i21, out_$p11, out_$i22, out_$i23 := in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$p18, in_$p19, in_$i20, in_$i21, in_$p11, in_$i22, in_$i23;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  $bb13:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p19;
    goto $bb13_dummy;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_224;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_223;

  $bb10:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p11;
    assume true;
    goto $bb10;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, in_$i0);
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 2448)), $mul.ref(76, 1));
    goto corral_source_split_214;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_213;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15:
    assume out_$i23 == 1;
    goto corral_source_split_230;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, $p2i.ref.i64(rio_devices));
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_210;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p18, out_$p19, out_$i20, out_$i21, out_$p11, out_$i22, out_$i23 := rio_get_comptag_loop_$bb7(in_$i0, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p18, out_$p19, out_$i20, out_$i21, out_$p11, out_$i22, out_$i23);
    return;

  exit:
    return;
}



procedure rio_get_comptag_loop_$bb7(in_$i0: i32, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p11: ref, in_$i22: i64, in_$i23: i1) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p11: ref, out_$i22: i64, out_$i23: i1);



implementation rio_mport_chk_dev_access_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i5: i16, in_$i7: i8, in_$i11: i32, in_$i12: i1, in_$i14: i32, in_$i15: i1, in_$i10: i32) returns (out_$i11: i32, out_$i12: i1, out_$i14: i32, out_$i15: i1, out_$i10: i32)
{

  entry:
    out_$i11, out_$i12, out_$i14, out_$i15, out_$i10 := in_$i11, in_$i12, in_$i14, in_$i15, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_341;

  $bb16:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i11;
    goto $bb16_dummy;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_356;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} out_$i14 := rio_mport_read_config_32(in_$p0, in_$i5, in_$i7, 0, in_$p3);
    call {:si_unique_call 94} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_355;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} __const_udelay(4295000);
    goto corral_source_split_351;

  $bb10:
    assume 1 == 1;
    goto corral_source_split_350;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb10, $bb11;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 3);
    goto corral_source_split_344;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 1);
    call {:si_unique_call 91} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_343;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume !(1 == 1);
    goto corral_source_split_353;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i14, out_$i15, out_$i10 := rio_mport_chk_dev_access_loop_$bb4(in_$p0, in_$p3, in_$i5, in_$i7, out_$i11, out_$i12, out_$i14, out_$i15, out_$i10);
    return;

  exit:
    return;
}



procedure rio_mport_chk_dev_access_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i5: i16, in_$i7: i8, in_$i11: i32, in_$i12: i1, in_$i14: i32, in_$i15: i1, in_$i10: i32) returns (out_$i11: i32, out_$i12: i1, out_$i14: i32, out_$i15: i1, out_$i10: i32);
  modifies $M.4, $M.3, $CurrAddr;



implementation rio_chk_dev_route_loop_$bb4(in_$p3: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p27: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p27: ref)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p27 := in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p11, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p27;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_854;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p22;
    goto $bb10_dummy;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$p27 := out_$p22;
    assume true;
    goto $bb10;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 2448)), $mul.ref(2440, 1));
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_876;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p11, $mul.ref(0, 2448)), $mul.ref(2440, 1));
    goto corral_source_split_875;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} out_$i14 := rio_read_config_32(out_$p13, 0, in_$p3);
    call {:si_unique_call 167} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_863;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 2448)), $mul.ref(2440, 1));
    goto corral_source_split_862;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume out_$i33 == 1;
    goto corral_source_split_884;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$p34 := out_$p11;
    assume true;
    goto $bb12;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 268435456);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2448)), $mul.ref(60, 1));
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p11, $mul.ref(0, 2448)), $mul.ref(2440, 1));
    goto corral_source_split_855;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p27 := rio_chk_dev_route_loop_$bb4(in_$p3, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p27);
    return;

  exit:
    return;
}



procedure rio_chk_dev_route_loop_$bb4(in_$p3: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p27: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p27: ref);
  modifies $M.4, $M.3, $CurrAddr;



implementation rio_register_mport_loop_$bb14(in_$p0: ref, in_$p62: ref, in_$i63: i8, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p61: ref) returns (out_$p62: ref, out_$i63: i8, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p61: ref)
{

  entry:
    out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p61 := in_$p62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p61;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;

  $bb26:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$p61 := out_$p84;
    goto $bb26_dummy;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, $p2i.ref.i64(rio_scans));
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_1588;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p83, $mul.ref($sub.ref(0, 8), 32)), $mul.ref(8, 1));
    goto corral_source_split_1587;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p83, $mul.ref($sub.ref(0, 8), 32));
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_1585;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_1584;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p61, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1583;

  $bb20:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i76, out_$i78);
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p61, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i75);
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.0, out_$p74);
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p73, out_$p72);
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_1542;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p61, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1541;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i70 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i67 == 1;
    goto $bb17;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i64, out_$i66);
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p61, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i63);
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.0, out_$p62);
    goto corral_source_split_1535;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_1534;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, $sub.i32(0, 1));
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p61, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1553;

  $bb18:
    assume !(out_$i67 == 1);
    goto corral_source_split_1552;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p61 := rio_register_mport_loop_$bb14(in_$p0, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p61);
    return;

  exit:
    return;
}



procedure rio_register_mport_loop_$bb14(in_$p0: ref, in_$p62: ref, in_$i63: i8, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p61: ref) returns (out_$p62: ref, out_$i63: i8, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p61: ref);
  modifies $M.0;



implementation rio_get_asm_loop_$bb10(in_$i0: i16, in_$i1: i16, in_$i2: i16, in_$i3: i16, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i16, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$p53: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p28: ref, in_$i64: i64, in_$i65: i1) returns (out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i16, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$p53: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p28: ref, out_$i64: i64, out_$i65: i1)
{

  entry:
    out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p53, out_$p60, out_$p61, out_$i62, out_$i63, out_$p28, out_$i64, out_$i65 := in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p53, in_$p60, in_$p61, in_$i62, in_$i63, in_$p28, in_$i64, in_$i65;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1671;

  $bb35:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$p28 := out_$p61;
    goto $bb35_dummy;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, 0);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_1724;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1723;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb17;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb17;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb17;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb17;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$p53 := out_$p28;
    assume true;
    goto $bb32;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i56, out_$i57);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i16.i32(in_$i3);
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i16.i32(out_$i55);
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i16($M.0, out_$p54);
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2448)), $mul.ref(52, 1));
    goto corral_source_split_1712;

  $bb30:
    assume !(out_$i52 == 1);
    goto corral_source_split_1711;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$p53 := out_$p28;
    assume true;
    goto $bb30;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 65535);
    goto corral_source_split_1700;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i16.i32(in_$i3);
    goto corral_source_split_1699;

  $bb26:
    assume {:verifier.code 0} true;
    assume out_$i50 == 1;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    assume out_$i45 == 1;
    goto $bb24;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 65535);
    goto corral_source_split_1690;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(in_$i2);
    goto corral_source_split_1689;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i43 == 1;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    goto $bb19;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 65535);
    goto corral_source_split_1680;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i16.i32(in_$i1);
    goto corral_source_split_1679;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb13;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 65535);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(in_$i0);
    goto corral_source_split_1676;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_1675;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb37:
    assume out_$i65 == 1;
    goto corral_source_split_1730;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, $p2i.ref.i64(rio_devices));
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_1672;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i34, out_$i35);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(in_$i0);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2448)), $mul.ref(44, 1));
    goto corral_source_split_1683;

  $bb14:
    assume !(out_$i31 == 1);
    goto corral_source_split_1682;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i41, out_$i42);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(in_$i1);
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, out_$p39);
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2448)), $mul.ref(42, 1));
    goto corral_source_split_1693;

  $bb20:
    assume !(out_$i38 == 1);
    goto corral_source_split_1692;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i48, out_$i49);
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(in_$i2);
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i16.i32(out_$i47);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i16($M.0, out_$p46);
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2448)), $mul.ref(54, 1));
    goto corral_source_split_1703;

  $bb25:
    assume !(out_$i45 == 1);
    goto corral_source_split_1702;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p53, out_$p60, out_$p61, out_$i62, out_$i63, out_$p28, out_$i64, out_$i65 := rio_get_asm_loop_$bb10(in_$i0, in_$i1, in_$i2, in_$i3, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p53, out_$p60, out_$p61, out_$i62, out_$i63, out_$p28, out_$i64, out_$i65);
    return;

  exit:
    return;
}



procedure rio_get_asm_loop_$bb10(in_$i0: i16, in_$i1: i16, in_$i2: i16, in_$i3: i16, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i16, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$p53: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p28: ref, in_$i64: i64, in_$i65: i1) returns (out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i16, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$p53: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p28: ref, out_$i64: i64, out_$i65: i1);



implementation rio_init_mports_loop_$bb35(in_$p1: ref, in_$p2: ref, in_$p59: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$i79: i64, in_$p81: ref, in_$i82: i64, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$p95: ref, in_$i96: i64, in_$p99: ref, in_$i100: i64, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$p107: ref, in_$i109: i32, in_$i110: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p70: ref, in_$i71: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_44: i1) returns (out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$i79: i64, out_$p81: ref, out_$i82: i64, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$p95: ref, out_$i96: i64, out_$p99: ref, out_$i100: i64, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$p107: ref, out_$i109: i32, out_$i110: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p70: ref, out_$i71: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_44: i1)
{

  entry:
    out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p84, out_$p85, out_$i86, out_$p89, out_$p90, out_$p91, out_$i92, out_$p95, out_$i96, out_$p99, out_$i100, out_$p103, out_$p104, out_$i105, out_$p107, out_$i109, out_$i110, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p70, out_$i71, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_44 := in_$p72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p81, in_$i82, in_$p84, in_$p85, in_$i86, in_$p89, in_$p90, in_$p91, in_$i92, in_$p95, in_$i96, in_$p99, in_$i100, in_$p103, in_$p104, in_$i105, in_$p107, in_$i109, in_$i110, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p70, in_$i71, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_vslice_dummy_var_44;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1915;

  $bb43:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$p70, out_$i71 := out_$p115, out_$i110;
    goto $bb43_dummy;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i64(out_$i117, $p2i.ref.i64(rio_mports));
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$i117 := $p2i.ref.i64(out_$p116);
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p114, $mul.ref($sub.ref(0, 16), 2880)), $mul.ref(16, 1));
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref(out_$p114, $mul.ref($sub.ref(0, 16), 2880));
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(out_$p113);
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, out_$p112);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(out_$p70, $mul.ref(0, 2880)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1964;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1963;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i110 := out_$i71;
    goto $bb42;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$i110 := out_$i109;
    goto $bb42;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i71, 1);
    call {:si_unique_call 350} {:cexpr "n"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} out_vslice_dummy_var_44 := queue_work(out_$p104, out_$p107);
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p59, $mul.ref(out_$i105, 88)), $mul.ref(0, 1));
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$i105 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$p104 := $M.49;
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p103, disc_work_handler);
    goto corral_source_split_1955;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($add.ref(in_$p59, $mul.ref(out_$i100, 88)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1952;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} INIT_LIST_HEAD(out_$p99);
    goto corral_source_split_1951;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref(in_$p59, $mul.ref(out_$i96, 88)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    goto corral_source_split_1949;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1948;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} lockdep_init_map(out_$p95, .str.28, in_$p1, 0);
    goto corral_source_split_1947;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($add.ref(in_$p59, $mul.ref(out_$i92, 88)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 346} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p90, out_$p91, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_1943;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(out_$p89);
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(in_$p59, $mul.ref(out_$i86, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p85, 137438953408);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} __init_work(out_$p84, 0);
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p59, $mul.ref(out_$i82, 88)), $mul.ref(0, 1));
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p81, out_$p70);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p59, $mul.ref(out_$i79, 88)), $mul.ref(80, 1));
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1928;

  $bb40:
    assume out_$i78 == 1;
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i64(out_$i77, 0);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p70, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1922;

  $bb37:
    assume out_$i74 == 1;
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i73, 0);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_1918;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p70, $mul.ref(0, 2880)), $mul.ref(1128, 1));
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb39;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i78 == 1);
    goto $bb39;

  $bb43_dummy:
    call {:si_unique_call 1} out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p84, out_$p85, out_$i86, out_$p89, out_$p90, out_$p91, out_$i92, out_$p95, out_$i96, out_$p99, out_$i100, out_$p103, out_$p104, out_$i105, out_$p107, out_$i109, out_$i110, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p70, out_$i71, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_44 := rio_init_mports_loop_$bb35(in_$p1, in_$p2, in_$p59, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p84, out_$p85, out_$i86, out_$p89, out_$p90, out_$p91, out_$i92, out_$p95, out_$i96, out_$p99, out_$i100, out_$p103, out_$p104, out_$i105, out_$p107, out_$i109, out_$i110, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p70, out_$i71, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_44);
    return;

  exit:
    return;
}



procedure rio_init_mports_loop_$bb35(in_$p1: ref, in_$p2: ref, in_$p59: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$i79: i64, in_$p81: ref, in_$i82: i64, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$p95: ref, in_$i96: i64, in_$p99: ref, in_$i100: i64, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$p107: ref, in_$i109: i32, in_$i110: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p70: ref, in_$i71: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_44: i1) returns (out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$i79: i64, out_$p81: ref, out_$i82: i64, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$p95: ref, out_$i96: i64, out_$p99: ref, out_$i100: i64, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$p107: ref, out_$i109: i32, out_$i110: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p70: ref, out_$i71: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_44: i1);
  modifies $M.51, $M.50, $M.53, $M.52, $M.55, $M.54, $M.57, $M.56, $M.0;



implementation rio_init_mports_loop_$bb8(in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i1, in_$i29: i8, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i41: i32, in_$i40: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p15: ref, in_$i16: i32, in_$i50: i32, in_vslice_dummy_var_40: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i1, out_$i29: i8, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i41: i32, out_$i40: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p15: ref, out_$i16: i32, out_$i50: i32, out_vslice_dummy_var_40: i32)
{

  entry:
    out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i41, out_$i40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15, out_$i16, out_$i50, out_vslice_dummy_var_40 := in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p36, in_$p37, in_$p38, in_$p39, in_$i41, in_$i40, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p15, in_$i16, in_$i50, in_vslice_dummy_var_40;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  $bb19:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$i16 := out_$p46, out_$i40;
    goto $bb19_dummy;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i40;
    assume true;
    goto $bb19;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, $p2i.ref.i64(rio_mports));
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p45, $mul.ref($sub.ref(0, 16), 2880)), $mul.ref(16, 1));
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p45, $mul.ref($sub.ref(0, 16), 2880));
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 2880)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1868;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1867;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i16, 1);
    call {:si_unique_call 332} {:cexpr "n"} boogie_si_record_i32(out_$i41);
    assume {:verifier.code 0} true;
    out_$i40 := out_$i41;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i16;
    goto $bb18;

  $bb13:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_18:
    goto corral_source_split_1865;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} ldv_module_put_21(out_$p39);
    goto SeqInstr_17;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_1864;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_1862;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p15, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1861;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    call {:si_unique_call 335} out_vslice_dummy_var_40 := devirtbounce.16(out_$p34, out_$p15, 0);
    goto corral_source_split_1860;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1859;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p15, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1857;

  $bb14:
    assume out_$i30 == 1;
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i8.i1(out_$i29);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i1.i8(out_$i28);
    call {:si_unique_call 334} {:cexpr "tmp"} boogie_si_record_i8(out_$i29);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} out_$i28 := ldv_try_module_get_20(out_$p27);
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p15, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1848;

  $bb12:
    assume out_$i23 == 1;
    goto corral_source_split_1847;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, 0);
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1841;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p15, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_1840;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    out_$i19 := $sge.i32(out_$i18, 0);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_1836;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p15, $mul.ref(0, 2880)), $mul.ref(1128, 1));
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume !(out_$i19 == 1);
    goto corral_source_split_1845;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i41, out_$i40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15, out_$i16, out_$i50, out_vslice_dummy_var_40 := rio_init_mports_loop_$bb8(out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i41, out_$i40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15, out_$i16, out_$i50, out_vslice_dummy_var_40);
    return;

  exit:
    return;
}



procedure rio_init_mports_loop_$bb8(in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i1, in_$i29: i8, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i41: i32, in_$i40: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p15: ref, in_$i16: i32, in_$i50: i32, in_vslice_dummy_var_40: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i1, out_$i29: i8, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i41: i32, out_$i40: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p15: ref, out_$i16: i32, out_$i50: i32, out_vslice_dummy_var_40: i32);
  modifies $M.19, assertsPassed;



implementation rio_init_loop_$bb4(in_$p4: ref, in_$i5: i64, in_$i6: i1, in_$p3: ref) returns (out_$p4: ref, out_$i5: i64, out_$i6: i1, out_$p3: ref)
{

  entry:
    out_$p4, out_$i5, out_$i6, out_$p3 := in_$p4, in_$i5, in_$i6, in_$p3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2121;

  $bb6:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$p3 := out_$p4;
    goto $bb6_dummy;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i64(out_$i5, 0);
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$i5 := $p2i.ref.i64(out_$p4);
    goto corral_source_split_2125;

  SeqInstr_51:
    goto corral_source_split_2124;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} out_$p4 := rio_get_device($sub.i16(0, 1), $sub.i16(0, 1), out_$p3);
    goto SeqInstr_50;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} rio_fixup_device(out_$p3);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$i6, out_$p3 := rio_init_loop_$bb4(out_$p4, out_$i5, out_$i6, out_$p3);
    return;

  exit:
    return;
}



procedure rio_init_loop_$bb4(in_$p4: ref, in_$i5: i64, in_$i6: i1, in_$p3: ref) returns (out_$p4: ref, out_$i5: i64, out_$i6: i1, out_$p3: ref);
  modifies $M.0, $M.15, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.16, $M.4, $M.3, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $CurrAddr, $M.19, assertsPassed;



implementation rio_match_device_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$i4: i16, in_$i5: i32, in_$i6: i1, in_$p7: ref, in_$i8: i16, in_$i9: i32, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i16, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i16, in_$i31: i32, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$p41: ref, in_$i42: i16, in_$i43: i32, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i1, in_$p40: ref, in_$p49: ref, in_$p2: ref, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i1) returns (out_$p3: ref, out_$i4: i16, out_$i5: i32, out_$i6: i1, out_$p7: ref, out_$i8: i16, out_$i9: i32, out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i16, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i16, out_$i31: i32, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$p41: ref, out_$i42: i16, out_$i43: i32, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i1, out_$p40: ref, out_$p49: ref, out_$p2: ref, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$i6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p40, out_$p49, out_$p2, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57 := in_$p3, in_$i4, in_$i5, in_$i6, in_$p7, in_$i8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p40, in_$p49, in_$p2, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2512;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    out_$p2 := out_$p49;
    goto corral_source_split_2578_dummy;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p2, $mul.ref(1, 8));
    goto corral_source_split_2578;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb8;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb8;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb8;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p2;
    assume true;
    goto $bb23;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i43, out_$i46);
    goto corral_source_split_2574;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(out_$i45);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i16($M.0, out_$p44);
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2448)), $mul.ref(52, 1));
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p41);
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2568;

  $bb21:
    assume !(out_$i39 == 1);
    goto corral_source_split_2567;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p2;
    assume true;
    goto $bb21;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 65535);
    goto corral_source_split_2554;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_2553;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.0, out_$p36);
    goto corral_source_split_2552;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2551;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb15;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 65535);
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i16($M.0, out_$p25);
    goto corral_source_split_2538;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2537;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i24 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i17 == 1;
    goto $bb10;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 65535);
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i15);
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i16($M.0, out_$p14);
    goto corral_source_split_2524;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2523;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i13 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb4;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i5, 65535);
    goto corral_source_split_2521;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    out_$i5 := $zext.i16.i32(out_$i4);
    goto corral_source_split_2520;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    out_$i4 := $load.i16($M.0, out_$p3);
    goto corral_source_split_2519;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(out_$p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2518;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i57 == 1;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume out_$i53 == 1;
    goto $bb27;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_2516;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.0, out_$p50);
    goto corral_source_split_2514;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2513;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i16.i32(out_$i55);
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i16($M.0, out_$p54);
    goto corral_source_split_2582;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2581;

  $bb28:
    assume !(out_$i53 == 1);
    goto corral_source_split_2580;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i9, out_$i12);
    goto corral_source_split_2535;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i16.i32(out_$i11);
    goto corral_source_split_2534;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i16($M.0, out_$p10);
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2448)), $mul.ref(44, 1));
    goto corral_source_split_2532;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i16.i32(out_$i8);
    goto corral_source_split_2531;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i16($M.0, out_$p7);
    goto corral_source_split_2530;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2529;

  $bb5:
    assume !(out_$i6 == 1);
    goto corral_source_split_2528;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i20, out_$i23);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.0, out_$p21);
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2448)), $mul.ref(42, 1));
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.0, out_$p18);
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2543;

  $bb11:
    assume !(out_$i17 == 1);
    goto corral_source_split_2542;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i31, out_$i34);
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_2562;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2448)), $mul.ref(54, 1));
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i16.i32(out_$i30);
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i16($M.0, out_$p29);
    goto corral_source_split_2558;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2557;

  $bb16:
    assume !(out_$i28 == 1);
    goto corral_source_split_2556;

  corral_source_split_2578_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$i6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p40, out_$p49, out_$p2, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57 := rio_match_device_loop_$bb1(in_$p1, out_$p3, out_$i4, out_$i5, out_$i6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p40, out_$p49, out_$p2, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57);
    return;

  exit:
    return;
}



procedure rio_match_device_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$i4: i16, in_$i5: i32, in_$i6: i1, in_$p7: ref, in_$i8: i16, in_$i9: i32, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i16, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i16, in_$i31: i32, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$p41: ref, in_$i42: i16, in_$i43: i32, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i1, in_$p40: ref, in_$p49: ref, in_$p2: ref, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i1) returns (out_$p3: ref, out_$i4: i16, out_$i5: i32, out_$i6: i1, out_$p7: ref, out_$i8: i16, out_$i9: i32, out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i16, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i16, out_$i31: i32, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$p41: ref, out_$i42: i16, out_$i43: i32, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i1, out_$p40: ref, out_$p49: ref, out_$p2: ref, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i1);



implementation rio_read_config_loop_$bb26(in_$p3: ref, in_$i4: i64, in_$p8: ref, in_$p14: ref, in_$i69: i32, in_$i71: i32, in_$i72: i32, in_$i73: i8, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$i84: i8, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i8, in_$i90: i64, in_$i91: i64, in_$p92: ref, in_$i93: i64, in_$i94: i32, in_$i95: i1, in_$i67: i32, in_$i68: i64, in_$i96: i64, in_$i97: i32, in_vslice_dummy_var_49: i32) returns (out_$i69: i32, out_$i71: i32, out_$i72: i32, out_$i73: i8, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$i84: i8, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i8, out_$i90: i64, out_$i91: i64, out_$p92: ref, out_$i93: i64, out_$i94: i32, out_$i95: i1, out_$i67: i32, out_$i68: i64, out_$i96: i64, out_$i97: i32, out_vslice_dummy_var_49: i32)
{

  entry:
    out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i67, out_$i68, out_$i96, out_$i97, out_vslice_dummy_var_49 := in_$i69, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i67, in_$i68, in_$i96, in_$i97, in_vslice_dummy_var_49;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2784;

  $bb28:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i67, out_$i68 := out_$i94, out_$i93;
    goto $bb28_dummy;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97 := out_$i93, out_$i94;
    assume true;
    goto $bb28;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i95 := $ugt.i32(out_$i94, 3);
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i67, 4);
    call {:si_unique_call 519} {:cexpr "size"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i64(out_$i68, 4);
    call {:si_unique_call 518} {:cexpr "off"} boogie_si_record_i64(out_$i93);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p92, out_$i89);
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref(in_$p3, $mul.ref(out_$i91, 1));
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i64(out_$i90, 3);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$i90 := $sub.i64(out_$i68, in_$i4);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$i89 := $trunc.i32.i8(out_$i88);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.3, in_$p8);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p87, out_$i84);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(in_$p3, $mul.ref(out_$i86, 1));
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 2);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i85 := $sub.i64(out_$i68, in_$i4);
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$i84 := $trunc.i32.i8(out_$i83);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_$i83 := $lshr.i32(out_$i82, 8);
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.3, in_$p8);
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p81, out_$i78);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(in_$p3, $mul.ref(out_$i80, 1));
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i64(out_$i79, 1);
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$i79 := $sub.i64(out_$i68, in_$i4);
    goto corral_source_split_2797;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i32.i8(out_$i77);
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$i77 := $lshr.i32(out_$i76, 16);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.3, in_$p8);
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p75, out_$i73);
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(in_$p3, $mul.ref(out_$i74, 1));
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i64(out_$i68, in_$i4);
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i32.i8(out_$i72);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$i72 := $lshr.i32(out_$i71, 24);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.3, in_$p8);
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} out_vslice_dummy_var_49 := rio_read_config_32(in_$p14, out_$i69, in_$p8);
    goto corral_source_split_2787;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i64.i32(out_$i68);
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i67, out_$i68, out_$i96, out_$i97, out_vslice_dummy_var_49 := rio_read_config_loop_$bb26(in_$p3, in_$i4, in_$p8, in_$p14, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i67, out_$i68, out_$i96, out_$i97, out_vslice_dummy_var_49);
    return;

  exit:
    return;
}



procedure rio_read_config_loop_$bb26(in_$p3: ref, in_$i4: i64, in_$p8: ref, in_$p14: ref, in_$i69: i32, in_$i71: i32, in_$i72: i32, in_$i73: i8, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$i84: i8, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i8, in_$i90: i64, in_$i91: i64, in_$p92: ref, in_$i93: i64, in_$i94: i32, in_$i95: i1, in_$i67: i32, in_$i68: i64, in_$i96: i64, in_$i97: i32, in_vslice_dummy_var_49: i32) returns (out_$i69: i32, out_$i71: i32, out_$i72: i32, out_$i73: i8, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$i84: i8, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i8, out_$i90: i64, out_$i91: i64, out_$p92: ref, out_$i93: i64, out_$i94: i32, out_$i95: i1, out_$i67: i32, out_$i68: i64, out_$i96: i64, out_$i97: i32, out_vslice_dummy_var_49: i32);
  modifies $M.0, $M.4, $M.3, $CurrAddr;



implementation rio_write_config_loop_$bb23(in_$p3: ref, in_$i4: i64, in_$p9: ref, in_$i66: i64, in_$i67: i64, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i64, in_$i72: i64, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i78: i64, in_$i79: i64, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i64, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i93: i64, in_$i94: i32, in_$i95: i1, in_$i64: i32, in_$i65: i64, in_$i96: i64, in_$i97: i32, in_vslice_dummy_var_54: i32) returns (out_$i66: i64, out_$i67: i64, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i64, out_$i72: i64, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i78: i64, out_$i79: i64, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i64, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i93: i64, out_$i94: i32, out_$i95: i1, out_$i64: i32, out_$i65: i64, out_$i96: i64, out_$i97: i32, out_vslice_dummy_var_54: i32)
{

  entry:
    out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i64, out_$i65, out_$i96, out_$i97, out_vslice_dummy_var_54 := in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i93, in_$i94, in_$i95, in_$i64, in_$i65, in_$i96, in_$i97, in_vslice_dummy_var_54;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2926;

  $bb25:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i94, out_$i93;
    goto $bb25_dummy;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97 := out_$i93, out_$i94;
    assume true;
    goto $bb25;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    out_$i95 := $ugt.i32(out_$i94, 3);
    goto corral_source_split_2957;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i64, 4);
    call {:si_unique_call 544} {:cexpr "size"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_2956;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i64(out_$i65, 4);
    call {:si_unique_call 543} {:cexpr "off"} boogie_si_record_i64(out_$i93);
    goto corral_source_split_2955;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} out_vslice_dummy_var_54 := rio_write_config_32(in_$p9, out_$i91, out_$i90);
    goto corral_source_split_2954;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$i91 := $trunc.i64.i32(out_$i65);
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    out_$i90 := $or.i32(out_$i89, out_$i84);
    call {:si_unique_call 541} {:cexpr "val___0"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_2952;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    out_$i89 := $shl.i32(out_$i88, 24);
    goto corral_source_split_2951;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i32(out_$i87);
    goto corral_source_split_2950;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i8($M.0, out_$p86);
    goto corral_source_split_2949;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(in_$p3, $mul.ref(out_$i85, 1));
    goto corral_source_split_2948;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    out_$i85 := $sub.i64(out_$i65, in_$i4);
    goto corral_source_split_2947;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    out_$i84 := $or.i32(out_$i83, out_$i77);
    call {:si_unique_call 540} {:cexpr "val___0"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_2946;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    out_$i83 := $shl.i32(out_$i82, 16);
    goto corral_source_split_2945;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i8.i32(out_$i81);
    goto corral_source_split_2944;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i8($M.0, out_$p80);
    goto corral_source_split_2943;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref(in_$p3, $mul.ref(out_$i79, 1));
    goto corral_source_split_2942;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i64(out_$i78, 1);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$i78 := $sub.i64(out_$i65, in_$i4);
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i77 := $or.i32(out_$i76, out_$i70);
    call {:si_unique_call 539} {:cexpr "val___0"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$i76 := $shl.i32(out_$i75, 8);
    goto corral_source_split_2938;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    goto corral_source_split_2937;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.0, out_$p73);
    goto corral_source_split_2936;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(in_$p3, $mul.ref(out_$i72, 1));
    goto corral_source_split_2935;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i64(out_$i71, 2);
    goto corral_source_split_2934;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    out_$i71 := $sub.i64(out_$i65, in_$i4);
    goto corral_source_split_2933;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i69);
    call {:si_unique_call 538} {:cexpr "val___0"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_2932;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.0, out_$p68);
    goto corral_source_split_2931;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(in_$p3, $mul.ref(out_$i67, 1));
    goto corral_source_split_2930;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i64(out_$i66, 3);
    goto corral_source_split_2929;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i64(out_$i65, in_$i4);
    goto corral_source_split_2928;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i64, out_$i65, out_$i96, out_$i97, out_vslice_dummy_var_54 := rio_write_config_loop_$bb23(in_$p3, in_$i4, in_$p9, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i64, out_$i65, out_$i96, out_$i97, out_vslice_dummy_var_54);
    return;

  exit:
    return;
}



procedure rio_write_config_loop_$bb23(in_$p3: ref, in_$i4: i64, in_$p9: ref, in_$i66: i64, in_$i67: i64, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i64, in_$i72: i64, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i78: i64, in_$i79: i64, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i64, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i93: i64, in_$i94: i32, in_$i95: i1, in_$i64: i32, in_$i65: i64, in_$i96: i64, in_$i97: i32, in_vslice_dummy_var_54: i32) returns (out_$i66: i64, out_$i67: i64, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i64, out_$i72: i64, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i78: i64, out_$i79: i64, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i64, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i93: i64, out_$i94: i32, out_$i95: i1, out_$i64: i32, out_$i65: i64, out_$i96: i64, out_$i97: i32, out_vslice_dummy_var_54: i32);



implementation routes_show_loop_$bb1(in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$p17: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i6: i32, in_$p7: ref, in_$p38: ref) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$p17: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i6: i32, out_$p7: ref, out_$p38: ref)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p17, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i6, out_$p7, out_$p38 := in_$p8, in_$p9, in_$p10, in_$p11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$p17, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i6, in_$p7, in_$p38;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3070;

  $bb7:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$p7 := out_$i29, out_$p17;
    goto $bb7_dummy;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$p38 := out_$p17;
    assume true;
    goto $bb7;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i37 := $sgt.i32(out_$i36, out_$i29);
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$i36 := (if out_$i35 == 1 then 65536 else 256);
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.69, out_$p33);
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 2880)), $mul.ref(1148, 1));
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, in_$p5);
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i6, 1);
    call {:si_unique_call 568} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3085;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3084;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p28;
    goto $bb5;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p7;
    goto $bb5;

  $bb3:
    assume out_$i16 == 1;
    goto corral_source_split_3082;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 255);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.0, out_$p13);
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p11, $mul.ref(out_$i12, 1));
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i6);
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_3075;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_3073;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2448, 1));
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p7, $mul.ref(out_$i27, 1));
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_3104;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} out_$i26 := sprintf.ref.ref.i32.i32(out_$p7, .str.81, out_$i6, out_$i25);
    call {:si_unique_call 570} {:cexpr "tmp"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_3103;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, out_$p23);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p21, $mul.ref(out_$i22, 1));
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i6);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_3096;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2448, 1));
    goto corral_source_split_3095;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p17, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i6, out_$p7, out_$p38 := routes_show_loop_$bb1(in_$p3, in_$p5, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p17, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i6, out_$p7, out_$p38);
    return;

  exit:
    return;
}



procedure routes_show_loop_$bb1(in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$p17: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i6: i32, in_$p7: ref, in_$p38: ref) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$p17: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i6: i32, out_$p7: ref, out_$p38: ref);



implementation lnext_show_loop_$bb6(in_$p3: ref, in_$p9: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$p35: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i15: i32, in_$p16: ref, in_$p44: ref) returns (out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$p35: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i15: i32, out_$p16: ref, out_$p44: ref)
{

  entry:
    out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i36, out_$i37, out_$p38, out_$p35, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i15, out_$p16, out_$p44 := in_$i17, in_$p18, in_$p19, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i36, in_$i37, in_$p38, in_$p35, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i15, in_$p16, in_$p44;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3128;

  $bb11:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$p16 := out_$i39, out_$p35;
    goto $bb11_dummy;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p35;
    assume true;
    goto $bb11;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    out_$i43 := $ult.i32(out_$i39, out_$i42);
    goto corral_source_split_3158;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$i42 := $lshr.i32(out_$i41, 8);
    goto corral_source_split_3157;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, 65280);
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, in_$p9);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i15, 1);
    call {:si_unique_call 576} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3154;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p16, $mul.ref(out_$i37, 1));
    assume {:verifier.code 0} true;
    out_$p35 := out_$p38;
    goto $bb10;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p34;
    goto $bb10;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p16, $mul.ref(out_$i33, 1));
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i32);
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} out_$i32 := sprintf.ref.ref.ref(out_$p16, .str.77, out_$p31);
    call {:si_unique_call 573} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} out_$p31 := rio_name(out_$p30);
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p27, $mul.ref(0, 112)), $mul.ref(112, 1)), $mul.ref(out_$i25, 8));
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_3141;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2448, 1));
    goto corral_source_split_3140;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i15);
    goto corral_source_split_3139;

  $bb8:
    assume out_$i24 == 1;
    goto corral_source_split_3138;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_3136;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 112)), $mul.ref(112, 1)), $mul.ref(out_$i17, 8));
    goto corral_source_split_3133;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 104), 2448)), $mul.ref(2448, 1));
    goto corral_source_split_3131;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i15);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i36);
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} out_$i36 := sprintf.ref.ref(out_$p16, .str.78);
    call {:si_unique_call 575} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3150;

  $bb9:
    assume !(out_$i24 == 1);
    goto corral_source_split_3149;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i36, out_$i37, out_$p38, out_$p35, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i15, out_$p16, out_$p44 := lnext_show_loop_$bb6(in_$p3, in_$p9, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i36, out_$i37, out_$p38, out_$p35, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i15, out_$p16, out_$p44);
    return;

  exit:
    return;
}



procedure lnext_show_loop_$bb6(in_$p3: ref, in_$p9: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$p35: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i15: i32, in_$p16: ref, in_$p44: ref) returns (out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$p35: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i15: i32, out_$p16: ref, out_$p44: ref);



implementation rio_mport_scan_loop_$bb4(in_$i0: i32, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7 := in_$p8, in_$i9, in_$i10, in_$i11, in_$p12, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3224;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p17;
    goto $bb10_dummy;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, $p2i.ref.i64(rio_mports));
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p16, $mul.ref($sub.ref(0, 16), 2880)), $mul.ref(16, 1));
    goto corral_source_split_3242;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p16, $mul.ref($sub.ref(0, 16), 2880));
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_3240;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_3239;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(0, 2880)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3238;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p7;
    assume true;
    goto $bb7;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, in_$i0);
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i8.i32(out_$i9);
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.0, out_$p8);
    goto corral_source_split_3227;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 2880)), $mul.ref(1144, 1));
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7 := rio_mport_scan_loop_$bb4(in_$i0, out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7);
    return;

  exit:
    return;
}



procedure rio_mport_scan_loop_$bb4(in_$i0: i32, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p7: ref);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i1, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i1, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i58, out_$i59, out_$p60, out_$i62, out_$i63, out_$p64, out_$i66, out_$i67, out_$p68, out_$i70, out_$i71, out_$p72, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i58, in_$i59, in_$p60, in_$i62, in_$i63, in_$p64, in_$i66, in_$i67, in_$p68, in_$i70, in_$i71, in_$p72, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$p131, in_$i133, in_$i134, in_$p135, in_$i137, in_$i138, in_$p139, in_$i141, in_$i142, in_$p143, in_$i145, in_$i146, in_$p147, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 655} out_$i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 656} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i8);
    call {:si_unique_call 657} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i8);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb49_dummy;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} ldv_main_exported_11();
    goto corral_source_split_3478;

  $bb46:
    assume out_$i31 == 1;
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$i30 := $M.74;
    goto corral_source_split_3474;

  $bb44:
    assume out_$i29 == 1;
    goto corral_source_split_3473;

  $bb42:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb36:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb26:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb3:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i8, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb51:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} ldv_main_exported_7();
    goto corral_source_split_3481;

  $bb50:
    assume out_$i33 == 1;
    goto corral_source_split_3480;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$i32 := $M.75;
    goto corral_source_split_3470;

  $bb43:
    assume !(out_$i28 == 1);
    goto corral_source_split_3469;

  $bb54:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} ldv_main_exported_17();
    goto corral_source_split_3484;

  $bb53:
    assume out_$i35 == 1;
    goto corral_source_split_3483;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i34 := $M.76;
    goto corral_source_split_3460;

  $bb38:
    assume out_$i26 == 1;
    goto corral_source_split_3459;

  $bb37:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb57:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} ldv_main_exported_2();
    goto corral_source_split_3487;

  $bb56:
    assume out_$i37 == 1;
    goto corral_source_split_3486;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$i36 := $M.77;
    goto corral_source_split_3464;

  $bb40:
    assume out_$i27 == 1;
    goto corral_source_split_3463;

  $bb39:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !(out_$i27 == 1);
    goto corral_source_split_3467;

  $bb60:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.80 := out_$i53;
    call {:si_unique_call 668} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3518;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i52, 1);
    goto corral_source_split_3517;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    out_$i52 := $M.80;
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 667} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(2);
    goto corral_source_split_3515;

  $bb75:
    assume out_$i51 == 1;
    goto corral_source_split_3514;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 0);
    goto corral_source_split_3512;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    out_$i50 := $M.95;
    goto corral_source_split_3511;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.95 := out_$i49;
    call {:si_unique_call 666} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} out_$i49 := rio_device_probe(out_$p48);
    goto corral_source_split_3509;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    out_$p48 := $M.73;
    goto corral_source_split_3508;

  $bb73:
    assume out_$i47 == 1;
    goto corral_source_split_3507;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 1);
    goto corral_source_split_3505;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$i46 := $M.79;
    goto corral_source_split_3504;

  $bb71:
    assume out_$i45 == 1;
    goto corral_source_split_3503;

  $bb69:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb62:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_3489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 662} out_$i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 663} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i40);
    call {:si_unique_call 664} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i40);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i39 == 1;
    goto corral_source_split_3489;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i38 := $M.79;
    goto corral_source_split_3452;

  $bb34:
    assume out_$i24 == 1;
    goto corral_source_split_3451;

  $bb28:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb27:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb84:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 672} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(2);
    goto corral_source_split_3531;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} out_vslice_dummy_var_58 := rio_uevent(out_$p60, in_$p1);
    goto corral_source_split_3530;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$p60 := $M.73;
    goto corral_source_split_3529;

  $bb83:
    assume out_$i59 == 1;
    goto corral_source_split_3528;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 2);
    goto corral_source_split_3526;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i58 := $M.79;
    goto corral_source_split_3525;

  $bb81:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 670} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3523;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} out_vslice_dummy_var_57 := rio_uevent(out_$p56, in_$p1);
    goto corral_source_split_3522;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    out_$p56 := $M.73;
    goto corral_source_split_3521;

  $bb80:
    assume out_$i55 == 1;
    goto corral_source_split_3520;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 1);
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    out_$i54 := $M.79;
    goto corral_source_split_3500;

  $bb70:
    assume !(out_$i44 == 1);
    goto corral_source_split_3499;

  $bb90:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 676} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(2);
    goto corral_source_split_3544;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} out_vslice_dummy_var_60 := rio_match_bus(out_$p68, in_$p3);
    goto corral_source_split_3543;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    out_$p68 := $M.73;
    goto corral_source_split_3542;

  $bb89:
    assume out_$i67 == 1;
    goto corral_source_split_3541;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 2);
    goto corral_source_split_3539;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i66 := $M.79;
    goto corral_source_split_3538;

  $bb87:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 674} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3536;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} out_vslice_dummy_var_59 := rio_match_bus(out_$p64, in_$p3);
    goto corral_source_split_3535;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    out_$p64 := $M.73;
    goto corral_source_split_3534;

  $bb86:
    assume out_$i63 == 1;
    goto corral_source_split_3533;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 1);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i62 := $M.79;
    goto corral_source_split_3492;

  $bb64:
    assume out_$i42 == 1;
    goto corral_source_split_3491;

  $bb63:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb93:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $M.80 := out_$i75;
    call {:si_unique_call 679} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$i75 := $sub.i32(out_$i74, 1);
    goto corral_source_split_3551;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    out_$i74 := $M.80;
    goto corral_source_split_3550;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 678} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3549;

  SeqInstr_96:
    goto corral_source_split_3548;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} out_vslice_dummy_var_61 := rio_device_remove(out_$p72);
    goto SeqInstr_95;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    out_$p72 := $M.73;
    goto corral_source_split_3547;

  $bb92:
    assume out_$i71 == 1;
    goto corral_source_split_3546;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 2);
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    out_$i70 := $M.79;
    goto corral_source_split_3496;

  $bb66:
    assume out_$i43 == 1;
    goto corral_source_split_3495;

  $bb65:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} ldv_stop();
    goto corral_source_split_3554;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb67:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb68;

  $bb72:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb68;

  $bb99:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb109:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb110;

  $bb112:
    assume {:verifier.code 0} true;
    assume !(out_$i85 == 1);
    goto $bb110;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 0);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$i84 := $M.80;
    goto corral_source_split_3567;

  $bb108:
    assume out_$i83 == 1;
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 3);
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$i82 := $M.81;
    goto corral_source_split_3563;

  $bb106:
    assume out_$i81 == 1;
    goto corral_source_split_3562;

  $bb101:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i78, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb100:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i78, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_3556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 681} out_$i78 := __VERIFIER_nondet_int();
    call {:si_unique_call 682} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i78);
    call {:si_unique_call 683} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i78);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb98:
    assume out_$i77 == 1;
    goto corral_source_split_3556;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$i76 := $M.81;
    goto corral_source_split_3456;

  $bb35:
    assume !(out_$i24 == 1);
    goto corral_source_split_3455;

  $bb117:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb122:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i32(out_$i91, 0);
    goto corral_source_split_3607;

  $bb120:
    assume {:verifier.code 0} true;
    out_$i91 := $M.96;
    goto corral_source_split_3606;

  $bb119:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 710} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 709} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 708} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 707} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} ldv_initialize_bus_type_18();
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 705} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 704} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 703} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 702} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3596;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 701} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 700} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 699} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 698} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 697} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 696} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 695} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} ldv_initialize_bus_type_19();
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 693} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 692} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} ldv_initialize_bin_attribute_5();
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 690} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 689} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3583;

  $bb118:
    assume out_$i90 == 1;
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 0);
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$i89 := $M.96;
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $M.96 := out_$i88;
    call {:si_unique_call 688} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} out_$i88 := rio_bus_init();
    goto corral_source_split_3577;

  $bb116:
    assume out_$i87 == 1;
    goto corral_source_split_3576;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 1);
    goto corral_source_split_3560;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$i86 := $M.81;
    goto corral_source_split_3559;

  $bb103:
    assume out_$i80 == 1;
    goto corral_source_split_3558;

  $bb102:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i78, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} ldv_stop();
    goto corral_source_split_3612;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb104:
    assume {:verifier.code 0} true;
    assume !(out_$i80 == 1);
    goto $bb105;

  $bb107:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb105;

  $bb129:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} ldv_main_exported_16();
    goto corral_source_split_3615;

  $bb128:
    assume out_$i94 == 1;
    goto corral_source_split_3614;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_3441;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$i93 := $M.82;
    goto corral_source_split_3440;

  $bb30:
    assume out_$i22 == 1;
    goto corral_source_split_3439;

  $bb29:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb132:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} ldv_main_exported_13();
    goto corral_source_split_3618;

  $bb131:
    assume out_$i96 == 1;
    goto corral_source_split_3617;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i95, 0);
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$i95 := $M.83;
    goto corral_source_split_3444;

  $bb32:
    assume out_$i23 == 1;
    goto corral_source_split_3443;

  $bb31:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb135:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} ldv_main_exported_6();
    goto corral_source_split_3621;

  $bb134:
    assume out_$i98 == 1;
    goto corral_source_split_3620;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$i97 := $M.84;
    goto corral_source_split_3448;

  $bb33:
    assume !(out_$i23 == 1);
    goto corral_source_split_3447;

  $bb138:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} ldv_main_exported_3();
    goto corral_source_split_3624;

  $bb137:
    assume out_$i100 == 1;
    goto corral_source_split_3623;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i99, 0);
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    out_$i99 := $M.85;
    goto corral_source_split_3432;

  $bb24:
    assume out_$i19 == 1;
    goto corral_source_split_3431;

  $bb18:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i8, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb5:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i8, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb4:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i8, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb141:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} ldv_main_exported_9();
    goto corral_source_split_3627;

  $bb140:
    assume out_$i102 == 1;
    goto corral_source_split_3626;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_3437;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$i101 := $M.86;
    goto corral_source_split_3436;

  $bb25:
    assume !(out_$i19 == 1);
    goto corral_source_split_3435;

  $bb144:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} ldv_main_exported_12();
    goto corral_source_split_3630;

  $bb143:
    assume out_$i104 == 1;
    goto corral_source_split_3629;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_3421;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    out_$i103 := $M.87;
    goto corral_source_split_3420;

  $bb20:
    assume out_$i17 == 1;
    goto corral_source_split_3419;

  $bb19:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i8, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb147:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} ldv_main_exported_14();
    goto corral_source_split_3633;

  $bb146:
    assume out_$i106 == 1;
    goto corral_source_split_3632;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i32(out_$i105, 0);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$i105 := $M.88;
    goto corral_source_split_3424;

  $bb22:
    assume out_$i18 == 1;
    goto corral_source_split_3423;

  $bb21:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i8, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb150:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} ldv_main_exported_15();
    goto corral_source_split_3636;

  $bb149:
    assume out_$i108 == 1;
    goto corral_source_split_3635;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_3429;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$i107 := $M.89;
    goto corral_source_split_3428;

  $bb23:
    assume !(out_$i18 == 1);
    goto corral_source_split_3427;

  $bb153:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ldv_main_exported_8();
    goto corral_source_split_3639;

  $bb152:
    assume out_$i110 == 1;
    goto corral_source_split_3638;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$i109 := $M.90;
    goto corral_source_split_3412;

  $bb16:
    assume out_$i15 == 1;
    goto corral_source_split_3411;

  $bb7:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i8, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb6:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i8, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb156:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    goto $bb157;

  SeqInstr_102:
    goto corral_source_split_3642;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} ldv_main_exported_4();
    goto SeqInstr_101;

  $bb155:
    assume out_$i112 == 1;
    goto corral_source_split_3641;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i32(out_$i111, 0);
    goto corral_source_split_3417;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    out_$i111 := $M.91;
    goto corral_source_split_3416;

  $bb17:
    assume !(out_$i15 == 1);
    goto corral_source_split_3415;

  $bb159:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb173:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb175:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $M.80 := out_$i128;
    call {:si_unique_call 729} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$i128 := $add.i32(out_$i127, 1);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$i127 := $M.80;
    goto corral_source_split_3671;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_3670;

  $bb174:
    assume out_$i126 == 1;
    goto corral_source_split_3669;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 0);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$i125 := $M.97;
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $M.97 := out_$i124;
    call {:si_unique_call 727} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i124);
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} out_$i124 := rio_device_probe(out_$p123);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    out_$p123 := $M.73;
    goto corral_source_split_3663;

  $bb172:
    assume out_$i122 == 1;
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 1);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    out_$i121 := $M.92;
    goto corral_source_split_3659;

  $bb170:
    assume out_$i120 == 1;
    goto corral_source_split_3658;

  $bb168:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i115, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb161:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i119 := $slt.i32(out_$i115, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb160:
    assume {:verifier.code 0} true;
    out_$i116 := $slt.i32(out_$i115, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_3644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} out_$i115 := __VERIFIER_nondet_int();
    call {:si_unique_call 724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i115);
    call {:si_unique_call 725} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i115);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb158:
    assume out_$i114 == 1;
    goto corral_source_split_3644;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i32(out_$i113, 0);
    goto corral_source_split_3401;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    out_$i113 := $M.92;
    goto corral_source_split_3400;

  $bb9:
    assume out_$i12 == 1;
    goto corral_source_split_3399;

  $bb8:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i8, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb183:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 733} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} out_vslice_dummy_var_63 := rio_uevent(out_$p135, in_$p5);
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$p135 := $M.73;
    goto corral_source_split_3684;

  $bb182:
    assume out_$i134 == 1;
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 2);
    goto corral_source_split_3681;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i133 := $M.92;
    goto corral_source_split_3680;

  $bb180:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 731} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} out_vslice_dummy_var_62 := rio_uevent(out_$p131, in_$p5);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    out_$p131 := $M.73;
    goto corral_source_split_3676;

  $bb179:
    assume out_$i130 == 1;
    goto corral_source_split_3675;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$i129 := $M.92;
    goto corral_source_split_3655;

  $bb169:
    assume !(out_$i119 == 1);
    goto corral_source_split_3654;

  $bb189:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 737} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_3699;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} out_vslice_dummy_var_65 := rio_match_bus(out_$p143, in_$p7);
    goto corral_source_split_3698;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$p143 := $M.73;
    goto corral_source_split_3697;

  $bb188:
    assume out_$i142 == 1;
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 2);
    goto corral_source_split_3694;

  $bb187:
    assume {:verifier.code 0} true;
    out_$i141 := $M.92;
    goto corral_source_split_3693;

  $bb186:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 735} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3691;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} out_vslice_dummy_var_64 := rio_match_bus(out_$p139, in_$p7);
    goto corral_source_split_3690;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    out_$p139 := $M.73;
    goto corral_source_split_3689;

  $bb185:
    assume out_$i138 == 1;
    goto corral_source_split_3688;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 1);
    goto corral_source_split_3648;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i137 := $M.92;
    goto corral_source_split_3647;

  $bb163:
    assume out_$i117 == 1;
    goto corral_source_split_3646;

  $bb162:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i115, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb192:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $M.80 := out_$i150;
    call {:si_unique_call 740} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i150 := $sub.i32(out_$i149, 1);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$i149 := $M.80;
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 739} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_3704;

  SeqInstr_105:
    goto corral_source_split_3703;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} out_vslice_dummy_var_66 := rio_device_remove(out_$p147);
    goto SeqInstr_104;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$p147 := $M.73;
    goto corral_source_split_3702;

  $bb191:
    assume out_$i146 == 1;
    goto corral_source_split_3701;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 2);
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$i145 := $M.92;
    goto corral_source_split_3651;

  $bb165:
    assume out_$i118 == 1;
    goto corral_source_split_3650;

  $bb164:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i115, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ldv_stop();
    goto corral_source_split_3709;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb166:
    assume {:verifier.code 0} true;
    assume !(out_$i118 == 1);
    goto $bb167;

  $bb171:
    assume {:verifier.code 0} true;
    assume !(out_$i120 == 1);
    goto $bb167;

  $bb198:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_main_exported_10();
    goto corral_source_split_3712;

  $bb197:
    assume out_$i152 == 1;
    goto corral_source_split_3711;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$i152 := $ne.i32(out_$i151, 0);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$i151 := $M.93;
    goto corral_source_split_3404;

  $bb11:
    assume out_$i13 == 1;
    goto corral_source_split_3403;

  $bb10:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i8, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb201:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} ldv_main_exported_5();
    goto corral_source_split_3715;

  $bb200:
    assume out_$i154 == 1;
    goto corral_source_split_3714;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$i154 := $ne.i32(out_$i153, 0);
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i153 := $M.94;
    goto corral_source_split_3408;

  $bb13:
    assume out_$i14 == 1;
    goto corral_source_split_3407;

  $bb12:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i8, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_stop();
    goto corral_source_split_3717;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb15;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb15;

  $bb49_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i58, out_$i59, out_$p60, out_$i62, out_$i63, out_$p64, out_$i66, out_$i67, out_$p68, out_$i70, out_$i71, out_$p72, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66 := main_loop_$bb1(in_$p1, in_$p3, in_$p5, in_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i58, out_$i59, out_$p60, out_$i62, out_$i63, out_$p64, out_$i66, out_$i67, out_$p68, out_$i70, out_$i71, out_$p72, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i1, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i1, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32);
  modifies $M.74, $M.0, $CurrAddr, $M.75, $M.76, $M.77, $M.80, $M.79, $M.95, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, assertsPassed, $M.73, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.98, $M.99, $M.100, $M.94, $M.81, $M.96, $M.72, $M.49, $M.50, $M.52, $M.54, $M.56, $M.51, $M.53, $M.55, $M.57, $M.15, $M.16, $M.4, $M.3, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.97, $M.63, $M.64;


