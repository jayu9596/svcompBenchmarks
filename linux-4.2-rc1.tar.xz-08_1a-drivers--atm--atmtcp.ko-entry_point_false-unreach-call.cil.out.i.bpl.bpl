var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]i32;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]i64;

var $M.8: [ref]i64;

var $M.9: [ref]i8;

var $M.10: i32;

var $M.11: i32;

var $M.12: [ref]ref;

var $M.13: [ref]i8;

var $M.14: ref;

var $M.15: ref;

var $M.16: [ref]i8;

var $M.17: i32;

var $M.18: i32;

var $M.19: i32;

var $M.20: i32;

var $M.21: i32;

var $M.22: i32;

var $M.23: ref;

var $M.43: [ref]i8;

var $M.44: [ref]i8;

var $M.45: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 189800);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const atmtcp_v_dev_ops_group0: ref;

axiom atmtcp_v_dev_ops_group0 == $sub.ref(0, 2060);

const atmtcp_v_dev_ops_group1: ref;

axiom atmtcp_v_dev_ops_group1 == $sub.ref(0, 3092);

const atmtcp_c_dev_ops_group0: ref;

axiom atmtcp_c_dev_ops_group0 == $sub.ref(0, 4124);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 5152);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 6180);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 7208);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 8236);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 9264);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 10292);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 11320);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 12348);

const atmtcp_ioctl_ops: ref;

axiom atmtcp_ioctl_ops == $sub.ref(0, 13404);

const atmtcp_c_dev_ops: ref;

axiom atmtcp_c_dev_ops == $sub.ref(0, 14540);

const atmtcp_control_dev: ref;

axiom atmtcp_control_dev == $sub.ref(0, 17260);

const atmtcp_v_dev_ops: ref;

axiom atmtcp_v_dev_ops == $sub.ref(0, 18396);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 11} .str.4: ref;

axiom .str.4 == $sub.ref(0, 19431);

const .str.6: ref;

axiom .str.6 == $sub.ref(0, 20456);

const {:count 4} .str.7: ref;

axiom .str.7 == $sub.ref(0, 21484);

const {:count 25} .str.5: ref;

axiom .str.5 == $sub.ref(0, 22533);

const vcc_sklist_lock: ref;

axiom vcc_sklist_lock == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const vcc_hash: ref;

axiom vcc_hash == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 33} .str.8: ref;

axiom .str.8 == $sub.ref(0, 23590);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 7} .str.1: ref;

axiom .str.1 == $sub.ref(0, 24621);

const {:count 24} .str.2: ref;

axiom .str.2 == $sub.ref(0, 25669);

const {:count 39} .str.9: ref;

axiom .str.9 == $sub.ref(0, 26732);

const .str: ref;

axiom .str == $sub.ref(0, 27779);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 28811);

const {:count 3} .str.1.32: ref;

axiom .str.1.32 == $sub.ref(0, 29838);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 30876);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 31904);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 32936);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 33968);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 35000);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 36032);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const atmtcp_v_dev_close: ref;

axiom atmtcp_v_dev_close == $sub.ref(0, 37064);

procedure atmtcp_v_dev_close($p0: ref);
  free requires assertsPassed;



implementation atmtcp_v_dev_close($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    return;
}



const atmtcp_v_open: ref;

axiom atmtcp_v_open == $sub.ref(0, 38096);

procedure atmtcp_v_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.1, $M.8, $M.7, $CurrAddr;



implementation atmtcp_v_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i16;
  var $i11: i16;
  var $p13: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $i20: i16;
  var $p22: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i29: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    call {:si_unique_call 11} {:cexpr "vpi"} boogie_si_record_i16($i3);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 12} {:cexpr "vci"} boogie_si_record_i32($i5);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 13} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p6, 0, 120, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 8);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i3);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i11 := __fswab16($i10);
    call {:si_unique_call 15} {:cexpr "tmp"} boogie_si_record_i16($i11);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i11);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i3);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i5);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i20 := __fswab16($i19);
    call {:si_unique_call 17} {:cexpr "tmp___0"} boogie_si_record_i16($i20);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, $i20);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i5);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i26 := $sext.i16.i32($i3);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, $sub.i32(0, 2));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i27 == 1);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i5, $sub.i32(0, 2));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 1);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1328, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p31);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p32);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 18} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p33, $p34, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} set_bit(0, $p35);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} clear_bit(1, $p36);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i37 := atmtcp_send_control($p0, 1, $p1, 1);
    call {:si_unique_call 22} {:cexpr "error"} boogie_si_record_i32($i37);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p39 := sk_atm($p0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 1288)), $mul.ref(968, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, $i41);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i29 := $i42;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i29 := $i37;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb2;
}



const atmtcp_v_close: ref;

axiom atmtcp_v_close == $sub.ref(0, 39128);

procedure atmtcp_v_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.1, $M.8, $M.7, $CurrAddr;



implementation atmtcp_v_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p14: ref;
  var $p15: ref;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 25} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p2, 0, 120, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, 8);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i6);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i11);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} clear_bit(1, $p15);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_40 := atmtcp_send_control($p0, 2, $p1, 0);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    return;
}



const atmtcp_v_ioctl: ref;

axiom atmtcp_v_ioctl == $sub.ref(0, 40160);

procedure atmtcp_v_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation atmtcp_v_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p43: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i5: i32;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $p83: ref;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p118: ref;
  var $p119: ref;
  var $p117: ref;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $i123: i64;
  var $i124: i1;
  var $p126: ref;
  var $p127: ref;
  var $p125: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p160: ref;
  var $p161: ref;
  var $p159: ref;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $p168: ref;
  var $p169: ref;
  var $p167: ref;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $i180: i16;
  var $i181: i32;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i32;
  var $p189: ref;
  var $i190: i8;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i64;
  var $i200: i1;
  var $p202: ref;
  var $p203: ref;
  var $p201: ref;
  var $i204: i64;
  var $i205: i1;
  var $p206: ref;
  var $i207: i64;
  var $i208: i1;
  var $p210: ref;
  var $p211: ref;
  var $p209: ref;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i64;
  var $i219: i64;
  var $i220: i1;
  var $p221: ref;
  var $i222: i16;
  var $i223: i32;
  var $p224: ref;
  var $i225: i8;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $p231: ref;
  var $i232: i8;
  var $i233: i32;
  var $i234: i32;
  var $i235: i1;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i241: i64;
  var $i242: i1;
  var $p244: ref;
  var $p245: ref;
  var $p243: ref;
  var $i246: i64;
  var $i247: i1;
  var $p248: ref;
  var $i249: i64;
  var $i250: i1;
  var $p252: ref;
  var $p253: ref;
  var $p251: ref;
  var $i254: i64;
  var $i255: i1;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $i260: i64;
  var $i261: i64;
  var $i262: i1;
  var $p263: ref;
  var $i264: i16;
  var $i265: i32;
  var $p266: ref;
  var $i267: i8;
  var $i268: i32;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i32;
  var $p273: ref;
  var $i274: i8;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $i283: i64;
  var $i284: i1;
  var $p286: ref;
  var $p287: ref;
  var $p285: ref;
  var $i288: i64;
  var $i289: i1;
  var $p290: ref;
  var $i291: i64;
  var $i292: i1;
  var $p294: ref;
  var $p295: ref;
  var $p293: ref;
  var $i296: i64;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $i302: i64;
  var $i303: i64;
  var $i304: i1;
  var $p305: ref;
  var $i306: i16;
  var $i307: i32;
  var $p308: ref;
  var $i309: i8;
  var $i310: i32;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i314: i32;
  var $p315: ref;
  var $i316: i8;
  var $i317: i32;
  var $i318: i32;
  var $i319: i1;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i64;
  var $i326: i1;
  var $p328: ref;
  var $p329: ref;
  var $p327: ref;
  var $i330: i64;
  var $i331: i1;
  var $p332: ref;
  var $i333: i64;
  var $i334: i1;
  var $p336: ref;
  var $p337: ref;
  var $p335: ref;
  var $i338: i64;
  var $i339: i1;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $i344: i64;
  var $i345: i64;
  var $i346: i1;
  var $p347: ref;
  var $i348: i16;
  var $i349: i32;
  var $p350: ref;
  var $i351: i8;
  var $i352: i32;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $i356: i32;
  var $p357: ref;
  var $i358: i8;
  var $i359: i32;
  var $i360: i32;
  var $i361: i1;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i64;
  var $i368: i1;
  var $p370: ref;
  var $p371: ref;
  var $p369: ref;
  var $i372: i64;
  var $i373: i1;
  var $p374: ref;
  var $i375: i64;
  var $i376: i1;
  var $p378: ref;
  var $p379: ref;
  var $p377: ref;
  var $i380: i64;
  var $i381: i1;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $p385: ref;
  var $i386: i64;
  var $i387: i64;
  var $i388: i1;
  var $p389: ref;
  var $i390: i16;
  var $i391: i32;
  var $p392: ref;
  var $i393: i8;
  var $i394: i32;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var $i398: i32;
  var $p399: ref;
  var $i400: i8;
  var $i401: i32;
  var $i402: i32;
  var $i403: i1;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $i409: i64;
  var $i410: i1;
  var $p412: ref;
  var $p413: ref;
  var $p411: ref;
  var $i414: i64;
  var $i415: i1;
  var $p416: ref;
  var $i417: i64;
  var $i418: i1;
  var $p420: ref;
  var $p421: ref;
  var $p419: ref;
  var $i422: i64;
  var $i423: i1;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $i428: i64;
  var $i429: i64;
  var $i430: i1;
  var $p431: ref;
  var $i432: i16;
  var $i433: i32;
  var $p434: ref;
  var $i435: i8;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $p439: ref;
  var $i440: i32;
  var $p441: ref;
  var $i442: i8;
  var $i443: i32;
  var $i444: i32;
  var $i445: i1;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $i451: i64;
  var $i452: i1;
  var $p454: ref;
  var $p455: ref;
  var $p453: ref;
  var $i456: i64;
  var $i457: i1;
  var $p458: ref;
  var $i459: i64;
  var $i460: i1;
  var $p462: ref;
  var $p463: ref;
  var $p461: ref;
  var $i464: i64;
  var $i465: i1;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $i470: i64;
  var $i471: i64;
  var $i472: i1;
  var $p473: ref;
  var $i474: i16;
  var $i475: i32;
  var $p476: ref;
  var $i477: i8;
  var $i478: i32;
  var $i479: i32;
  var $i480: i1;
  var $p481: ref;
  var $i482: i32;
  var $p483: ref;
  var $i484: i8;
  var $i485: i32;
  var $i486: i32;
  var $i487: i1;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $i493: i64;
  var $i494: i1;
  var $p496: ref;
  var $p497: ref;
  var $p495: ref;
  var $i498: i64;
  var $i499: i1;
  var $p500: ref;
  var $i501: i64;
  var $i502: i1;
  var $p504: ref;
  var $p505: ref;
  var $p503: ref;
  var $i506: i64;
  var $i507: i1;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $i512: i64;
  var $i513: i64;
  var $i514: i1;
  var $p515: ref;
  var $i516: i16;
  var $i517: i32;
  var $p518: ref;
  var $i519: i8;
  var $i520: i32;
  var $i521: i32;
  var $i522: i1;
  var $p523: ref;
  var $i524: i32;
  var $p525: ref;
  var $i526: i8;
  var $i527: i32;
  var $i528: i32;
  var $i529: i1;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $i535: i64;
  var $i536: i1;
  var $p538: ref;
  var $p539: ref;
  var $p537: ref;
  var $i540: i64;
  var $i541: i1;
  var $p542: ref;
  var $i543: i64;
  var $i544: i1;
  var $p546: ref;
  var $p547: ref;
  var $p545: ref;
  var $i548: i64;
  var $i549: i1;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $i554: i64;
  var $i555: i64;
  var $i556: i1;
  var $p557: ref;
  var $i558: i16;
  var $i559: i32;
  var $p560: ref;
  var $i561: i8;
  var $i562: i32;
  var $i563: i32;
  var $i564: i1;
  var $p565: ref;
  var $i566: i32;
  var $p567: ref;
  var $i568: i8;
  var $i569: i32;
  var $i570: i32;
  var $i571: i1;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $i577: i64;
  var $i578: i1;
  var $p580: ref;
  var $p581: ref;
  var $p579: ref;
  var $i582: i64;
  var $i583: i1;
  var $p584: ref;
  var $i585: i64;
  var $i586: i1;
  var $p588: ref;
  var $p589: ref;
  var $p587: ref;
  var $i590: i64;
  var $i591: i1;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $i596: i64;
  var $i597: i64;
  var $i598: i1;
  var $p599: ref;
  var $i600: i16;
  var $i601: i32;
  var $p602: ref;
  var $i603: i8;
  var $i604: i32;
  var $i605: i32;
  var $i606: i1;
  var $p607: ref;
  var $i608: i32;
  var $p609: ref;
  var $i610: i8;
  var $i611: i32;
  var $i612: i32;
  var $i613: i1;
  var $p615: ref;
  var $p616: ref;
  var $p617: ref;
  var $p618: ref;
  var $i619: i64;
  var $i620: i1;
  var $p622: ref;
  var $p623: ref;
  var $p621: ref;
  var $i624: i64;
  var $i625: i1;
  var $p626: ref;
  var $i627: i64;
  var $i628: i1;
  var $p630: ref;
  var $p631: ref;
  var $p629: ref;
  var $i632: i64;
  var $i633: i1;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $i638: i64;
  var $i639: i64;
  var $i640: i1;
  var $p641: ref;
  var $i642: i16;
  var $i643: i32;
  var $p644: ref;
  var $i645: i8;
  var $i646: i32;
  var $i647: i32;
  var $i648: i1;
  var $p649: ref;
  var $i650: i32;
  var $p651: ref;
  var $i652: i8;
  var $i653: i32;
  var $i654: i32;
  var $i655: i1;
  var $p657: ref;
  var $p658: ref;
  var $p659: ref;
  var $p660: ref;
  var $i661: i64;
  var $i662: i1;
  var $p664: ref;
  var $p665: ref;
  var $p663: ref;
  var $i666: i64;
  var $i667: i1;
  var $p668: ref;
  var $i669: i64;
  var $i670: i1;
  var $p672: ref;
  var $p673: ref;
  var $p671: ref;
  var $i674: i64;
  var $i675: i1;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $i680: i64;
  var $i681: i64;
  var $i682: i1;
  var $p683: ref;
  var $i684: i16;
  var $i685: i32;
  var $p686: ref;
  var $i687: i8;
  var $i688: i32;
  var $i689: i32;
  var $i690: i1;
  var $p691: ref;
  var $i692: i32;
  var $p693: ref;
  var $i694: i8;
  var $i695: i32;
  var $i696: i32;
  var $i697: i1;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $i703: i64;
  var $i704: i1;
  var $p706: ref;
  var $p707: ref;
  var $p705: ref;
  var $i708: i64;
  var $i709: i1;
  var $p710: ref;
  var $i711: i64;
  var $i712: i1;
  var $p714: ref;
  var $p715: ref;
  var $p713: ref;
  var $i716: i64;
  var $i717: i1;
  var $p718: ref;
  var $p719: ref;
  var $p720: ref;
  var $p721: ref;
  var $i722: i64;
  var $i723: i64;
  var $i724: i1;
  var $p725: ref;
  var $i726: i16;
  var $i727: i32;
  var $p728: ref;
  var $i729: i8;
  var $i730: i32;
  var $i731: i32;
  var $i732: i1;
  var $p733: ref;
  var $i734: i32;
  var $p735: ref;
  var $i736: i8;
  var $i737: i32;
  var $i738: i32;
  var $i739: i1;
  var $p741: ref;
  var $p742: ref;
  var $p743: ref;
  var $p744: ref;
  var $i745: i64;
  var $i746: i1;
  var $p748: ref;
  var $p749: ref;
  var $p747: ref;
  var $i750: i64;
  var $i751: i1;
  var $p752: ref;
  var $i753: i64;
  var $i754: i1;
  var $p756: ref;
  var $p757: ref;
  var $p755: ref;
  var $i758: i64;
  var $i759: i1;
  var $p760: ref;
  var $p761: ref;
  var $p762: ref;
  var $p763: ref;
  var $i764: i64;
  var $i765: i64;
  var $i766: i1;
  var $p767: ref;
  var $i768: i16;
  var $i769: i32;
  var $p770: ref;
  var $i771: i8;
  var $i772: i32;
  var $i773: i32;
  var $i774: i1;
  var $p775: ref;
  var $i776: i32;
  var $p777: ref;
  var $i778: i8;
  var $i779: i32;
  var $i780: i32;
  var $i781: i1;
  var $p783: ref;
  var $p784: ref;
  var $p785: ref;
  var $p786: ref;
  var $i787: i64;
  var $i788: i1;
  var $p790: ref;
  var $p791: ref;
  var $p789: ref;
  var $i792: i64;
  var $i793: i1;
  var $p794: ref;
  var $i795: i64;
  var $i796: i1;
  var $p798: ref;
  var $p799: ref;
  var $p797: ref;
  var $i800: i64;
  var $i801: i1;
  var $p802: ref;
  var $p803: ref;
  var $p804: ref;
  var $p805: ref;
  var $i806: i64;
  var $i807: i64;
  var $i808: i1;
  var $p809: ref;
  var $i810: i16;
  var $i811: i32;
  var $p812: ref;
  var $i813: i8;
  var $i814: i32;
  var $i815: i32;
  var $i816: i1;
  var $p817: ref;
  var $i818: i32;
  var $p819: ref;
  var $i820: i8;
  var $i821: i32;
  var $i822: i32;
  var $i823: i1;
  var $p825: ref;
  var $p826: ref;
  var $p827: ref;
  var $p828: ref;
  var $i829: i64;
  var $i830: i1;
  var $p832: ref;
  var $p833: ref;
  var $p831: ref;
  var $i834: i64;
  var $i835: i1;
  var $p836: ref;
  var $i837: i64;
  var $i838: i1;
  var $p840: ref;
  var $p841: ref;
  var $p839: ref;
  var $i842: i64;
  var $i843: i1;
  var $p844: ref;
  var $p845: ref;
  var $p846: ref;
  var $p847: ref;
  var $i848: i64;
  var $i849: i64;
  var $i850: i1;
  var $p851: ref;
  var $i852: i16;
  var $i853: i32;
  var $p854: ref;
  var $i855: i8;
  var $i856: i32;
  var $i857: i32;
  var $i858: i1;
  var $p859: ref;
  var $i860: i32;
  var $p861: ref;
  var $i862: i8;
  var $i863: i32;
  var $i864: i32;
  var $i865: i1;
  var $p867: ref;
  var $p868: ref;
  var $p869: ref;
  var $p870: ref;
  var $i871: i64;
  var $i872: i1;
  var $p874: ref;
  var $p875: ref;
  var $p873: ref;
  var $i876: i64;
  var $i877: i1;
  var $p878: ref;
  var $i879: i64;
  var $i880: i1;
  var $p882: ref;
  var $p883: ref;
  var $p881: ref;
  var $i884: i64;
  var $i885: i1;
  var $p886: ref;
  var $p887: ref;
  var $p888: ref;
  var $p889: ref;
  var $i890: i64;
  var $i891: i64;
  var $i892: i1;
  var $p893: ref;
  var $i894: i16;
  var $i895: i32;
  var $p896: ref;
  var $i897: i8;
  var $i898: i32;
  var $i899: i32;
  var $i900: i1;
  var $p901: ref;
  var $i902: i32;
  var $p903: ref;
  var $i904: i8;
  var $i905: i32;
  var $i906: i32;
  var $i907: i1;
  var $p909: ref;
  var $p910: ref;
  var $p911: ref;
  var $p912: ref;
  var $i913: i64;
  var $i914: i1;
  var $p916: ref;
  var $p917: ref;
  var $p915: ref;
  var $i918: i64;
  var $i919: i1;
  var $p920: ref;
  var $i921: i64;
  var $i922: i1;
  var $p924: ref;
  var $p925: ref;
  var $p923: ref;
  var $i926: i64;
  var $i927: i1;
  var $p928: ref;
  var $p929: ref;
  var $p930: ref;
  var $p931: ref;
  var $i932: i64;
  var $i933: i64;
  var $i934: i1;
  var $p935: ref;
  var $i936: i16;
  var $i937: i32;
  var $p938: ref;
  var $i939: i8;
  var $i940: i32;
  var $i941: i32;
  var $i942: i1;
  var $p943: ref;
  var $i944: i32;
  var $p945: ref;
  var $i946: i8;
  var $i947: i32;
  var $i948: i32;
  var $i949: i1;
  var $p951: ref;
  var $p952: ref;
  var $p953: ref;
  var $p954: ref;
  var $i955: i64;
  var $i956: i1;
  var $p958: ref;
  var $p959: ref;
  var $p957: ref;
  var $i960: i64;
  var $i961: i1;
  var $p962: ref;
  var $i963: i64;
  var $i964: i1;
  var $p966: ref;
  var $p967: ref;
  var $p965: ref;
  var $i968: i64;
  var $i969: i1;
  var $p970: ref;
  var $p971: ref;
  var $p972: ref;
  var $p973: ref;
  var $i974: i64;
  var $i975: i64;
  var $i976: i1;
  var $p977: ref;
  var $i978: i16;
  var $i979: i32;
  var $p980: ref;
  var $i981: i8;
  var $i982: i32;
  var $i983: i32;
  var $i984: i1;
  var $p985: ref;
  var $i986: i32;
  var $p987: ref;
  var $i988: i8;
  var $i989: i32;
  var $i990: i32;
  var $i991: i1;
  var $p993: ref;
  var $p994: ref;
  var $p995: ref;
  var $p996: ref;
  var $i997: i64;
  var $i998: i1;
  var $p1000: ref;
  var $p1001: ref;
  var $p999: ref;
  var $i1002: i64;
  var $i1003: i1;
  var $p1004: ref;
  var $i1005: i64;
  var $i1006: i1;
  var $p1008: ref;
  var $p1009: ref;
  var $p1007: ref;
  var $i1010: i64;
  var $i1011: i1;
  var $p1012: ref;
  var $p1013: ref;
  var $p1014: ref;
  var $p1015: ref;
  var $i1016: i64;
  var $i1017: i64;
  var $i1018: i1;
  var $p1019: ref;
  var $i1020: i16;
  var $i1021: i32;
  var $p1022: ref;
  var $i1023: i8;
  var $i1024: i32;
  var $i1025: i32;
  var $i1026: i1;
  var $p1027: ref;
  var $i1028: i32;
  var $p1029: ref;
  var $i1030: i8;
  var $i1031: i32;
  var $i1032: i32;
  var $i1033: i1;
  var $p1035: ref;
  var $p1036: ref;
  var $p1037: ref;
  var $p1038: ref;
  var $i1039: i64;
  var $i1040: i1;
  var $p1042: ref;
  var $p1043: ref;
  var $p1041: ref;
  var $i1044: i64;
  var $i1045: i1;
  var $p1046: ref;
  var $i1047: i64;
  var $i1048: i1;
  var $p1050: ref;
  var $p1051: ref;
  var $p1049: ref;
  var $i1052: i64;
  var $i1053: i1;
  var $p1054: ref;
  var $p1055: ref;
  var $p1056: ref;
  var $p1057: ref;
  var $i1058: i64;
  var $i1059: i64;
  var $i1060: i1;
  var $p1061: ref;
  var $i1062: i16;
  var $i1063: i32;
  var $p1064: ref;
  var $i1065: i8;
  var $i1066: i32;
  var $i1067: i32;
  var $i1068: i1;
  var $p1069: ref;
  var $i1070: i32;
  var $p1071: ref;
  var $i1072: i8;
  var $i1073: i32;
  var $i1074: i32;
  var $i1075: i1;
  var $p1077: ref;
  var $p1078: ref;
  var $p1079: ref;
  var $p1080: ref;
  var $i1081: i64;
  var $i1082: i1;
  var $p1084: ref;
  var $p1085: ref;
  var $p1083: ref;
  var $i1086: i64;
  var $i1087: i1;
  var $p1088: ref;
  var $i1089: i64;
  var $i1090: i1;
  var $p1092: ref;
  var $p1093: ref;
  var $p1091: ref;
  var $i1094: i64;
  var $i1095: i1;
  var $p1096: ref;
  var $p1097: ref;
  var $p1098: ref;
  var $p1099: ref;
  var $i1100: i64;
  var $i1101: i64;
  var $i1102: i1;
  var $p1103: ref;
  var $i1104: i16;
  var $i1105: i32;
  var $p1106: ref;
  var $i1107: i8;
  var $i1108: i32;
  var $i1109: i32;
  var $i1110: i1;
  var $p1111: ref;
  var $i1112: i32;
  var $p1113: ref;
  var $i1114: i8;
  var $i1115: i32;
  var $i1116: i32;
  var $i1117: i1;
  var $p1119: ref;
  var $p1120: ref;
  var $p1121: ref;
  var $p1122: ref;
  var $i1123: i64;
  var $i1124: i1;
  var $p1126: ref;
  var $p1127: ref;
  var $p1125: ref;
  var $i1128: i64;
  var $i1129: i1;
  var $p1130: ref;
  var $i1131: i64;
  var $i1132: i1;
  var $p1134: ref;
  var $p1135: ref;
  var $p1133: ref;
  var $i1136: i64;
  var $i1137: i1;
  var $p1138: ref;
  var $p1139: ref;
  var $p1140: ref;
  var $p1141: ref;
  var $i1142: i64;
  var $i1143: i64;
  var $i1144: i1;
  var $p1145: ref;
  var $i1146: i16;
  var $i1147: i32;
  var $p1148: ref;
  var $i1149: i8;
  var $i1150: i32;
  var $i1151: i32;
  var $i1152: i1;
  var $p1153: ref;
  var $i1154: i32;
  var $p1155: ref;
  var $i1156: i8;
  var $i1157: i32;
  var $i1158: i32;
  var $i1159: i1;
  var $p1161: ref;
  var $p1162: ref;
  var $p1163: ref;
  var $p1164: ref;
  var $i1165: i64;
  var $i1166: i1;
  var $p1168: ref;
  var $p1169: ref;
  var $p1167: ref;
  var $i1170: i64;
  var $i1171: i1;
  var $p1172: ref;
  var $i1173: i64;
  var $i1174: i1;
  var $p1176: ref;
  var $p1177: ref;
  var $p1175: ref;
  var $i1178: i64;
  var $i1179: i1;
  var $p1180: ref;
  var $p1181: ref;
  var $p1182: ref;
  var $p1183: ref;
  var $i1184: i64;
  var $i1185: i64;
  var $i1186: i1;
  var $p1187: ref;
  var $i1188: i16;
  var $i1189: i32;
  var $p1190: ref;
  var $i1191: i8;
  var $i1192: i32;
  var $i1193: i32;
  var $i1194: i1;
  var $p1195: ref;
  var $i1196: i32;
  var $p1197: ref;
  var $i1198: i8;
  var $i1199: i32;
  var $i1200: i32;
  var $i1201: i1;
  var $p1203: ref;
  var $p1204: ref;
  var $p1205: ref;
  var $p1206: ref;
  var $i1207: i64;
  var $i1208: i1;
  var $p1210: ref;
  var $p1211: ref;
  var $p1209: ref;
  var $i1212: i64;
  var $i1213: i1;
  var $p1214: ref;
  var $i1215: i64;
  var $i1216: i1;
  var $p1218: ref;
  var $p1219: ref;
  var $p1217: ref;
  var $i1220: i64;
  var $i1221: i1;
  var $p1222: ref;
  var $p1223: ref;
  var $p1224: ref;
  var $p1225: ref;
  var $i1226: i64;
  var $i1227: i64;
  var $i1228: i1;
  var $p1229: ref;
  var $i1230: i16;
  var $i1231: i32;
  var $p1232: ref;
  var $i1233: i8;
  var $i1234: i32;
  var $i1235: i32;
  var $i1236: i1;
  var $p1237: ref;
  var $i1238: i32;
  var $p1239: ref;
  var $i1240: i8;
  var $i1241: i32;
  var $i1242: i32;
  var $i1243: i1;
  var $p1245: ref;
  var $p1246: ref;
  var $p1247: ref;
  var $p1248: ref;
  var $i1249: i64;
  var $i1250: i1;
  var $p1252: ref;
  var $p1253: ref;
  var $p1251: ref;
  var $i1254: i64;
  var $i1255: i1;
  var $p1256: ref;
  var $i1257: i64;
  var $i1258: i1;
  var $p1260: ref;
  var $p1261: ref;
  var $p1259: ref;
  var $i1262: i64;
  var $i1263: i1;
  var $p1264: ref;
  var $p1265: ref;
  var $p1266: ref;
  var $p1267: ref;
  var $i1268: i64;
  var $i1269: i64;
  var $i1270: i1;
  var $p1271: ref;
  var $i1272: i16;
  var $i1273: i32;
  var $p1274: ref;
  var $i1275: i8;
  var $i1276: i32;
  var $i1277: i32;
  var $i1278: i1;
  var $p1279: ref;
  var $i1280: i32;
  var $p1281: ref;
  var $i1282: i8;
  var $i1283: i32;
  var $i1284: i32;
  var $i1285: i1;
  var $p1287: ref;
  var $p1288: ref;
  var $p1289: ref;
  var $p1290: ref;
  var $i1291: i64;
  var $i1292: i1;
  var $p1294: ref;
  var $p1295: ref;
  var $p1293: ref;
  var $i1296: i64;
  var $i1297: i1;
  var $p1298: ref;
  var $i1299: i64;
  var $i1300: i1;
  var $p1302: ref;
  var $p1303: ref;
  var $p1301: ref;
  var $i1304: i64;
  var $i1305: i1;
  var $p1306: ref;
  var $p1307: ref;
  var $p1308: ref;
  var $p1309: ref;
  var $i1310: i64;
  var $i1311: i64;
  var $i1312: i1;
  var $p1313: ref;
  var $i1314: i16;
  var $i1315: i32;
  var $p1316: ref;
  var $i1317: i8;
  var $i1318: i32;
  var $i1319: i32;
  var $i1320: i1;
  var $p1321: ref;
  var $i1322: i32;
  var $p1323: ref;
  var $i1324: i8;
  var $i1325: i32;
  var $i1326: i32;
  var $i1327: i1;
  var $p1329: ref;
  var $p1330: ref;
  var $p1331: ref;
  var $p1332: ref;
  var $i1333: i64;
  var $i1334: i1;
  var $p1336: ref;
  var $p1337: ref;
  var $p1335: ref;
  var $i1338: i64;
  var $i1339: i1;
  var $p1340: ref;
  var $i1341: i64;
  var $i1342: i1;
  var $p1344: ref;
  var $p1345: ref;
  var $p1343: ref;
  var $i1346: i64;
  var $i1347: i1;
  var $p1348: ref;
  var $p1349: ref;
  var $p1350: ref;
  var $p1351: ref;
  var $i1352: i64;
  var $i1353: i64;
  var $i1354: i1;
  var $p1355: ref;
  var $i1356: i16;
  var $i1357: i32;
  var $p1358: ref;
  var $i1359: i8;
  var $i1360: i32;
  var $i1361: i32;
  var $i1362: i1;
  var $p1363: ref;
  var $i1364: i32;
  var $p1365: ref;
  var $i1366: i8;
  var $i1367: i32;
  var $i1368: i32;
  var $i1369: i1;
  var $p1371: ref;
  var $p1372: ref;
  var $p1373: ref;
  var $p1374: ref;
  var $i1375: i64;
  var $i1376: i1;
  var $p1378: ref;
  var $p1379: ref;
  var $p1377: ref;
  var $i1380: i64;
  var $i1381: i1;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 29} {:cexpr "atmtcp_v_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 1074815371);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i7 := copy_from_user($p6, $p2, 2);
    call {:si_unique_call 31} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, $sub.i32(0, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 8);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i22 == 1);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i25 := $sext.i8.i32($i24);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i29 := $sext.i8.i32($i28);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 16);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i33 := $sext.i8.i32($i32);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} _raw_read_lock(vcc_sklist_lock);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, vcc_hash);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $p40 := $0.ref;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(1, 8)), $mul.ref(0, 1)));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $p83 := $0.ref;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p83);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(2, 8)), $mul.ref(0, 1)));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $p125 := $0.ref;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p125);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(3, 8)), $mul.ref(0, 1)));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p164);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    $p167 := $0.ref;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p167);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(4, 8)), $mul.ref(0, 1)));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i207 := $p2i.ref.i64($p206);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i208 := $ne.i64($i207, 0);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    $p209 := $0.ref;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p209);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i213 := $ne.i64($i212, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i213 == 1);
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(5, 8)), $mul.ref(0, 1)));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i249 := $p2i.ref.i64($p248);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i250 := $ne.i64($i249, 0);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    $p251 := $0.ref;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i254 := $p2i.ref.i64($p251);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i255 := $ne.i64($i254, 0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i255 == 1);
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(6, 8)), $mul.ref(0, 1)));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p290);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i292 := $ne.i64($i291, 0);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i292} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    $p293 := $0.ref;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i296 := $p2i.ref.i64($p293);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i297 := $ne.i64($i296, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(7, 8)), $mul.ref(0, 1)));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i333 := $p2i.ref.i64($p332);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i334 := $ne.i64($i333, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i334} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    $p335 := $0.ref;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i338 := $p2i.ref.i64($p335);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i339 := $ne.i64($i338, 0);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb199, $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    assume !($i339 == 1);
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(8, 8)), $mul.ref(0, 1)));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i375 := $p2i.ref.i64($p374);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i376 := $ne.i64($i375, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i376} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    $p377 := $0.ref;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p377);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i381 := $ne.i64($i380, 0);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb223, $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    assume !($i381 == 1);
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(9, 8)), $mul.ref(0, 1)));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i417 := $p2i.ref.i64($p416);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i418 := $ne.i64($i417, 0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    $p419 := $0.ref;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i422 := $p2i.ref.i64($p419);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i423 := $ne.i64($i422, 0);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb247, $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    assume !($i423 == 1);
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p458 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(10, 8)), $mul.ref(0, 1)));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i459 := $p2i.ref.i64($p458);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i460 := $ne.i64($i459, 0);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i460} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i460 == 1);
    assume {:verifier.code 0} true;
    $p461 := $0.ref;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i464 := $p2i.ref.i64($p461);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i465 := $ne.i64($i464, 0);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i465} true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i465 == 1);
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p500 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(11, 8)), $mul.ref(0, 1)));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i501 := $p2i.ref.i64($p500);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i502 := $ne.i64($i501, 0);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i502} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i502 == 1);
    assume {:verifier.code 0} true;
    $p503 := $0.ref;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i506 := $p2i.ref.i64($p503);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i507 := $ne.i64($i506, 0);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i507} true;
    goto $bb295, $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    assume !($i507 == 1);
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(12, 8)), $mul.ref(0, 1)));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i543 := $p2i.ref.i64($p542);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i544 := $ne.i64($i543, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i544} true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    $p545 := $0.ref;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i548 := $p2i.ref.i64($p545);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i549 := $ne.i64($i548, 0);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i549} true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i549 == 1);
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $p584 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(13, 8)), $mul.ref(0, 1)));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i585 := $p2i.ref.i64($p584);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i586 := $ne.i64($i585, 0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i586} true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i586 == 1);
    assume {:verifier.code 0} true;
    $p587 := $0.ref;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i590 := $p2i.ref.i64($p587);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i591 := $ne.i64($i590, 0);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i591} true;
    goto $bb343, $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    assume !($i591 == 1);
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $p626 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(14, 8)), $mul.ref(0, 1)));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i627 := $p2i.ref.i64($p626);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i628 := $ne.i64($i627, 0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i628} true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i628 == 1);
    assume {:verifier.code 0} true;
    $p629 := $0.ref;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i632 := $p2i.ref.i64($p629);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i633 := $ne.i64($i632, 0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i633} true;
    goto $bb367, $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    assume !($i633 == 1);
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $p668 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(15, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i669 := $p2i.ref.i64($p668);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i670 := $ne.i64($i669, 0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i670} true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i670 == 1);
    assume {:verifier.code 0} true;
    $p671 := $0.ref;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i674 := $p2i.ref.i64($p671);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i675 := $ne.i64($i674, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i675} true;
    goto $bb391, $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    assume !($i675 == 1);
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    $p710 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(16, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i711 := $p2i.ref.i64($p710);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i712 := $ne.i64($i711, 0);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i712} true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i712 == 1);
    assume {:verifier.code 0} true;
    $p713 := $0.ref;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i716 := $p2i.ref.i64($p713);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i717 := $ne.i64($i716, 0);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i717} true;
    goto $bb415, $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    assume !($i717 == 1);
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    $p752 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(17, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i753 := $p2i.ref.i64($p752);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i754 := $ne.i64($i753, 0);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i754} true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i754 == 1);
    assume {:verifier.code 0} true;
    $p755 := $0.ref;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i758 := $p2i.ref.i64($p755);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i759 := $ne.i64($i758, 0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i759} true;
    goto $bb439, $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    assume !($i759 == 1);
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $p794 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(18, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i795 := $p2i.ref.i64($p794);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i796 := $ne.i64($i795, 0);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i796} true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i796 == 1);
    assume {:verifier.code 0} true;
    $p797 := $0.ref;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i800 := $p2i.ref.i64($p797);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i801 := $ne.i64($i800, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i801} true;
    goto $bb463, $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    assume !($i801 == 1);
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    $p836 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(19, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i837 := $p2i.ref.i64($p836);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i838 := $ne.i64($i837, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i838} true;
    goto $bb484, $bb485;

  $bb485:
    assume !($i838 == 1);
    assume {:verifier.code 0} true;
    $p839 := $0.ref;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i842 := $p2i.ref.i64($p839);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i843 := $ne.i64($i842, 0);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i843} true;
    goto $bb487, $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    assume !($i843 == 1);
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $p878 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(20, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i879 := $p2i.ref.i64($p878);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i880 := $ne.i64($i879, 0);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i880} true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i880 == 1);
    assume {:verifier.code 0} true;
    $p881 := $0.ref;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i884 := $p2i.ref.i64($p881);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i885 := $ne.i64($i884, 0);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i885} true;
    goto $bb511, $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    assume !($i885 == 1);
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    $p920 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(21, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i921 := $p2i.ref.i64($p920);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i922 := $ne.i64($i921, 0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i922} true;
    goto $bb532, $bb533;

  $bb533:
    assume !($i922 == 1);
    assume {:verifier.code 0} true;
    $p923 := $0.ref;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i926 := $p2i.ref.i64($p923);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i927 := $ne.i64($i926, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i927} true;
    goto $bb535, $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    assume !($i927 == 1);
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    $p962 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(22, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i963 := $p2i.ref.i64($p962);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i964 := $ne.i64($i963, 0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i964} true;
    goto $bb556, $bb557;

  $bb557:
    assume !($i964 == 1);
    assume {:verifier.code 0} true;
    $p965 := $0.ref;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i968 := $p2i.ref.i64($p965);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i969 := $ne.i64($i968, 0);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i969} true;
    goto $bb559, $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    assume !($i969 == 1);
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    $p1004 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(23, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i1005 := $p2i.ref.i64($p1004);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i1006 := $ne.i64($i1005, 0);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1006} true;
    goto $bb580, $bb581;

  $bb581:
    assume !($i1006 == 1);
    assume {:verifier.code 0} true;
    $p1007 := $0.ref;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i1010 := $p2i.ref.i64($p1007);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i1011 := $ne.i64($i1010, 0);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1011} true;
    goto $bb583, $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    assume !($i1011 == 1);
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    $p1046 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(24, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i1047 := $p2i.ref.i64($p1046);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i1048 := $ne.i64($i1047, 0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1048} true;
    goto $bb604, $bb605;

  $bb605:
    assume !($i1048 == 1);
    assume {:verifier.code 0} true;
    $p1049 := $0.ref;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i1052 := $p2i.ref.i64($p1049);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i1053 := $ne.i64($i1052, 0);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1053} true;
    goto $bb607, $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    assume !($i1053 == 1);
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    $p1088 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(25, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i1089 := $p2i.ref.i64($p1088);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i1090 := $ne.i64($i1089, 0);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1090} true;
    goto $bb628, $bb629;

  $bb629:
    assume !($i1090 == 1);
    assume {:verifier.code 0} true;
    $p1091 := $0.ref;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i1094 := $p2i.ref.i64($p1091);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i1095 := $ne.i64($i1094, 0);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1095} true;
    goto $bb631, $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    assume !($i1095 == 1);
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    $p1130 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(26, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i1131 := $p2i.ref.i64($p1130);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i1132 := $ne.i64($i1131, 0);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1132} true;
    goto $bb652, $bb653;

  $bb653:
    assume !($i1132 == 1);
    assume {:verifier.code 0} true;
    $p1133 := $0.ref;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i1136 := $p2i.ref.i64($p1133);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i1137 := $ne.i64($i1136, 0);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1137} true;
    goto $bb655, $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    assume !($i1137 == 1);
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    $p1172 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(27, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i1173 := $p2i.ref.i64($p1172);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i1174 := $ne.i64($i1173, 0);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1174} true;
    goto $bb676, $bb677;

  $bb677:
    assume !($i1174 == 1);
    assume {:verifier.code 0} true;
    $p1175 := $0.ref;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i1178 := $p2i.ref.i64($p1175);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i1179 := $ne.i64($i1178, 0);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1179} true;
    goto $bb679, $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    assume !($i1179 == 1);
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    $p1214 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(28, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i1215 := $p2i.ref.i64($p1214);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i1216 := $ne.i64($i1215, 0);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1216} true;
    goto $bb700, $bb701;

  $bb701:
    assume !($i1216 == 1);
    assume {:verifier.code 0} true;
    $p1217 := $0.ref;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i1220 := $p2i.ref.i64($p1217);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i1221 := $ne.i64($i1220, 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1221} true;
    goto $bb703, $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    assume !($i1221 == 1);
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    $p1256 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(29, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i1257 := $p2i.ref.i64($p1256);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i1258 := $ne.i64($i1257, 0);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1258} true;
    goto $bb724, $bb725;

  $bb725:
    assume !($i1258 == 1);
    assume {:verifier.code 0} true;
    $p1259 := $0.ref;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i1262 := $p2i.ref.i64($p1259);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i1263 := $ne.i64($i1262, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1263} true;
    goto $bb727, $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    assume !($i1263 == 1);
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    $p1298 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(30, 8)), $mul.ref(0, 1)));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i1299 := $p2i.ref.i64($p1298);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i1300 := $ne.i64($i1299, 0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1300} true;
    goto $bb748, $bb749;

  $bb749:
    assume !($i1300 == 1);
    assume {:verifier.code 0} true;
    $p1301 := $0.ref;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i1304 := $p2i.ref.i64($p1301);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i1305 := $ne.i64($i1304, 0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1305} true;
    goto $bb751, $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    assume !($i1305 == 1);
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    $p1340 := $load.ref($M.0, $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref(31, 8)), $mul.ref(0, 1)));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i1341 := $p2i.ref.i64($p1340);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i1342 := $ne.i64($i1341, 0);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1342} true;
    goto $bb772, $bb773;

  $bb773:
    assume !($i1342 == 1);
    assume {:verifier.code 0} true;
    $p1343 := $0.ref;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i1346 := $p2i.ref.i64($p1343);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i1347 := $ne.i64($i1346, 0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1347} true;
    goto $bb775, $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    assume !($i1347 == 1);
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} _raw_read_unlock(vcc_sklist_lock);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(94, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p3);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 36} cmdloc_dummy_var_9 := $memcpy.i8(cmdloc_dummy_var_7, cmdloc_dummy_var_8, $p78, $p79, 2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb775:
    assume $i1347 == 1;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p1348 := $p1343;
    goto $bb778;

  $bb778:
    call $p1348, $p1349, $p1350, $p1351, $i1352, $i1353, $i1354, $p1355, $i1356, $i1357, $p1358, $i1359, $i1360, $i1361, $i1362, $p1363, $i1364, $p1365, $i1366, $i1367, $i1368, $i1369, $p1371, $p1372, $p1373, $p1374, $i1375, $i1376, $p1378, $p1379, $p1377, $i1380, $i1381 := atmtcp_v_ioctl_loop_$bb778($p0, $p3, $p1348, $p1349, $p1350, $p1351, $i1352, $i1353, $i1354, $p1355, $i1356, $i1357, $p1358, $i1359, $i1360, $i1361, $i1362, $p1363, $i1364, $p1365, $i1366, $i1367, $i1368, $i1369, $p1371, $p1372, $p1373, $p1374, $i1375, $i1376, $p1378, $p1379, $p1377, $i1380, $i1381);
    goto $bb778_last;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p1349 := atm_sk($p1348);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p1350 := $add.ref($add.ref($p1349, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p1351 := $load.ref($M.0, $p1350);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i1352 := $p2i.ref.i64($p1351);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i1353 := $p2i.ref.i64($p0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i1354 := $ne.i64($i1352, $i1353);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb780, $bb781;

  $bb781:
    assume !($i1354 == 1);
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    $p1355 := $add.ref($add.ref($p1349, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i1356 := $load.i16($M.0, $p1355);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i1357 := $sext.i16.i32($i1356);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p1358 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i1359 := $load.i8($M.0, $p1358);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i1360 := $sext.i8.i32($i1359);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i1361 := $ashr.i32($i1357, $i1360);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i1362 := $ne.i32($i1361, 0);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb783, $bb784;

  $bb784:
    assume !($i1362 == 1);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p1363 := $add.ref($add.ref($p1349, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i1364 := $load.i32($M.0, $p1363);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p1365 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i1366 := $load.i8($M.0, $p1365);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i1367 := $sext.i8.i32($i1366);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i1368 := $ashr.i32($i1364, $i1367);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i1369 := $ne.i32($i1368, 0);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb785, $bb786;

  $bb786:
    assume !($i1369 == 1);
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    $p1371 := $add.ref($add.ref($add.ref($p1348, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p1372 := $bitcast.ref.ref($p1371);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p1373 := $add.ref($add.ref($p1372, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p1374 := $load.ref($M.0, $p1373);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i1375 := $p2i.ref.i64($p1374);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i1376 := $ne.i64($i1375, 0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb789, $bb790;

  $bb790:
    assume !($i1376 == 1);
    assume {:verifier.code 0} true;
    $p1377 := $0.ref;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i1380 := $p2i.ref.i64($p1377);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i1381 := $ne.i64($i1380, 0);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb792, $bb793;

  $bb793:
    assume !($i1381 == 1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb792:
    assume $i1381 == 1;
    assume {:verifier.code 0} true;
    $p1348 := $p1377;
    goto $bb792_dummy;

  $bb789:
    assume $i1376 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p1378 := $bitcast.ref.ref($p1374);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p1379 := $add.ref($p1378, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p1377 := $p1379;
    goto $bb791;

  $bb785:
    assume {:verifier.code 0} true;
    assume $i1369 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} _raw_read_unlock(vcc_sklist_lock);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 16);
    goto $bb3;

  $bb783:
    assume {:verifier.code 0} true;
    assume $i1362 == 1;
    goto $bb39;

  $bb780:
    assume $i1354 == 1;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb772:
    assume $i1342 == 1;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p1344 := $bitcast.ref.ref($p1340);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p1345 := $add.ref($p1344, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p1343 := $p1345;
    goto $bb774;

  $bb751:
    assume $i1305 == 1;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p1306 := $p1301;
    goto $bb754;

  $bb754:
    call $p1306, $p1307, $p1308, $p1309, $i1310, $i1311, $i1312, $p1313, $i1314, $i1315, $p1316, $i1317, $i1318, $i1319, $i1320, $p1321, $i1322, $p1323, $i1324, $i1325, $i1326, $i1327, $p1329, $p1330, $p1331, $p1332, $i1333, $i1334, $p1336, $p1337, $p1335, $i1338, $i1339 := atmtcp_v_ioctl_loop_$bb754($p0, $p3, $p1306, $p1307, $p1308, $p1309, $i1310, $i1311, $i1312, $p1313, $i1314, $i1315, $p1316, $i1317, $i1318, $i1319, $i1320, $p1321, $i1322, $p1323, $i1324, $i1325, $i1326, $i1327, $p1329, $p1330, $p1331, $p1332, $i1333, $i1334, $p1336, $p1337, $p1335, $i1338, $i1339);
    goto $bb754_last;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p1307 := atm_sk($p1306);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p1308 := $add.ref($add.ref($p1307, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p1309 := $load.ref($M.0, $p1308);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i1310 := $p2i.ref.i64($p1309);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i1311 := $p2i.ref.i64($p0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i1312 := $ne.i64($i1310, $i1311);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb756, $bb757;

  $bb757:
    assume !($i1312 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    $p1313 := $add.ref($add.ref($p1307, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i1314 := $load.i16($M.0, $p1313);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i1315 := $sext.i16.i32($i1314);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p1316 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i1317 := $load.i8($M.0, $p1316);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i1318 := $sext.i8.i32($i1317);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i1319 := $ashr.i32($i1315, $i1318);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i1320 := $ne.i32($i1319, 0);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb759, $bb760;

  $bb760:
    assume !($i1320 == 1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p1321 := $add.ref($add.ref($p1307, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i1322 := $load.i32($M.0, $p1321);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p1323 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i1324 := $load.i8($M.0, $p1323);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i1325 := $sext.i8.i32($i1324);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i1326 := $ashr.i32($i1322, $i1325);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i1327 := $ne.i32($i1326, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb761, $bb762;

  $bb762:
    assume !($i1327 == 1);
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    $p1329 := $add.ref($add.ref($add.ref($p1306, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p1330 := $bitcast.ref.ref($p1329);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p1331 := $add.ref($add.ref($p1330, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p1332 := $load.ref($M.0, $p1331);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i1333 := $p2i.ref.i64($p1332);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i1334 := $ne.i64($i1333, 0);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb765, $bb766;

  $bb766:
    assume !($i1334 == 1);
    assume {:verifier.code 0} true;
    $p1335 := $0.ref;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i1338 := $p2i.ref.i64($p1335);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i1339 := $ne.i64($i1338, 0);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb768, $bb769;

  $bb769:
    assume !($i1339 == 1);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb768:
    assume $i1339 == 1;
    assume {:verifier.code 0} true;
    $p1306 := $p1335;
    goto $bb768_dummy;

  $bb765:
    assume $i1334 == 1;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p1336 := $bitcast.ref.ref($p1332);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p1337 := $add.ref($p1336, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p1335 := $p1337;
    goto $bb767;

  $bb761:
    assume {:verifier.code 0} true;
    assume $i1327 == 1;
    goto $bb39;

  $bb759:
    assume {:verifier.code 0} true;
    assume $i1320 == 1;
    goto $bb39;

  $bb756:
    assume $i1312 == 1;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb748:
    assume $i1300 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p1302 := $bitcast.ref.ref($p1298);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p1303 := $add.ref($p1302, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p1301 := $p1303;
    goto $bb750;

  $bb727:
    assume $i1263 == 1;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p1264 := $p1259;
    goto $bb730;

  $bb730:
    call $p1264, $p1265, $p1266, $p1267, $i1268, $i1269, $i1270, $p1271, $i1272, $i1273, $p1274, $i1275, $i1276, $i1277, $i1278, $p1279, $i1280, $p1281, $i1282, $i1283, $i1284, $i1285, $p1287, $p1288, $p1289, $p1290, $i1291, $i1292, $p1294, $p1295, $p1293, $i1296, $i1297 := atmtcp_v_ioctl_loop_$bb730($p0, $p3, $p1264, $p1265, $p1266, $p1267, $i1268, $i1269, $i1270, $p1271, $i1272, $i1273, $p1274, $i1275, $i1276, $i1277, $i1278, $p1279, $i1280, $p1281, $i1282, $i1283, $i1284, $i1285, $p1287, $p1288, $p1289, $p1290, $i1291, $i1292, $p1294, $p1295, $p1293, $i1296, $i1297);
    goto $bb730_last;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $p1265 := atm_sk($p1264);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p1266 := $add.ref($add.ref($p1265, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p1267 := $load.ref($M.0, $p1266);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i1268 := $p2i.ref.i64($p1267);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i1269 := $p2i.ref.i64($p0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i1270 := $ne.i64($i1268, $i1269);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb732, $bb733;

  $bb733:
    assume !($i1270 == 1);
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    $p1271 := $add.ref($add.ref($p1265, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i1272 := $load.i16($M.0, $p1271);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i1273 := $sext.i16.i32($i1272);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p1274 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i1275 := $load.i8($M.0, $p1274);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i1276 := $sext.i8.i32($i1275);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i1277 := $ashr.i32($i1273, $i1276);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i1278 := $ne.i32($i1277, 0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb735, $bb736;

  $bb736:
    assume !($i1278 == 1);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p1279 := $add.ref($add.ref($p1265, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i1280 := $load.i32($M.0, $p1279);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p1281 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i1282 := $load.i8($M.0, $p1281);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i1283 := $sext.i8.i32($i1282);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i1284 := $ashr.i32($i1280, $i1283);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i1285 := $ne.i32($i1284, 0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb737, $bb738;

  $bb738:
    assume !($i1285 == 1);
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    $p1287 := $add.ref($add.ref($add.ref($p1264, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p1288 := $bitcast.ref.ref($p1287);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p1289 := $add.ref($add.ref($p1288, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p1290 := $load.ref($M.0, $p1289);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i1291 := $p2i.ref.i64($p1290);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i1292 := $ne.i64($i1291, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb741, $bb742;

  $bb742:
    assume !($i1292 == 1);
    assume {:verifier.code 0} true;
    $p1293 := $0.ref;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i1296 := $p2i.ref.i64($p1293);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i1297 := $ne.i64($i1296, 0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb744, $bb745;

  $bb745:
    assume !($i1297 == 1);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb744:
    assume $i1297 == 1;
    assume {:verifier.code 0} true;
    $p1264 := $p1293;
    goto $bb744_dummy;

  $bb741:
    assume $i1292 == 1;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p1294 := $bitcast.ref.ref($p1290);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p1295 := $add.ref($p1294, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p1293 := $p1295;
    goto $bb743;

  $bb737:
    assume {:verifier.code 0} true;
    assume $i1285 == 1;
    goto $bb39;

  $bb735:
    assume {:verifier.code 0} true;
    assume $i1278 == 1;
    goto $bb39;

  $bb732:
    assume $i1270 == 1;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb724:
    assume $i1258 == 1;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p1260 := $bitcast.ref.ref($p1256);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p1261 := $add.ref($p1260, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p1259 := $p1261;
    goto $bb726;

  $bb703:
    assume $i1221 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p1222 := $p1217;
    goto $bb706;

  $bb706:
    call $p1222, $p1223, $p1224, $p1225, $i1226, $i1227, $i1228, $p1229, $i1230, $i1231, $p1232, $i1233, $i1234, $i1235, $i1236, $p1237, $i1238, $p1239, $i1240, $i1241, $i1242, $i1243, $p1245, $p1246, $p1247, $p1248, $i1249, $i1250, $p1252, $p1253, $p1251, $i1254, $i1255 := atmtcp_v_ioctl_loop_$bb706($p0, $p3, $p1222, $p1223, $p1224, $p1225, $i1226, $i1227, $i1228, $p1229, $i1230, $i1231, $p1232, $i1233, $i1234, $i1235, $i1236, $p1237, $i1238, $p1239, $i1240, $i1241, $i1242, $i1243, $p1245, $p1246, $p1247, $p1248, $i1249, $i1250, $p1252, $p1253, $p1251, $i1254, $i1255);
    goto $bb706_last;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p1223 := atm_sk($p1222);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p1224 := $add.ref($add.ref($p1223, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p1225 := $load.ref($M.0, $p1224);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i1226 := $p2i.ref.i64($p1225);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i1227 := $p2i.ref.i64($p0);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i1228 := $ne.i64($i1226, $i1227);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb708, $bb709;

  $bb709:
    assume !($i1228 == 1);
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    $p1229 := $add.ref($add.ref($p1223, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i1230 := $load.i16($M.0, $p1229);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i1231 := $sext.i16.i32($i1230);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p1232 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i1233 := $load.i8($M.0, $p1232);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i1234 := $sext.i8.i32($i1233);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i1235 := $ashr.i32($i1231, $i1234);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i1236 := $ne.i32($i1235, 0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb711, $bb712;

  $bb712:
    assume !($i1236 == 1);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p1237 := $add.ref($add.ref($p1223, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i1238 := $load.i32($M.0, $p1237);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p1239 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i1240 := $load.i8($M.0, $p1239);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i1241 := $sext.i8.i32($i1240);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i1242 := $ashr.i32($i1238, $i1241);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i1243 := $ne.i32($i1242, 0);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb713, $bb714;

  $bb714:
    assume !($i1243 == 1);
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    $p1245 := $add.ref($add.ref($add.ref($p1222, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p1246 := $bitcast.ref.ref($p1245);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p1247 := $add.ref($add.ref($p1246, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p1248 := $load.ref($M.0, $p1247);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i1249 := $p2i.ref.i64($p1248);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i1250 := $ne.i64($i1249, 0);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb717, $bb718;

  $bb718:
    assume !($i1250 == 1);
    assume {:verifier.code 0} true;
    $p1251 := $0.ref;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i1254 := $p2i.ref.i64($p1251);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i1255 := $ne.i64($i1254, 0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb720, $bb721;

  $bb721:
    assume !($i1255 == 1);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb720:
    assume $i1255 == 1;
    assume {:verifier.code 0} true;
    $p1222 := $p1251;
    goto $bb720_dummy;

  $bb717:
    assume $i1250 == 1;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p1252 := $bitcast.ref.ref($p1248);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p1253 := $add.ref($p1252, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p1251 := $p1253;
    goto $bb719;

  $bb713:
    assume {:verifier.code 0} true;
    assume $i1243 == 1;
    goto $bb39;

  $bb711:
    assume {:verifier.code 0} true;
    assume $i1236 == 1;
    goto $bb39;

  $bb708:
    assume $i1228 == 1;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb700:
    assume $i1216 == 1;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p1218 := $bitcast.ref.ref($p1214);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p1219 := $add.ref($p1218, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p1217 := $p1219;
    goto $bb702;

  $bb679:
    assume $i1179 == 1;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p1180 := $p1175;
    goto $bb682;

  $bb682:
    call $p1180, $p1181, $p1182, $p1183, $i1184, $i1185, $i1186, $p1187, $i1188, $i1189, $p1190, $i1191, $i1192, $i1193, $i1194, $p1195, $i1196, $p1197, $i1198, $i1199, $i1200, $i1201, $p1203, $p1204, $p1205, $p1206, $i1207, $i1208, $p1210, $p1211, $p1209, $i1212, $i1213 := atmtcp_v_ioctl_loop_$bb682($p0, $p3, $p1180, $p1181, $p1182, $p1183, $i1184, $i1185, $i1186, $p1187, $i1188, $i1189, $p1190, $i1191, $i1192, $i1193, $i1194, $p1195, $i1196, $p1197, $i1198, $i1199, $i1200, $i1201, $p1203, $p1204, $p1205, $p1206, $i1207, $i1208, $p1210, $p1211, $p1209, $i1212, $i1213);
    goto $bb682_last;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p1181 := atm_sk($p1180);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p1182 := $add.ref($add.ref($p1181, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p1183 := $load.ref($M.0, $p1182);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i1184 := $p2i.ref.i64($p1183);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i1185 := $p2i.ref.i64($p0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i1186 := $ne.i64($i1184, $i1185);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb684, $bb685;

  $bb685:
    assume !($i1186 == 1);
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    $p1187 := $add.ref($add.ref($p1181, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i1188 := $load.i16($M.0, $p1187);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i1189 := $sext.i16.i32($i1188);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p1190 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i1191 := $load.i8($M.0, $p1190);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i1192 := $sext.i8.i32($i1191);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i1193 := $ashr.i32($i1189, $i1192);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i1194 := $ne.i32($i1193, 0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb687, $bb688;

  $bb688:
    assume !($i1194 == 1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p1195 := $add.ref($add.ref($p1181, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i1196 := $load.i32($M.0, $p1195);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p1197 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i1198 := $load.i8($M.0, $p1197);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i1199 := $sext.i8.i32($i1198);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i1200 := $ashr.i32($i1196, $i1199);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i1201 := $ne.i32($i1200, 0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb689, $bb690;

  $bb690:
    assume !($i1201 == 1);
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    $p1203 := $add.ref($add.ref($add.ref($p1180, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p1204 := $bitcast.ref.ref($p1203);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p1205 := $add.ref($add.ref($p1204, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p1206 := $load.ref($M.0, $p1205);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i1207 := $p2i.ref.i64($p1206);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i1208 := $ne.i64($i1207, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb693, $bb694;

  $bb694:
    assume !($i1208 == 1);
    assume {:verifier.code 0} true;
    $p1209 := $0.ref;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i1212 := $p2i.ref.i64($p1209);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i1213 := $ne.i64($i1212, 0);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb696, $bb697;

  $bb697:
    assume !($i1213 == 1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb696:
    assume $i1213 == 1;
    assume {:verifier.code 0} true;
    $p1180 := $p1209;
    goto $bb696_dummy;

  $bb693:
    assume $i1208 == 1;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p1210 := $bitcast.ref.ref($p1206);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p1211 := $add.ref($p1210, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p1209 := $p1211;
    goto $bb695;

  $bb689:
    assume {:verifier.code 0} true;
    assume $i1201 == 1;
    goto $bb39;

  $bb687:
    assume {:verifier.code 0} true;
    assume $i1194 == 1;
    goto $bb39;

  $bb684:
    assume $i1186 == 1;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb676:
    assume $i1174 == 1;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p1176 := $bitcast.ref.ref($p1172);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p1177 := $add.ref($p1176, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p1175 := $p1177;
    goto $bb678;

  $bb655:
    assume $i1137 == 1;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p1138 := $p1133;
    goto $bb658;

  $bb658:
    call $p1138, $p1139, $p1140, $p1141, $i1142, $i1143, $i1144, $p1145, $i1146, $i1147, $p1148, $i1149, $i1150, $i1151, $i1152, $p1153, $i1154, $p1155, $i1156, $i1157, $i1158, $i1159, $p1161, $p1162, $p1163, $p1164, $i1165, $i1166, $p1168, $p1169, $p1167, $i1170, $i1171 := atmtcp_v_ioctl_loop_$bb658($p0, $p3, $p1138, $p1139, $p1140, $p1141, $i1142, $i1143, $i1144, $p1145, $i1146, $i1147, $p1148, $i1149, $i1150, $i1151, $i1152, $p1153, $i1154, $p1155, $i1156, $i1157, $i1158, $i1159, $p1161, $p1162, $p1163, $p1164, $i1165, $i1166, $p1168, $p1169, $p1167, $i1170, $i1171);
    goto $bb658_last;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p1139 := atm_sk($p1138);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p1140 := $add.ref($add.ref($p1139, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p1141 := $load.ref($M.0, $p1140);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i1142 := $p2i.ref.i64($p1141);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i1143 := $p2i.ref.i64($p0);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i1144 := $ne.i64($i1142, $i1143);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb660, $bb661;

  $bb661:
    assume !($i1144 == 1);
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    $p1145 := $add.ref($add.ref($p1139, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i1146 := $load.i16($M.0, $p1145);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i1147 := $sext.i16.i32($i1146);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p1148 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i1149 := $load.i8($M.0, $p1148);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i1150 := $sext.i8.i32($i1149);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i1151 := $ashr.i32($i1147, $i1150);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i1152 := $ne.i32($i1151, 0);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb663, $bb664;

  $bb664:
    assume !($i1152 == 1);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p1153 := $add.ref($add.ref($p1139, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i1154 := $load.i32($M.0, $p1153);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p1155 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i1156 := $load.i8($M.0, $p1155);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i1157 := $sext.i8.i32($i1156);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i1158 := $ashr.i32($i1154, $i1157);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i1159 := $ne.i32($i1158, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb665, $bb666;

  $bb666:
    assume !($i1159 == 1);
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    $p1161 := $add.ref($add.ref($add.ref($p1138, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p1162 := $bitcast.ref.ref($p1161);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p1163 := $add.ref($add.ref($p1162, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p1164 := $load.ref($M.0, $p1163);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i1165 := $p2i.ref.i64($p1164);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i1166 := $ne.i64($i1165, 0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb669, $bb670;

  $bb670:
    assume !($i1166 == 1);
    assume {:verifier.code 0} true;
    $p1167 := $0.ref;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i1170 := $p2i.ref.i64($p1167);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i1171 := $ne.i64($i1170, 0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb672, $bb673;

  $bb673:
    assume !($i1171 == 1);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb672:
    assume $i1171 == 1;
    assume {:verifier.code 0} true;
    $p1138 := $p1167;
    goto $bb672_dummy;

  $bb669:
    assume $i1166 == 1;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p1168 := $bitcast.ref.ref($p1164);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p1169 := $add.ref($p1168, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p1167 := $p1169;
    goto $bb671;

  $bb665:
    assume {:verifier.code 0} true;
    assume $i1159 == 1;
    goto $bb39;

  $bb663:
    assume {:verifier.code 0} true;
    assume $i1152 == 1;
    goto $bb39;

  $bb660:
    assume $i1144 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb652:
    assume $i1132 == 1;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p1134 := $bitcast.ref.ref($p1130);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p1135 := $add.ref($p1134, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p1133 := $p1135;
    goto $bb654;

  $bb631:
    assume $i1095 == 1;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p1096 := $p1091;
    goto $bb634;

  $bb634:
    call $p1096, $p1097, $p1098, $p1099, $i1100, $i1101, $i1102, $p1103, $i1104, $i1105, $p1106, $i1107, $i1108, $i1109, $i1110, $p1111, $i1112, $p1113, $i1114, $i1115, $i1116, $i1117, $p1119, $p1120, $p1121, $p1122, $i1123, $i1124, $p1126, $p1127, $p1125, $i1128, $i1129 := atmtcp_v_ioctl_loop_$bb634($p0, $p3, $p1096, $p1097, $p1098, $p1099, $i1100, $i1101, $i1102, $p1103, $i1104, $i1105, $p1106, $i1107, $i1108, $i1109, $i1110, $p1111, $i1112, $p1113, $i1114, $i1115, $i1116, $i1117, $p1119, $p1120, $p1121, $p1122, $i1123, $i1124, $p1126, $p1127, $p1125, $i1128, $i1129);
    goto $bb634_last;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p1097 := atm_sk($p1096);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p1098 := $add.ref($add.ref($p1097, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p1099 := $load.ref($M.0, $p1098);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i1100 := $p2i.ref.i64($p1099);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i1101 := $p2i.ref.i64($p0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i1102 := $ne.i64($i1100, $i1101);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb636, $bb637;

  $bb637:
    assume !($i1102 == 1);
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    $p1103 := $add.ref($add.ref($p1097, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i1104 := $load.i16($M.0, $p1103);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i1105 := $sext.i16.i32($i1104);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p1106 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i1107 := $load.i8($M.0, $p1106);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i1108 := $sext.i8.i32($i1107);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i1109 := $ashr.i32($i1105, $i1108);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i1110 := $ne.i32($i1109, 0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb639, $bb640;

  $bb640:
    assume !($i1110 == 1);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p1111 := $add.ref($add.ref($p1097, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i1112 := $load.i32($M.0, $p1111);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p1113 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i1114 := $load.i8($M.0, $p1113);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i1115 := $sext.i8.i32($i1114);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i1116 := $ashr.i32($i1112, $i1115);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i1117 := $ne.i32($i1116, 0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb641, $bb642;

  $bb642:
    assume !($i1117 == 1);
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    $p1119 := $add.ref($add.ref($add.ref($p1096, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p1120 := $bitcast.ref.ref($p1119);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p1121 := $add.ref($add.ref($p1120, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p1122 := $load.ref($M.0, $p1121);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i1123 := $p2i.ref.i64($p1122);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i1124 := $ne.i64($i1123, 0);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb645, $bb646;

  $bb646:
    assume !($i1124 == 1);
    assume {:verifier.code 0} true;
    $p1125 := $0.ref;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i1128 := $p2i.ref.i64($p1125);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i1129 := $ne.i64($i1128, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb648, $bb649;

  $bb649:
    assume !($i1129 == 1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb648:
    assume $i1129 == 1;
    assume {:verifier.code 0} true;
    $p1096 := $p1125;
    goto $bb648_dummy;

  $bb645:
    assume $i1124 == 1;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p1126 := $bitcast.ref.ref($p1122);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p1127 := $add.ref($p1126, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p1125 := $p1127;
    goto $bb647;

  $bb641:
    assume {:verifier.code 0} true;
    assume $i1117 == 1;
    goto $bb39;

  $bb639:
    assume {:verifier.code 0} true;
    assume $i1110 == 1;
    goto $bb39;

  $bb636:
    assume $i1102 == 1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb628:
    assume $i1090 == 1;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p1092 := $bitcast.ref.ref($p1088);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p1093 := $add.ref($p1092, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p1091 := $p1093;
    goto $bb630;

  $bb607:
    assume $i1053 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p1054 := $p1049;
    goto $bb610;

  $bb610:
    call $p1054, $p1055, $p1056, $p1057, $i1058, $i1059, $i1060, $p1061, $i1062, $i1063, $p1064, $i1065, $i1066, $i1067, $i1068, $p1069, $i1070, $p1071, $i1072, $i1073, $i1074, $i1075, $p1077, $p1078, $p1079, $p1080, $i1081, $i1082, $p1084, $p1085, $p1083, $i1086, $i1087 := atmtcp_v_ioctl_loop_$bb610($p0, $p3, $p1054, $p1055, $p1056, $p1057, $i1058, $i1059, $i1060, $p1061, $i1062, $i1063, $p1064, $i1065, $i1066, $i1067, $i1068, $p1069, $i1070, $p1071, $i1072, $i1073, $i1074, $i1075, $p1077, $p1078, $p1079, $p1080, $i1081, $i1082, $p1084, $p1085, $p1083, $i1086, $i1087);
    goto $bb610_last;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p1055 := atm_sk($p1054);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p1056 := $add.ref($add.ref($p1055, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p1057 := $load.ref($M.0, $p1056);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i1058 := $p2i.ref.i64($p1057);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i1059 := $p2i.ref.i64($p0);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i1060 := $ne.i64($i1058, $i1059);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb612, $bb613;

  $bb613:
    assume !($i1060 == 1);
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    $p1061 := $add.ref($add.ref($p1055, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i1062 := $load.i16($M.0, $p1061);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i1063 := $sext.i16.i32($i1062);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p1064 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i1065 := $load.i8($M.0, $p1064);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i1066 := $sext.i8.i32($i1065);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i1067 := $ashr.i32($i1063, $i1066);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i1068 := $ne.i32($i1067, 0);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb615, $bb616;

  $bb616:
    assume !($i1068 == 1);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p1069 := $add.ref($add.ref($p1055, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i1070 := $load.i32($M.0, $p1069);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p1071 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i1072 := $load.i8($M.0, $p1071);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i1073 := $sext.i8.i32($i1072);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i1074 := $ashr.i32($i1070, $i1073);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i1075 := $ne.i32($i1074, 0);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb617, $bb618;

  $bb618:
    assume !($i1075 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    $p1077 := $add.ref($add.ref($add.ref($p1054, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p1078 := $bitcast.ref.ref($p1077);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p1079 := $add.ref($add.ref($p1078, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p1080 := $load.ref($M.0, $p1079);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i1081 := $p2i.ref.i64($p1080);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i1082 := $ne.i64($i1081, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb621, $bb622;

  $bb622:
    assume !($i1082 == 1);
    assume {:verifier.code 0} true;
    $p1083 := $0.ref;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i1086 := $p2i.ref.i64($p1083);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i1087 := $ne.i64($i1086, 0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb624, $bb625;

  $bb625:
    assume !($i1087 == 1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb624:
    assume $i1087 == 1;
    assume {:verifier.code 0} true;
    $p1054 := $p1083;
    goto $bb624_dummy;

  $bb621:
    assume $i1082 == 1;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p1084 := $bitcast.ref.ref($p1080);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p1085 := $add.ref($p1084, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p1083 := $p1085;
    goto $bb623;

  $bb617:
    assume {:verifier.code 0} true;
    assume $i1075 == 1;
    goto $bb39;

  $bb615:
    assume {:verifier.code 0} true;
    assume $i1068 == 1;
    goto $bb39;

  $bb612:
    assume $i1060 == 1;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb604:
    assume $i1048 == 1;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p1050 := $bitcast.ref.ref($p1046);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p1051 := $add.ref($p1050, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p1049 := $p1051;
    goto $bb606;

  $bb583:
    assume $i1011 == 1;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p1012 := $p1007;
    goto $bb586;

  $bb586:
    call $p1012, $p1013, $p1014, $p1015, $i1016, $i1017, $i1018, $p1019, $i1020, $i1021, $p1022, $i1023, $i1024, $i1025, $i1026, $p1027, $i1028, $p1029, $i1030, $i1031, $i1032, $i1033, $p1035, $p1036, $p1037, $p1038, $i1039, $i1040, $p1042, $p1043, $p1041, $i1044, $i1045 := atmtcp_v_ioctl_loop_$bb586($p0, $p3, $p1012, $p1013, $p1014, $p1015, $i1016, $i1017, $i1018, $p1019, $i1020, $i1021, $p1022, $i1023, $i1024, $i1025, $i1026, $p1027, $i1028, $p1029, $i1030, $i1031, $i1032, $i1033, $p1035, $p1036, $p1037, $p1038, $i1039, $i1040, $p1042, $p1043, $p1041, $i1044, $i1045);
    goto $bb586_last;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p1013 := atm_sk($p1012);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p1014 := $add.ref($add.ref($p1013, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p1015 := $load.ref($M.0, $p1014);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i1016 := $p2i.ref.i64($p1015);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i1017 := $p2i.ref.i64($p0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i1018 := $ne.i64($i1016, $i1017);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i1018 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    $p1019 := $add.ref($add.ref($p1013, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i1020 := $load.i16($M.0, $p1019);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i1021 := $sext.i16.i32($i1020);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p1022 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i1023 := $load.i8($M.0, $p1022);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i1024 := $sext.i8.i32($i1023);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i1025 := $ashr.i32($i1021, $i1024);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i1026 := $ne.i32($i1025, 0);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb591, $bb592;

  $bb592:
    assume !($i1026 == 1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p1027 := $add.ref($add.ref($p1013, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i1028 := $load.i32($M.0, $p1027);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p1029 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i1030 := $load.i8($M.0, $p1029);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i1031 := $sext.i8.i32($i1030);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i1032 := $ashr.i32($i1028, $i1031);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i1033 := $ne.i32($i1032, 0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb593, $bb594;

  $bb594:
    assume !($i1033 == 1);
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    $p1035 := $add.ref($add.ref($add.ref($p1012, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p1036 := $bitcast.ref.ref($p1035);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($add.ref($p1036, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p1038 := $load.ref($M.0, $p1037);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i1039 := $p2i.ref.i64($p1038);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i1040 := $ne.i64($i1039, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  $bb598:
    assume !($i1040 == 1);
    assume {:verifier.code 0} true;
    $p1041 := $0.ref;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i1044 := $p2i.ref.i64($p1041);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i1045 := $ne.i64($i1044, 0);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600, $bb601;

  $bb601:
    assume !($i1045 == 1);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb600:
    assume $i1045 == 1;
    assume {:verifier.code 0} true;
    $p1012 := $p1041;
    goto $bb600_dummy;

  $bb597:
    assume $i1040 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p1042 := $bitcast.ref.ref($p1038);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p1043 := $add.ref($p1042, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p1041 := $p1043;
    goto $bb599;

  $bb593:
    assume {:verifier.code 0} true;
    assume $i1033 == 1;
    goto $bb39;

  $bb591:
    assume {:verifier.code 0} true;
    assume $i1026 == 1;
    goto $bb39;

  $bb588:
    assume $i1018 == 1;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb580:
    assume $i1006 == 1;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p1008 := $bitcast.ref.ref($p1004);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($p1008, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p1007 := $p1009;
    goto $bb582;

  $bb559:
    assume $i969 == 1;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p970 := $p965;
    goto $bb562;

  $bb562:
    call $p970, $p971, $p972, $p973, $i974, $i975, $i976, $p977, $i978, $i979, $p980, $i981, $i982, $i983, $i984, $p985, $i986, $p987, $i988, $i989, $i990, $i991, $p993, $p994, $p995, $p996, $i997, $i998, $p1000, $p1001, $p999, $i1002, $i1003 := atmtcp_v_ioctl_loop_$bb562($p0, $p3, $p970, $p971, $p972, $p973, $i974, $i975, $i976, $p977, $i978, $i979, $p980, $i981, $i982, $i983, $i984, $p985, $i986, $p987, $i988, $i989, $i990, $i991, $p993, $p994, $p995, $p996, $i997, $i998, $p1000, $p1001, $p999, $i1002, $i1003);
    goto $bb562_last;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p971 := atm_sk($p970);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p972 := $add.ref($add.ref($p971, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p973 := $load.ref($M.0, $p972);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i974 := $p2i.ref.i64($p973);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i975 := $p2i.ref.i64($p0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i976 := $ne.i64($i974, $i975);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  $bb565:
    assume !($i976 == 1);
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    $p977 := $add.ref($add.ref($p971, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i978 := $load.i16($M.0, $p977);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i979 := $sext.i16.i32($i978);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p980 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i981 := $load.i8($M.0, $p980);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i982 := $sext.i8.i32($i981);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i983 := $ashr.i32($i979, $i982);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i984 := $ne.i32($i983, 0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i984 == 1);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p985 := $add.ref($add.ref($p971, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i986 := $load.i32($M.0, $p985);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i988 := $load.i8($M.0, $p987);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i989 := $sext.i8.i32($i988);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i990 := $ashr.i32($i986, $i989);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i991 := $ne.i32($i990, 0);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb569, $bb570;

  $bb570:
    assume !($i991 == 1);
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    $p993 := $add.ref($add.ref($add.ref($p970, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p994 := $bitcast.ref.ref($p993);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p995 := $add.ref($add.ref($p994, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p996 := $load.ref($M.0, $p995);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i997 := $p2i.ref.i64($p996);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i998 := $ne.i64($i997, 0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  $bb574:
    assume !($i998 == 1);
    assume {:verifier.code 0} true;
    $p999 := $0.ref;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i1002 := $p2i.ref.i64($p999);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i1003 := $ne.i64($i1002, 0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb576, $bb577;

  $bb577:
    assume !($i1003 == 1);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb576:
    assume $i1003 == 1;
    assume {:verifier.code 0} true;
    $p970 := $p999;
    goto $bb576_dummy;

  $bb573:
    assume $i998 == 1;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p1000 := $bitcast.ref.ref($p996);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p1001 := $add.ref($p1000, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p999 := $p1001;
    goto $bb575;

  $bb569:
    assume {:verifier.code 0} true;
    assume $i991 == 1;
    goto $bb39;

  $bb567:
    assume {:verifier.code 0} true;
    assume $i984 == 1;
    goto $bb39;

  $bb564:
    assume $i976 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb556:
    assume $i964 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p966 := $bitcast.ref.ref($p962);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($p966, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p965 := $p967;
    goto $bb558;

  $bb535:
    assume $i927 == 1;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p928 := $p923;
    goto $bb538;

  $bb538:
    call $p928, $p929, $p930, $p931, $i932, $i933, $i934, $p935, $i936, $i937, $p938, $i939, $i940, $i941, $i942, $p943, $i944, $p945, $i946, $i947, $i948, $i949, $p951, $p952, $p953, $p954, $i955, $i956, $p958, $p959, $p957, $i960, $i961 := atmtcp_v_ioctl_loop_$bb538($p0, $p3, $p928, $p929, $p930, $p931, $i932, $i933, $i934, $p935, $i936, $i937, $p938, $i939, $i940, $i941, $i942, $p943, $i944, $p945, $i946, $i947, $i948, $i949, $p951, $p952, $p953, $p954, $i955, $i956, $p958, $p959, $p957, $i960, $i961);
    goto $bb538_last;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p929 := atm_sk($p928);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p930 := $add.ref($add.ref($p929, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p931 := $load.ref($M.0, $p930);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i932 := $p2i.ref.i64($p931);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i933 := $p2i.ref.i64($p0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i934 := $ne.i64($i932, $i933);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540, $bb541;

  $bb541:
    assume !($i934 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    $p935 := $add.ref($add.ref($p929, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i936 := $load.i16($M.0, $p935);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i937 := $sext.i16.i32($i936);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i939 := $load.i8($M.0, $p938);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i940 := $sext.i8.i32($i939);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i941 := $ashr.i32($i937, $i940);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i942 := $ne.i32($i941, 0);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i942 == 1);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p943 := $add.ref($add.ref($p929, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i944 := $load.i32($M.0, $p943);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i946 := $load.i8($M.0, $p945);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i947 := $sext.i8.i32($i946);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i948 := $ashr.i32($i944, $i947);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i949 := $ne.i32($i948, 0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb545, $bb546;

  $bb546:
    assume !($i949 == 1);
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($add.ref($add.ref($p928, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p952 := $bitcast.ref.ref($p951);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($p952, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p954 := $load.ref($M.0, $p953);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i955 := $p2i.ref.i64($p954);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i956 := $ne.i64($i955, 0);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  $bb550:
    assume !($i956 == 1);
    assume {:verifier.code 0} true;
    $p957 := $0.ref;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i960 := $p2i.ref.i64($p957);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i961 := $ne.i64($i960, 0);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552, $bb553;

  $bb553:
    assume !($i961 == 1);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb552:
    assume $i961 == 1;
    assume {:verifier.code 0} true;
    $p928 := $p957;
    goto $bb552_dummy;

  $bb549:
    assume $i956 == 1;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p958 := $bitcast.ref.ref($p954);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p959 := $add.ref($p958, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p957 := $p959;
    goto $bb551;

  $bb545:
    assume {:verifier.code 0} true;
    assume $i949 == 1;
    goto $bb39;

  $bb543:
    assume {:verifier.code 0} true;
    assume $i942 == 1;
    goto $bb39;

  $bb540:
    assume $i934 == 1;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb532:
    assume $i922 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p924 := $bitcast.ref.ref($p920);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($p924, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p923 := $p925;
    goto $bb534;

  $bb511:
    assume $i885 == 1;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p886 := $p881;
    goto $bb514;

  $bb514:
    call $p886, $p887, $p888, $p889, $i890, $i891, $i892, $p893, $i894, $i895, $p896, $i897, $i898, $i899, $i900, $p901, $i902, $p903, $i904, $i905, $i906, $i907, $p909, $p910, $p911, $p912, $i913, $i914, $p916, $p917, $p915, $i918, $i919 := atmtcp_v_ioctl_loop_$bb514($p0, $p3, $p886, $p887, $p888, $p889, $i890, $i891, $i892, $p893, $i894, $i895, $p896, $i897, $i898, $i899, $i900, $p901, $i902, $p903, $i904, $i905, $i906, $i907, $p909, $p910, $p911, $p912, $i913, $i914, $p916, $p917, $p915, $i918, $i919);
    goto $bb514_last;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p887 := atm_sk($p886);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($p887, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p889 := $load.ref($M.0, $p888);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i890 := $p2i.ref.i64($p889);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i891 := $p2i.ref.i64($p0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i892 := $ne.i64($i890, $i891);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  $bb517:
    assume !($i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($p887, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i894 := $load.i16($M.0, $p893);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i895 := $sext.i16.i32($i894);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p896 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i897 := $load.i8($M.0, $p896);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i898 := $sext.i8.i32($i897);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i899 := $ashr.i32($i895, $i898);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i900 := $ne.i32($i899, 0);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i900 == 1);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($p887, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i902 := $load.i32($M.0, $p901);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p903 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i904 := $load.i8($M.0, $p903);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i905 := $sext.i8.i32($i904);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i906 := $ashr.i32($i902, $i905);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i907 := $ne.i32($i906, 0);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb521, $bb522;

  $bb522:
    assume !($i907 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($add.ref($p886, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p910 := $bitcast.ref.ref($p909);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($p910, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p912 := $load.ref($M.0, $p911);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i913 := $p2i.ref.i64($p912);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i914 := $ne.i64($i913, 0);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb525, $bb526;

  $bb526:
    assume !($i914 == 1);
    assume {:verifier.code 0} true;
    $p915 := $0.ref;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i918 := $p2i.ref.i64($p915);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i919 := $ne.i64($i918, 0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  $bb529:
    assume !($i919 == 1);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb528:
    assume $i919 == 1;
    assume {:verifier.code 0} true;
    $p886 := $p915;
    goto $bb528_dummy;

  $bb525:
    assume $i914 == 1;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p916 := $bitcast.ref.ref($p912);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p917 := $add.ref($p916, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p915 := $p917;
    goto $bb527;

  $bb521:
    assume {:verifier.code 0} true;
    assume $i907 == 1;
    goto $bb39;

  $bb519:
    assume {:verifier.code 0} true;
    assume $i900 == 1;
    goto $bb39;

  $bb516:
    assume $i892 == 1;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb508:
    assume $i880 == 1;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p882 := $bitcast.ref.ref($p878);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($p882, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p881 := $p883;
    goto $bb510;

  $bb487:
    assume $i843 == 1;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p844 := $p839;
    goto $bb490;

  $bb490:
    call $p844, $p845, $p846, $p847, $i848, $i849, $i850, $p851, $i852, $i853, $p854, $i855, $i856, $i857, $i858, $p859, $i860, $p861, $i862, $i863, $i864, $i865, $p867, $p868, $p869, $p870, $i871, $i872, $p874, $p875, $p873, $i876, $i877 := atmtcp_v_ioctl_loop_$bb490($p0, $p3, $p844, $p845, $p846, $p847, $i848, $i849, $i850, $p851, $i852, $i853, $p854, $i855, $i856, $i857, $i858, $p859, $i860, $p861, $i862, $i863, $i864, $i865, $p867, $p868, $p869, $p870, $i871, $i872, $p874, $p875, $p873, $i876, $i877);
    goto $bb490_last;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p845 := atm_sk($p844);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($add.ref($p845, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p847 := $load.ref($M.0, $p846);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i848 := $p2i.ref.i64($p847);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i849 := $p2i.ref.i64($p0);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i850 := $ne.i64($i848, $i849);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i850 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($add.ref($p845, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i852 := $load.i16($M.0, $p851);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i853 := $sext.i16.i32($i852);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p854 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i855 := $load.i8($M.0, $p854);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i856 := $sext.i8.i32($i855);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i857 := $ashr.i32($i853, $i856);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i858 := $ne.i32($i857, 0);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i858 == 1);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($add.ref($p845, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i860 := $load.i32($M.0, $p859);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i862 := $load.i8($M.0, $p861);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i863 := $sext.i8.i32($i862);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i864 := $ashr.i32($i860, $i863);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i865 := $ne.i32($i864, 0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb497, $bb498;

  $bb498:
    assume !($i865 == 1);
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($add.ref($p844, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p868 := $bitcast.ref.ref($p867);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($add.ref($p868, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p870 := $load.ref($M.0, $p869);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i871 := $p2i.ref.i64($p870);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i872 := $ne.i64($i871, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  $bb502:
    assume !($i872 == 1);
    assume {:verifier.code 0} true;
    $p873 := $0.ref;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i876 := $p2i.ref.i64($p873);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i877 := $ne.i64($i876, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i877 == 1);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb504:
    assume $i877 == 1;
    assume {:verifier.code 0} true;
    $p844 := $p873;
    goto $bb504_dummy;

  $bb501:
    assume $i872 == 1;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p874 := $bitcast.ref.ref($p870);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p875 := $add.ref($p874, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p873 := $p875;
    goto $bb503;

  $bb497:
    assume {:verifier.code 0} true;
    assume $i865 == 1;
    goto $bb39;

  $bb495:
    assume {:verifier.code 0} true;
    assume $i858 == 1;
    goto $bb39;

  $bb492:
    assume $i850 == 1;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb484:
    assume $i838 == 1;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p840 := $bitcast.ref.ref($p836);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($p840, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p839 := $p841;
    goto $bb486;

  $bb463:
    assume $i801 == 1;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p802 := $p797;
    goto $bb466;

  $bb466:
    call $p802, $p803, $p804, $p805, $i806, $i807, $i808, $p809, $i810, $i811, $p812, $i813, $i814, $i815, $i816, $p817, $i818, $p819, $i820, $i821, $i822, $i823, $p825, $p826, $p827, $p828, $i829, $i830, $p832, $p833, $p831, $i834, $i835 := atmtcp_v_ioctl_loop_$bb466($p0, $p3, $p802, $p803, $p804, $p805, $i806, $i807, $i808, $p809, $i810, $i811, $p812, $i813, $i814, $i815, $i816, $p817, $i818, $p819, $i820, $i821, $i822, $i823, $p825, $p826, $p827, $p828, $i829, $i830, $p832, $p833, $p831, $i834, $i835);
    goto $bb466_last;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p803 := atm_sk($p802);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($add.ref($p803, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p805 := $load.ref($M.0, $p804);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i806 := $p2i.ref.i64($p805);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i807 := $p2i.ref.i64($p0);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i808 := $ne.i64($i806, $i807);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i808 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($add.ref($p803, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i810 := $load.i16($M.0, $p809);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i811 := $sext.i16.i32($i810);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i813 := $load.i8($M.0, $p812);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i814 := $sext.i8.i32($i813);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i815 := $ashr.i32($i811, $i814);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i816 := $ne.i32($i815, 0);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i816 == 1);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($p803, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i818 := $load.i32($M.0, $p817);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i820 := $load.i8($M.0, $p819);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i821 := $sext.i8.i32($i820);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i822 := $ashr.i32($i818, $i821);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i823 := $ne.i32($i822, 0);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  $bb474:
    assume !($i823 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($add.ref($add.ref($p802, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p826 := $bitcast.ref.ref($p825);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($add.ref($p826, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p828 := $load.ref($M.0, $p827);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i829 := $p2i.ref.i64($p828);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i830 := $ne.i64($i829, 0);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  $bb478:
    assume !($i830 == 1);
    assume {:verifier.code 0} true;
    $p831 := $0.ref;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i834 := $p2i.ref.i64($p831);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i835 := $ne.i64($i834, 0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i835 == 1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb480:
    assume $i835 == 1;
    assume {:verifier.code 0} true;
    $p802 := $p831;
    goto $bb480_dummy;

  $bb477:
    assume $i830 == 1;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p832 := $bitcast.ref.ref($p828);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p833 := $add.ref($p832, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p831 := $p833;
    goto $bb479;

  $bb473:
    assume {:verifier.code 0} true;
    assume $i823 == 1;
    goto $bb39;

  $bb471:
    assume {:verifier.code 0} true;
    assume $i816 == 1;
    goto $bb39;

  $bb468:
    assume $i808 == 1;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb460:
    assume $i796 == 1;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p798 := $bitcast.ref.ref($p794);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($p798, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p797 := $p799;
    goto $bb462;

  $bb439:
    assume $i759 == 1;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p760 := $p755;
    goto $bb442;

  $bb442:
    call $p760, $p761, $p762, $p763, $i764, $i765, $i766, $p767, $i768, $i769, $p770, $i771, $i772, $i773, $i774, $p775, $i776, $p777, $i778, $i779, $i780, $i781, $p783, $p784, $p785, $p786, $i787, $i788, $p790, $p791, $p789, $i792, $i793 := atmtcp_v_ioctl_loop_$bb442($p0, $p3, $p760, $p761, $p762, $p763, $i764, $i765, $i766, $p767, $i768, $i769, $p770, $i771, $i772, $i773, $i774, $p775, $i776, $p777, $i778, $i779, $i780, $i781, $p783, $p784, $p785, $p786, $i787, $i788, $p790, $p791, $p789, $i792, $i793);
    goto $bb442_last;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p761 := atm_sk($p760);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($p761, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p763 := $load.ref($M.0, $p762);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i764 := $p2i.ref.i64($p763);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i765 := $p2i.ref.i64($p0);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i766 := $ne.i64($i764, $i765);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i766 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($p761, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i768 := $load.i16($M.0, $p767);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i769 := $sext.i16.i32($i768);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i771 := $load.i8($M.0, $p770);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i772 := $sext.i8.i32($i771);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i773 := $ashr.i32($i769, $i772);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i774 := $ne.i32($i773, 0);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i774 == 1);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($p761, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i776 := $load.i32($M.0, $p775);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i778 := $load.i8($M.0, $p777);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i779 := $sext.i8.i32($i778);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i780 := $ashr.i32($i776, $i779);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i781 := $ne.i32($i780, 0);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  $bb450:
    assume !($i781 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($add.ref($p760, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p784 := $bitcast.ref.ref($p783);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($p784, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p786 := $load.ref($M.0, $p785);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i787 := $p2i.ref.i64($p786);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i788 := $ne.i64($i787, 0);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i788 == 1);
    assume {:verifier.code 0} true;
    $p789 := $0.ref;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i792 := $p2i.ref.i64($p789);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i793 := $ne.i64($i792, 0);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i793 == 1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb456:
    assume $i793 == 1;
    assume {:verifier.code 0} true;
    $p760 := $p789;
    goto $bb456_dummy;

  $bb453:
    assume $i788 == 1;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p790 := $bitcast.ref.ref($p786);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($p790, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p789 := $p791;
    goto $bb455;

  $bb449:
    assume {:verifier.code 0} true;
    assume $i781 == 1;
    goto $bb39;

  $bb447:
    assume {:verifier.code 0} true;
    assume $i774 == 1;
    goto $bb39;

  $bb444:
    assume $i766 == 1;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb436:
    assume $i754 == 1;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p756 := $bitcast.ref.ref($p752);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($p756, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p755 := $p757;
    goto $bb438;

  $bb415:
    assume $i717 == 1;
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p718 := $p713;
    goto $bb418;

  $bb418:
    call $p718, $p719, $p720, $p721, $i722, $i723, $i724, $p725, $i726, $i727, $p728, $i729, $i730, $i731, $i732, $p733, $i734, $p735, $i736, $i737, $i738, $i739, $p741, $p742, $p743, $p744, $i745, $i746, $p748, $p749, $p747, $i750, $i751 := atmtcp_v_ioctl_loop_$bb418($p0, $p3, $p718, $p719, $p720, $p721, $i722, $i723, $i724, $p725, $i726, $i727, $p728, $i729, $i730, $i731, $i732, $p733, $i734, $p735, $i736, $i737, $i738, $i739, $p741, $p742, $p743, $p744, $i745, $i746, $p748, $p749, $p747, $i750, $i751);
    goto $bb418_last;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $p719 := atm_sk($p718);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($p719, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p721 := $load.ref($M.0, $p720);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i722 := $p2i.ref.i64($p721);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i723 := $p2i.ref.i64($p0);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i724 := $ne.i64($i722, $i723);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($p719, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i726 := $load.i16($M.0, $p725);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i727 := $sext.i16.i32($i726);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i729 := $load.i8($M.0, $p728);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i730 := $sext.i8.i32($i729);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i731 := $ashr.i32($i727, $i730);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i732 := $ne.i32($i731, 0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i732 == 1);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p719, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i734 := $load.i32($M.0, $p733);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i736 := $load.i8($M.0, $p735);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i737 := $sext.i8.i32($i736);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i738 := $ashr.i32($i734, $i737);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i739 := $ne.i32($i738, 0);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  $bb426:
    assume !($i739 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($add.ref($p718, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p742 := $bitcast.ref.ref($p741);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($add.ref($p742, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p744 := $load.ref($M.0, $p743);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i745 := $p2i.ref.i64($p744);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i746 := $ne.i64($i745, 0);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume !($i746 == 1);
    assume {:verifier.code 0} true;
    $p747 := $0.ref;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i750 := $p2i.ref.i64($p747);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i751 := $ne.i64($i750, 0);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i751 == 1);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb432:
    assume $i751 == 1;
    assume {:verifier.code 0} true;
    $p718 := $p747;
    goto $bb432_dummy;

  $bb429:
    assume $i746 == 1;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p748 := $bitcast.ref.ref($p744);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($p748, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p747 := $p749;
    goto $bb431;

  $bb425:
    assume {:verifier.code 0} true;
    assume $i739 == 1;
    goto $bb39;

  $bb423:
    assume {:verifier.code 0} true;
    assume $i732 == 1;
    goto $bb39;

  $bb420:
    assume $i724 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb412:
    assume $i712 == 1;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p714 := $bitcast.ref.ref($p710);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($p714, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p713 := $p715;
    goto $bb414;

  $bb391:
    assume $i675 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p676 := $p671;
    goto $bb394;

  $bb394:
    call $p676, $p677, $p678, $p679, $i680, $i681, $i682, $p683, $i684, $i685, $p686, $i687, $i688, $i689, $i690, $p691, $i692, $p693, $i694, $i695, $i696, $i697, $p699, $p700, $p701, $p702, $i703, $i704, $p706, $p707, $p705, $i708, $i709 := atmtcp_v_ioctl_loop_$bb394($p0, $p3, $p676, $p677, $p678, $p679, $i680, $i681, $i682, $p683, $i684, $i685, $p686, $i687, $i688, $i689, $i690, $p691, $i692, $p693, $i694, $i695, $i696, $i697, $p699, $p700, $p701, $p702, $i703, $i704, $p706, $p707, $p705, $i708, $i709);
    goto $bb394_last;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p677 := atm_sk($p676);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($p677, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p679 := $load.ref($M.0, $p678);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i680 := $p2i.ref.i64($p679);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i681 := $p2i.ref.i64($p0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i682 := $ne.i64($i680, $i681);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i682 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p677, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i684 := $load.i16($M.0, $p683);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i685 := $sext.i16.i32($i684);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i687 := $load.i8($M.0, $p686);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i688 := $sext.i8.i32($i687);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i689 := $ashr.i32($i685, $i688);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i690 := $ne.i32($i689, 0);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i690 == 1);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p677, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i692 := $load.i32($M.0, $p691);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i694 := $load.i8($M.0, $p693);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i695 := $sext.i8.i32($i694);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i696 := $ashr.i32($i692, $i695);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i697 := $ne.i32($i696, 0);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($add.ref($p676, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p700 := $bitcast.ref.ref($p699);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p700, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.0, $p701);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i703 := $p2i.ref.i64($p702);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i704 := $ne.i64($i703, 0);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i704 == 1);
    assume {:verifier.code 0} true;
    $p705 := $0.ref;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i708 := $p2i.ref.i64($p705);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i709 := $ne.i64($i708, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i709 == 1);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb408:
    assume $i709 == 1;
    assume {:verifier.code 0} true;
    $p676 := $p705;
    goto $bb408_dummy;

  $bb405:
    assume $i704 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p706 := $bitcast.ref.ref($p702);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($p706, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p705 := $p707;
    goto $bb407;

  $bb401:
    assume {:verifier.code 0} true;
    assume $i697 == 1;
    goto $bb39;

  $bb399:
    assume {:verifier.code 0} true;
    assume $i690 == 1;
    goto $bb39;

  $bb396:
    assume $i682 == 1;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb388:
    assume $i670 == 1;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p672 := $bitcast.ref.ref($p668);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($p672, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p671 := $p673;
    goto $bb390;

  $bb367:
    assume $i633 == 1;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p634 := $p629;
    goto $bb370;

  $bb370:
    call $p634, $p635, $p636, $p637, $i638, $i639, $i640, $p641, $i642, $i643, $p644, $i645, $i646, $i647, $i648, $p649, $i650, $p651, $i652, $i653, $i654, $i655, $p657, $p658, $p659, $p660, $i661, $i662, $p664, $p665, $p663, $i666, $i667 := atmtcp_v_ioctl_loop_$bb370($p0, $p3, $p634, $p635, $p636, $p637, $i638, $i639, $i640, $p641, $i642, $i643, $p644, $i645, $i646, $i647, $i648, $p649, $i650, $p651, $i652, $i653, $i654, $i655, $p657, $p658, $p659, $p660, $i661, $i662, $p664, $p665, $p663, $i666, $i667);
    goto $bb370_last;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p635 := atm_sk($p634);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p635, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p637 := $load.ref($M.0, $p636);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i638 := $p2i.ref.i64($p637);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i639 := $p2i.ref.i64($p0);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i640 := $ne.i64($i638, $i639);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i640 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p635, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i642 := $load.i16($M.0, $p641);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i643 := $sext.i16.i32($i642);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i645 := $load.i8($M.0, $p644);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i646 := $sext.i8.i32($i645);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i647 := $ashr.i32($i643, $i646);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i648 := $ne.i32($i647, 0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i648 == 1);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p635, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i650 := $load.i32($M.0, $p649);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i652 := $load.i8($M.0, $p651);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i653 := $sext.i8.i32($i652);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i654 := $ashr.i32($i650, $i653);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i655 := $ne.i32($i654, 0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i655 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($p634, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p658 := $bitcast.ref.ref($p657);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($p658, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p660 := $load.ref($M.0, $p659);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i661 := $p2i.ref.i64($p660);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i662 := $ne.i64($i661, 0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i662 == 1);
    assume {:verifier.code 0} true;
    $p663 := $0.ref;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i666 := $p2i.ref.i64($p663);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i667 := $ne.i64($i666, 0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i667 == 1);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb384:
    assume $i667 == 1;
    assume {:verifier.code 0} true;
    $p634 := $p663;
    goto $bb384_dummy;

  $bb381:
    assume $i662 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p664 := $bitcast.ref.ref($p660);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($p664, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p663 := $p665;
    goto $bb383;

  $bb377:
    assume {:verifier.code 0} true;
    assume $i655 == 1;
    goto $bb39;

  $bb375:
    assume {:verifier.code 0} true;
    assume $i648 == 1;
    goto $bb39;

  $bb372:
    assume $i640 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb364:
    assume $i628 == 1;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p630 := $bitcast.ref.ref($p626);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($p630, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p629 := $p631;
    goto $bb366;

  $bb343:
    assume $i591 == 1;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p592 := $p587;
    goto $bb346;

  $bb346:
    call $p592, $p593, $p594, $p595, $i596, $i597, $i598, $p599, $i600, $i601, $p602, $i603, $i604, $i605, $i606, $p607, $i608, $p609, $i610, $i611, $i612, $i613, $p615, $p616, $p617, $p618, $i619, $i620, $p622, $p623, $p621, $i624, $i625 := atmtcp_v_ioctl_loop_$bb346($p0, $p3, $p592, $p593, $p594, $p595, $i596, $i597, $i598, $p599, $i600, $i601, $p602, $i603, $i604, $i605, $i606, $p607, $i608, $p609, $i610, $i611, $i612, $i613, $p615, $p616, $p617, $p618, $i619, $i620, $p622, $p623, $p621, $i624, $i625);
    goto $bb346_last;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p593 := atm_sk($p592);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p593, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p595 := $load.ref($M.0, $p594);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i596 := $p2i.ref.i64($p595);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i597 := $p2i.ref.i64($p0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i598 := $ne.i64($i596, $i597);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p593, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i600 := $load.i16($M.0, $p599);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i601 := $sext.i16.i32($i600);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i603 := $load.i8($M.0, $p602);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i604 := $sext.i8.i32($i603);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i605 := $ashr.i32($i601, $i604);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i606 := $ne.i32($i605, 0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i606 == 1);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p593, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i608 := $load.i32($M.0, $p607);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i610 := $load.i8($M.0, $p609);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i611 := $sext.i8.i32($i610);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i612 := $ashr.i32($i608, $i611);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i613 := $ne.i32($i612, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i613 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($add.ref($p592, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p616 := $bitcast.ref.ref($p615);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($p616, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p618 := $load.ref($M.0, $p617);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i619 := $p2i.ref.i64($p618);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i620 := $ne.i64($i619, 0);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i620 == 1);
    assume {:verifier.code 0} true;
    $p621 := $0.ref;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i624 := $p2i.ref.i64($p621);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i625 := $ne.i64($i624, 0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i625 == 1);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb360:
    assume $i625 == 1;
    assume {:verifier.code 0} true;
    $p592 := $p621;
    goto $bb360_dummy;

  $bb357:
    assume $i620 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p622 := $bitcast.ref.ref($p618);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($p622, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p621 := $p623;
    goto $bb359;

  $bb353:
    assume {:verifier.code 0} true;
    assume $i613 == 1;
    goto $bb39;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i606 == 1;
    goto $bb39;

  $bb348:
    assume $i598 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb340:
    assume $i586 == 1;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p588 := $bitcast.ref.ref($p584);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($p588, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p587 := $p589;
    goto $bb342;

  $bb319:
    assume $i549 == 1;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p550 := $p545;
    goto $bb322;

  $bb322:
    call $p550, $p551, $p552, $p553, $i554, $i555, $i556, $p557, $i558, $i559, $p560, $i561, $i562, $i563, $i564, $p565, $i566, $p567, $i568, $i569, $i570, $i571, $p573, $p574, $p575, $p576, $i577, $i578, $p580, $p581, $p579, $i582, $i583 := atmtcp_v_ioctl_loop_$bb322($p0, $p3, $p550, $p551, $p552, $p553, $i554, $i555, $i556, $p557, $i558, $i559, $p560, $i561, $i562, $i563, $i564, $p565, $i566, $p567, $i568, $i569, $i570, $i571, $p573, $p574, $p575, $p576, $i577, $i578, $p580, $p581, $p579, $i582, $i583);
    goto $bb322_last;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $p551 := atm_sk($p550);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p551, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p553 := $load.ref($M.0, $p552);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i554 := $p2i.ref.i64($p553);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i555 := $p2i.ref.i64($p0);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i556 := $ne.i64($i554, $i555);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p551, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i558 := $load.i16($M.0, $p557);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i559 := $sext.i16.i32($i558);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i561 := $load.i8($M.0, $p560);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i562 := $sext.i8.i32($i561);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i563 := $ashr.i32($i559, $i562);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i564 := $ne.i32($i563, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i564 == 1);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p551, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i566 := $load.i32($M.0, $p565);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i568 := $load.i8($M.0, $p567);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i569 := $sext.i8.i32($i568);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i570 := $ashr.i32($i566, $i569);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i571 := $ne.i32($i570, 0);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i571 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($add.ref($p550, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p574 := $bitcast.ref.ref($p573);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p574, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p576 := $load.ref($M.0, $p575);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i577 := $p2i.ref.i64($p576);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i578 := $ne.i64($i577, 0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i578 == 1);
    assume {:verifier.code 0} true;
    $p579 := $0.ref;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i582 := $p2i.ref.i64($p579);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i583 := $ne.i64($i582, 0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i583 == 1);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb336:
    assume $i583 == 1;
    assume {:verifier.code 0} true;
    $p550 := $p579;
    goto $bb336_dummy;

  $bb333:
    assume $i578 == 1;
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p580 := $bitcast.ref.ref($p576);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($p580, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p579 := $p581;
    goto $bb335;

  $bb329:
    assume {:verifier.code 0} true;
    assume $i571 == 1;
    goto $bb39;

  $bb327:
    assume {:verifier.code 0} true;
    assume $i564 == 1;
    goto $bb39;

  $bb324:
    assume $i556 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb316:
    assume $i544 == 1;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p546 := $bitcast.ref.ref($p542);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($p546, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p545 := $p547;
    goto $bb318;

  $bb295:
    assume $i507 == 1;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p508 := $p503;
    goto $bb298;

  $bb298:
    call $p508, $p509, $p510, $p511, $i512, $i513, $i514, $p515, $i516, $i517, $p518, $i519, $i520, $i521, $i522, $p523, $i524, $p525, $i526, $i527, $i528, $i529, $p531, $p532, $p533, $p534, $i535, $i536, $p538, $p539, $p537, $i540, $i541 := atmtcp_v_ioctl_loop_$bb298($p0, $p3, $p508, $p509, $p510, $p511, $i512, $i513, $i514, $p515, $i516, $i517, $p518, $i519, $i520, $i521, $i522, $p523, $i524, $p525, $i526, $i527, $i528, $i529, $p531, $p532, $p533, $p534, $i535, $i536, $p538, $p539, $p537, $i540, $i541);
    goto $bb298_last;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p509 := atm_sk($p508);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($p509, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p511 := $load.ref($M.0, $p510);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i512 := $p2i.ref.i64($p511);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i513 := $p2i.ref.i64($p0);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i514 := $ne.i64($i512, $i513);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p509, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i516 := $load.i16($M.0, $p515);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i517 := $sext.i16.i32($i516);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i519 := $load.i8($M.0, $p518);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i520 := $sext.i8.i32($i519);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i521 := $ashr.i32($i517, $i520);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i522 := $ne.i32($i521, 0);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i522 == 1);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p509, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i524 := $load.i32($M.0, $p523);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i526 := $load.i8($M.0, $p525);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i527 := $sext.i8.i32($i526);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i528 := $ashr.i32($i524, $i527);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i529 := $ne.i32($i528, 0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i529 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p508, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p532 := $bitcast.ref.ref($p531);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p532, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p534 := $load.ref($M.0, $p533);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i535 := $p2i.ref.i64($p534);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i536 := $ne.i64($i535, 0);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i536 == 1);
    assume {:verifier.code 0} true;
    $p537 := $0.ref;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i540 := $p2i.ref.i64($p537);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i541 := $ne.i64($i540, 0);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i541 == 1);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb312:
    assume $i541 == 1;
    assume {:verifier.code 0} true;
    $p508 := $p537;
    goto $bb312_dummy;

  $bb309:
    assume $i536 == 1;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p538 := $bitcast.ref.ref($p534);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($p538, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p537 := $p539;
    goto $bb311;

  $bb305:
    assume {:verifier.code 0} true;
    assume $i529 == 1;
    goto $bb39;

  $bb303:
    assume {:verifier.code 0} true;
    assume $i522 == 1;
    goto $bb39;

  $bb300:
    assume $i514 == 1;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb292:
    assume $i502 == 1;
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p504 := $bitcast.ref.ref($p500);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($p504, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p503 := $p505;
    goto $bb294;

  $bb271:
    assume $i465 == 1;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p466 := $p461;
    goto $bb274;

  $bb274:
    call $p466, $p467, $p468, $p469, $i470, $i471, $i472, $p473, $i474, $i475, $p476, $i477, $i478, $i479, $i480, $p481, $i482, $p483, $i484, $i485, $i486, $i487, $p489, $p490, $p491, $p492, $i493, $i494, $p496, $p497, $p495, $i498, $i499 := atmtcp_v_ioctl_loop_$bb274($p0, $p3, $p466, $p467, $p468, $p469, $i470, $i471, $i472, $p473, $i474, $i475, $p476, $i477, $i478, $i479, $i480, $p481, $i482, $p483, $i484, $i485, $i486, $i487, $p489, $p490, $p491, $p492, $i493, $i494, $p496, $p497, $p495, $i498, $i499);
    goto $bb274_last;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p467 := atm_sk($p466);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p467, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p469 := $load.ref($M.0, $p468);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i470 := $p2i.ref.i64($p469);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i471 := $p2i.ref.i64($p0);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i472 := $ne.i64($i470, $i471);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p467, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i474 := $load.i16($M.0, $p473);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i475 := $sext.i16.i32($i474);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i477 := $load.i8($M.0, $p476);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i478 := $sext.i8.i32($i477);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i479 := $ashr.i32($i475, $i478);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i480 := $ne.i32($i479, 0);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i480 == 1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p467, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i482 := $load.i32($M.0, $p481);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i484 := $load.i8($M.0, $p483);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i485 := $sext.i8.i32($i484);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i486 := $ashr.i32($i482, $i485);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i487 := $ne.i32($i486, 0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p466, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p490 := $bitcast.ref.ref($p489);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p490, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.0, $p491);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i493 := $p2i.ref.i64($p492);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i494 := $ne.i64($i493, 0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    $p495 := $0.ref;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i498 := $p2i.ref.i64($p495);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i499 := $ne.i64($i498, 0);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i499 == 1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb288:
    assume $i499 == 1;
    assume {:verifier.code 0} true;
    $p466 := $p495;
    goto $bb288_dummy;

  $bb285:
    assume $i494 == 1;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p496 := $bitcast.ref.ref($p492);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($p496, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p495 := $p497;
    goto $bb287;

  $bb281:
    assume {:verifier.code 0} true;
    assume $i487 == 1;
    goto $bb39;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i480 == 1;
    goto $bb39;

  $bb276:
    assume $i472 == 1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb268:
    assume $i460 == 1;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p462 := $bitcast.ref.ref($p458);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($p462, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p461 := $p463;
    goto $bb270;

  $bb247:
    assume $i423 == 1;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p424 := $p419;
    goto $bb250;

  $bb250:
    call $p424, $p425, $p426, $p427, $i428, $i429, $i430, $p431, $i432, $i433, $p434, $i435, $i436, $i437, $i438, $p439, $i440, $p441, $i442, $i443, $i444, $i445, $p447, $p448, $p449, $p450, $i451, $i452, $p454, $p455, $p453, $i456, $i457 := atmtcp_v_ioctl_loop_$bb250($p0, $p3, $p424, $p425, $p426, $p427, $i428, $i429, $i430, $p431, $i432, $i433, $p434, $i435, $i436, $i437, $i438, $p439, $i440, $p441, $i442, $i443, $i444, $i445, $p447, $p448, $p449, $p450, $i451, $i452, $p454, $p455, $p453, $i456, $i457);
    goto $bb250_last;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p425 := atm_sk($p424);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p425, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.0, $p426);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i428 := $p2i.ref.i64($p427);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i429 := $p2i.ref.i64($p0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i430 := $ne.i64($i428, $i429);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p425, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i432 := $load.i16($M.0, $p431);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i433 := $sext.i16.i32($i432);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i435 := $load.i8($M.0, $p434);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i436 := $sext.i8.i32($i435);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i437 := $ashr.i32($i433, $i436);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i438 := $ne.i32($i437, 0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i438 == 1);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p425, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i440 := $load.i32($M.0, $p439);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i442 := $load.i8($M.0, $p441);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i443 := $sext.i8.i32($i442);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i444 := $ashr.i32($i440, $i443);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i445 := $ne.i32($i444, 0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p424, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p448 := $bitcast.ref.ref($p447);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p448, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p450 := $load.ref($M.0, $p449);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i451 := $p2i.ref.i64($p450);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i452 := $ne.i64($i451, 0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    $p453 := $0.ref;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i456 := $p2i.ref.i64($p453);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i457 := $ne.i64($i456, 0);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i457 == 1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb264:
    assume $i457 == 1;
    assume {:verifier.code 0} true;
    $p424 := $p453;
    goto $bb264_dummy;

  $bb261:
    assume $i452 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p454 := $bitcast.ref.ref($p450);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($p454, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p453 := $p455;
    goto $bb263;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i445 == 1;
    goto $bb39;

  $bb255:
    assume {:verifier.code 0} true;
    assume $i438 == 1;
    goto $bb39;

  $bb252:
    assume $i430 == 1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb244:
    assume $i418 == 1;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p420 := $bitcast.ref.ref($p416);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($p420, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p419 := $p421;
    goto $bb246;

  $bb223:
    assume $i381 == 1;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p382 := $p377;
    goto $bb226;

  $bb226:
    call $p382, $p383, $p384, $p385, $i386, $i387, $i388, $p389, $i390, $i391, $p392, $i393, $i394, $i395, $i396, $p397, $i398, $p399, $i400, $i401, $i402, $i403, $p405, $p406, $p407, $p408, $i409, $i410, $p412, $p413, $p411, $i414, $i415 := atmtcp_v_ioctl_loop_$bb226($p0, $p3, $p382, $p383, $p384, $p385, $i386, $i387, $i388, $p389, $i390, $i391, $p392, $i393, $i394, $i395, $i396, $p397, $i398, $p399, $i400, $i401, $i402, $i403, $p405, $p406, $p407, $p408, $i409, $i410, $p412, $p413, $p411, $i414, $i415);
    goto $bb226_last;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p383 := atm_sk($p382);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p383, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p385 := $load.ref($M.0, $p384);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i386 := $p2i.ref.i64($p385);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i387 := $p2i.ref.i64($p0);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i388 := $ne.i64($i386, $i387);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p383, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i390 := $load.i16($M.0, $p389);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i391 := $sext.i16.i32($i390);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i393 := $load.i8($M.0, $p392);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i394 := $sext.i8.i32($i393);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i395 := $ashr.i32($i391, $i394);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i396 := $ne.i32($i395, 0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i396 == 1);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p383, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i398 := $load.i32($M.0, $p397);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i400 := $load.i8($M.0, $p399);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i401 := $sext.i8.i32($i400);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i402 := $ashr.i32($i398, $i401);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i403 := $ne.i32($i402, 0);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p406 := $bitcast.ref.ref($p405);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p406, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p408 := $load.ref($M.0, $p407);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i409 := $p2i.ref.i64($p408);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i410 := $ne.i64($i409, 0);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    $p411 := $0.ref;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i414 := $p2i.ref.i64($p411);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i415 := $ne.i64($i414, 0);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i415 == 1);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb240:
    assume $i415 == 1;
    assume {:verifier.code 0} true;
    $p382 := $p411;
    goto $bb240_dummy;

  $bb237:
    assume $i410 == 1;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p412 := $bitcast.ref.ref($p408);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($p412, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p411 := $p413;
    goto $bb239;

  $bb233:
    assume {:verifier.code 0} true;
    assume $i403 == 1;
    goto $bb39;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i396 == 1;
    goto $bb39;

  $bb228:
    assume $i388 == 1;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb220:
    assume $i376 == 1;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p378 := $bitcast.ref.ref($p374);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($p378, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p377 := $p379;
    goto $bb222;

  $bb199:
    assume $i339 == 1;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p340 := $p335;
    goto $bb202;

  $bb202:
    call $p340, $p341, $p342, $p343, $i344, $i345, $i346, $p347, $i348, $i349, $p350, $i351, $i352, $i353, $i354, $p355, $i356, $p357, $i358, $i359, $i360, $i361, $p363, $p364, $p365, $p366, $i367, $i368, $p370, $p371, $p369, $i372, $i373 := atmtcp_v_ioctl_loop_$bb202($p0, $p3, $p340, $p341, $p342, $p343, $i344, $i345, $i346, $p347, $i348, $i349, $p350, $i351, $i352, $i353, $i354, $p355, $i356, $p357, $i358, $i359, $i360, $i361, $p363, $p364, $p365, $p366, $i367, $i368, $p370, $p371, $p369, $i372, $i373);
    goto $bb202_last;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p341 := atm_sk($p340);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p341, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.0, $p342);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i344 := $p2i.ref.i64($p343);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i346 := $ne.i64($i344, $i345);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p341, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i348 := $load.i16($M.0, $p347);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i349 := $sext.i16.i32($i348);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i351 := $load.i8($M.0, $p350);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i352 := $sext.i8.i32($i351);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i353 := $ashr.i32($i349, $i352);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i354 := $ne.i32($i353, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i354 == 1);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p341, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i356 := $load.i32($M.0, $p355);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i358 := $load.i8($M.0, $p357);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i359 := $sext.i8.i32($i358);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i360 := $ashr.i32($i356, $i359);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p340, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p364 := $bitcast.ref.ref($p363);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p364, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.0, $p365);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i367 := $p2i.ref.i64($p366);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i368 := $ne.i64($i367, 0);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    $p369 := $0.ref;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i372 := $p2i.ref.i64($p369);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i373 := $ne.i64($i372, 0);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i373 == 1);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb216:
    assume $i373 == 1;
    assume {:verifier.code 0} true;
    $p340 := $p369;
    goto $bb216_dummy;

  $bb213:
    assume $i368 == 1;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p366);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($p370, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p369 := $p371;
    goto $bb215;

  $bb209:
    assume {:verifier.code 0} true;
    assume $i361 == 1;
    goto $bb39;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i354 == 1;
    goto $bb39;

  $bb204:
    assume $i346 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb196:
    assume $i334 == 1;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p336 := $bitcast.ref.ref($p332);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($p336, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p335 := $p337;
    goto $bb198;

  $bb175:
    assume $i297 == 1;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p298 := $p293;
    goto $bb178;

  $bb178:
    call $p298, $p299, $p300, $p301, $i302, $i303, $i304, $p305, $i306, $i307, $p308, $i309, $i310, $i311, $i312, $p313, $i314, $p315, $i316, $i317, $i318, $i319, $p321, $p322, $p323, $p324, $i325, $i326, $p328, $p329, $p327, $i330, $i331 := atmtcp_v_ioctl_loop_$bb178($p0, $p3, $p298, $p299, $p300, $p301, $i302, $i303, $i304, $p305, $i306, $i307, $p308, $i309, $i310, $i311, $i312, $p313, $i314, $p315, $i316, $i317, $i318, $i319, $p321, $p322, $p323, $p324, $i325, $i326, $p328, $p329, $p327, $i330, $i331);
    goto $bb178_last;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p299 := atm_sk($p298);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p299, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p301 := $load.ref($M.0, $p300);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i302 := $p2i.ref.i64($p301);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p0);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i304 := $ne.i64($i302, $i303);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p299, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i306 := $load.i16($M.0, $p305);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i307 := $sext.i16.i32($i306);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.0, $p308);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i310 := $sext.i8.i32($i309);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i311 := $ashr.i32($i307, $i310);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i312 := $ne.i32($i311, 0);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i312 == 1);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p299, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.0, $p313);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i316 := $load.i8($M.0, $p315);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i317 := $sext.i8.i32($i316);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i318 := $ashr.i32($i314, $i317);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i319 := $ne.i32($i318, 0);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($p298, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p322 := $bitcast.ref.ref($p321);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p322, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p324 := $load.ref($M.0, $p323);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i325 := $p2i.ref.i64($p324);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i326 := $ne.i64($i325, 0);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    $p327 := $0.ref;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i330 := $p2i.ref.i64($p327);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i331 := $ne.i64($i330, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i331 == 1);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb192:
    assume $i331 == 1;
    assume {:verifier.code 0} true;
    $p298 := $p327;
    goto $bb192_dummy;

  $bb189:
    assume $i326 == 1;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p328 := $bitcast.ref.ref($p324);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($p328, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p327 := $p329;
    goto $bb191;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i319 == 1;
    goto $bb39;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i312 == 1;
    goto $bb39;

  $bb180:
    assume $i304 == 1;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb172:
    assume $i292 == 1;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p294 := $bitcast.ref.ref($p290);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($p294, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p293 := $p295;
    goto $bb174;

  $bb151:
    assume $i255 == 1;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p256 := $p251;
    goto $bb154;

  $bb154:
    call $p256, $p257, $p258, $p259, $i260, $i261, $i262, $p263, $i264, $i265, $p266, $i267, $i268, $i269, $i270, $p271, $i272, $p273, $i274, $i275, $i276, $i277, $p279, $p280, $p281, $p282, $i283, $i284, $p286, $p287, $p285, $i288, $i289 := atmtcp_v_ioctl_loop_$bb154($p0, $p3, $p256, $p257, $p258, $p259, $i260, $i261, $i262, $p263, $i264, $i265, $p266, $i267, $i268, $i269, $i270, $p271, $i272, $p273, $i274, $i275, $i276, $i277, $p279, $p280, $p281, $p282, $i283, $i284, $p286, $p287, $p285, $i288, $i289);
    goto $bb154_last;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p257 := atm_sk($p256);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p257, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p259);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p0);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i260, $i261);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p257, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i264 := $load.i16($M.0, $p263);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i265 := $sext.i16.i32($i264);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i267 := $load.i8($M.0, $p266);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i268 := $sext.i8.i32($i267);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i269 := $ashr.i32($i265, $i268);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i269, 0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i270 == 1);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p257, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.0, $p273);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i275 := $sext.i8.i32($i274);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i276 := $ashr.i32($i272, $i275);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p256, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p280 := $bitcast.ref.ref($p279);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p280, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i283 := $p2i.ref.i64($p282);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i284 := $ne.i64($i283, 0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    $p285 := $0.ref;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i288 := $p2i.ref.i64($p285);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i289 := $ne.i64($i288, 0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i289 == 1);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb168:
    assume $i289 == 1;
    assume {:verifier.code 0} true;
    $p256 := $p285;
    goto $bb168_dummy;

  $bb165:
    assume $i284 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p282);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($p286, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p285 := $p287;
    goto $bb167;

  $bb161:
    assume {:verifier.code 0} true;
    assume $i277 == 1;
    goto $bb39;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i270 == 1;
    goto $bb39;

  $bb156:
    assume $i262 == 1;
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb148:
    assume $i250 == 1;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p248);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($p252, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p251 := $p253;
    goto $bb150;

  $bb127:
    assume $i213 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p214 := $p209;
    goto $bb130;

  $bb130:
    call $p214, $p215, $p216, $p217, $i218, $i219, $i220, $p221, $i222, $i223, $p224, $i225, $i226, $i227, $i228, $p229, $i230, $p231, $i232, $i233, $i234, $i235, $p237, $p238, $p239, $p240, $i241, $i242, $p244, $p245, $p243, $i246, $i247 := atmtcp_v_ioctl_loop_$bb130($p0, $p3, $p214, $p215, $p216, $p217, $i218, $i219, $i220, $p221, $i222, $i223, $p224, $i225, $i226, $i227, $i228, $p229, $i230, $p231, $i232, $i233, $i234, $i235, $p237, $p238, $p239, $p240, $i241, $i242, $p244, $p245, $p243, $i246, $i247);
    goto $bb130_last;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p215 := atm_sk($p214);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p215, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p217);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i220 := $ne.i64($i218, $i219);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p215, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i222 := $load.i16($M.0, $p221);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i223 := $sext.i16.i32($i222);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i225 := $load.i8($M.0, $p224);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i226 := $sext.i8.i32($i225);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i227 := $ashr.i32($i223, $i226);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i228 := $ne.i32($i227, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i228 == 1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p215, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.0, $p229);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i232 := $load.i8($M.0, $p231);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i233 := $sext.i8.i32($i232);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i234 := $ashr.i32($i230, $i233);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i235 := $ne.i32($i234, 0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p238 := $bitcast.ref.ref($p237);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i241 := $p2i.ref.i64($p240);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i242 := $ne.i64($i241, 0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    $p243 := $0.ref;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i246 := $p2i.ref.i64($p243);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i247 := $ne.i64($i246, 0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i247 == 1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb144:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    $p214 := $p243;
    goto $bb144_dummy;

  $bb141:
    assume $i242 == 1;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p240);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($p244, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p243 := $p245;
    goto $bb143;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i235 == 1;
    goto $bb39;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb39;

  $bb132:
    assume $i220 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb124:
    assume $i208 == 1;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p206);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p210, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p209 := $p211;
    goto $bb126;

  $bb103:
    assume $i171 == 1;
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p172 := $p167;
    goto $bb106;

  $bb106:
    call $p172, $p173, $p174, $p175, $i176, $i177, $i178, $p179, $i180, $i181, $p182, $i183, $i184, $i185, $i186, $p187, $i188, $p189, $i190, $i191, $i192, $i193, $p195, $p196, $p197, $p198, $i199, $i200, $p202, $p203, $p201, $i204, $i205 := atmtcp_v_ioctl_loop_$bb106($p0, $p3, $p172, $p173, $p174, $p175, $i176, $i177, $i178, $p179, $i180, $i181, $p182, $i183, $i184, $i185, $i186, $p187, $i188, $p189, $i190, $i191, $i192, $i193, $p195, $p196, $p197, $p198, $i199, $i200, $p202, $p203, $p201, $i204, $i205);
    goto $bb106_last;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p173 := atm_sk($p172);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p0);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i178 := $ne.i64($i176, $i177);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p173, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i180 := $load.i16($M.0, $p179);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i181 := $sext.i16.i32($i180);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.0, $p182);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i184 := $sext.i8.i32($i183);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i185 := $ashr.i32($i181, $i184);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i186 == 1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p173, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p187);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.0, $p189);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i191 := $sext.i8.i32($i190);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i192 := $ashr.i32($i188, $i191);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p172, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p196, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p198);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i200 := $ne.i64($i199, 0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    $p201 := $0.ref;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i204 := $p2i.ref.i64($p201);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i205 := $ne.i64($i204, 0);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i205 == 1);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb120:
    assume $i205 == 1;
    assume {:verifier.code 0} true;
    $p172 := $p201;
    goto $bb120_dummy;

  $bb117:
    assume $i200 == 1;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p198);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p202, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p201 := $p203;
    goto $bb119;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i193 == 1;
    goto $bb39;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb39;

  $bb108:
    assume $i178 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb100:
    assume $i166 == 1;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p164);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p167 := $p169;
    goto $bb102;

  $bb79:
    assume $i129 == 1;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p130 := $p125;
    goto $bb82;

  $bb82:
    call $p130, $p131, $p132, $p133, $i134, $i135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $p145, $i146, $p147, $i148, $i149, $i150, $i151, $p153, $p154, $p155, $p156, $i157, $i158, $p160, $p161, $p159, $i162, $i163 := atmtcp_v_ioctl_loop_$bb82($p0, $p3, $p130, $p131, $p132, $p133, $i134, $i135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $p145, $i146, $p147, $i148, $i149, $i150, $i151, $p153, $p154, $p155, $p156, $i157, $i158, $p160, $p161, $p159, $i162, $i163);
    goto $bb82_last;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p131 := atm_sk($p130);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i134, $i135);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p131, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i138 := $load.i16($M.0, $p137);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i139 := $sext.i16.i32($i138);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.0, $p140);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i142 := $sext.i8.i32($i141);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i143 := $ashr.i32($i139, $i142);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i144 == 1);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p131, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.0, $p147);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i149 := $sext.i8.i32($i148);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i150 := $ashr.i32($i146, $i149);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p130, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    $p159 := $0.ref;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p159);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i163 := $ne.i64($i162, 0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i163 == 1);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb96:
    assume $i163 == 1;
    assume {:verifier.code 0} true;
    $p130 := $p159;
    goto $bb96_dummy;

  $bb93:
    assume $i158 == 1;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p156);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p160, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p159 := $p161;
    goto $bb95;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i151 == 1;
    goto $bb39;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb39;

  $bb84:
    assume $i136 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb76:
    assume $i124 == 1;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p122);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p125 := $p127;
    goto $bb78;

  $bb55:
    assume $i87 == 1;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p88 := $p83;
    goto $bb58;

  $bb58:
    call $p88, $p89, $p90, $p91, $i92, $i93, $i94, $p95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $p103, $i104, $p105, $i106, $i107, $i108, $i109, $p111, $p112, $p113, $p114, $i115, $i116, $p118, $p119, $p117, $i120, $i121 := atmtcp_v_ioctl_loop_$bb58($p0, $p3, $p88, $p89, $p90, $p91, $i92, $i93, $i94, $p95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $p103, $i104, $p105, $i106, $i107, $i108, $i109, $p111, $p112, $p113, $p114, $i115, $i116, $p118, $p119, $p117, $i120, $i121);
    goto $bb58_last;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p89 := atm_sk($p88);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i92, $i93);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p89, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.0, $p95);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i97 := $sext.i16.i32($i96);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i100 := $sext.i8.i32($i99);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i101 := $ashr.i32($i97, $i100);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i102 == 1);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p89, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i107 := $sext.i8.i32($i106);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i108 := $ashr.i32($i104, $i107);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $p117 := $0.ref;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p117);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, 0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i121 == 1);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb72:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $p88 := $p117;
    goto $bb72_dummy;

  $bb69:
    assume $i116 == 1;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p114);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p118, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p117 := $p119;
    goto $bb71;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb39;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb39;

  $bb60:
    assume $i94 == 1;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb52:
    assume $i82 == 1;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p80);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p83 := $p85;
    goto $bb54;

  $bb29:
    assume $i42 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p43 := $p40;
    goto $bb32;

  $bb32:
    call $p44, $p45, $p46, $i47, $i48, $i49, $p50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $i63, $i64, $p66, $p67, $p68, $p69, $i70, $i71, $p72, $p73, $p74, $i75, $i76, $p43 := atmtcp_v_ioctl_loop_$bb32($p0, $p3, $p44, $p45, $p46, $i47, $i48, $i49, $p50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $i63, $i64, $p66, $p67, $p68, $p69, $i70, $i71, $p72, $p73, $p74, $i75, $i76, $p43);
    goto $bb32_last;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p44 := atm_sk($p43);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p0);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i47, $i48);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p44, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i52 := $sext.i16.i32($i51);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i55 := $sext.i8.i32($i54);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i56 := $ashr.i32($i52, $i55);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i57 == 1);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p44, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i62 := $sext.i8.i32($i61);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i63 := $ashr.i32($i59, $i62);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $p74 := $0.ref;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i76 == 1);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb47:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $p43 := $p74;
    goto $bb47_dummy;

  $bb44:
    assume $i71 == 1;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p69);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p74 := $p73;
    goto $bb46;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb39;

  $bb34:
    assume $i49 == 1;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i37 == 1;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p35);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p40 := $p39;
    goto $bb28;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb15;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 16);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 8);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 515);
    goto $bb3;

  $bb792_dummy:
    assume false;
    return;

  $bb778_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2029;

  $bb768_dummy:
    assume false;
    return;

  $bb754_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1969;

  $bb744_dummy:
    assume false;
    return;

  $bb730_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1909;

  $bb720_dummy:
    assume false;
    return;

  $bb706_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  $bb696_dummy:
    assume false;
    return;

  $bb682_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1789;

  $bb672_dummy:
    assume false;
    return;

  $bb658_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  $bb648_dummy:
    assume false;
    return;

  $bb634_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  $bb624_dummy:
    assume false;
    return;

  $bb610_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1609;

  $bb600_dummy:
    assume false;
    return;

  $bb586_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1549;

  $bb576_dummy:
    assume false;
    return;

  $bb562_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1489;

  $bb552_dummy:
    assume false;
    return;

  $bb538_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  $bb528_dummy:
    assume false;
    return;

  $bb514_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1369;

  $bb504_dummy:
    assume false;
    return;

  $bb490_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  $bb480_dummy:
    assume false;
    return;

  $bb466_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;

  $bb456_dummy:
    assume false;
    return;

  $bb442_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1189;

  $bb432_dummy:
    assume false;
    return;

  $bb418_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1129;

  $bb408_dummy:
    assume false;
    return;

  $bb394_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  $bb384_dummy:
    assume false;
    return;

  $bb370_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1009;

  $bb360_dummy:
    assume false;
    return;

  $bb346_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_949;

  $bb336_dummy:
    assume false;
    return;

  $bb322_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  $bb312_dummy:
    assume false;
    return;

  $bb298_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_829;

  $bb288_dummy:
    assume false;
    return;

  $bb274_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  $bb264_dummy:
    assume false;
    return;

  $bb250_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_709;

  $bb240_dummy:
    assume false;
    return;

  $bb226_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_649;

  $bb216_dummy:
    assume false;
    return;

  $bb202_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_589;

  $bb192_dummy:
    assume false;
    return;

  $bb178_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_529;

  $bb168_dummy:
    assume false;
    return;

  $bb154_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_469;

  $bb144_dummy:
    assume false;
    return;

  $bb130_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_409;

  $bb120_dummy:
    assume false;
    return;

  $bb106_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_349;

  $bb96_dummy:
    assume false;
    return;

  $bb82_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_289;

  $bb72_dummy:
    assume false;
    return;

  $bb58_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_229;

  $bb47_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_161;
}



const atmtcp_v_send: ref;

axiom atmtcp_v_send == $sub.ref(0, 41192);

procedure atmtcp_v_send($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atmtcp_v_send($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i16;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i16;
  var $i68: i16;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p19);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p24);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 8);
    call {:si_unique_call 73} {:cexpr "size"} boogie_si_record_i32($i42);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p43 := atm_alloc_charge($p24, $i42, 32);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p55 := skb_put($p43, 8);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i61 := __fswab16($i60);
    call {:si_unique_call 80} {:cexpr "tmp___0"} boogie_si_record_i16($i61);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p56, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, $i61);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i68 := __fswab16($i67);
    call {:si_unique_call 82} {:cexpr "tmp___1"} boogie_si_record_i16($i68);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p56, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i68);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i72 := __fswab32($i71);
    call {:si_unique_call 84} {:cexpr "tmp___2"} boogie_si_record_i32($i72);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p56, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i72);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p76 := skb_put($p43, $i75);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} skb_copy_from_linear_data($p1, $p76, $i78);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i82 == 1);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} consume_skb($p1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p24, $mul.ref(0, 1648)), $mul.ref(1472, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    call {:si_unique_call 89} devirtbounce($p86, $p24, $p43);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} atomic_inc($p89);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p24, $mul.ref(0, 1648)), $mul.ref(1520, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} atomic_inc($p92);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    call {:si_unique_call 87} devirtbounce($p84, $p0, $p1);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i49 == 1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} consume_skb($p1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} atomic_inc($p54);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 105);
    goto $bb6;

  $bb25:
    assume $i49 == 1;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    call {:si_unique_call 75} devirtbounce($p51, $p0, $p1);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} consume_skb($p1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p19);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} atomic_inc($p39);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 67);
    goto $bb6;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 70} devirtbounce($p34, $p0, $p1);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb12;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb10;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} consume_skb($p1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 68} devirtbounce($p13, $p0, $p1);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atmtcp_v_proc: ref;

axiom atmtcp_v_proc == $sub.ref(0, 42224);

procedure atmtcp_v_proc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atmtcp_v_proc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p17 := (if $i16 == 1 then .str.6 else .str.7);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i18 := sprintf.ref.ref.ref($p2, .str.5, $p17);
    call {:si_unique_call 95} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i8 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i12 := sprintf.ref.ref($p2, .str.4);
    call {:si_unique_call 93} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 43256);

procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 44288);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 45320);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 96} devirtbounce.1(0, $p1, $p1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    return;
}



const atm_alloc_charge: ref;

axiom atm_alloc_charge == $sub.ref(0, 46352);

procedure atm_alloc_charge($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation atm_alloc_charge($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} {:cexpr "atm_alloc_charge:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 98} {:cexpr "atm_alloc_charge:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p3 := external_alloc();
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 47384);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p2 := external_alloc();
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 48416);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 49448);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i1 := __arch_swab32($i0);
    call {:si_unique_call 105} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_copy_from_linear_data: ref;

axiom skb_copy_from_linear_data == $sub.ref(0, 50480);

procedure skb_copy_from_linear_data($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_copy_from_linear_data($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "skb_copy_from_linear_data:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i2);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 107} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p1, $p4, $i5, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 51512);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 52544);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 109} $i1 := devirtbounce.2(0, $i0);
    call {:si_unique_call 110} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 53576);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 1} true;
    call {:si_unique_call 111} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 112} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 54608);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 115} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 116} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} __might_fault(.str.8, 697);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 119} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 121} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const _raw_read_lock: ref;

axiom _raw_read_lock == $sub.ref(0, 55640);

procedure _raw_read_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_read_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    return;
}



const atm_sk: ref;

axiom atm_sk == $sub.ref(0, 56672);

procedure atm_sk($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation atm_sk($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const _raw_read_unlock: ref;

axiom _raw_read_unlock == $sub.ref(0, 57704);

procedure _raw_read_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_read_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 58736);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 59768);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 60800);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 125} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 61832);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 126} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 62864);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 63896);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 64928);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 130} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    return;
}



const atmtcp_send_control: ref;

axiom atmtcp_send_control == $sub.ref(0, 65960);

procedure atmtcp_send_control($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.1, $M.8, $M.7, $CurrAddr;



implementation atmtcp_send_control($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i32;
  var $i100: i1;
  var $i92: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $i32: i32;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 134} {:cexpr "atmtcp_send_control:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 135} {:cexpr "atmtcp_send_control:arg:flag"} boogie_si_record_i32($i3);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p7 := get_current();
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p8, 0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, $p7);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, default_wake_function);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, $0.ref);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, $0.ref);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p29 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p33 := alloc_skb(120, 208);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call {:si_unique_call 138} devirtbounce.4(0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p49 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p33, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} atm_force_charge($p49, $i53);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p54 := skb_put($p33, 120);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p2);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 142} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p56, $p57, 128, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $sub.i32(0, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p55, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i1);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p55, $mul.ref(0, 128)), $mul.ref(12, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 143} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p62, 0, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p55, $mul.ref(0, 128)), $mul.ref(12, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p0);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i3);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i67 := variable_test_bit($i65, $p66);
    call {:si_unique_call 145} {:cexpr "old_test"} boogie_si_record_i32($i67);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p49, $mul.ref(0, 1648)), $mul.ref(1472, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    call {:si_unique_call 146} devirtbounce($p69, $p49, $p33);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p70 := sk_atm($p0);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p71 := sk_sleep($p70);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} add_wait_queue($p71, $p4);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i3);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i74 := variable_test_bit($i72, $p73);
    call {:si_unique_call 151} {:cexpr "tmp___8"} boogie_si_record_i32($i74);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, $i67);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i92 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p101 := get_current();
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p102, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $M.8 := $store.i64($M.8, $p6, 0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $p103 := get_current();
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.8, $p6);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p103, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 155} $i106 := devirtbounce.5(0, $p105, $i104, $p105);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.8 := $store.i64($M.8, $p6, $i106);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p107 := sk_atm($p0);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p108 := sk_sleep($p107);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} remove_wait_queue($p108, $p4);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i32 := $i92;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb17:
    assume $i75 == 1;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call $p76, $p77, $p78, $p79, $i80, $i81, $p82, $p83, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $p93, $p94, $p95, $i96, $p97, $i98, $i99, $i100 := atmtcp_send_control_loop_$bb20($p0, $p5, $i67, $i72, $p73, $p76, $p77, $p78, $p79, $i80, $i81, $p82, $p83, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $p93, $p94, $p95, $i96, $p97, $i98, $i99, $i100);
    goto $bb20_last;

  $bb21:
    call {:si_unique_call 152} devirtbounce.4(0);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i81 == 1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p89 := $0.ref;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i91 := $eq.i64($i90, 0);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p93 := get_current();
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p94, 0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p5, 2);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p95 := get_current();
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.7, $p5);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p95, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 158} $i98 := devirtbounce.5(0, $p97, $i96, $p97);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p5, $i98);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} schedule();
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i99 := variable_test_bit($i72, $p73);
    call {:si_unique_call 161} {:cexpr "tmp___8"} boogie_si_record_i32($i99);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, $i67);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i100 == 1);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb30_dummy;

  $bb25:
    assume $i91 == 1;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 49);
    goto $bb27;

  $bb22:
    assume $i81 == 1;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p89 := $p88;
    goto $bb24;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} consume_skb($p33);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 49);
    goto $bb6;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p49 := $p48;
    goto $bb13;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 12);
    goto $bb6;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 49);
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p29 := $p28;
    goto $bb3;

  $bb30_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 66992);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p0 := devirtbounce.6(0, current_task);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 68024);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const alloc_skb: ref;

axiom alloc_skb == $sub.ref(0, 69056);

procedure alloc_skb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_skb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} {:cexpr "alloc_skb:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 167} {:cexpr "alloc_skb:arg:priority"} boogie_si_record_i32($i1);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p2 := __alloc_skb($i0, $i1, 0, $sub.i32(0, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const atm_force_charge: ref;

axiom atm_force_charge == $sub.ref(0, 70088);

procedure atm_force_charge($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation atm_force_charge($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} {:cexpr "atm_force_charge:arg:truesize"} boogie_si_record_i32($i1);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p2 := sk_atm($p0);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1288)), $mul.ref(432, 1)), $mul.ref(0, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} atomic_add($i1, $p4);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 71120);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 173} $i2 := devirtbounce.7(0, $p1, $i0);
    call {:si_unique_call 174} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sk_atm: ref;

axiom sk_atm == $sub.ref(0, 72152);

procedure sk_atm($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sk_atm($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const sk_sleep: ref;

axiom sk_sleep == $sub.ref(0, 73184);

procedure sk_sleep($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sk_sleep($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(496, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} __read_once_size($p3, $p5, 8);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i8 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 178} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;
}



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 74216);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 75248);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 76280);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    return;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 77312);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    call {:si_unique_call 179} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 180} devirtbounce.4(0);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 181} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    call {:si_unique_call 182} devirtbounce.4(0);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p0);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 78344);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 183} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 184} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const atomic_add: ref;

axiom atomic_add == $sub.ref(0, 79376);

procedure atomic_add($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation atomic_add($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} {:cexpr "atomic_add:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 186} devirtbounce.8(0, $p2, $i0, $p2);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_skb: ref;

axiom __alloc_skb == $sub.ref(0, 80408);

procedure __alloc_skb($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_skb($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} {:cexpr "__alloc_skb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 188} {:cexpr "__alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 189} {:cexpr "__alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 190} {:cexpr "__alloc_skb:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p4 := external_alloc();
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 81440);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 193} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    return;
}



const atmtcp_c_close: ref;

axiom atmtcp_c_close == $sub.ref(0, 82472);

procedure atmtcp_c_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, assertsPassed;



implementation atmtcp_c_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1504, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p6);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} kfree($p12);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} ldv_atm_dev_deregister_5($p3);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1504, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} ldv_module_put_6(__this_module);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atmtcp_c_send: ref;

axiom atmtcp_c_send == $sub.ref(0, 83504);

procedure atmtcp_c_send($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $CurrAddr;



implementation atmtcp_c_send($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i16;
  var $i24: i16;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i16;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i19: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i5: i32;
  var vslice_dummy_var_41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1504, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} _raw_read_lock(vcc_sklist_lock);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i24 := __fswab16($i23);
    call {:si_unique_call 201} {:cexpr "tmp"} boogie_si_record_i16($i24);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i29 := __fswab16($i28);
    call {:si_unique_call 203} {:cexpr "tmp___0"} boogie_si_record_i16($i29);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i30 := $sext.i16.i32($i29);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i24);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $p33 := find_vcc($p8, $i31, $i32);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} _raw_read_unlock(vcc_sklist_lock);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} vslice_dummy_var_41 := skb_pull($p1, 8);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p42 := atm_alloc_charge($p33, $i41, 208);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} __net_timestamp($p42);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $p47 := skb_put($p42, $i46);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} skb_copy_from_linear_data($p1, $p47, $i49);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p33, $mul.ref(0, 1648)), $mul.ref(1472, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    call {:si_unique_call 212} devirtbounce($p51, $p33, $p42);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} atomic_inc($p54);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p33, $mul.ref(0, 1648)), $mul.ref(1520, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} atomic_inc($p57);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i61 == 1);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} consume_skb($p1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i5 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb15:
    assume $i61 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    call {:si_unique_call 215} devirtbounce($p63, $p0, $p1);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 105);
    goto $bb7;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} atomic_inc($p38);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 49);
    goto $bb7;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i18 := atmtcp_recv_control($p17);
    call {:si_unique_call 198} {:cexpr "result"} boogie_si_record_i32($i18);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const atmtcp_recv_control: ref;

axiom atmtcp_recv_control == $sub.ref(0, 84536);

procedure atmtcp_recv_control($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation atmtcp_recv_control($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p34: ref;
  var $p35: ref;
  var $i33: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(12, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $i7);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1328, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p15);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 217} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p16, $p17, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p18 := sk_atm($p3);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, $i20);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 1288)), $mul.ref(968, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_42 := printk.ref.i32(.str.9, $i31);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} change_bit(0, $p29);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p34 := sk_atm($p3);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $p35 := sk_sleep($p34);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} __wake_up($p35, 3, 1, $0.ref);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb11;

  $bb2:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb6;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} change_bit(1, $p28);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const find_vcc: ref;

axiom find_vcc == $sub.ref(0, 85568);

procedure find_vcc($p0: ref, $i1: i16, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation find_vcc($p0: ref, $i1: i16, $i2: i32) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p15: ref;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} {:cexpr "find_vcc:arg:vpi"} boogie_si_record_i16($i1);
    call {:si_unique_call 226} {:cexpr "find_vcc:arg:vci"} boogie_si_record_i32($i2);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 31);
    $p6 := $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref($i4, 8)), $mul.ref(0, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p37 := $0.ref;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $r := $p37;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p15 := $p12;
    goto $bb7;

  $bb7:
    call $p16, $p17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $p32, $i33, $i34, $i35, $p36, $p39, $p40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $i49, $p15 := find_vcc_loop_$bb7($p0, $i1, $i2, $p16, $p17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $p32, $i33, $i34, $i35, $p36, $p39, $p40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $i49, $p15);
    goto $bb7_last;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p16 := atm_sk($p15);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i19, $i20);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $p47 := $0.ref;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb23:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p47;
    goto $bb23_dummy;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p42);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p47 := $p46;
    goto $bb22;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p16, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, $i2);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb11;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p16, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i27 := $sext.i16.i32($i26);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i32($i1);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i27, $i28);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb11;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 1648)), $mul.ref(1328, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p36 := $p16;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb11;

  $bb16:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p37 := $p36;
    goto $bb18;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p7);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p12 := $p11;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2717;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 86600);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p2 := external_alloc();
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __net_timestamp: ref;

axiom __net_timestamp == $sub.ref(0, 87632);

procedure __net_timestamp($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $CurrAddr;



implementation __net_timestamp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i6 := ktime_get_real();
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i6);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 232} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p8, $p9, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    return;
}



const ktime_get_real: ref;

axiom ktime_get_real == $sub.ref(0, 88664);

procedure ktime_get_real() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.9, $M.0, $CurrAddr;



implementation ktime_get_real() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i3 := ktime_get_with_offset(0);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p4, $i3);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.9;
    cmdloc_dummy_var_28 := $M.9;
    call {:si_unique_call 237} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.9 := cmdloc_dummy_var_29;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.9;
    cmdloc_dummy_var_31 := $M.9;
    call {:si_unique_call 238} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.9 := cmdloc_dummy_var_32;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.9, $p9);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ktime_get_with_offset: ref;

axiom ktime_get_with_offset == $sub.ref(0, 89696);

procedure ktime_get_with_offset($i0: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ktime_get_with_offset($i0: i32) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 240} {:cexpr "ktime_get_with_offset:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p2 := external_alloc();
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 1} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 1} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 242} __VERIFIER_assume($i5);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 243} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p6, $p7, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const change_bit: ref;

axiom change_bit == $sub.ref(0, 90728);

procedure change_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation change_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "change_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 245} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 91760);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 246} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 247} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 92792);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 249} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 93824);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} free_($p0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    return;
}



const ldv_atm_dev_deregister_5: ref;

axiom ldv_atm_dev_deregister_5 == $sub.ref(0, 94856);

procedure ldv_atm_dev_deregister_5($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_atm_dev_deregister_5($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} atm_dev_deregister($p0);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 252} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_6: ref;

axiom ldv_module_put_6 == $sub.ref(0, 95888);

procedure ldv_module_put_6($p0: ref);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_module_put_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} ldv_module_put($p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 96920);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i3 := $M.11;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.11;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $M.11 := $i6;
    call {:si_unique_call 255} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 97952);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 256} __VERIFIER_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const atm_dev_deregister: ref;

axiom atm_dev_deregister == $sub.ref(0, 98984);

procedure atm_dev_deregister($p0: ref);
  free requires assertsPassed;



implementation atm_dev_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 100016);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 257} $free($p0);
    return;
}



const atmtcp_ioctl: ref;

axiom atmtcp_ioctl == $sub.ref(0, 101048);

procedure atmtcp_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.10, $M.11, $CurrAddr, $M.14, $M.15, $M.2, $M.3, $M.4, $M.5, $M.6, $M.1, $M.8, $M.7, assertsPassed;



implementation atmtcp_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i21: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "atmtcp_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 259} {:cexpr "atmtcp_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p3 := ATM_SD($p0);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 24960);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i8 := capable(12);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 262} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 24974);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 24975);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, 24975);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb21:
    assume $i15 == 1;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i2);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i25 := atmtcp_remove_persistent($i24);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 266} {:cexpr "err"} boogie_si_record_i32($i25);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i21 := $i25;
    goto $bb29;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i14 == 1;
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i2);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i23 := atmtcp_create_persistent($i22);
    call {:si_unique_call 264} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i21 := $i23;
    goto $bb29;

  $bb17:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, 24960);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb23;

  $bb24:
    assume $i16 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i18 := atmtcp_attach($p3, $i17);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 268} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i19 := $sge.i32($i18, 0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i21 := $i18;
    goto $bb29;

  $bb26:
    assume $i19 == 1;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 3);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} ldv___module_get_9(__this_module);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb8;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i1, 24974);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 24975);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 515);
    goto $bb8;
}



const ATM_SD: ref;

axiom ATM_SD == $sub.ref(0, 102080);

procedure ATM_SD($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ATM_SD($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p3 := atm_sk($p2);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const capable: ref;

axiom capable == $sub.ref(0, 103112);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 271} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 1} true;
    call {:si_unique_call 272} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 273} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atmtcp_attach: ref;

axiom atmtcp_attach == $sub.ref(0, 104144);

procedure atmtcp_attach($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.0, $CurrAddr, $M.10, $M.14, $M.15, $M.2, $M.3, $M.4, $M.5, $M.6, $M.1, $M.8, $M.7, $M.11, assertsPassed;



implementation atmtcp_attach($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i14: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 275} {:cexpr "atmtcp_attach:arg:itf"} boogie_si_record_i32($i1);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p2, $0.ref);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.12, $p2);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i24 := atmtcp_create($i1, 0, $p2);
    call {:si_unique_call 278} {:cexpr "error"} boogie_si_record_i32($i24);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.12, $p2);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, atmtcp_control_dev);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p32 := sk_atm($p0);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vcc_insert_socket($p32);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} set_bit(8, $p33);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} set_bit(1, $p34);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.12, $p2);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1504, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_43 := atm_init_aal5($p0);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.12, $p2);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1696)), $mul.ref(24, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i14 := $i42;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i14 := $i24;
    goto $bb8;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.12, $p2);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(0, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $p2i.ref.i64(atmtcp_v_dev_ops));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.12, $p2);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.12, $p2);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} atm_dev_put($p23);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb8;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.12, $p2);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} atm_dev_put($p13);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 124);
    goto $bb8;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $p4 := atm_dev_lookup($i1);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p2, $p4);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv___module_get_9: ref;

axiom ldv___module_get_9 == $sub.ref(0, 105176);

procedure ldv___module_get_9($p0: ref);
  free requires assertsPassed;
  modifies $M.11;



implementation ldv___module_get_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} ldv_module_get($p0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    return;
}



const atmtcp_create_persistent: ref;

axiom atmtcp_create_persistent == $sub.ref(0, 106208);

procedure atmtcp_create_persistent($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.10, $M.14, $M.15, $CurrAddr;



implementation atmtcp_create_persistent($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} {:cexpr "atmtcp_create_persistent:arg:itf"} boogie_si_record_i32($i0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i1 := atmtcp_create($i0, 1, $0.ref);
    call {:si_unique_call 289} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atmtcp_remove_persistent: ref;

axiom atmtcp_remove_persistent == $sub.ref(0, 107240);

procedure atmtcp_remove_persistent($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.2, $M.3, $M.4, $M.5, $M.6, $M.1, $M.8, $M.7, $CurrAddr, $M.11, assertsPassed;



implementation atmtcp_remove_persistent($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} {:cexpr "atmtcp_remove_persistent:arg:itf"} boogie_si_record_i32($i0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $p1 := atm_dev_lookup($i0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1696)), $mul.ref(0, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, $p2i.ref.i64(atmtcp_v_dev_ops));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p11);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} kfree($p23);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} atm_dev_put($p1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} ldv_atm_dev_deregister_8($p1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} atm_dev_put($p1);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 124);
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const atm_dev_lookup: ref;

axiom atm_dev_lookup == $sub.ref(0, 108272);

procedure atm_dev_lookup($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation atm_dev_lookup($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} {:cexpr "atm_dev_lookup:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p1 := external_alloc();
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const atm_dev_put: ref;

axiom atm_dev_put == $sub.ref(0, 109304);

procedure atm_dev_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.1, $M.8, $M.7, $M.10, $CurrAddr, $M.11, assertsPassed;



implementation atm_dev_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(164, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 299} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(48, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i5 := constant_test_bit(0, $p4);
    call {:si_unique_call 301} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 303} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(0, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(256, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} put_device($p21);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(0, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    call {:si_unique_call 305} devirtbounce.10($p20, $p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    call {:si_unique_call 304} devirtbounce.9(0, .str, 271, 12);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call atm_dev_put_loop_$bb5();
    goto $bb5_last;

  $bb5_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;
}



const ldv_atm_dev_deregister_8: ref;

axiom ldv_atm_dev_deregister_8 == $sub.ref(0, 110336);

procedure ldv_atm_dev_deregister_8($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_atm_dev_deregister_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} atm_dev_deregister($p0);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 308} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 111368);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 310} devirtbounce.11(0, $p2, $p1, $p2);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.13, $p1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 112400);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 113432);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    return;
}



const atmtcp_create: ref;

axiom atmtcp_create == $sub.ref(0, 114464);

procedure atmtcp_create($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.10, $M.14, $M.15, $CurrAddr;



implementation atmtcp_create($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i1;
  var $i13: i32;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} {:cexpr "atmtcp_create:arg:itf"} boogie_si_record_i32($i0);
    call {:si_unique_call 313} {:cexpr "atmtcp_create:arg:persist"} boogie_si_record_i32($i1);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $p3 := kmalloc(16, 208);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $p8 := ldv_atm_dev_register_7(.str.1, $0.ref, atmtcp_v_dev_ops, $i0, $0.ref);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(94, 1)), $mul.ref(0, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 8);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(94, 1)), $mul.ref(1, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 16);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p3);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i1);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p2);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p2, $p8);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p4);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} kfree($p11);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then $sub.i32(0, 12) else $sub.i32(0, 16));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i7 := $i13;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 115496);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 318} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_atm_dev_register_7: ref;

axiom ldv_atm_dev_register_7 == $sub.ref(0, 116528);

procedure ldv_atm_dev_register_7($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10, $M.14, $M.15, $M.0, $CurrAddr;



implementation ldv_atm_dev_register_7($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} {:cexpr "ldv_atm_dev_register_7:arg:ldv_func_arg4"} boogie_si_record_i32($i3);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $p5 := atm_dev_register($p0, $p1, $p2, $i3, $p4);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 322} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} ldv_initialize_atmdev_ops_3();
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atm_dev_register: ref;

axiom atm_dev_register == $sub.ref(0, 117560);

procedure atm_dev_register($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation atm_dev_register($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} {:cexpr "atm_dev_register:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p5 := external_alloc();
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_initialize_atmdev_ops_3: ref;

axiom ldv_initialize_atmdev_ops_3 == $sub.ref(0, 118592);

procedure ldv_initialize_atmdev_ops_3();
  free requires assertsPassed;
  modifies $M.14, $M.15, $M.0, $CurrAddr;



implementation ldv_initialize_atmdev_ops_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p0 := ldv_init_zalloc(1688);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p2 := ldv_init_zalloc(1640);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.15 := $p2;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 119624);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p1 := calloc(1, $i0);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 330} __VERIFIER_assume($i4);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_module_get: ref;

axiom ldv_module_get == $sub.ref(0, 120656);

procedure ldv_module_get($p0: ref);
  free requires assertsPassed;
  modifies $M.11;



implementation ldv_module_get($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i3 := $M.11;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.11 := $i4;
    call {:si_unique_call 331} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i4);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vcc_insert_socket: ref;

axiom vcc_insert_socket == $sub.ref(0, 121688);

procedure vcc_insert_socket($p0: ref);
  free requires assertsPassed;



implementation vcc_insert_socket($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    return;
}



const atm_init_aal5: ref;

axiom atm_init_aal5 == $sub.ref(0, 122720);

procedure atm_init_aal5($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atm_init_aal5($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 332} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 333} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 123752);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 335} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.16;
    call {:si_unique_call 336} cmdloc_dummy_var_37 := $memset.i8(cmdloc_dummy_var_36, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.16 := cmdloc_dummy_var_37;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 124784);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $M.19, $M.10, $M.20, $M.0, $M.21, $M.22, $M.14, $M.15, $M.23, $M.11, $M.43, $M.44, $M.45, $CurrAddr, $M.12, $M.2, $M.3, $M.4, $M.5, $M.6, $M.1, $M.8, $M.7, assertsPassed, $M.9;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i14: i32;
  var $p15: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i118: i32;
  var $i119: i32;
  var vslice_dummy_var_44: ref;
  var vslice_dummy_var_45: ref;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;

  $bb0:
    call {:si_unique_call 337} $initialize();
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p2 := ldv_init_zalloc(48);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p6 := ldv_init_zalloc(1);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $p7 := ldv_init_zalloc(232);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p9 := ldv_init_zalloc(1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p10 := ldv_init_zalloc(232);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} ldv_initialize();
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_44 := ldv_memset($p12, 0, 8);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 1} true;
    call {:si_unique_call 349} $i14 := __VERIFIER_nondet_uint();
    call {:si_unique_call 350} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i14);
    call {:si_unique_call 351} {:cexpr "ldvarg2"} boogie_si_record_i32($i14);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} vslice_dummy_var_45 := ldv_memset($p15, 0, 4);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 353} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 354} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 355} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 356} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 357} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $i62, $i63, $p64, $i65, $i67, $i68, $p69, $i70, $i72, $i73, $p74, $i75, $i76, $p77, $i78, $i79, $p80, $i82, $i83, $p84, $i86, $i87, $p88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $p106, $i108, $i109, $p110, $i112, $i113, $p114, $i115, $i116, $i118, $i119, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54 := main_loop_$bb1($p0, $p1, $p3, $p5, $p6, $p8, $p9, $p11, $i14, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $i62, $i63, $p64, $i65, $i67, $i68, $p69, $i70, $i72, $i73, $p74, $i75, $i76, $p77, $i78, $i79, $p80, $i82, $i83, $p84, $i86, $i87, $p88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $p106, $i108, $i109, $p110, $i112, $i113, $p114, $i115, $i116, $i118, $i119, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_stop();
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb26_dummy;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i97 := $M.20;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb109:
    assume $i98 == 1;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 403} $i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 404} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i99);
    call {:si_unique_call 405} {:cexpr "tmp___9"} boogie_si_record_i32($i99);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i99, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i99, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} ldv_stop();
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb116:
    assume $i102 == 1;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i115 := $M.20;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 1);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb131:
    assume $i116 == 1;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_54 := ldv_open_2();
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 413} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i118 := $M.18;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 1);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.18 := $i119;
    call {:si_unique_call 414} {:cexpr "ref_cnt"} boogie_si_record_i32($i119);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb114:
    assume $i101 == 1;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i112 := $M.20;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 2);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb128:
    assume $i113 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p114 := $M.23;
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} atmtcp_c_close($p114);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 411} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    goto $bb130;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i99, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb118;

  $bb119:
    assume $i103 == 1;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i104 := $M.20;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i108 := $M.20;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 2);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb124:
    assume $i109 == 1;
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p110 := $M.23;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_53 := atmtcp_c_send($p110, $p11);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 409} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb121:
    assume $i105 == 1;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p106 := $M.23;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} vslice_dummy_var_52 := atmtcp_c_send($p106, $p11);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 407} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i48 := $M.10;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb57:
    assume $i49 == 1;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 379} $i50 := __VERIFIER_nondet_int();
    call {:si_unique_call 380} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i50);
    call {:si_unique_call 381} {:cexpr "tmp___8"} boogie_si_record_i32($i50);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i50, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i50, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i50, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} ldv_stop();
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb66:
    assume $i54 == 1;
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i89 := $M.10;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 1);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb100:
    assume $i90 == 1;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p91 := $M.15;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i92 := atmtcp_v_open($p91);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $M.22 := $i92;
    call {:si_unique_call 399} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i92);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i93 := $M.22;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb102:
    assume $i94 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 400} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i95 := $M.18;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, 1);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $M.18 := $i96;
    call {:si_unique_call 401} {:cexpr "ref_cnt"} boogie_si_record_i32($i96);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb64:
    assume $i53 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i86 := $M.10;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 2);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb97:
    assume $i87 == 1;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p88 := $M.15;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} atmtcp_v_close($p88);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 397} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb62:
    assume $i52 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i78 := $M.10;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i82 := $M.10;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 2);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb94:
    assume $i83 == 1;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p84 := $M.15;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_51 := atmtcp_v_send($p84, $p8);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 395} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i79 == 1;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p80 := $M.15;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_50 := atmtcp_v_send($p80, $p8);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 393} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb60:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i50, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i50, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i56 == 1);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i72 := $M.10;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 1);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i75 := $M.10;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 2);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb88:
    assume $i76 == 1;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p77 := $M.14;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} atmtcp_v_dev_close($p77);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 391} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb85:
    assume $i73 == 1;
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p74 := $M.14;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} atmtcp_v_dev_close($p74);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 389} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb71:
    assume $i56 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i62 := $M.10;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i67 := $M.10;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 2);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb82:
    assume $i68 == 1;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p69 := $M.14;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.16, $p1);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_49 := atmtcp_v_ioctl($p69, $i70, $p6);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 387} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb79:
    assume $i63 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p64 := $M.14;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.16, $p1);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_48 := atmtcp_v_ioctl($p64, $i65, $p6);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 385} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb69:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i50, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb68;

  $bb73:
    assume $i57 == 1;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i58 := $M.10;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 2);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i59 == 1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p60 := $M.14;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_47 := atmtcp_v_proc($p60, $p5, $p9);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 383} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb3:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i17, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i31 := $M.19;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27:
    assume $i32 == 1;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 367} $i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 368} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
    call {:si_unique_call 369} {:cexpr "tmp___7"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} ldv_stop();
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb32:
    assume $i35 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i41 := $M.19;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45:
    assume $i42 == 1;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i43 := atmtcp_init();
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.21 := $i43;
    call {:si_unique_call 374} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i43);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i44 := $M.21;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i46 := $M.21;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i47 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.19 := 2;
    call {:si_unique_call 377} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} ldv_check_final_state();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i45 == 1;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.19 := 3;
    call {:si_unique_call 375} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 376} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb30:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb34;

  $bb35:
    assume $i36 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i37 := $M.19;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 3);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb37:
    assume $i38 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i39 := $M.18;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb39;

  $bb40:
    assume $i40 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} atmtcp_exit();
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $M.19 := 2;
    call {:si_unique_call 371} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i17, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i23 := $M.17;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 361} $i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 362} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i25);
    call {:si_unique_call 363} {:cexpr "tmp___6"} boogie_si_record_i32($i25);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} ldv_stop();
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i27 := $M.17;
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.16, $p0);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vslice_dummy_var_46 := atmtcp_ioctl($p3, $i14, $i29);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 365} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb26_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 358} $i17 := __VERIFIER_nondet_int();
    call {:si_unique_call 359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i17);
    call {:si_unique_call 360} {:cexpr "tmp___5"} boogie_si_record_i32($i17);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 125816);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 126848);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const atmtcp_exit: ref;

axiom atmtcp_exit == $sub.ref(0, 127880);

procedure atmtcp_exit();
  free requires assertsPassed;



implementation atmtcp_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} deregister_atm_ioctl(atmtcp_ioctl_ops);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    return;
}



const atmtcp_init: ref;

axiom atmtcp_init == $sub.ref(0, 128912);

procedure atmtcp_init() returns ($r: i32);
  free requires assertsPassed;



implementation atmtcp_init() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} register_atm_ioctl(atmtcp_ioctl_ops);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_open_2: ref;

axiom ldv_open_2 == $sub.ref(0, 129944);

procedure ldv_open_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_open_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 419} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 130976);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i0 := $M.11;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} ldv_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const register_atm_ioctl: ref;

axiom register_atm_ioctl == $sub.ref(0, 132008);

procedure register_atm_ioctl($p0: ref);
  free requires assertsPassed;



implementation register_atm_ioctl($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    return;
}



const deregister_atm_ioctl: ref;

axiom deregister_atm_ioctl == $sub.ref(0, 133040);

procedure deregister_atm_ioctl($p0: ref);
  free requires assertsPassed;



implementation deregister_atm_ioctl($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 134072);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 422} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 1} true;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 135104);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 136136);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 137168);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 138200);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 139232);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 140264);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 141296);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 142328);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 143360);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 144392);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 145424);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 146456);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 147488);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 423} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 424} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 425} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 426} __VERIFIER_assume($i4);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 148520);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 149552);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 150584);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 151616);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 427} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 428} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 429} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 430} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 431} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 432} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 433} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 434} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 435} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 436} __VERIFIER_assume($i7);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 437} __VERIFIER_assume($i11);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 152648);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 153680);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 154712);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 155744);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 156776);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 157808);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 438} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 439} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 440} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 441} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 442} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 443} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 444} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 445} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 446} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 447} __VERIFIER_assume($i7);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 448} __VERIFIER_assume($i11);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 158840);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 159872);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 160904);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 161936);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 162968);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 164000);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 165032);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 166064);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 167096);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 449} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 450} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 451} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 452} __VERIFIER_assume($i10);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 168128);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 453} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 454} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 455} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 169160);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 1} true;
    call {:si_unique_call 456} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 457} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 458} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 170192);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 459} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 460} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 171224);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 172256);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 461} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 462} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 173288);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 174320);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 175352);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 463} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 464} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 1} true;
    call {:si_unique_call 465} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 466} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $p6 := malloc($i5);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 468} cmdloc_dummy_var_39 := $memset.i8(cmdloc_dummy_var_38, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 176384);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 177416);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.14, $M.15, $M.23, $M.17, $M.18, $M.19, $M.10, $M.20, $M.21, $M.22, $M.11, $M.0, $M.43, $M.44, $M.45;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 469} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.14 := $0.ref;
    $M.15 := $0.ref;
    $M.23 := $0.ref;
    $M.17 := 0;
    call {:si_unique_call 470} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 471} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.19 := 0;
    call {:si_unique_call 472} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 473} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 474} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 475} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 476} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.11 := 1;
    call {:si_unique_call 477} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.0 := $store.ref($M.0, atmtcp_c_dev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(16, 1)), atmtcp_c_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(56, 1)), atmtcp_c_send);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, atmtcp_control_dev, atmtcp_c_dev_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(16, 1)), .str.1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(24, 1)), 999);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(56, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(56, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(94, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(94, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(20, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(20, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(20, 1)), $mul.ref(12, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(20, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)), $mul.ref(12, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(156, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(160, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(164, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(537, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(548, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1144, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1152, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1160, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1168, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1176, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1192, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1224, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1248, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1256, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1260, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1336, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1336, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1352, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1352, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1408, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1416, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1417, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(1680, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(1680, 1)), $mul.ref(8, 1)), $0.ref);
    $M.43 := $store.i8($M.43, .str.4, 101);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(1, 1)), 112);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(2, 1)), 104);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(4, 1)), 109);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(7, 1)), 97);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(8, 1)), 108);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(9, 1)), 10);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.44 := $store.i8($M.44, .str.6, 0);
    $M.44 := $store.i8($M.44, .str.7, 100);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.7, $mul.ref(0, 4)), $mul.ref(1, 1)), 105);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.7, $mul.ref(0, 4)), $mul.ref(2, 1)), 115);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.7, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.45 := $store.i8($M.45, .str.5, 112);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(1, 1)), 101);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(2, 1)), 114);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(3, 1)), 115);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(4, 1)), 105);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(5, 1)), 115);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(6, 1)), 116);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(7, 1)), 101);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(8, 1)), 110);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(9, 1)), 116);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(10, 1)), 44);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(11, 1)), 32);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(12, 1)), 37);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(14, 1)), 99);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(15, 1)), 111);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(16, 1)), 110);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(17, 1)), 110);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(18, 1)), 101);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(19, 1)), 99);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(20, 1)), 116);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(21, 1)), 101);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(22, 1)), 100);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(23, 1)), 10);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(.str.5, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    call {:si_unique_call 478} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 178448);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 179480);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 180512);

procedure devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 479} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 181544);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 182576);

procedure devirtbounce.4(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 183608);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 184640);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 185672);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 480} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 186704);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 187736);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 188768);

procedure devirtbounce.10(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.1, $M.8, $M.7, $M.10, $CurrAddr, $M.11, assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(atmtcp_c_close, $p0);
    assume {:branchcond $i5} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i5 == 1);
    $i4 := $eq.ref(atmtcp_v_close, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i4 == 1);
    $i3 := $eq.ref(atmtcp_v_dev_close, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 481} atmtcp_v_dev_close(arg);
    return;

  $bb3:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 482} atmtcp_v_close($p1);
    return;

  $bb4:
    assume $i5 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 483} atmtcp_c_close($p2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 189800);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.14, $M.15, $M.23, $M.17, $M.18, $M.19, $M.10, $M.20, $M.21, $M.22, $M.11, $M.0, $M.43, $M.44, $M.45, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 484} __SMACK_static_init();
    call {:si_unique_call 485} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.16, $M.17, $M.18, $M.19, $M.10, $M.20, $M.0, $M.21, $M.22, $M.14, $M.15, $M.23, $M.11, $M.43, $M.44, $M.45, $CurrAddr, $M.12, $M.2, $M.3, $M.4, $M.5, $M.6, $M.1, $M.8, $M.7, $M.9;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation atmtcp_v_ioctl_loop_$bb778(in_$p0: ref, in_$p3: ref, in_$p1348: ref, in_$p1349: ref, in_$p1350: ref, in_$p1351: ref, in_$i1352: i64, in_$i1353: i64, in_$i1354: i1, in_$p1355: ref, in_$i1356: i16, in_$i1357: i32, in_$p1358: ref, in_$i1359: i8, in_$i1360: i32, in_$i1361: i32, in_$i1362: i1, in_$p1363: ref, in_$i1364: i32, in_$p1365: ref, in_$i1366: i8, in_$i1367: i32, in_$i1368: i32, in_$i1369: i1, in_$p1371: ref, in_$p1372: ref, in_$p1373: ref, in_$p1374: ref, in_$i1375: i64, in_$i1376: i1, in_$p1378: ref, in_$p1379: ref, in_$p1377: ref, in_$i1380: i64, in_$i1381: i1) returns (out_$p1348: ref, out_$p1349: ref, out_$p1350: ref, out_$p1351: ref, out_$i1352: i64, out_$i1353: i64, out_$i1354: i1, out_$p1355: ref, out_$i1356: i16, out_$i1357: i32, out_$p1358: ref, out_$i1359: i8, out_$i1360: i32, out_$i1361: i32, out_$i1362: i1, out_$p1363: ref, out_$i1364: i32, out_$p1365: ref, out_$i1366: i8, out_$i1367: i32, out_$i1368: i32, out_$i1369: i1, out_$p1371: ref, out_$p1372: ref, out_$p1373: ref, out_$p1374: ref, out_$i1375: i64, out_$i1376: i1, out_$p1378: ref, out_$p1379: ref, out_$p1377: ref, out_$i1380: i64, out_$i1381: i1)
{

  entry:
    out_$p1348, out_$p1349, out_$p1350, out_$p1351, out_$i1352, out_$i1353, out_$i1354, out_$p1355, out_$i1356, out_$i1357, out_$p1358, out_$i1359, out_$i1360, out_$i1361, out_$i1362, out_$p1363, out_$i1364, out_$p1365, out_$i1366, out_$i1367, out_$i1368, out_$i1369, out_$p1371, out_$p1372, out_$p1373, out_$p1374, out_$i1375, out_$i1376, out_$p1378, out_$p1379, out_$p1377, out_$i1380, out_$i1381 := in_$p1348, in_$p1349, in_$p1350, in_$p1351, in_$i1352, in_$i1353, in_$i1354, in_$p1355, in_$i1356, in_$i1357, in_$p1358, in_$i1359, in_$i1360, in_$i1361, in_$i1362, in_$p1363, in_$i1364, in_$p1365, in_$i1366, in_$i1367, in_$i1368, in_$i1369, in_$p1371, in_$p1372, in_$p1373, in_$p1374, in_$i1375, in_$i1376, in_$p1378, in_$p1379, in_$p1377, in_$i1380, in_$i1381;
    goto $bb778, exit;

  $bb778:
    assume {:verifier.code 0} true;
    goto corral_source_split_2029;

  $bb792:
    assume out_$i1381 == 1;
    assume {:verifier.code 0} true;
    out_$p1348 := out_$p1377;
    goto $bb792_dummy;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb792;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$i1381 := $ne.i64(out_$i1380, 0);
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$i1380 := $p2i.ref.i64(out_$p1377);
    goto corral_source_split_2070;

  $bb791:
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  $bb790:
    assume !(out_$i1376 == 1);
    assume {:verifier.code 0} true;
    out_$p1377 := $0.ref;
    goto $bb791;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$p1377 := out_$p1379;
    goto $bb791;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$p1379 := $add.ref(out_$p1378, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$p1378 := $bitcast.ref.ref(out_$p1374);
    goto corral_source_split_2066;

  $bb789:
    assume out_$i1376 == 1;
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb789, $bb790;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$i1376 := $ne.i64(out_$i1375, 0);
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$i1375 := $p2i.ref.i64(out_$p1374);
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$p1374 := $load.ref($M.0, out_$p1373);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$p1373 := $add.ref($add.ref(out_$p1372, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$p1372 := $bitcast.ref.ref(out_$p1371);
    goto corral_source_split_2059;

  $bb788:
    assume {:verifier.code 0} true;
    out_$p1371 := $add.ref($add.ref($add.ref(out_$p1348, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_2058;

  $bb787:
    assume {:verifier.code 0} true;
    goto $bb788;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb780:
    assume out_$i1354 == 1;
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb780, $bb781;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i1354 := $ne.i64(out_$i1352, out_$i1353);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$i1353 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$i1352 := $p2i.ref.i64(out_$p1351);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$p1351 := $load.ref($M.0, out_$p1350);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$p1350 := $add.ref($add.ref(out_$p1349, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2032;

  $bb779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} out_$p1349 := atm_sk(out_$p1348);
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb786:
    assume !(out_$i1369 == 1);
    assume {:verifier.code 0} true;
    goto $bb787;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb786;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$i1369 := $ne.i32(out_$i1368, 0);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$i1368 := $ashr.i32(out_$i1364, out_$i1367);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$i1367 := $sext.i8.i32(out_$i1366);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i1366 := $load.i8($M.0, out_$p1365);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$p1365 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$i1364 := $load.i32($M.0, out_$p1363);
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$p1363 := $add.ref($add.ref(out_$p1349, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_2050;

  $bb784:
    assume !(out_$i1362 == 1);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb784;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$i1362 := $ne.i32(out_$i1361, 0);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i1361 := $ashr.i32(out_$i1357, out_$i1360);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$i1360 := $sext.i8.i32(out_$i1359);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i1359 := $load.i8($M.0, out_$p1358);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$p1358 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$i1357 := $sext.i16.i32(out_$i1356);
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$i1356 := $load.i16($M.0, out_$p1355);
    goto corral_source_split_2041;

  $bb782:
    assume {:verifier.code 0} true;
    out_$p1355 := $add.ref($add.ref(out_$p1349, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_2040;

  $bb781:
    assume !(out_$i1354 == 1);
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb792_dummy:
    call {:si_unique_call 1} out_$p1348, out_$p1349, out_$p1350, out_$p1351, out_$i1352, out_$i1353, out_$i1354, out_$p1355, out_$i1356, out_$i1357, out_$p1358, out_$i1359, out_$i1360, out_$i1361, out_$i1362, out_$p1363, out_$i1364, out_$p1365, out_$i1366, out_$i1367, out_$i1368, out_$i1369, out_$p1371, out_$p1372, out_$p1373, out_$p1374, out_$i1375, out_$i1376, out_$p1378, out_$p1379, out_$p1377, out_$i1380, out_$i1381 := atmtcp_v_ioctl_loop_$bb778(in_$p0, in_$p3, out_$p1348, out_$p1349, out_$p1350, out_$p1351, out_$i1352, out_$i1353, out_$i1354, out_$p1355, out_$i1356, out_$i1357, out_$p1358, out_$i1359, out_$i1360, out_$i1361, out_$i1362, out_$p1363, out_$i1364, out_$p1365, out_$i1366, out_$i1367, out_$i1368, out_$i1369, out_$p1371, out_$p1372, out_$p1373, out_$p1374, out_$i1375, out_$i1376, out_$p1378, out_$p1379, out_$p1377, out_$i1380, out_$i1381);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb778(in_$p0: ref, in_$p3: ref, in_$p1348: ref, in_$p1349: ref, in_$p1350: ref, in_$p1351: ref, in_$i1352: i64, in_$i1353: i64, in_$i1354: i1, in_$p1355: ref, in_$i1356: i16, in_$i1357: i32, in_$p1358: ref, in_$i1359: i8, in_$i1360: i32, in_$i1361: i32, in_$i1362: i1, in_$p1363: ref, in_$i1364: i32, in_$p1365: ref, in_$i1366: i8, in_$i1367: i32, in_$i1368: i32, in_$i1369: i1, in_$p1371: ref, in_$p1372: ref, in_$p1373: ref, in_$p1374: ref, in_$i1375: i64, in_$i1376: i1, in_$p1378: ref, in_$p1379: ref, in_$p1377: ref, in_$i1380: i64, in_$i1381: i1) returns (out_$p1348: ref, out_$p1349: ref, out_$p1350: ref, out_$p1351: ref, out_$i1352: i64, out_$i1353: i64, out_$i1354: i1, out_$p1355: ref, out_$i1356: i16, out_$i1357: i32, out_$p1358: ref, out_$i1359: i8, out_$i1360: i32, out_$i1361: i32, out_$i1362: i1, out_$p1363: ref, out_$i1364: i32, out_$p1365: ref, out_$i1366: i8, out_$i1367: i32, out_$i1368: i32, out_$i1369: i1, out_$p1371: ref, out_$p1372: ref, out_$p1373: ref, out_$p1374: ref, out_$i1375: i64, out_$i1376: i1, out_$p1378: ref, out_$p1379: ref, out_$p1377: ref, out_$i1380: i64, out_$i1381: i1);



implementation atmtcp_v_ioctl_loop_$bb754(in_$p0: ref, in_$p3: ref, in_$p1306: ref, in_$p1307: ref, in_$p1308: ref, in_$p1309: ref, in_$i1310: i64, in_$i1311: i64, in_$i1312: i1, in_$p1313: ref, in_$i1314: i16, in_$i1315: i32, in_$p1316: ref, in_$i1317: i8, in_$i1318: i32, in_$i1319: i32, in_$i1320: i1, in_$p1321: ref, in_$i1322: i32, in_$p1323: ref, in_$i1324: i8, in_$i1325: i32, in_$i1326: i32, in_$i1327: i1, in_$p1329: ref, in_$p1330: ref, in_$p1331: ref, in_$p1332: ref, in_$i1333: i64, in_$i1334: i1, in_$p1336: ref, in_$p1337: ref, in_$p1335: ref, in_$i1338: i64, in_$i1339: i1) returns (out_$p1306: ref, out_$p1307: ref, out_$p1308: ref, out_$p1309: ref, out_$i1310: i64, out_$i1311: i64, out_$i1312: i1, out_$p1313: ref, out_$i1314: i16, out_$i1315: i32, out_$p1316: ref, out_$i1317: i8, out_$i1318: i32, out_$i1319: i32, out_$i1320: i1, out_$p1321: ref, out_$i1322: i32, out_$p1323: ref, out_$i1324: i8, out_$i1325: i32, out_$i1326: i32, out_$i1327: i1, out_$p1329: ref, out_$p1330: ref, out_$p1331: ref, out_$p1332: ref, out_$i1333: i64, out_$i1334: i1, out_$p1336: ref, out_$p1337: ref, out_$p1335: ref, out_$i1338: i64, out_$i1339: i1)
{

  entry:
    out_$p1306, out_$p1307, out_$p1308, out_$p1309, out_$i1310, out_$i1311, out_$i1312, out_$p1313, out_$i1314, out_$i1315, out_$p1316, out_$i1317, out_$i1318, out_$i1319, out_$i1320, out_$p1321, out_$i1322, out_$p1323, out_$i1324, out_$i1325, out_$i1326, out_$i1327, out_$p1329, out_$p1330, out_$p1331, out_$p1332, out_$i1333, out_$i1334, out_$p1336, out_$p1337, out_$p1335, out_$i1338, out_$i1339 := in_$p1306, in_$p1307, in_$p1308, in_$p1309, in_$i1310, in_$i1311, in_$i1312, in_$p1313, in_$i1314, in_$i1315, in_$p1316, in_$i1317, in_$i1318, in_$i1319, in_$i1320, in_$p1321, in_$i1322, in_$p1323, in_$i1324, in_$i1325, in_$i1326, in_$i1327, in_$p1329, in_$p1330, in_$p1331, in_$p1332, in_$i1333, in_$i1334, in_$p1336, in_$p1337, in_$p1335, in_$i1338, in_$i1339;
    goto $bb754, exit;

  $bb754:
    assume {:verifier.code 0} true;
    goto corral_source_split_1969;

  $bb768:
    assume out_$i1339 == 1;
    assume {:verifier.code 0} true;
    out_$p1306 := out_$p1335;
    goto $bb768_dummy;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb768;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i1339 := $ne.i64(out_$i1338, 0);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i1338 := $p2i.ref.i64(out_$p1335);
    goto corral_source_split_2010;

  $bb767:
    assume {:verifier.code 0} true;
    goto corral_source_split_2009;

  $bb766:
    assume !(out_$i1334 == 1);
    assume {:verifier.code 0} true;
    out_$p1335 := $0.ref;
    goto $bb767;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$p1335 := out_$p1337;
    goto $bb767;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$p1337 := $add.ref(out_$p1336, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$p1336 := $bitcast.ref.ref(out_$p1332);
    goto corral_source_split_2006;

  $bb765:
    assume out_$i1334 == 1;
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb765, $bb766;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$i1334 := $ne.i64(out_$i1333, 0);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$i1333 := $p2i.ref.i64(out_$p1332);
    goto corral_source_split_2002;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    out_$p1332 := $load.ref($M.0, out_$p1331);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$p1331 := $add.ref($add.ref(out_$p1330, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$p1330 := $bitcast.ref.ref(out_$p1329);
    goto corral_source_split_1999;

  $bb764:
    assume {:verifier.code 0} true;
    out_$p1329 := $add.ref($add.ref($add.ref(out_$p1306, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1998;

  $bb763:
    assume {:verifier.code 0} true;
    goto $bb764;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb756:
    assume out_$i1312 == 1;
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb756, $bb757;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$i1312 := $ne.i64(out_$i1310, out_$i1311);
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i1311 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$i1310 := $p2i.ref.i64(out_$p1309);
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$p1309 := $load.ref($M.0, out_$p1308);
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$p1308 := $add.ref($add.ref(out_$p1307, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1972;

  $bb755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} out_$p1307 := atm_sk(out_$p1306);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb762:
    assume !(out_$i1327 == 1);
    assume {:verifier.code 0} true;
    goto $bb763;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb762;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$i1327 := $ne.i32(out_$i1326, 0);
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$i1326 := $ashr.i32(out_$i1322, out_$i1325);
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$i1325 := $sext.i8.i32(out_$i1324);
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$i1324 := $load.i8($M.0, out_$p1323);
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$p1323 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$i1322 := $load.i32($M.0, out_$p1321);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$p1321 := $add.ref($add.ref(out_$p1307, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1990;

  $bb760:
    assume !(out_$i1320 == 1);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb760;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i1320 := $ne.i32(out_$i1319, 0);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i1319 := $ashr.i32(out_$i1315, out_$i1318);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$i1318 := $sext.i8.i32(out_$i1317);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$i1317 := $load.i8($M.0, out_$p1316);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$p1316 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$i1315 := $sext.i16.i32(out_$i1314);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i1314 := $load.i16($M.0, out_$p1313);
    goto corral_source_split_1981;

  $bb758:
    assume {:verifier.code 0} true;
    out_$p1313 := $add.ref($add.ref(out_$p1307, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1980;

  $bb757:
    assume !(out_$i1312 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb768_dummy:
    call {:si_unique_call 1} out_$p1306, out_$p1307, out_$p1308, out_$p1309, out_$i1310, out_$i1311, out_$i1312, out_$p1313, out_$i1314, out_$i1315, out_$p1316, out_$i1317, out_$i1318, out_$i1319, out_$i1320, out_$p1321, out_$i1322, out_$p1323, out_$i1324, out_$i1325, out_$i1326, out_$i1327, out_$p1329, out_$p1330, out_$p1331, out_$p1332, out_$i1333, out_$i1334, out_$p1336, out_$p1337, out_$p1335, out_$i1338, out_$i1339 := atmtcp_v_ioctl_loop_$bb754(in_$p0, in_$p3, out_$p1306, out_$p1307, out_$p1308, out_$p1309, out_$i1310, out_$i1311, out_$i1312, out_$p1313, out_$i1314, out_$i1315, out_$p1316, out_$i1317, out_$i1318, out_$i1319, out_$i1320, out_$p1321, out_$i1322, out_$p1323, out_$i1324, out_$i1325, out_$i1326, out_$i1327, out_$p1329, out_$p1330, out_$p1331, out_$p1332, out_$i1333, out_$i1334, out_$p1336, out_$p1337, out_$p1335, out_$i1338, out_$i1339);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb754(in_$p0: ref, in_$p3: ref, in_$p1306: ref, in_$p1307: ref, in_$p1308: ref, in_$p1309: ref, in_$i1310: i64, in_$i1311: i64, in_$i1312: i1, in_$p1313: ref, in_$i1314: i16, in_$i1315: i32, in_$p1316: ref, in_$i1317: i8, in_$i1318: i32, in_$i1319: i32, in_$i1320: i1, in_$p1321: ref, in_$i1322: i32, in_$p1323: ref, in_$i1324: i8, in_$i1325: i32, in_$i1326: i32, in_$i1327: i1, in_$p1329: ref, in_$p1330: ref, in_$p1331: ref, in_$p1332: ref, in_$i1333: i64, in_$i1334: i1, in_$p1336: ref, in_$p1337: ref, in_$p1335: ref, in_$i1338: i64, in_$i1339: i1) returns (out_$p1306: ref, out_$p1307: ref, out_$p1308: ref, out_$p1309: ref, out_$i1310: i64, out_$i1311: i64, out_$i1312: i1, out_$p1313: ref, out_$i1314: i16, out_$i1315: i32, out_$p1316: ref, out_$i1317: i8, out_$i1318: i32, out_$i1319: i32, out_$i1320: i1, out_$p1321: ref, out_$i1322: i32, out_$p1323: ref, out_$i1324: i8, out_$i1325: i32, out_$i1326: i32, out_$i1327: i1, out_$p1329: ref, out_$p1330: ref, out_$p1331: ref, out_$p1332: ref, out_$i1333: i64, out_$i1334: i1, out_$p1336: ref, out_$p1337: ref, out_$p1335: ref, out_$i1338: i64, out_$i1339: i1);



implementation atmtcp_v_ioctl_loop_$bb730(in_$p0: ref, in_$p3: ref, in_$p1264: ref, in_$p1265: ref, in_$p1266: ref, in_$p1267: ref, in_$i1268: i64, in_$i1269: i64, in_$i1270: i1, in_$p1271: ref, in_$i1272: i16, in_$i1273: i32, in_$p1274: ref, in_$i1275: i8, in_$i1276: i32, in_$i1277: i32, in_$i1278: i1, in_$p1279: ref, in_$i1280: i32, in_$p1281: ref, in_$i1282: i8, in_$i1283: i32, in_$i1284: i32, in_$i1285: i1, in_$p1287: ref, in_$p1288: ref, in_$p1289: ref, in_$p1290: ref, in_$i1291: i64, in_$i1292: i1, in_$p1294: ref, in_$p1295: ref, in_$p1293: ref, in_$i1296: i64, in_$i1297: i1) returns (out_$p1264: ref, out_$p1265: ref, out_$p1266: ref, out_$p1267: ref, out_$i1268: i64, out_$i1269: i64, out_$i1270: i1, out_$p1271: ref, out_$i1272: i16, out_$i1273: i32, out_$p1274: ref, out_$i1275: i8, out_$i1276: i32, out_$i1277: i32, out_$i1278: i1, out_$p1279: ref, out_$i1280: i32, out_$p1281: ref, out_$i1282: i8, out_$i1283: i32, out_$i1284: i32, out_$i1285: i1, out_$p1287: ref, out_$p1288: ref, out_$p1289: ref, out_$p1290: ref, out_$i1291: i64, out_$i1292: i1, out_$p1294: ref, out_$p1295: ref, out_$p1293: ref, out_$i1296: i64, out_$i1297: i1)
{

  entry:
    out_$p1264, out_$p1265, out_$p1266, out_$p1267, out_$i1268, out_$i1269, out_$i1270, out_$p1271, out_$i1272, out_$i1273, out_$p1274, out_$i1275, out_$i1276, out_$i1277, out_$i1278, out_$p1279, out_$i1280, out_$p1281, out_$i1282, out_$i1283, out_$i1284, out_$i1285, out_$p1287, out_$p1288, out_$p1289, out_$p1290, out_$i1291, out_$i1292, out_$p1294, out_$p1295, out_$p1293, out_$i1296, out_$i1297 := in_$p1264, in_$p1265, in_$p1266, in_$p1267, in_$i1268, in_$i1269, in_$i1270, in_$p1271, in_$i1272, in_$i1273, in_$p1274, in_$i1275, in_$i1276, in_$i1277, in_$i1278, in_$p1279, in_$i1280, in_$p1281, in_$i1282, in_$i1283, in_$i1284, in_$i1285, in_$p1287, in_$p1288, in_$p1289, in_$p1290, in_$i1291, in_$i1292, in_$p1294, in_$p1295, in_$p1293, in_$i1296, in_$i1297;
    goto $bb730, exit;

  $bb730:
    assume {:verifier.code 0} true;
    goto corral_source_split_1909;

  $bb744:
    assume out_$i1297 == 1;
    assume {:verifier.code 0} true;
    out_$p1264 := out_$p1293;
    goto $bb744_dummy;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb744;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$i1297 := $ne.i64(out_$i1296, 0);
    goto corral_source_split_1951;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$i1296 := $p2i.ref.i64(out_$p1293);
    goto corral_source_split_1950;

  $bb743:
    assume {:verifier.code 0} true;
    goto corral_source_split_1949;

  $bb742:
    assume !(out_$i1292 == 1);
    assume {:verifier.code 0} true;
    out_$p1293 := $0.ref;
    goto $bb743;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    out_$p1293 := out_$p1295;
    goto $bb743;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$p1295 := $add.ref(out_$p1294, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1947;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$p1294 := $bitcast.ref.ref(out_$p1290);
    goto corral_source_split_1946;

  $bb741:
    assume out_$i1292 == 1;
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb741, $bb742;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$i1292 := $ne.i64(out_$i1291, 0);
    goto corral_source_split_1943;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$i1291 := $p2i.ref.i64(out_$p1290);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$p1290 := $load.ref($M.0, out_$p1289);
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$p1289 := $add.ref($add.ref(out_$p1288, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$p1288 := $bitcast.ref.ref(out_$p1287);
    goto corral_source_split_1939;

  $bb740:
    assume {:verifier.code 0} true;
    out_$p1287 := $add.ref($add.ref($add.ref(out_$p1264, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1938;

  $bb739:
    assume {:verifier.code 0} true;
    goto $bb740;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb732:
    assume out_$i1270 == 1;
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb732, $bb733;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$i1270 := $ne.i64(out_$i1268, out_$i1269);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$i1269 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i1268 := $p2i.ref.i64(out_$p1267);
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$p1267 := $load.ref($M.0, out_$p1266);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$p1266 := $add.ref($add.ref(out_$p1265, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1912;

  $bb731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_$p1265 := atm_sk(out_$p1264);
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb738:
    assume !(out_$i1285 == 1);
    assume {:verifier.code 0} true;
    goto $bb739;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb738;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$i1285 := $ne.i32(out_$i1284, 0);
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$i1284 := $ashr.i32(out_$i1280, out_$i1283);
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$i1283 := $sext.i8.i32(out_$i1282);
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$i1282 := $load.i8($M.0, out_$p1281);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$p1281 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i1280 := $load.i32($M.0, out_$p1279);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$p1279 := $add.ref($add.ref(out_$p1265, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1930;

  $bb736:
    assume !(out_$i1278 == 1);
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb736;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i1278 := $ne.i32(out_$i1277, 0);
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i1277 := $ashr.i32(out_$i1273, out_$i1276);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i1276 := $sext.i8.i32(out_$i1275);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$i1275 := $load.i8($M.0, out_$p1274);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$p1274 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$i1273 := $sext.i16.i32(out_$i1272);
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$i1272 := $load.i16($M.0, out_$p1271);
    goto corral_source_split_1921;

  $bb734:
    assume {:verifier.code 0} true;
    out_$p1271 := $add.ref($add.ref(out_$p1265, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1920;

  $bb733:
    assume !(out_$i1270 == 1);
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb744_dummy:
    call {:si_unique_call 1} out_$p1264, out_$p1265, out_$p1266, out_$p1267, out_$i1268, out_$i1269, out_$i1270, out_$p1271, out_$i1272, out_$i1273, out_$p1274, out_$i1275, out_$i1276, out_$i1277, out_$i1278, out_$p1279, out_$i1280, out_$p1281, out_$i1282, out_$i1283, out_$i1284, out_$i1285, out_$p1287, out_$p1288, out_$p1289, out_$p1290, out_$i1291, out_$i1292, out_$p1294, out_$p1295, out_$p1293, out_$i1296, out_$i1297 := atmtcp_v_ioctl_loop_$bb730(in_$p0, in_$p3, out_$p1264, out_$p1265, out_$p1266, out_$p1267, out_$i1268, out_$i1269, out_$i1270, out_$p1271, out_$i1272, out_$i1273, out_$p1274, out_$i1275, out_$i1276, out_$i1277, out_$i1278, out_$p1279, out_$i1280, out_$p1281, out_$i1282, out_$i1283, out_$i1284, out_$i1285, out_$p1287, out_$p1288, out_$p1289, out_$p1290, out_$i1291, out_$i1292, out_$p1294, out_$p1295, out_$p1293, out_$i1296, out_$i1297);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb730(in_$p0: ref, in_$p3: ref, in_$p1264: ref, in_$p1265: ref, in_$p1266: ref, in_$p1267: ref, in_$i1268: i64, in_$i1269: i64, in_$i1270: i1, in_$p1271: ref, in_$i1272: i16, in_$i1273: i32, in_$p1274: ref, in_$i1275: i8, in_$i1276: i32, in_$i1277: i32, in_$i1278: i1, in_$p1279: ref, in_$i1280: i32, in_$p1281: ref, in_$i1282: i8, in_$i1283: i32, in_$i1284: i32, in_$i1285: i1, in_$p1287: ref, in_$p1288: ref, in_$p1289: ref, in_$p1290: ref, in_$i1291: i64, in_$i1292: i1, in_$p1294: ref, in_$p1295: ref, in_$p1293: ref, in_$i1296: i64, in_$i1297: i1) returns (out_$p1264: ref, out_$p1265: ref, out_$p1266: ref, out_$p1267: ref, out_$i1268: i64, out_$i1269: i64, out_$i1270: i1, out_$p1271: ref, out_$i1272: i16, out_$i1273: i32, out_$p1274: ref, out_$i1275: i8, out_$i1276: i32, out_$i1277: i32, out_$i1278: i1, out_$p1279: ref, out_$i1280: i32, out_$p1281: ref, out_$i1282: i8, out_$i1283: i32, out_$i1284: i32, out_$i1285: i1, out_$p1287: ref, out_$p1288: ref, out_$p1289: ref, out_$p1290: ref, out_$i1291: i64, out_$i1292: i1, out_$p1294: ref, out_$p1295: ref, out_$p1293: ref, out_$i1296: i64, out_$i1297: i1);



implementation atmtcp_v_ioctl_loop_$bb706(in_$p0: ref, in_$p3: ref, in_$p1222: ref, in_$p1223: ref, in_$p1224: ref, in_$p1225: ref, in_$i1226: i64, in_$i1227: i64, in_$i1228: i1, in_$p1229: ref, in_$i1230: i16, in_$i1231: i32, in_$p1232: ref, in_$i1233: i8, in_$i1234: i32, in_$i1235: i32, in_$i1236: i1, in_$p1237: ref, in_$i1238: i32, in_$p1239: ref, in_$i1240: i8, in_$i1241: i32, in_$i1242: i32, in_$i1243: i1, in_$p1245: ref, in_$p1246: ref, in_$p1247: ref, in_$p1248: ref, in_$i1249: i64, in_$i1250: i1, in_$p1252: ref, in_$p1253: ref, in_$p1251: ref, in_$i1254: i64, in_$i1255: i1) returns (out_$p1222: ref, out_$p1223: ref, out_$p1224: ref, out_$p1225: ref, out_$i1226: i64, out_$i1227: i64, out_$i1228: i1, out_$p1229: ref, out_$i1230: i16, out_$i1231: i32, out_$p1232: ref, out_$i1233: i8, out_$i1234: i32, out_$i1235: i32, out_$i1236: i1, out_$p1237: ref, out_$i1238: i32, out_$p1239: ref, out_$i1240: i8, out_$i1241: i32, out_$i1242: i32, out_$i1243: i1, out_$p1245: ref, out_$p1246: ref, out_$p1247: ref, out_$p1248: ref, out_$i1249: i64, out_$i1250: i1, out_$p1252: ref, out_$p1253: ref, out_$p1251: ref, out_$i1254: i64, out_$i1255: i1)
{

  entry:
    out_$p1222, out_$p1223, out_$p1224, out_$p1225, out_$i1226, out_$i1227, out_$i1228, out_$p1229, out_$i1230, out_$i1231, out_$p1232, out_$i1233, out_$i1234, out_$i1235, out_$i1236, out_$p1237, out_$i1238, out_$p1239, out_$i1240, out_$i1241, out_$i1242, out_$i1243, out_$p1245, out_$p1246, out_$p1247, out_$p1248, out_$i1249, out_$i1250, out_$p1252, out_$p1253, out_$p1251, out_$i1254, out_$i1255 := in_$p1222, in_$p1223, in_$p1224, in_$p1225, in_$i1226, in_$i1227, in_$i1228, in_$p1229, in_$i1230, in_$i1231, in_$p1232, in_$i1233, in_$i1234, in_$i1235, in_$i1236, in_$p1237, in_$i1238, in_$p1239, in_$i1240, in_$i1241, in_$i1242, in_$i1243, in_$p1245, in_$p1246, in_$p1247, in_$p1248, in_$i1249, in_$i1250, in_$p1252, in_$p1253, in_$p1251, in_$i1254, in_$i1255;
    goto $bb706, exit;

  $bb706:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  $bb720:
    assume out_$i1255 == 1;
    assume {:verifier.code 0} true;
    out_$p1222 := out_$p1251;
    goto $bb720_dummy;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb720;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$i1255 := $ne.i64(out_$i1254, 0);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i1254 := $p2i.ref.i64(out_$p1251);
    goto corral_source_split_1890;

  $bb719:
    assume {:verifier.code 0} true;
    goto corral_source_split_1889;

  $bb718:
    assume !(out_$i1250 == 1);
    assume {:verifier.code 0} true;
    out_$p1251 := $0.ref;
    goto $bb719;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    out_$p1251 := out_$p1253;
    goto $bb719;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$p1253 := $add.ref(out_$p1252, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$p1252 := $bitcast.ref.ref(out_$p1248);
    goto corral_source_split_1886;

  $bb717:
    assume out_$i1250 == 1;
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb717, $bb718;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$i1250 := $ne.i64(out_$i1249, 0);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$i1249 := $p2i.ref.i64(out_$p1248);
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$p1248 := $load.ref($M.0, out_$p1247);
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$p1247 := $add.ref($add.ref(out_$p1246, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    out_$p1246 := $bitcast.ref.ref(out_$p1245);
    goto corral_source_split_1879;

  $bb716:
    assume {:verifier.code 0} true;
    out_$p1245 := $add.ref($add.ref($add.ref(out_$p1222, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1878;

  $bb715:
    assume {:verifier.code 0} true;
    goto $bb716;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb708:
    assume out_$i1228 == 1;
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb708, $bb709;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i1228 := $ne.i64(out_$i1226, out_$i1227);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$i1227 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$i1226 := $p2i.ref.i64(out_$p1225);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$p1225 := $load.ref($M.0, out_$p1224);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$p1224 := $add.ref($add.ref(out_$p1223, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1852;

  $bb707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} out_$p1223 := atm_sk(out_$p1222);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb714:
    assume !(out_$i1243 == 1);
    assume {:verifier.code 0} true;
    goto $bb715;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb714;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i1243 := $ne.i32(out_$i1242, 0);
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i1242 := $ashr.i32(out_$i1238, out_$i1241);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i1241 := $sext.i8.i32(out_$i1240);
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i1240 := $load.i8($M.0, out_$p1239);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$p1239 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$i1238 := $load.i32($M.0, out_$p1237);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$p1237 := $add.ref($add.ref(out_$p1223, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1870;

  $bb712:
    assume !(out_$i1236 == 1);
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb712;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    out_$i1236 := $ne.i32(out_$i1235, 0);
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$i1235 := $ashr.i32(out_$i1231, out_$i1234);
    goto corral_source_split_1866;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$i1234 := $sext.i8.i32(out_$i1233);
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$i1233 := $load.i8($M.0, out_$p1232);
    goto corral_source_split_1864;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    out_$p1232 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    out_$i1231 := $sext.i16.i32(out_$i1230);
    goto corral_source_split_1862;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i1230 := $load.i16($M.0, out_$p1229);
    goto corral_source_split_1861;

  $bb710:
    assume {:verifier.code 0} true;
    out_$p1229 := $add.ref($add.ref(out_$p1223, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1860;

  $bb709:
    assume !(out_$i1228 == 1);
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb720_dummy:
    call {:si_unique_call 1} out_$p1222, out_$p1223, out_$p1224, out_$p1225, out_$i1226, out_$i1227, out_$i1228, out_$p1229, out_$i1230, out_$i1231, out_$p1232, out_$i1233, out_$i1234, out_$i1235, out_$i1236, out_$p1237, out_$i1238, out_$p1239, out_$i1240, out_$i1241, out_$i1242, out_$i1243, out_$p1245, out_$p1246, out_$p1247, out_$p1248, out_$i1249, out_$i1250, out_$p1252, out_$p1253, out_$p1251, out_$i1254, out_$i1255 := atmtcp_v_ioctl_loop_$bb706(in_$p0, in_$p3, out_$p1222, out_$p1223, out_$p1224, out_$p1225, out_$i1226, out_$i1227, out_$i1228, out_$p1229, out_$i1230, out_$i1231, out_$p1232, out_$i1233, out_$i1234, out_$i1235, out_$i1236, out_$p1237, out_$i1238, out_$p1239, out_$i1240, out_$i1241, out_$i1242, out_$i1243, out_$p1245, out_$p1246, out_$p1247, out_$p1248, out_$i1249, out_$i1250, out_$p1252, out_$p1253, out_$p1251, out_$i1254, out_$i1255);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb706(in_$p0: ref, in_$p3: ref, in_$p1222: ref, in_$p1223: ref, in_$p1224: ref, in_$p1225: ref, in_$i1226: i64, in_$i1227: i64, in_$i1228: i1, in_$p1229: ref, in_$i1230: i16, in_$i1231: i32, in_$p1232: ref, in_$i1233: i8, in_$i1234: i32, in_$i1235: i32, in_$i1236: i1, in_$p1237: ref, in_$i1238: i32, in_$p1239: ref, in_$i1240: i8, in_$i1241: i32, in_$i1242: i32, in_$i1243: i1, in_$p1245: ref, in_$p1246: ref, in_$p1247: ref, in_$p1248: ref, in_$i1249: i64, in_$i1250: i1, in_$p1252: ref, in_$p1253: ref, in_$p1251: ref, in_$i1254: i64, in_$i1255: i1) returns (out_$p1222: ref, out_$p1223: ref, out_$p1224: ref, out_$p1225: ref, out_$i1226: i64, out_$i1227: i64, out_$i1228: i1, out_$p1229: ref, out_$i1230: i16, out_$i1231: i32, out_$p1232: ref, out_$i1233: i8, out_$i1234: i32, out_$i1235: i32, out_$i1236: i1, out_$p1237: ref, out_$i1238: i32, out_$p1239: ref, out_$i1240: i8, out_$i1241: i32, out_$i1242: i32, out_$i1243: i1, out_$p1245: ref, out_$p1246: ref, out_$p1247: ref, out_$p1248: ref, out_$i1249: i64, out_$i1250: i1, out_$p1252: ref, out_$p1253: ref, out_$p1251: ref, out_$i1254: i64, out_$i1255: i1);



implementation atmtcp_v_ioctl_loop_$bb682(in_$p0: ref, in_$p3: ref, in_$p1180: ref, in_$p1181: ref, in_$p1182: ref, in_$p1183: ref, in_$i1184: i64, in_$i1185: i64, in_$i1186: i1, in_$p1187: ref, in_$i1188: i16, in_$i1189: i32, in_$p1190: ref, in_$i1191: i8, in_$i1192: i32, in_$i1193: i32, in_$i1194: i1, in_$p1195: ref, in_$i1196: i32, in_$p1197: ref, in_$i1198: i8, in_$i1199: i32, in_$i1200: i32, in_$i1201: i1, in_$p1203: ref, in_$p1204: ref, in_$p1205: ref, in_$p1206: ref, in_$i1207: i64, in_$i1208: i1, in_$p1210: ref, in_$p1211: ref, in_$p1209: ref, in_$i1212: i64, in_$i1213: i1) returns (out_$p1180: ref, out_$p1181: ref, out_$p1182: ref, out_$p1183: ref, out_$i1184: i64, out_$i1185: i64, out_$i1186: i1, out_$p1187: ref, out_$i1188: i16, out_$i1189: i32, out_$p1190: ref, out_$i1191: i8, out_$i1192: i32, out_$i1193: i32, out_$i1194: i1, out_$p1195: ref, out_$i1196: i32, out_$p1197: ref, out_$i1198: i8, out_$i1199: i32, out_$i1200: i32, out_$i1201: i1, out_$p1203: ref, out_$p1204: ref, out_$p1205: ref, out_$p1206: ref, out_$i1207: i64, out_$i1208: i1, out_$p1210: ref, out_$p1211: ref, out_$p1209: ref, out_$i1212: i64, out_$i1213: i1)
{

  entry:
    out_$p1180, out_$p1181, out_$p1182, out_$p1183, out_$i1184, out_$i1185, out_$i1186, out_$p1187, out_$i1188, out_$i1189, out_$p1190, out_$i1191, out_$i1192, out_$i1193, out_$i1194, out_$p1195, out_$i1196, out_$p1197, out_$i1198, out_$i1199, out_$i1200, out_$i1201, out_$p1203, out_$p1204, out_$p1205, out_$p1206, out_$i1207, out_$i1208, out_$p1210, out_$p1211, out_$p1209, out_$i1212, out_$i1213 := in_$p1180, in_$p1181, in_$p1182, in_$p1183, in_$i1184, in_$i1185, in_$i1186, in_$p1187, in_$i1188, in_$i1189, in_$p1190, in_$i1191, in_$i1192, in_$i1193, in_$i1194, in_$p1195, in_$i1196, in_$p1197, in_$i1198, in_$i1199, in_$i1200, in_$i1201, in_$p1203, in_$p1204, in_$p1205, in_$p1206, in_$i1207, in_$i1208, in_$p1210, in_$p1211, in_$p1209, in_$i1212, in_$i1213;
    goto $bb682, exit;

  $bb682:
    assume {:verifier.code 0} true;
    goto corral_source_split_1789;

  $bb696:
    assume out_$i1213 == 1;
    assume {:verifier.code 0} true;
    out_$p1180 := out_$p1209;
    goto $bb696_dummy;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb696;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$i1213 := $ne.i64(out_$i1212, 0);
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i1212 := $p2i.ref.i64(out_$p1209);
    goto corral_source_split_1830;

  $bb695:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  $bb694:
    assume !(out_$i1208 == 1);
    assume {:verifier.code 0} true;
    out_$p1209 := $0.ref;
    goto $bb695;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$p1209 := out_$p1211;
    goto $bb695;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$p1211 := $add.ref(out_$p1210, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$p1210 := $bitcast.ref.ref(out_$p1206);
    goto corral_source_split_1826;

  $bb693:
    assume out_$i1208 == 1;
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb693, $bb694;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$i1208 := $ne.i64(out_$i1207, 0);
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$i1207 := $p2i.ref.i64(out_$p1206);
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$p1206 := $load.ref($M.0, out_$p1205);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$p1205 := $add.ref($add.ref(out_$p1204, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$p1204 := $bitcast.ref.ref(out_$p1203);
    goto corral_source_split_1819;

  $bb692:
    assume {:verifier.code 0} true;
    out_$p1203 := $add.ref($add.ref($add.ref(out_$p1180, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1818;

  $bb691:
    assume {:verifier.code 0} true;
    goto $bb692;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb684:
    assume out_$i1186 == 1;
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb684, $bb685;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i1186 := $ne.i64(out_$i1184, out_$i1185);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$i1185 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$i1184 := $p2i.ref.i64(out_$p1183);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$p1183 := $load.ref($M.0, out_$p1182);
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$p1182 := $add.ref($add.ref(out_$p1181, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1792;

  $bb683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} out_$p1181 := atm_sk(out_$p1180);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb690:
    assume !(out_$i1201 == 1);
    assume {:verifier.code 0} true;
    goto $bb691;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb690;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$i1201 := $ne.i32(out_$i1200, 0);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$i1200 := $ashr.i32(out_$i1196, out_$i1199);
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$i1199 := $sext.i8.i32(out_$i1198);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$i1198 := $load.i8($M.0, out_$p1197);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$p1197 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$i1196 := $load.i32($M.0, out_$p1195);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$p1195 := $add.ref($add.ref(out_$p1181, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1810;

  $bb688:
    assume !(out_$i1194 == 1);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb688;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$i1194 := $ne.i32(out_$i1193, 0);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i1193 := $ashr.i32(out_$i1189, out_$i1192);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i1192 := $sext.i8.i32(out_$i1191);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$i1191 := $load.i8($M.0, out_$p1190);
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p1190 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$i1189 := $sext.i16.i32(out_$i1188);
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i1188 := $load.i16($M.0, out_$p1187);
    goto corral_source_split_1801;

  $bb686:
    assume {:verifier.code 0} true;
    out_$p1187 := $add.ref($add.ref(out_$p1181, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1800;

  $bb685:
    assume !(out_$i1186 == 1);
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb696_dummy:
    call {:si_unique_call 1} out_$p1180, out_$p1181, out_$p1182, out_$p1183, out_$i1184, out_$i1185, out_$i1186, out_$p1187, out_$i1188, out_$i1189, out_$p1190, out_$i1191, out_$i1192, out_$i1193, out_$i1194, out_$p1195, out_$i1196, out_$p1197, out_$i1198, out_$i1199, out_$i1200, out_$i1201, out_$p1203, out_$p1204, out_$p1205, out_$p1206, out_$i1207, out_$i1208, out_$p1210, out_$p1211, out_$p1209, out_$i1212, out_$i1213 := atmtcp_v_ioctl_loop_$bb682(in_$p0, in_$p3, out_$p1180, out_$p1181, out_$p1182, out_$p1183, out_$i1184, out_$i1185, out_$i1186, out_$p1187, out_$i1188, out_$i1189, out_$p1190, out_$i1191, out_$i1192, out_$i1193, out_$i1194, out_$p1195, out_$i1196, out_$p1197, out_$i1198, out_$i1199, out_$i1200, out_$i1201, out_$p1203, out_$p1204, out_$p1205, out_$p1206, out_$i1207, out_$i1208, out_$p1210, out_$p1211, out_$p1209, out_$i1212, out_$i1213);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb682(in_$p0: ref, in_$p3: ref, in_$p1180: ref, in_$p1181: ref, in_$p1182: ref, in_$p1183: ref, in_$i1184: i64, in_$i1185: i64, in_$i1186: i1, in_$p1187: ref, in_$i1188: i16, in_$i1189: i32, in_$p1190: ref, in_$i1191: i8, in_$i1192: i32, in_$i1193: i32, in_$i1194: i1, in_$p1195: ref, in_$i1196: i32, in_$p1197: ref, in_$i1198: i8, in_$i1199: i32, in_$i1200: i32, in_$i1201: i1, in_$p1203: ref, in_$p1204: ref, in_$p1205: ref, in_$p1206: ref, in_$i1207: i64, in_$i1208: i1, in_$p1210: ref, in_$p1211: ref, in_$p1209: ref, in_$i1212: i64, in_$i1213: i1) returns (out_$p1180: ref, out_$p1181: ref, out_$p1182: ref, out_$p1183: ref, out_$i1184: i64, out_$i1185: i64, out_$i1186: i1, out_$p1187: ref, out_$i1188: i16, out_$i1189: i32, out_$p1190: ref, out_$i1191: i8, out_$i1192: i32, out_$i1193: i32, out_$i1194: i1, out_$p1195: ref, out_$i1196: i32, out_$p1197: ref, out_$i1198: i8, out_$i1199: i32, out_$i1200: i32, out_$i1201: i1, out_$p1203: ref, out_$p1204: ref, out_$p1205: ref, out_$p1206: ref, out_$i1207: i64, out_$i1208: i1, out_$p1210: ref, out_$p1211: ref, out_$p1209: ref, out_$i1212: i64, out_$i1213: i1);



implementation atmtcp_v_ioctl_loop_$bb658(in_$p0: ref, in_$p3: ref, in_$p1138: ref, in_$p1139: ref, in_$p1140: ref, in_$p1141: ref, in_$i1142: i64, in_$i1143: i64, in_$i1144: i1, in_$p1145: ref, in_$i1146: i16, in_$i1147: i32, in_$p1148: ref, in_$i1149: i8, in_$i1150: i32, in_$i1151: i32, in_$i1152: i1, in_$p1153: ref, in_$i1154: i32, in_$p1155: ref, in_$i1156: i8, in_$i1157: i32, in_$i1158: i32, in_$i1159: i1, in_$p1161: ref, in_$p1162: ref, in_$p1163: ref, in_$p1164: ref, in_$i1165: i64, in_$i1166: i1, in_$p1168: ref, in_$p1169: ref, in_$p1167: ref, in_$i1170: i64, in_$i1171: i1) returns (out_$p1138: ref, out_$p1139: ref, out_$p1140: ref, out_$p1141: ref, out_$i1142: i64, out_$i1143: i64, out_$i1144: i1, out_$p1145: ref, out_$i1146: i16, out_$i1147: i32, out_$p1148: ref, out_$i1149: i8, out_$i1150: i32, out_$i1151: i32, out_$i1152: i1, out_$p1153: ref, out_$i1154: i32, out_$p1155: ref, out_$i1156: i8, out_$i1157: i32, out_$i1158: i32, out_$i1159: i1, out_$p1161: ref, out_$p1162: ref, out_$p1163: ref, out_$p1164: ref, out_$i1165: i64, out_$i1166: i1, out_$p1168: ref, out_$p1169: ref, out_$p1167: ref, out_$i1170: i64, out_$i1171: i1)
{

  entry:
    out_$p1138, out_$p1139, out_$p1140, out_$p1141, out_$i1142, out_$i1143, out_$i1144, out_$p1145, out_$i1146, out_$i1147, out_$p1148, out_$i1149, out_$i1150, out_$i1151, out_$i1152, out_$p1153, out_$i1154, out_$p1155, out_$i1156, out_$i1157, out_$i1158, out_$i1159, out_$p1161, out_$p1162, out_$p1163, out_$p1164, out_$i1165, out_$i1166, out_$p1168, out_$p1169, out_$p1167, out_$i1170, out_$i1171 := in_$p1138, in_$p1139, in_$p1140, in_$p1141, in_$i1142, in_$i1143, in_$i1144, in_$p1145, in_$i1146, in_$i1147, in_$p1148, in_$i1149, in_$i1150, in_$i1151, in_$i1152, in_$p1153, in_$i1154, in_$p1155, in_$i1156, in_$i1157, in_$i1158, in_$i1159, in_$p1161, in_$p1162, in_$p1163, in_$p1164, in_$i1165, in_$i1166, in_$p1168, in_$p1169, in_$p1167, in_$i1170, in_$i1171;
    goto $bb658, exit;

  $bb658:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  $bb672:
    assume out_$i1171 == 1;
    assume {:verifier.code 0} true;
    out_$p1138 := out_$p1167;
    goto $bb672_dummy;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb672;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$i1171 := $ne.i64(out_$i1170, 0);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$i1170 := $p2i.ref.i64(out_$p1167);
    goto corral_source_split_1770;

  $bb671:
    assume {:verifier.code 0} true;
    goto corral_source_split_1769;

  $bb670:
    assume !(out_$i1166 == 1);
    assume {:verifier.code 0} true;
    out_$p1167 := $0.ref;
    goto $bb671;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$p1167 := out_$p1169;
    goto $bb671;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$p1169 := $add.ref(out_$p1168, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$p1168 := $bitcast.ref.ref(out_$p1164);
    goto corral_source_split_1766;

  $bb669:
    assume out_$i1166 == 1;
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb669, $bb670;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$i1166 := $ne.i64(out_$i1165, 0);
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    out_$i1165 := $p2i.ref.i64(out_$p1164);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$p1164 := $load.ref($M.0, out_$p1163);
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    out_$p1163 := $add.ref($add.ref(out_$p1162, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$p1162 := $bitcast.ref.ref(out_$p1161);
    goto corral_source_split_1759;

  $bb668:
    assume {:verifier.code 0} true;
    out_$p1161 := $add.ref($add.ref($add.ref(out_$p1138, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1758;

  $bb667:
    assume {:verifier.code 0} true;
    goto $bb668;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb660:
    assume out_$i1144 == 1;
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb660, $bb661;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$i1144 := $ne.i64(out_$i1142, out_$i1143);
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$i1143 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i1142 := $p2i.ref.i64(out_$p1141);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$p1141 := $load.ref($M.0, out_$p1140);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$p1140 := $add.ref($add.ref(out_$p1139, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1732;

  $bb659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} out_$p1139 := atm_sk(out_$p1138);
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb666:
    assume !(out_$i1159 == 1);
    assume {:verifier.code 0} true;
    goto $bb667;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb666;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$i1159 := $ne.i32(out_$i1158, 0);
    goto corral_source_split_1756;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i1158 := $ashr.i32(out_$i1154, out_$i1157);
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    out_$i1157 := $sext.i8.i32(out_$i1156);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$i1156 := $load.i8($M.0, out_$p1155);
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$p1155 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$i1154 := $load.i32($M.0, out_$p1153);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$p1153 := $add.ref($add.ref(out_$p1139, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1750;

  $bb664:
    assume !(out_$i1152 == 1);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb664;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$i1152 := $ne.i32(out_$i1151, 0);
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$i1151 := $ashr.i32(out_$i1147, out_$i1150);
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i1150 := $sext.i8.i32(out_$i1149);
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    out_$i1149 := $load.i8($M.0, out_$p1148);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$p1148 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1743;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$i1147 := $sext.i16.i32(out_$i1146);
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    out_$i1146 := $load.i16($M.0, out_$p1145);
    goto corral_source_split_1741;

  $bb662:
    assume {:verifier.code 0} true;
    out_$p1145 := $add.ref($add.ref(out_$p1139, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1740;

  $bb661:
    assume !(out_$i1144 == 1);
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb672_dummy:
    call {:si_unique_call 1} out_$p1138, out_$p1139, out_$p1140, out_$p1141, out_$i1142, out_$i1143, out_$i1144, out_$p1145, out_$i1146, out_$i1147, out_$p1148, out_$i1149, out_$i1150, out_$i1151, out_$i1152, out_$p1153, out_$i1154, out_$p1155, out_$i1156, out_$i1157, out_$i1158, out_$i1159, out_$p1161, out_$p1162, out_$p1163, out_$p1164, out_$i1165, out_$i1166, out_$p1168, out_$p1169, out_$p1167, out_$i1170, out_$i1171 := atmtcp_v_ioctl_loop_$bb658(in_$p0, in_$p3, out_$p1138, out_$p1139, out_$p1140, out_$p1141, out_$i1142, out_$i1143, out_$i1144, out_$p1145, out_$i1146, out_$i1147, out_$p1148, out_$i1149, out_$i1150, out_$i1151, out_$i1152, out_$p1153, out_$i1154, out_$p1155, out_$i1156, out_$i1157, out_$i1158, out_$i1159, out_$p1161, out_$p1162, out_$p1163, out_$p1164, out_$i1165, out_$i1166, out_$p1168, out_$p1169, out_$p1167, out_$i1170, out_$i1171);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb658(in_$p0: ref, in_$p3: ref, in_$p1138: ref, in_$p1139: ref, in_$p1140: ref, in_$p1141: ref, in_$i1142: i64, in_$i1143: i64, in_$i1144: i1, in_$p1145: ref, in_$i1146: i16, in_$i1147: i32, in_$p1148: ref, in_$i1149: i8, in_$i1150: i32, in_$i1151: i32, in_$i1152: i1, in_$p1153: ref, in_$i1154: i32, in_$p1155: ref, in_$i1156: i8, in_$i1157: i32, in_$i1158: i32, in_$i1159: i1, in_$p1161: ref, in_$p1162: ref, in_$p1163: ref, in_$p1164: ref, in_$i1165: i64, in_$i1166: i1, in_$p1168: ref, in_$p1169: ref, in_$p1167: ref, in_$i1170: i64, in_$i1171: i1) returns (out_$p1138: ref, out_$p1139: ref, out_$p1140: ref, out_$p1141: ref, out_$i1142: i64, out_$i1143: i64, out_$i1144: i1, out_$p1145: ref, out_$i1146: i16, out_$i1147: i32, out_$p1148: ref, out_$i1149: i8, out_$i1150: i32, out_$i1151: i32, out_$i1152: i1, out_$p1153: ref, out_$i1154: i32, out_$p1155: ref, out_$i1156: i8, out_$i1157: i32, out_$i1158: i32, out_$i1159: i1, out_$p1161: ref, out_$p1162: ref, out_$p1163: ref, out_$p1164: ref, out_$i1165: i64, out_$i1166: i1, out_$p1168: ref, out_$p1169: ref, out_$p1167: ref, out_$i1170: i64, out_$i1171: i1);



implementation atmtcp_v_ioctl_loop_$bb634(in_$p0: ref, in_$p3: ref, in_$p1096: ref, in_$p1097: ref, in_$p1098: ref, in_$p1099: ref, in_$i1100: i64, in_$i1101: i64, in_$i1102: i1, in_$p1103: ref, in_$i1104: i16, in_$i1105: i32, in_$p1106: ref, in_$i1107: i8, in_$i1108: i32, in_$i1109: i32, in_$i1110: i1, in_$p1111: ref, in_$i1112: i32, in_$p1113: ref, in_$i1114: i8, in_$i1115: i32, in_$i1116: i32, in_$i1117: i1, in_$p1119: ref, in_$p1120: ref, in_$p1121: ref, in_$p1122: ref, in_$i1123: i64, in_$i1124: i1, in_$p1126: ref, in_$p1127: ref, in_$p1125: ref, in_$i1128: i64, in_$i1129: i1) returns (out_$p1096: ref, out_$p1097: ref, out_$p1098: ref, out_$p1099: ref, out_$i1100: i64, out_$i1101: i64, out_$i1102: i1, out_$p1103: ref, out_$i1104: i16, out_$i1105: i32, out_$p1106: ref, out_$i1107: i8, out_$i1108: i32, out_$i1109: i32, out_$i1110: i1, out_$p1111: ref, out_$i1112: i32, out_$p1113: ref, out_$i1114: i8, out_$i1115: i32, out_$i1116: i32, out_$i1117: i1, out_$p1119: ref, out_$p1120: ref, out_$p1121: ref, out_$p1122: ref, out_$i1123: i64, out_$i1124: i1, out_$p1126: ref, out_$p1127: ref, out_$p1125: ref, out_$i1128: i64, out_$i1129: i1)
{

  entry:
    out_$p1096, out_$p1097, out_$p1098, out_$p1099, out_$i1100, out_$i1101, out_$i1102, out_$p1103, out_$i1104, out_$i1105, out_$p1106, out_$i1107, out_$i1108, out_$i1109, out_$i1110, out_$p1111, out_$i1112, out_$p1113, out_$i1114, out_$i1115, out_$i1116, out_$i1117, out_$p1119, out_$p1120, out_$p1121, out_$p1122, out_$i1123, out_$i1124, out_$p1126, out_$p1127, out_$p1125, out_$i1128, out_$i1129 := in_$p1096, in_$p1097, in_$p1098, in_$p1099, in_$i1100, in_$i1101, in_$i1102, in_$p1103, in_$i1104, in_$i1105, in_$p1106, in_$i1107, in_$i1108, in_$i1109, in_$i1110, in_$p1111, in_$i1112, in_$p1113, in_$i1114, in_$i1115, in_$i1116, in_$i1117, in_$p1119, in_$p1120, in_$p1121, in_$p1122, in_$i1123, in_$i1124, in_$p1126, in_$p1127, in_$p1125, in_$i1128, in_$i1129;
    goto $bb634, exit;

  $bb634:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  $bb648:
    assume out_$i1129 == 1;
    assume {:verifier.code 0} true;
    out_$p1096 := out_$p1125;
    goto $bb648_dummy;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb648;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i1129 := $ne.i64(out_$i1128, 0);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$i1128 := $p2i.ref.i64(out_$p1125);
    goto corral_source_split_1710;

  $bb647:
    assume {:verifier.code 0} true;
    goto corral_source_split_1709;

  $bb646:
    assume !(out_$i1124 == 1);
    assume {:verifier.code 0} true;
    out_$p1125 := $0.ref;
    goto $bb647;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$p1125 := out_$p1127;
    goto $bb647;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$p1127 := $add.ref(out_$p1126, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$p1126 := $bitcast.ref.ref(out_$p1122);
    goto corral_source_split_1706;

  $bb645:
    assume out_$i1124 == 1;
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb645, $bb646;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i1124 := $ne.i64(out_$i1123, 0);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$i1123 := $p2i.ref.i64(out_$p1122);
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$p1122 := $load.ref($M.0, out_$p1121);
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$p1121 := $add.ref($add.ref(out_$p1120, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    out_$p1120 := $bitcast.ref.ref(out_$p1119);
    goto corral_source_split_1699;

  $bb644:
    assume {:verifier.code 0} true;
    out_$p1119 := $add.ref($add.ref($add.ref(out_$p1096, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1698;

  $bb643:
    assume {:verifier.code 0} true;
    goto $bb644;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb636:
    assume out_$i1102 == 1;
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb636, $bb637;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i1102 := $ne.i64(out_$i1100, out_$i1101);
    goto corral_source_split_1676;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    out_$i1101 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    out_$i1100 := $p2i.ref.i64(out_$p1099);
    goto corral_source_split_1674;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    out_$p1099 := $load.ref($M.0, out_$p1098);
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$p1098 := $add.ref($add.ref(out_$p1097, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1672;

  $bb635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} out_$p1097 := atm_sk(out_$p1096);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb642:
    assume !(out_$i1117 == 1);
    assume {:verifier.code 0} true;
    goto $bb643;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb642;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$i1117 := $ne.i32(out_$i1116, 0);
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$i1116 := $ashr.i32(out_$i1112, out_$i1115);
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$i1115 := $sext.i8.i32(out_$i1114);
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    out_$i1114 := $load.i8($M.0, out_$p1113);
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    out_$p1113 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1692;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$i1112 := $load.i32($M.0, out_$p1111);
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$p1111 := $add.ref($add.ref(out_$p1097, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1690;

  $bb640:
    assume !(out_$i1110 == 1);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb640;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$i1110 := $ne.i32(out_$i1109, 0);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$i1109 := $ashr.i32(out_$i1105, out_$i1108);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i1108 := $sext.i8.i32(out_$i1107);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i1107 := $load.i8($M.0, out_$p1106);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p1106 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$i1105 := $sext.i16.i32(out_$i1104);
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i1104 := $load.i16($M.0, out_$p1103);
    goto corral_source_split_1681;

  $bb638:
    assume {:verifier.code 0} true;
    out_$p1103 := $add.ref($add.ref(out_$p1097, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1680;

  $bb637:
    assume !(out_$i1102 == 1);
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb648_dummy:
    call {:si_unique_call 1} out_$p1096, out_$p1097, out_$p1098, out_$p1099, out_$i1100, out_$i1101, out_$i1102, out_$p1103, out_$i1104, out_$i1105, out_$p1106, out_$i1107, out_$i1108, out_$i1109, out_$i1110, out_$p1111, out_$i1112, out_$p1113, out_$i1114, out_$i1115, out_$i1116, out_$i1117, out_$p1119, out_$p1120, out_$p1121, out_$p1122, out_$i1123, out_$i1124, out_$p1126, out_$p1127, out_$p1125, out_$i1128, out_$i1129 := atmtcp_v_ioctl_loop_$bb634(in_$p0, in_$p3, out_$p1096, out_$p1097, out_$p1098, out_$p1099, out_$i1100, out_$i1101, out_$i1102, out_$p1103, out_$i1104, out_$i1105, out_$p1106, out_$i1107, out_$i1108, out_$i1109, out_$i1110, out_$p1111, out_$i1112, out_$p1113, out_$i1114, out_$i1115, out_$i1116, out_$i1117, out_$p1119, out_$p1120, out_$p1121, out_$p1122, out_$i1123, out_$i1124, out_$p1126, out_$p1127, out_$p1125, out_$i1128, out_$i1129);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb634(in_$p0: ref, in_$p3: ref, in_$p1096: ref, in_$p1097: ref, in_$p1098: ref, in_$p1099: ref, in_$i1100: i64, in_$i1101: i64, in_$i1102: i1, in_$p1103: ref, in_$i1104: i16, in_$i1105: i32, in_$p1106: ref, in_$i1107: i8, in_$i1108: i32, in_$i1109: i32, in_$i1110: i1, in_$p1111: ref, in_$i1112: i32, in_$p1113: ref, in_$i1114: i8, in_$i1115: i32, in_$i1116: i32, in_$i1117: i1, in_$p1119: ref, in_$p1120: ref, in_$p1121: ref, in_$p1122: ref, in_$i1123: i64, in_$i1124: i1, in_$p1126: ref, in_$p1127: ref, in_$p1125: ref, in_$i1128: i64, in_$i1129: i1) returns (out_$p1096: ref, out_$p1097: ref, out_$p1098: ref, out_$p1099: ref, out_$i1100: i64, out_$i1101: i64, out_$i1102: i1, out_$p1103: ref, out_$i1104: i16, out_$i1105: i32, out_$p1106: ref, out_$i1107: i8, out_$i1108: i32, out_$i1109: i32, out_$i1110: i1, out_$p1111: ref, out_$i1112: i32, out_$p1113: ref, out_$i1114: i8, out_$i1115: i32, out_$i1116: i32, out_$i1117: i1, out_$p1119: ref, out_$p1120: ref, out_$p1121: ref, out_$p1122: ref, out_$i1123: i64, out_$i1124: i1, out_$p1126: ref, out_$p1127: ref, out_$p1125: ref, out_$i1128: i64, out_$i1129: i1);



implementation atmtcp_v_ioctl_loop_$bb610(in_$p0: ref, in_$p3: ref, in_$p1054: ref, in_$p1055: ref, in_$p1056: ref, in_$p1057: ref, in_$i1058: i64, in_$i1059: i64, in_$i1060: i1, in_$p1061: ref, in_$i1062: i16, in_$i1063: i32, in_$p1064: ref, in_$i1065: i8, in_$i1066: i32, in_$i1067: i32, in_$i1068: i1, in_$p1069: ref, in_$i1070: i32, in_$p1071: ref, in_$i1072: i8, in_$i1073: i32, in_$i1074: i32, in_$i1075: i1, in_$p1077: ref, in_$p1078: ref, in_$p1079: ref, in_$p1080: ref, in_$i1081: i64, in_$i1082: i1, in_$p1084: ref, in_$p1085: ref, in_$p1083: ref, in_$i1086: i64, in_$i1087: i1) returns (out_$p1054: ref, out_$p1055: ref, out_$p1056: ref, out_$p1057: ref, out_$i1058: i64, out_$i1059: i64, out_$i1060: i1, out_$p1061: ref, out_$i1062: i16, out_$i1063: i32, out_$p1064: ref, out_$i1065: i8, out_$i1066: i32, out_$i1067: i32, out_$i1068: i1, out_$p1069: ref, out_$i1070: i32, out_$p1071: ref, out_$i1072: i8, out_$i1073: i32, out_$i1074: i32, out_$i1075: i1, out_$p1077: ref, out_$p1078: ref, out_$p1079: ref, out_$p1080: ref, out_$i1081: i64, out_$i1082: i1, out_$p1084: ref, out_$p1085: ref, out_$p1083: ref, out_$i1086: i64, out_$i1087: i1)
{

  entry:
    out_$p1054, out_$p1055, out_$p1056, out_$p1057, out_$i1058, out_$i1059, out_$i1060, out_$p1061, out_$i1062, out_$i1063, out_$p1064, out_$i1065, out_$i1066, out_$i1067, out_$i1068, out_$p1069, out_$i1070, out_$p1071, out_$i1072, out_$i1073, out_$i1074, out_$i1075, out_$p1077, out_$p1078, out_$p1079, out_$p1080, out_$i1081, out_$i1082, out_$p1084, out_$p1085, out_$p1083, out_$i1086, out_$i1087 := in_$p1054, in_$p1055, in_$p1056, in_$p1057, in_$i1058, in_$i1059, in_$i1060, in_$p1061, in_$i1062, in_$i1063, in_$p1064, in_$i1065, in_$i1066, in_$i1067, in_$i1068, in_$p1069, in_$i1070, in_$p1071, in_$i1072, in_$i1073, in_$i1074, in_$i1075, in_$p1077, in_$p1078, in_$p1079, in_$p1080, in_$i1081, in_$i1082, in_$p1084, in_$p1085, in_$p1083, in_$i1086, in_$i1087;
    goto $bb610, exit;

  $bb610:
    assume {:verifier.code 0} true;
    goto corral_source_split_1609;

  $bb624:
    assume out_$i1087 == 1;
    assume {:verifier.code 0} true;
    out_$p1054 := out_$p1083;
    goto $bb624_dummy;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb624;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$i1087 := $ne.i64(out_$i1086, 0);
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    out_$i1086 := $p2i.ref.i64(out_$p1083);
    goto corral_source_split_1650;

  $bb623:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  $bb622:
    assume !(out_$i1082 == 1);
    assume {:verifier.code 0} true;
    out_$p1083 := $0.ref;
    goto $bb623;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$p1083 := out_$p1085;
    goto $bb623;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$p1085 := $add.ref(out_$p1084, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    out_$p1084 := $bitcast.ref.ref(out_$p1080);
    goto corral_source_split_1646;

  $bb621:
    assume out_$i1082 == 1;
    goto corral_source_split_1645;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb621, $bb622;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$i1082 := $ne.i64(out_$i1081, 0);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$i1081 := $p2i.ref.i64(out_$p1080);
    goto corral_source_split_1642;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$p1080 := $load.ref($M.0, out_$p1079);
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    out_$p1079 := $add.ref($add.ref(out_$p1078, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$p1078 := $bitcast.ref.ref(out_$p1077);
    goto corral_source_split_1639;

  $bb620:
    assume {:verifier.code 0} true;
    out_$p1077 := $add.ref($add.ref($add.ref(out_$p1054, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1638;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb612:
    assume out_$i1060 == 1;
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb612, $bb613;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$i1060 := $ne.i64(out_$i1058, out_$i1059);
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$i1059 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$i1058 := $p2i.ref.i64(out_$p1057);
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$p1057 := $load.ref($M.0, out_$p1056);
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$p1056 := $add.ref($add.ref(out_$p1055, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1612;

  $bb611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} out_$p1055 := atm_sk(out_$p1054);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb618:
    assume !(out_$i1075 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb618;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$i1075 := $ne.i32(out_$i1074, 0);
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$i1074 := $ashr.i32(out_$i1070, out_$i1073);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$i1073 := $sext.i8.i32(out_$i1072);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i1072 := $load.i8($M.0, out_$p1071);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$p1071 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$i1070 := $load.i32($M.0, out_$p1069);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$p1069 := $add.ref($add.ref(out_$p1055, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1630;

  $bb616:
    assume !(out_$i1068 == 1);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb616;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$i1068 := $ne.i32(out_$i1067, 0);
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i1067 := $ashr.i32(out_$i1063, out_$i1066);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$i1066 := $sext.i8.i32(out_$i1065);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$i1065 := $load.i8($M.0, out_$p1064);
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$p1064 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$i1063 := $sext.i16.i32(out_$i1062);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i1062 := $load.i16($M.0, out_$p1061);
    goto corral_source_split_1621;

  $bb614:
    assume {:verifier.code 0} true;
    out_$p1061 := $add.ref($add.ref(out_$p1055, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1620;

  $bb613:
    assume !(out_$i1060 == 1);
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb624_dummy:
    call {:si_unique_call 1} out_$p1054, out_$p1055, out_$p1056, out_$p1057, out_$i1058, out_$i1059, out_$i1060, out_$p1061, out_$i1062, out_$i1063, out_$p1064, out_$i1065, out_$i1066, out_$i1067, out_$i1068, out_$p1069, out_$i1070, out_$p1071, out_$i1072, out_$i1073, out_$i1074, out_$i1075, out_$p1077, out_$p1078, out_$p1079, out_$p1080, out_$i1081, out_$i1082, out_$p1084, out_$p1085, out_$p1083, out_$i1086, out_$i1087 := atmtcp_v_ioctl_loop_$bb610(in_$p0, in_$p3, out_$p1054, out_$p1055, out_$p1056, out_$p1057, out_$i1058, out_$i1059, out_$i1060, out_$p1061, out_$i1062, out_$i1063, out_$p1064, out_$i1065, out_$i1066, out_$i1067, out_$i1068, out_$p1069, out_$i1070, out_$p1071, out_$i1072, out_$i1073, out_$i1074, out_$i1075, out_$p1077, out_$p1078, out_$p1079, out_$p1080, out_$i1081, out_$i1082, out_$p1084, out_$p1085, out_$p1083, out_$i1086, out_$i1087);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb610(in_$p0: ref, in_$p3: ref, in_$p1054: ref, in_$p1055: ref, in_$p1056: ref, in_$p1057: ref, in_$i1058: i64, in_$i1059: i64, in_$i1060: i1, in_$p1061: ref, in_$i1062: i16, in_$i1063: i32, in_$p1064: ref, in_$i1065: i8, in_$i1066: i32, in_$i1067: i32, in_$i1068: i1, in_$p1069: ref, in_$i1070: i32, in_$p1071: ref, in_$i1072: i8, in_$i1073: i32, in_$i1074: i32, in_$i1075: i1, in_$p1077: ref, in_$p1078: ref, in_$p1079: ref, in_$p1080: ref, in_$i1081: i64, in_$i1082: i1, in_$p1084: ref, in_$p1085: ref, in_$p1083: ref, in_$i1086: i64, in_$i1087: i1) returns (out_$p1054: ref, out_$p1055: ref, out_$p1056: ref, out_$p1057: ref, out_$i1058: i64, out_$i1059: i64, out_$i1060: i1, out_$p1061: ref, out_$i1062: i16, out_$i1063: i32, out_$p1064: ref, out_$i1065: i8, out_$i1066: i32, out_$i1067: i32, out_$i1068: i1, out_$p1069: ref, out_$i1070: i32, out_$p1071: ref, out_$i1072: i8, out_$i1073: i32, out_$i1074: i32, out_$i1075: i1, out_$p1077: ref, out_$p1078: ref, out_$p1079: ref, out_$p1080: ref, out_$i1081: i64, out_$i1082: i1, out_$p1084: ref, out_$p1085: ref, out_$p1083: ref, out_$i1086: i64, out_$i1087: i1);



implementation atmtcp_v_ioctl_loop_$bb586(in_$p0: ref, in_$p3: ref, in_$p1012: ref, in_$p1013: ref, in_$p1014: ref, in_$p1015: ref, in_$i1016: i64, in_$i1017: i64, in_$i1018: i1, in_$p1019: ref, in_$i1020: i16, in_$i1021: i32, in_$p1022: ref, in_$i1023: i8, in_$i1024: i32, in_$i1025: i32, in_$i1026: i1, in_$p1027: ref, in_$i1028: i32, in_$p1029: ref, in_$i1030: i8, in_$i1031: i32, in_$i1032: i32, in_$i1033: i1, in_$p1035: ref, in_$p1036: ref, in_$p1037: ref, in_$p1038: ref, in_$i1039: i64, in_$i1040: i1, in_$p1042: ref, in_$p1043: ref, in_$p1041: ref, in_$i1044: i64, in_$i1045: i1) returns (out_$p1012: ref, out_$p1013: ref, out_$p1014: ref, out_$p1015: ref, out_$i1016: i64, out_$i1017: i64, out_$i1018: i1, out_$p1019: ref, out_$i1020: i16, out_$i1021: i32, out_$p1022: ref, out_$i1023: i8, out_$i1024: i32, out_$i1025: i32, out_$i1026: i1, out_$p1027: ref, out_$i1028: i32, out_$p1029: ref, out_$i1030: i8, out_$i1031: i32, out_$i1032: i32, out_$i1033: i1, out_$p1035: ref, out_$p1036: ref, out_$p1037: ref, out_$p1038: ref, out_$i1039: i64, out_$i1040: i1, out_$p1042: ref, out_$p1043: ref, out_$p1041: ref, out_$i1044: i64, out_$i1045: i1)
{

  entry:
    out_$p1012, out_$p1013, out_$p1014, out_$p1015, out_$i1016, out_$i1017, out_$i1018, out_$p1019, out_$i1020, out_$i1021, out_$p1022, out_$i1023, out_$i1024, out_$i1025, out_$i1026, out_$p1027, out_$i1028, out_$p1029, out_$i1030, out_$i1031, out_$i1032, out_$i1033, out_$p1035, out_$p1036, out_$p1037, out_$p1038, out_$i1039, out_$i1040, out_$p1042, out_$p1043, out_$p1041, out_$i1044, out_$i1045 := in_$p1012, in_$p1013, in_$p1014, in_$p1015, in_$i1016, in_$i1017, in_$i1018, in_$p1019, in_$i1020, in_$i1021, in_$p1022, in_$i1023, in_$i1024, in_$i1025, in_$i1026, in_$p1027, in_$i1028, in_$p1029, in_$i1030, in_$i1031, in_$i1032, in_$i1033, in_$p1035, in_$p1036, in_$p1037, in_$p1038, in_$i1039, in_$i1040, in_$p1042, in_$p1043, in_$p1041, in_$i1044, in_$i1045;
    goto $bb586, exit;

  $bb586:
    assume {:verifier.code 0} true;
    goto corral_source_split_1549;

  $bb600:
    assume out_$i1045 == 1;
    assume {:verifier.code 0} true;
    out_$p1012 := out_$p1041;
    goto $bb600_dummy;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    out_$i1045 := $ne.i64(out_$i1044, 0);
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    out_$i1044 := $p2i.ref.i64(out_$p1041);
    goto corral_source_split_1590;

  $bb599:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  $bb598:
    assume !(out_$i1040 == 1);
    assume {:verifier.code 0} true;
    out_$p1041 := $0.ref;
    goto $bb599;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$p1041 := out_$p1043;
    goto $bb599;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$p1043 := $add.ref(out_$p1042, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1587;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    out_$p1042 := $bitcast.ref.ref(out_$p1038);
    goto corral_source_split_1586;

  $bb597:
    assume out_$i1040 == 1;
    goto corral_source_split_1585;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    out_$i1040 := $ne.i64(out_$i1039, 0);
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    out_$i1039 := $p2i.ref.i64(out_$p1038);
    goto corral_source_split_1582;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    out_$p1038 := $load.ref($M.0, out_$p1037);
    goto corral_source_split_1581;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    out_$p1037 := $add.ref($add.ref(out_$p1036, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1580;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    out_$p1036 := $bitcast.ref.ref(out_$p1035);
    goto corral_source_split_1579;

  $bb596:
    assume {:verifier.code 0} true;
    out_$p1035 := $add.ref($add.ref($add.ref(out_$p1012, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1578;

  $bb595:
    assume {:verifier.code 0} true;
    goto $bb596;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb588:
    assume out_$i1018 == 1;
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    out_$i1018 := $ne.i64(out_$i1016, out_$i1017);
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$i1017 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$i1016 := $p2i.ref.i64(out_$p1015);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$p1015 := $load.ref($M.0, out_$p1014);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$p1014 := $add.ref($add.ref(out_$p1013, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1552;

  $bb587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} out_$p1013 := atm_sk(out_$p1012);
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb594:
    assume !(out_$i1033 == 1);
    assume {:verifier.code 0} true;
    goto $bb595;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    out_$i1033 := $ne.i32(out_$i1032, 0);
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    out_$i1032 := $ashr.i32(out_$i1028, out_$i1031);
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    out_$i1031 := $sext.i8.i32(out_$i1030);
    goto corral_source_split_1574;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    out_$i1030 := $load.i8($M.0, out_$p1029);
    goto corral_source_split_1573;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    out_$p1029 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1572;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    out_$i1028 := $load.i32($M.0, out_$p1027);
    goto corral_source_split_1571;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    out_$p1027 := $add.ref($add.ref(out_$p1013, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1570;

  $bb592:
    assume !(out_$i1026 == 1);
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    out_$i1026 := $ne.i32(out_$i1025, 0);
    goto corral_source_split_1567;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    out_$i1025 := $ashr.i32(out_$i1021, out_$i1024);
    goto corral_source_split_1566;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    out_$i1024 := $sext.i8.i32(out_$i1023);
    goto corral_source_split_1565;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    out_$i1023 := $load.i8($M.0, out_$p1022);
    goto corral_source_split_1564;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$p1022 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$i1021 := $sext.i16.i32(out_$i1020);
    goto corral_source_split_1562;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    out_$i1020 := $load.i16($M.0, out_$p1019);
    goto corral_source_split_1561;

  $bb590:
    assume {:verifier.code 0} true;
    out_$p1019 := $add.ref($add.ref(out_$p1013, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1560;

  $bb589:
    assume !(out_$i1018 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb600_dummy:
    call {:si_unique_call 1} out_$p1012, out_$p1013, out_$p1014, out_$p1015, out_$i1016, out_$i1017, out_$i1018, out_$p1019, out_$i1020, out_$i1021, out_$p1022, out_$i1023, out_$i1024, out_$i1025, out_$i1026, out_$p1027, out_$i1028, out_$p1029, out_$i1030, out_$i1031, out_$i1032, out_$i1033, out_$p1035, out_$p1036, out_$p1037, out_$p1038, out_$i1039, out_$i1040, out_$p1042, out_$p1043, out_$p1041, out_$i1044, out_$i1045 := atmtcp_v_ioctl_loop_$bb586(in_$p0, in_$p3, out_$p1012, out_$p1013, out_$p1014, out_$p1015, out_$i1016, out_$i1017, out_$i1018, out_$p1019, out_$i1020, out_$i1021, out_$p1022, out_$i1023, out_$i1024, out_$i1025, out_$i1026, out_$p1027, out_$i1028, out_$p1029, out_$i1030, out_$i1031, out_$i1032, out_$i1033, out_$p1035, out_$p1036, out_$p1037, out_$p1038, out_$i1039, out_$i1040, out_$p1042, out_$p1043, out_$p1041, out_$i1044, out_$i1045);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb586(in_$p0: ref, in_$p3: ref, in_$p1012: ref, in_$p1013: ref, in_$p1014: ref, in_$p1015: ref, in_$i1016: i64, in_$i1017: i64, in_$i1018: i1, in_$p1019: ref, in_$i1020: i16, in_$i1021: i32, in_$p1022: ref, in_$i1023: i8, in_$i1024: i32, in_$i1025: i32, in_$i1026: i1, in_$p1027: ref, in_$i1028: i32, in_$p1029: ref, in_$i1030: i8, in_$i1031: i32, in_$i1032: i32, in_$i1033: i1, in_$p1035: ref, in_$p1036: ref, in_$p1037: ref, in_$p1038: ref, in_$i1039: i64, in_$i1040: i1, in_$p1042: ref, in_$p1043: ref, in_$p1041: ref, in_$i1044: i64, in_$i1045: i1) returns (out_$p1012: ref, out_$p1013: ref, out_$p1014: ref, out_$p1015: ref, out_$i1016: i64, out_$i1017: i64, out_$i1018: i1, out_$p1019: ref, out_$i1020: i16, out_$i1021: i32, out_$p1022: ref, out_$i1023: i8, out_$i1024: i32, out_$i1025: i32, out_$i1026: i1, out_$p1027: ref, out_$i1028: i32, out_$p1029: ref, out_$i1030: i8, out_$i1031: i32, out_$i1032: i32, out_$i1033: i1, out_$p1035: ref, out_$p1036: ref, out_$p1037: ref, out_$p1038: ref, out_$i1039: i64, out_$i1040: i1, out_$p1042: ref, out_$p1043: ref, out_$p1041: ref, out_$i1044: i64, out_$i1045: i1);



implementation atmtcp_v_ioctl_loop_$bb562(in_$p0: ref, in_$p3: ref, in_$p970: ref, in_$p971: ref, in_$p972: ref, in_$p973: ref, in_$i974: i64, in_$i975: i64, in_$i976: i1, in_$p977: ref, in_$i978: i16, in_$i979: i32, in_$p980: ref, in_$i981: i8, in_$i982: i32, in_$i983: i32, in_$i984: i1, in_$p985: ref, in_$i986: i32, in_$p987: ref, in_$i988: i8, in_$i989: i32, in_$i990: i32, in_$i991: i1, in_$p993: ref, in_$p994: ref, in_$p995: ref, in_$p996: ref, in_$i997: i64, in_$i998: i1, in_$p1000: ref, in_$p1001: ref, in_$p999: ref, in_$i1002: i64, in_$i1003: i1) returns (out_$p970: ref, out_$p971: ref, out_$p972: ref, out_$p973: ref, out_$i974: i64, out_$i975: i64, out_$i976: i1, out_$p977: ref, out_$i978: i16, out_$i979: i32, out_$p980: ref, out_$i981: i8, out_$i982: i32, out_$i983: i32, out_$i984: i1, out_$p985: ref, out_$i986: i32, out_$p987: ref, out_$i988: i8, out_$i989: i32, out_$i990: i32, out_$i991: i1, out_$p993: ref, out_$p994: ref, out_$p995: ref, out_$p996: ref, out_$i997: i64, out_$i998: i1, out_$p1000: ref, out_$p1001: ref, out_$p999: ref, out_$i1002: i64, out_$i1003: i1)
{

  entry:
    out_$p970, out_$p971, out_$p972, out_$p973, out_$i974, out_$i975, out_$i976, out_$p977, out_$i978, out_$i979, out_$p980, out_$i981, out_$i982, out_$i983, out_$i984, out_$p985, out_$i986, out_$p987, out_$i988, out_$i989, out_$i990, out_$i991, out_$p993, out_$p994, out_$p995, out_$p996, out_$i997, out_$i998, out_$p1000, out_$p1001, out_$p999, out_$i1002, out_$i1003 := in_$p970, in_$p971, in_$p972, in_$p973, in_$i974, in_$i975, in_$i976, in_$p977, in_$i978, in_$i979, in_$p980, in_$i981, in_$i982, in_$i983, in_$i984, in_$p985, in_$i986, in_$p987, in_$i988, in_$i989, in_$i990, in_$i991, in_$p993, in_$p994, in_$p995, in_$p996, in_$i997, in_$i998, in_$p1000, in_$p1001, in_$p999, in_$i1002, in_$i1003;
    goto $bb562, exit;

  $bb562:
    assume {:verifier.code 0} true;
    goto corral_source_split_1489;

  $bb576:
    assume out_$i1003 == 1;
    assume {:verifier.code 0} true;
    out_$p970 := out_$p999;
    goto $bb576_dummy;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb576;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$i1003 := $ne.i64(out_$i1002, 0);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$i1002 := $p2i.ref.i64(out_$p999);
    goto corral_source_split_1530;

  $bb575:
    assume {:verifier.code 0} true;
    goto corral_source_split_1529;

  $bb574:
    assume !(out_$i998 == 1);
    assume {:verifier.code 0} true;
    out_$p999 := $0.ref;
    goto $bb575;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$p999 := out_$p1001;
    goto $bb575;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$p1001 := $add.ref(out_$p1000, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    out_$p1000 := $bitcast.ref.ref(out_$p996);
    goto corral_source_split_1526;

  $bb573:
    assume out_$i998 == 1;
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$i998 := $ne.i64(out_$i997, 0);
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    out_$i997 := $p2i.ref.i64(out_$p996);
    goto corral_source_split_1522;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    out_$p996 := $load.ref($M.0, out_$p995);
    goto corral_source_split_1521;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$p995 := $add.ref($add.ref(out_$p994, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1520;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    out_$p994 := $bitcast.ref.ref(out_$p993);
    goto corral_source_split_1519;

  $bb572:
    assume {:verifier.code 0} true;
    out_$p993 := $add.ref($add.ref($add.ref(out_$p970, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1518;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb572;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb564:
    assume out_$i976 == 1;
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    out_$i976 := $ne.i64(out_$i974, out_$i975);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    out_$i975 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    out_$i974 := $p2i.ref.i64(out_$p973);
    goto corral_source_split_1494;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    out_$p973 := $load.ref($M.0, out_$p972);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    out_$p972 := $add.ref($add.ref(out_$p971, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1492;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} out_$p971 := atm_sk(out_$p970);
    goto corral_source_split_1491;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb570:
    assume !(out_$i991 == 1);
    assume {:verifier.code 0} true;
    goto $bb571;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb570;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    out_$i991 := $ne.i32(out_$i990, 0);
    goto corral_source_split_1516;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    out_$i990 := $ashr.i32(out_$i986, out_$i989);
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    out_$i989 := $sext.i8.i32(out_$i988);
    goto corral_source_split_1514;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    out_$i988 := $load.i8($M.0, out_$p987);
    goto corral_source_split_1513;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    out_$p987 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1512;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    out_$i986 := $load.i32($M.0, out_$p985);
    goto corral_source_split_1511;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    out_$p985 := $add.ref($add.ref(out_$p971, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1510;

  $bb568:
    assume !(out_$i984 == 1);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb568;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    out_$i984 := $ne.i32(out_$i983, 0);
    goto corral_source_split_1507;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$i983 := $ashr.i32(out_$i979, out_$i982);
    goto corral_source_split_1506;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    out_$i982 := $sext.i8.i32(out_$i981);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    out_$i981 := $load.i8($M.0, out_$p980);
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    out_$p980 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    out_$i979 := $sext.i16.i32(out_$i978);
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    out_$i978 := $load.i16($M.0, out_$p977);
    goto corral_source_split_1501;

  $bb566:
    assume {:verifier.code 0} true;
    out_$p977 := $add.ref($add.ref(out_$p971, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1500;

  $bb565:
    assume !(out_$i976 == 1);
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb576_dummy:
    call {:si_unique_call 1} out_$p970, out_$p971, out_$p972, out_$p973, out_$i974, out_$i975, out_$i976, out_$p977, out_$i978, out_$i979, out_$p980, out_$i981, out_$i982, out_$i983, out_$i984, out_$p985, out_$i986, out_$p987, out_$i988, out_$i989, out_$i990, out_$i991, out_$p993, out_$p994, out_$p995, out_$p996, out_$i997, out_$i998, out_$p1000, out_$p1001, out_$p999, out_$i1002, out_$i1003 := atmtcp_v_ioctl_loop_$bb562(in_$p0, in_$p3, out_$p970, out_$p971, out_$p972, out_$p973, out_$i974, out_$i975, out_$i976, out_$p977, out_$i978, out_$i979, out_$p980, out_$i981, out_$i982, out_$i983, out_$i984, out_$p985, out_$i986, out_$p987, out_$i988, out_$i989, out_$i990, out_$i991, out_$p993, out_$p994, out_$p995, out_$p996, out_$i997, out_$i998, out_$p1000, out_$p1001, out_$p999, out_$i1002, out_$i1003);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb562(in_$p0: ref, in_$p3: ref, in_$p970: ref, in_$p971: ref, in_$p972: ref, in_$p973: ref, in_$i974: i64, in_$i975: i64, in_$i976: i1, in_$p977: ref, in_$i978: i16, in_$i979: i32, in_$p980: ref, in_$i981: i8, in_$i982: i32, in_$i983: i32, in_$i984: i1, in_$p985: ref, in_$i986: i32, in_$p987: ref, in_$i988: i8, in_$i989: i32, in_$i990: i32, in_$i991: i1, in_$p993: ref, in_$p994: ref, in_$p995: ref, in_$p996: ref, in_$i997: i64, in_$i998: i1, in_$p1000: ref, in_$p1001: ref, in_$p999: ref, in_$i1002: i64, in_$i1003: i1) returns (out_$p970: ref, out_$p971: ref, out_$p972: ref, out_$p973: ref, out_$i974: i64, out_$i975: i64, out_$i976: i1, out_$p977: ref, out_$i978: i16, out_$i979: i32, out_$p980: ref, out_$i981: i8, out_$i982: i32, out_$i983: i32, out_$i984: i1, out_$p985: ref, out_$i986: i32, out_$p987: ref, out_$i988: i8, out_$i989: i32, out_$i990: i32, out_$i991: i1, out_$p993: ref, out_$p994: ref, out_$p995: ref, out_$p996: ref, out_$i997: i64, out_$i998: i1, out_$p1000: ref, out_$p1001: ref, out_$p999: ref, out_$i1002: i64, out_$i1003: i1);



implementation atmtcp_v_ioctl_loop_$bb538(in_$p0: ref, in_$p3: ref, in_$p928: ref, in_$p929: ref, in_$p930: ref, in_$p931: ref, in_$i932: i64, in_$i933: i64, in_$i934: i1, in_$p935: ref, in_$i936: i16, in_$i937: i32, in_$p938: ref, in_$i939: i8, in_$i940: i32, in_$i941: i32, in_$i942: i1, in_$p943: ref, in_$i944: i32, in_$p945: ref, in_$i946: i8, in_$i947: i32, in_$i948: i32, in_$i949: i1, in_$p951: ref, in_$p952: ref, in_$p953: ref, in_$p954: ref, in_$i955: i64, in_$i956: i1, in_$p958: ref, in_$p959: ref, in_$p957: ref, in_$i960: i64, in_$i961: i1) returns (out_$p928: ref, out_$p929: ref, out_$p930: ref, out_$p931: ref, out_$i932: i64, out_$i933: i64, out_$i934: i1, out_$p935: ref, out_$i936: i16, out_$i937: i32, out_$p938: ref, out_$i939: i8, out_$i940: i32, out_$i941: i32, out_$i942: i1, out_$p943: ref, out_$i944: i32, out_$p945: ref, out_$i946: i8, out_$i947: i32, out_$i948: i32, out_$i949: i1, out_$p951: ref, out_$p952: ref, out_$p953: ref, out_$p954: ref, out_$i955: i64, out_$i956: i1, out_$p958: ref, out_$p959: ref, out_$p957: ref, out_$i960: i64, out_$i961: i1)
{

  entry:
    out_$p928, out_$p929, out_$p930, out_$p931, out_$i932, out_$i933, out_$i934, out_$p935, out_$i936, out_$i937, out_$p938, out_$i939, out_$i940, out_$i941, out_$i942, out_$p943, out_$i944, out_$p945, out_$i946, out_$i947, out_$i948, out_$i949, out_$p951, out_$p952, out_$p953, out_$p954, out_$i955, out_$i956, out_$p958, out_$p959, out_$p957, out_$i960, out_$i961 := in_$p928, in_$p929, in_$p930, in_$p931, in_$i932, in_$i933, in_$i934, in_$p935, in_$i936, in_$i937, in_$p938, in_$i939, in_$i940, in_$i941, in_$i942, in_$p943, in_$i944, in_$p945, in_$i946, in_$i947, in_$i948, in_$i949, in_$p951, in_$p952, in_$p953, in_$p954, in_$i955, in_$i956, in_$p958, in_$p959, in_$p957, in_$i960, in_$i961;
    goto $bb538, exit;

  $bb538:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  $bb552:
    assume out_$i961 == 1;
    assume {:verifier.code 0} true;
    out_$p928 := out_$p957;
    goto $bb552_dummy;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$i961 := $ne.i64(out_$i960, 0);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$i960 := $p2i.ref.i64(out_$p957);
    goto corral_source_split_1470;

  $bb551:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  $bb550:
    assume !(out_$i956 == 1);
    assume {:verifier.code 0} true;
    out_$p957 := $0.ref;
    goto $bb551;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    out_$p957 := out_$p959;
    goto $bb551;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    out_$p959 := $add.ref(out_$p958, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1467;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$p958 := $bitcast.ref.ref(out_$p954);
    goto corral_source_split_1466;

  $bb549:
    assume out_$i956 == 1;
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    out_$i956 := $ne.i64(out_$i955, 0);
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i955 := $p2i.ref.i64(out_$p954);
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$p954 := $load.ref($M.0, out_$p953);
    goto corral_source_split_1461;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    out_$p953 := $add.ref($add.ref(out_$p952, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$p952 := $bitcast.ref.ref(out_$p951);
    goto corral_source_split_1459;

  $bb548:
    assume {:verifier.code 0} true;
    out_$p951 := $add.ref($add.ref($add.ref(out_$p928, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1458;

  $bb547:
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb540:
    assume out_$i934 == 1;
    goto corral_source_split_1438;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540, $bb541;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i934 := $ne.i64(out_$i932, out_$i933);
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    out_$i933 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i932 := $p2i.ref.i64(out_$p931);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$p931 := $load.ref($M.0, out_$p930);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$p930 := $add.ref($add.ref(out_$p929, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1432;

  $bb539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} out_$p929 := atm_sk(out_$p928);
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb546:
    assume !(out_$i949 == 1);
    assume {:verifier.code 0} true;
    goto $bb547;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$i949 := $ne.i32(out_$i948, 0);
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    out_$i948 := $ashr.i32(out_$i944, out_$i947);
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$i947 := $sext.i8.i32(out_$i946);
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i946 := $load.i8($M.0, out_$p945);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$p945 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$i944 := $load.i32($M.0, out_$p943);
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    out_$p943 := $add.ref($add.ref(out_$p929, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1450;

  $bb544:
    assume !(out_$i942 == 1);
    goto corral_source_split_1449;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb544;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    out_$i942 := $ne.i32(out_$i941, 0);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$i941 := $ashr.i32(out_$i937, out_$i940);
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$i940 := $sext.i8.i32(out_$i939);
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$i939 := $load.i8($M.0, out_$p938);
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$p938 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$i937 := $sext.i16.i32(out_$i936);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$i936 := $load.i16($M.0, out_$p935);
    goto corral_source_split_1441;

  $bb542:
    assume {:verifier.code 0} true;
    out_$p935 := $add.ref($add.ref(out_$p929, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1440;

  $bb541:
    assume !(out_$i934 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb552_dummy:
    call {:si_unique_call 1} out_$p928, out_$p929, out_$p930, out_$p931, out_$i932, out_$i933, out_$i934, out_$p935, out_$i936, out_$i937, out_$p938, out_$i939, out_$i940, out_$i941, out_$i942, out_$p943, out_$i944, out_$p945, out_$i946, out_$i947, out_$i948, out_$i949, out_$p951, out_$p952, out_$p953, out_$p954, out_$i955, out_$i956, out_$p958, out_$p959, out_$p957, out_$i960, out_$i961 := atmtcp_v_ioctl_loop_$bb538(in_$p0, in_$p3, out_$p928, out_$p929, out_$p930, out_$p931, out_$i932, out_$i933, out_$i934, out_$p935, out_$i936, out_$i937, out_$p938, out_$i939, out_$i940, out_$i941, out_$i942, out_$p943, out_$i944, out_$p945, out_$i946, out_$i947, out_$i948, out_$i949, out_$p951, out_$p952, out_$p953, out_$p954, out_$i955, out_$i956, out_$p958, out_$p959, out_$p957, out_$i960, out_$i961);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb538(in_$p0: ref, in_$p3: ref, in_$p928: ref, in_$p929: ref, in_$p930: ref, in_$p931: ref, in_$i932: i64, in_$i933: i64, in_$i934: i1, in_$p935: ref, in_$i936: i16, in_$i937: i32, in_$p938: ref, in_$i939: i8, in_$i940: i32, in_$i941: i32, in_$i942: i1, in_$p943: ref, in_$i944: i32, in_$p945: ref, in_$i946: i8, in_$i947: i32, in_$i948: i32, in_$i949: i1, in_$p951: ref, in_$p952: ref, in_$p953: ref, in_$p954: ref, in_$i955: i64, in_$i956: i1, in_$p958: ref, in_$p959: ref, in_$p957: ref, in_$i960: i64, in_$i961: i1) returns (out_$p928: ref, out_$p929: ref, out_$p930: ref, out_$p931: ref, out_$i932: i64, out_$i933: i64, out_$i934: i1, out_$p935: ref, out_$i936: i16, out_$i937: i32, out_$p938: ref, out_$i939: i8, out_$i940: i32, out_$i941: i32, out_$i942: i1, out_$p943: ref, out_$i944: i32, out_$p945: ref, out_$i946: i8, out_$i947: i32, out_$i948: i32, out_$i949: i1, out_$p951: ref, out_$p952: ref, out_$p953: ref, out_$p954: ref, out_$i955: i64, out_$i956: i1, out_$p958: ref, out_$p959: ref, out_$p957: ref, out_$i960: i64, out_$i961: i1);



implementation atmtcp_v_ioctl_loop_$bb514(in_$p0: ref, in_$p3: ref, in_$p886: ref, in_$p887: ref, in_$p888: ref, in_$p889: ref, in_$i890: i64, in_$i891: i64, in_$i892: i1, in_$p893: ref, in_$i894: i16, in_$i895: i32, in_$p896: ref, in_$i897: i8, in_$i898: i32, in_$i899: i32, in_$i900: i1, in_$p901: ref, in_$i902: i32, in_$p903: ref, in_$i904: i8, in_$i905: i32, in_$i906: i32, in_$i907: i1, in_$p909: ref, in_$p910: ref, in_$p911: ref, in_$p912: ref, in_$i913: i64, in_$i914: i1, in_$p916: ref, in_$p917: ref, in_$p915: ref, in_$i918: i64, in_$i919: i1) returns (out_$p886: ref, out_$p887: ref, out_$p888: ref, out_$p889: ref, out_$i890: i64, out_$i891: i64, out_$i892: i1, out_$p893: ref, out_$i894: i16, out_$i895: i32, out_$p896: ref, out_$i897: i8, out_$i898: i32, out_$i899: i32, out_$i900: i1, out_$p901: ref, out_$i902: i32, out_$p903: ref, out_$i904: i8, out_$i905: i32, out_$i906: i32, out_$i907: i1, out_$p909: ref, out_$p910: ref, out_$p911: ref, out_$p912: ref, out_$i913: i64, out_$i914: i1, out_$p916: ref, out_$p917: ref, out_$p915: ref, out_$i918: i64, out_$i919: i1)
{

  entry:
    out_$p886, out_$p887, out_$p888, out_$p889, out_$i890, out_$i891, out_$i892, out_$p893, out_$i894, out_$i895, out_$p896, out_$i897, out_$i898, out_$i899, out_$i900, out_$p901, out_$i902, out_$p903, out_$i904, out_$i905, out_$i906, out_$i907, out_$p909, out_$p910, out_$p911, out_$p912, out_$i913, out_$i914, out_$p916, out_$p917, out_$p915, out_$i918, out_$i919 := in_$p886, in_$p887, in_$p888, in_$p889, in_$i890, in_$i891, in_$i892, in_$p893, in_$i894, in_$i895, in_$p896, in_$i897, in_$i898, in_$i899, in_$i900, in_$p901, in_$i902, in_$p903, in_$i904, in_$i905, in_$i906, in_$i907, in_$p909, in_$p910, in_$p911, in_$p912, in_$i913, in_$i914, in_$p916, in_$p917, in_$p915, in_$i918, in_$i919;
    goto $bb514, exit;

  $bb514:
    assume {:verifier.code 0} true;
    goto corral_source_split_1369;

  $bb528:
    assume out_$i919 == 1;
    assume {:verifier.code 0} true;
    out_$p886 := out_$p915;
    goto $bb528_dummy;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    out_$i919 := $ne.i64(out_$i918, 0);
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$i918 := $p2i.ref.i64(out_$p915);
    goto corral_source_split_1410;

  $bb527:
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  $bb526:
    assume !(out_$i914 == 1);
    assume {:verifier.code 0} true;
    out_$p915 := $0.ref;
    goto $bb527;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    out_$p915 := out_$p917;
    goto $bb527;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$p917 := $add.ref(out_$p916, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    out_$p916 := $bitcast.ref.ref(out_$p912);
    goto corral_source_split_1406;

  $bb525:
    assume out_$i914 == 1;
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb525, $bb526;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$i914 := $ne.i64(out_$i913, 0);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$i913 := $p2i.ref.i64(out_$p912);
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    out_$p912 := $load.ref($M.0, out_$p911);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$p911 := $add.ref($add.ref(out_$p910, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$p910 := $bitcast.ref.ref(out_$p909);
    goto corral_source_split_1399;

  $bb524:
    assume {:verifier.code 0} true;
    out_$p909 := $add.ref($add.ref($add.ref(out_$p886, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1398;

  $bb523:
    assume {:verifier.code 0} true;
    goto $bb524;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb516:
    assume out_$i892 == 1;
    goto corral_source_split_1378;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    out_$i892 := $ne.i64(out_$i890, out_$i891);
    goto corral_source_split_1376;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    out_$i891 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1375;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$i890 := $p2i.ref.i64(out_$p889);
    goto corral_source_split_1374;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    out_$p889 := $load.ref($M.0, out_$p888);
    goto corral_source_split_1373;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    out_$p888 := $add.ref($add.ref(out_$p887, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1372;

  $bb515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} out_$p887 := atm_sk(out_$p886);
    goto corral_source_split_1371;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb522:
    assume !(out_$i907 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    out_$i907 := $ne.i32(out_$i906, 0);
    goto corral_source_split_1396;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    out_$i906 := $ashr.i32(out_$i902, out_$i905);
    goto corral_source_split_1395;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    out_$i905 := $sext.i8.i32(out_$i904);
    goto corral_source_split_1394;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i904 := $load.i8($M.0, out_$p903);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    out_$p903 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$i902 := $load.i32($M.0, out_$p901);
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$p901 := $add.ref($add.ref(out_$p887, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1390;

  $bb520:
    assume !(out_$i900 == 1);
    goto corral_source_split_1389;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb520;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$i900 := $ne.i32(out_$i899, 0);
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    out_$i899 := $ashr.i32(out_$i895, out_$i898);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    out_$i898 := $sext.i8.i32(out_$i897);
    goto corral_source_split_1385;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    out_$i897 := $load.i8($M.0, out_$p896);
    goto corral_source_split_1384;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    out_$p896 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1383;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    out_$i895 := $sext.i16.i32(out_$i894);
    goto corral_source_split_1382;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    out_$i894 := $load.i16($M.0, out_$p893);
    goto corral_source_split_1381;

  $bb518:
    assume {:verifier.code 0} true;
    out_$p893 := $add.ref($add.ref(out_$p887, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1380;

  $bb517:
    assume !(out_$i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb528_dummy:
    call {:si_unique_call 1} out_$p886, out_$p887, out_$p888, out_$p889, out_$i890, out_$i891, out_$i892, out_$p893, out_$i894, out_$i895, out_$p896, out_$i897, out_$i898, out_$i899, out_$i900, out_$p901, out_$i902, out_$p903, out_$i904, out_$i905, out_$i906, out_$i907, out_$p909, out_$p910, out_$p911, out_$p912, out_$i913, out_$i914, out_$p916, out_$p917, out_$p915, out_$i918, out_$i919 := atmtcp_v_ioctl_loop_$bb514(in_$p0, in_$p3, out_$p886, out_$p887, out_$p888, out_$p889, out_$i890, out_$i891, out_$i892, out_$p893, out_$i894, out_$i895, out_$p896, out_$i897, out_$i898, out_$i899, out_$i900, out_$p901, out_$i902, out_$p903, out_$i904, out_$i905, out_$i906, out_$i907, out_$p909, out_$p910, out_$p911, out_$p912, out_$i913, out_$i914, out_$p916, out_$p917, out_$p915, out_$i918, out_$i919);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb514(in_$p0: ref, in_$p3: ref, in_$p886: ref, in_$p887: ref, in_$p888: ref, in_$p889: ref, in_$i890: i64, in_$i891: i64, in_$i892: i1, in_$p893: ref, in_$i894: i16, in_$i895: i32, in_$p896: ref, in_$i897: i8, in_$i898: i32, in_$i899: i32, in_$i900: i1, in_$p901: ref, in_$i902: i32, in_$p903: ref, in_$i904: i8, in_$i905: i32, in_$i906: i32, in_$i907: i1, in_$p909: ref, in_$p910: ref, in_$p911: ref, in_$p912: ref, in_$i913: i64, in_$i914: i1, in_$p916: ref, in_$p917: ref, in_$p915: ref, in_$i918: i64, in_$i919: i1) returns (out_$p886: ref, out_$p887: ref, out_$p888: ref, out_$p889: ref, out_$i890: i64, out_$i891: i64, out_$i892: i1, out_$p893: ref, out_$i894: i16, out_$i895: i32, out_$p896: ref, out_$i897: i8, out_$i898: i32, out_$i899: i32, out_$i900: i1, out_$p901: ref, out_$i902: i32, out_$p903: ref, out_$i904: i8, out_$i905: i32, out_$i906: i32, out_$i907: i1, out_$p909: ref, out_$p910: ref, out_$p911: ref, out_$p912: ref, out_$i913: i64, out_$i914: i1, out_$p916: ref, out_$p917: ref, out_$p915: ref, out_$i918: i64, out_$i919: i1);



implementation atmtcp_v_ioctl_loop_$bb490(in_$p0: ref, in_$p3: ref, in_$p844: ref, in_$p845: ref, in_$p846: ref, in_$p847: ref, in_$i848: i64, in_$i849: i64, in_$i850: i1, in_$p851: ref, in_$i852: i16, in_$i853: i32, in_$p854: ref, in_$i855: i8, in_$i856: i32, in_$i857: i32, in_$i858: i1, in_$p859: ref, in_$i860: i32, in_$p861: ref, in_$i862: i8, in_$i863: i32, in_$i864: i32, in_$i865: i1, in_$p867: ref, in_$p868: ref, in_$p869: ref, in_$p870: ref, in_$i871: i64, in_$i872: i1, in_$p874: ref, in_$p875: ref, in_$p873: ref, in_$i876: i64, in_$i877: i1) returns (out_$p844: ref, out_$p845: ref, out_$p846: ref, out_$p847: ref, out_$i848: i64, out_$i849: i64, out_$i850: i1, out_$p851: ref, out_$i852: i16, out_$i853: i32, out_$p854: ref, out_$i855: i8, out_$i856: i32, out_$i857: i32, out_$i858: i1, out_$p859: ref, out_$i860: i32, out_$p861: ref, out_$i862: i8, out_$i863: i32, out_$i864: i32, out_$i865: i1, out_$p867: ref, out_$p868: ref, out_$p869: ref, out_$p870: ref, out_$i871: i64, out_$i872: i1, out_$p874: ref, out_$p875: ref, out_$p873: ref, out_$i876: i64, out_$i877: i1)
{

  entry:
    out_$p844, out_$p845, out_$p846, out_$p847, out_$i848, out_$i849, out_$i850, out_$p851, out_$i852, out_$i853, out_$p854, out_$i855, out_$i856, out_$i857, out_$i858, out_$p859, out_$i860, out_$p861, out_$i862, out_$i863, out_$i864, out_$i865, out_$p867, out_$p868, out_$p869, out_$p870, out_$i871, out_$i872, out_$p874, out_$p875, out_$p873, out_$i876, out_$i877 := in_$p844, in_$p845, in_$p846, in_$p847, in_$i848, in_$i849, in_$i850, in_$p851, in_$i852, in_$i853, in_$p854, in_$i855, in_$i856, in_$i857, in_$i858, in_$p859, in_$i860, in_$p861, in_$i862, in_$i863, in_$i864, in_$i865, in_$p867, in_$p868, in_$p869, in_$p870, in_$i871, in_$i872, in_$p874, in_$p875, in_$p873, in_$i876, in_$i877;
    goto $bb490, exit;

  $bb490:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  $bb504:
    assume out_$i877 == 1;
    assume {:verifier.code 0} true;
    out_$p844 := out_$p873;
    goto $bb504_dummy;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$i877 := $ne.i64(out_$i876, 0);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$i876 := $p2i.ref.i64(out_$p873);
    goto corral_source_split_1350;

  $bb503:
    assume {:verifier.code 0} true;
    goto corral_source_split_1349;

  $bb502:
    assume !(out_$i872 == 1);
    assume {:verifier.code 0} true;
    out_$p873 := $0.ref;
    goto $bb503;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$p873 := out_$p875;
    goto $bb503;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$p875 := $add.ref(out_$p874, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$p874 := $bitcast.ref.ref(out_$p870);
    goto corral_source_split_1346;

  $bb501:
    assume out_$i872 == 1;
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i872 := $ne.i64(out_$i871, 0);
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$i871 := $p2i.ref.i64(out_$p870);
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    out_$p870 := $load.ref($M.0, out_$p869);
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    out_$p869 := $add.ref($add.ref(out_$p868, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1340;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    out_$p868 := $bitcast.ref.ref(out_$p867);
    goto corral_source_split_1339;

  $bb500:
    assume {:verifier.code 0} true;
    out_$p867 := $add.ref($add.ref($add.ref(out_$p844, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1338;

  $bb499:
    assume {:verifier.code 0} true;
    goto $bb500;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb492:
    assume out_$i850 == 1;
    goto corral_source_split_1318;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    out_$i850 := $ne.i64(out_$i848, out_$i849);
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    out_$i849 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1315;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    out_$i848 := $p2i.ref.i64(out_$p847);
    goto corral_source_split_1314;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    out_$p847 := $load.ref($M.0, out_$p846);
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    out_$p846 := $add.ref($add.ref(out_$p845, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1312;

  $bb491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} out_$p845 := atm_sk(out_$p844);
    goto corral_source_split_1311;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb498:
    assume !(out_$i865 == 1);
    assume {:verifier.code 0} true;
    goto $bb499;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    out_$i865 := $ne.i32(out_$i864, 0);
    goto corral_source_split_1336;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    out_$i864 := $ashr.i32(out_$i860, out_$i863);
    goto corral_source_split_1335;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    out_$i863 := $sext.i8.i32(out_$i862);
    goto corral_source_split_1334;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    out_$i862 := $load.i8($M.0, out_$p861);
    goto corral_source_split_1333;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    out_$p861 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1332;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    out_$i860 := $load.i32($M.0, out_$p859);
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    out_$p859 := $add.ref($add.ref(out_$p845, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1330;

  $bb496:
    assume !(out_$i858 == 1);
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    out_$i858 := $ne.i32(out_$i857, 0);
    goto corral_source_split_1327;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    out_$i857 := $ashr.i32(out_$i853, out_$i856);
    goto corral_source_split_1326;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    out_$i856 := $sext.i8.i32(out_$i855);
    goto corral_source_split_1325;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    out_$i855 := $load.i8($M.0, out_$p854);
    goto corral_source_split_1324;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    out_$p854 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1323;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    out_$i853 := $sext.i16.i32(out_$i852);
    goto corral_source_split_1322;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    out_$i852 := $load.i16($M.0, out_$p851);
    goto corral_source_split_1321;

  $bb494:
    assume {:verifier.code 0} true;
    out_$p851 := $add.ref($add.ref(out_$p845, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1320;

  $bb493:
    assume !(out_$i850 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb504_dummy:
    call {:si_unique_call 1} out_$p844, out_$p845, out_$p846, out_$p847, out_$i848, out_$i849, out_$i850, out_$p851, out_$i852, out_$i853, out_$p854, out_$i855, out_$i856, out_$i857, out_$i858, out_$p859, out_$i860, out_$p861, out_$i862, out_$i863, out_$i864, out_$i865, out_$p867, out_$p868, out_$p869, out_$p870, out_$i871, out_$i872, out_$p874, out_$p875, out_$p873, out_$i876, out_$i877 := atmtcp_v_ioctl_loop_$bb490(in_$p0, in_$p3, out_$p844, out_$p845, out_$p846, out_$p847, out_$i848, out_$i849, out_$i850, out_$p851, out_$i852, out_$i853, out_$p854, out_$i855, out_$i856, out_$i857, out_$i858, out_$p859, out_$i860, out_$p861, out_$i862, out_$i863, out_$i864, out_$i865, out_$p867, out_$p868, out_$p869, out_$p870, out_$i871, out_$i872, out_$p874, out_$p875, out_$p873, out_$i876, out_$i877);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb490(in_$p0: ref, in_$p3: ref, in_$p844: ref, in_$p845: ref, in_$p846: ref, in_$p847: ref, in_$i848: i64, in_$i849: i64, in_$i850: i1, in_$p851: ref, in_$i852: i16, in_$i853: i32, in_$p854: ref, in_$i855: i8, in_$i856: i32, in_$i857: i32, in_$i858: i1, in_$p859: ref, in_$i860: i32, in_$p861: ref, in_$i862: i8, in_$i863: i32, in_$i864: i32, in_$i865: i1, in_$p867: ref, in_$p868: ref, in_$p869: ref, in_$p870: ref, in_$i871: i64, in_$i872: i1, in_$p874: ref, in_$p875: ref, in_$p873: ref, in_$i876: i64, in_$i877: i1) returns (out_$p844: ref, out_$p845: ref, out_$p846: ref, out_$p847: ref, out_$i848: i64, out_$i849: i64, out_$i850: i1, out_$p851: ref, out_$i852: i16, out_$i853: i32, out_$p854: ref, out_$i855: i8, out_$i856: i32, out_$i857: i32, out_$i858: i1, out_$p859: ref, out_$i860: i32, out_$p861: ref, out_$i862: i8, out_$i863: i32, out_$i864: i32, out_$i865: i1, out_$p867: ref, out_$p868: ref, out_$p869: ref, out_$p870: ref, out_$i871: i64, out_$i872: i1, out_$p874: ref, out_$p875: ref, out_$p873: ref, out_$i876: i64, out_$i877: i1);



implementation atmtcp_v_ioctl_loop_$bb466(in_$p0: ref, in_$p3: ref, in_$p802: ref, in_$p803: ref, in_$p804: ref, in_$p805: ref, in_$i806: i64, in_$i807: i64, in_$i808: i1, in_$p809: ref, in_$i810: i16, in_$i811: i32, in_$p812: ref, in_$i813: i8, in_$i814: i32, in_$i815: i32, in_$i816: i1, in_$p817: ref, in_$i818: i32, in_$p819: ref, in_$i820: i8, in_$i821: i32, in_$i822: i32, in_$i823: i1, in_$p825: ref, in_$p826: ref, in_$p827: ref, in_$p828: ref, in_$i829: i64, in_$i830: i1, in_$p832: ref, in_$p833: ref, in_$p831: ref, in_$i834: i64, in_$i835: i1) returns (out_$p802: ref, out_$p803: ref, out_$p804: ref, out_$p805: ref, out_$i806: i64, out_$i807: i64, out_$i808: i1, out_$p809: ref, out_$i810: i16, out_$i811: i32, out_$p812: ref, out_$i813: i8, out_$i814: i32, out_$i815: i32, out_$i816: i1, out_$p817: ref, out_$i818: i32, out_$p819: ref, out_$i820: i8, out_$i821: i32, out_$i822: i32, out_$i823: i1, out_$p825: ref, out_$p826: ref, out_$p827: ref, out_$p828: ref, out_$i829: i64, out_$i830: i1, out_$p832: ref, out_$p833: ref, out_$p831: ref, out_$i834: i64, out_$i835: i1)
{

  entry:
    out_$p802, out_$p803, out_$p804, out_$p805, out_$i806, out_$i807, out_$i808, out_$p809, out_$i810, out_$i811, out_$p812, out_$i813, out_$i814, out_$i815, out_$i816, out_$p817, out_$i818, out_$p819, out_$i820, out_$i821, out_$i822, out_$i823, out_$p825, out_$p826, out_$p827, out_$p828, out_$i829, out_$i830, out_$p832, out_$p833, out_$p831, out_$i834, out_$i835 := in_$p802, in_$p803, in_$p804, in_$p805, in_$i806, in_$i807, in_$i808, in_$p809, in_$i810, in_$i811, in_$p812, in_$i813, in_$i814, in_$i815, in_$i816, in_$p817, in_$i818, in_$p819, in_$i820, in_$i821, in_$i822, in_$i823, in_$p825, in_$p826, in_$p827, in_$p828, in_$i829, in_$i830, in_$p832, in_$p833, in_$p831, in_$i834, in_$i835;
    goto $bb466, exit;

  $bb466:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;

  $bb480:
    assume out_$i835 == 1;
    assume {:verifier.code 0} true;
    out_$p802 := out_$p831;
    goto $bb480_dummy;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    out_$i835 := $ne.i64(out_$i834, 0);
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$i834 := $p2i.ref.i64(out_$p831);
    goto corral_source_split_1290;

  $bb479:
    assume {:verifier.code 0} true;
    goto corral_source_split_1289;

  $bb478:
    assume !(out_$i830 == 1);
    assume {:verifier.code 0} true;
    out_$p831 := $0.ref;
    goto $bb479;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    out_$p831 := out_$p833;
    goto $bb479;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    out_$p833 := $add.ref(out_$p832, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1287;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    out_$p832 := $bitcast.ref.ref(out_$p828);
    goto corral_source_split_1286;

  $bb477:
    assume out_$i830 == 1;
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    out_$i830 := $ne.i64(out_$i829, 0);
    goto corral_source_split_1283;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    out_$i829 := $p2i.ref.i64(out_$p828);
    goto corral_source_split_1282;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    out_$p828 := $load.ref($M.0, out_$p827);
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    out_$p827 := $add.ref($add.ref(out_$p826, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1280;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    out_$p826 := $bitcast.ref.ref(out_$p825);
    goto corral_source_split_1279;

  $bb476:
    assume {:verifier.code 0} true;
    out_$p825 := $add.ref($add.ref($add.ref(out_$p802, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1278;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb468:
    assume out_$i808 == 1;
    goto corral_source_split_1258;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$i808 := $ne.i64(out_$i806, out_$i807);
    goto corral_source_split_1256;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    out_$i807 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$i806 := $p2i.ref.i64(out_$p805);
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$p805 := $load.ref($M.0, out_$p804);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$p804 := $add.ref($add.ref(out_$p803, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1252;

  $bb467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} out_$p803 := atm_sk(out_$p802);
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb474:
    assume !(out_$i823 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$i823 := $ne.i32(out_$i822, 0);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$i822 := $ashr.i32(out_$i818, out_$i821);
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    out_$i821 := $sext.i8.i32(out_$i820);
    goto corral_source_split_1274;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    out_$i820 := $load.i8($M.0, out_$p819);
    goto corral_source_split_1273;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    out_$p819 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1272;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    out_$i818 := $load.i32($M.0, out_$p817);
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$p817 := $add.ref($add.ref(out_$p803, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1270;

  $bb472:
    assume !(out_$i816 == 1);
    goto corral_source_split_1269;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb472;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    out_$i816 := $ne.i32(out_$i815, 0);
    goto corral_source_split_1267;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    out_$i815 := $ashr.i32(out_$i811, out_$i814);
    goto corral_source_split_1266;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    out_$i814 := $sext.i8.i32(out_$i813);
    goto corral_source_split_1265;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    out_$i813 := $load.i8($M.0, out_$p812);
    goto corral_source_split_1264;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    out_$p812 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1263;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    out_$i811 := $sext.i16.i32(out_$i810);
    goto corral_source_split_1262;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    out_$i810 := $load.i16($M.0, out_$p809);
    goto corral_source_split_1261;

  $bb470:
    assume {:verifier.code 0} true;
    out_$p809 := $add.ref($add.ref(out_$p803, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1260;

  $bb469:
    assume !(out_$i808 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb480_dummy:
    call {:si_unique_call 1} out_$p802, out_$p803, out_$p804, out_$p805, out_$i806, out_$i807, out_$i808, out_$p809, out_$i810, out_$i811, out_$p812, out_$i813, out_$i814, out_$i815, out_$i816, out_$p817, out_$i818, out_$p819, out_$i820, out_$i821, out_$i822, out_$i823, out_$p825, out_$p826, out_$p827, out_$p828, out_$i829, out_$i830, out_$p832, out_$p833, out_$p831, out_$i834, out_$i835 := atmtcp_v_ioctl_loop_$bb466(in_$p0, in_$p3, out_$p802, out_$p803, out_$p804, out_$p805, out_$i806, out_$i807, out_$i808, out_$p809, out_$i810, out_$i811, out_$p812, out_$i813, out_$i814, out_$i815, out_$i816, out_$p817, out_$i818, out_$p819, out_$i820, out_$i821, out_$i822, out_$i823, out_$p825, out_$p826, out_$p827, out_$p828, out_$i829, out_$i830, out_$p832, out_$p833, out_$p831, out_$i834, out_$i835);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb466(in_$p0: ref, in_$p3: ref, in_$p802: ref, in_$p803: ref, in_$p804: ref, in_$p805: ref, in_$i806: i64, in_$i807: i64, in_$i808: i1, in_$p809: ref, in_$i810: i16, in_$i811: i32, in_$p812: ref, in_$i813: i8, in_$i814: i32, in_$i815: i32, in_$i816: i1, in_$p817: ref, in_$i818: i32, in_$p819: ref, in_$i820: i8, in_$i821: i32, in_$i822: i32, in_$i823: i1, in_$p825: ref, in_$p826: ref, in_$p827: ref, in_$p828: ref, in_$i829: i64, in_$i830: i1, in_$p832: ref, in_$p833: ref, in_$p831: ref, in_$i834: i64, in_$i835: i1) returns (out_$p802: ref, out_$p803: ref, out_$p804: ref, out_$p805: ref, out_$i806: i64, out_$i807: i64, out_$i808: i1, out_$p809: ref, out_$i810: i16, out_$i811: i32, out_$p812: ref, out_$i813: i8, out_$i814: i32, out_$i815: i32, out_$i816: i1, out_$p817: ref, out_$i818: i32, out_$p819: ref, out_$i820: i8, out_$i821: i32, out_$i822: i32, out_$i823: i1, out_$p825: ref, out_$p826: ref, out_$p827: ref, out_$p828: ref, out_$i829: i64, out_$i830: i1, out_$p832: ref, out_$p833: ref, out_$p831: ref, out_$i834: i64, out_$i835: i1);



implementation atmtcp_v_ioctl_loop_$bb442(in_$p0: ref, in_$p3: ref, in_$p760: ref, in_$p761: ref, in_$p762: ref, in_$p763: ref, in_$i764: i64, in_$i765: i64, in_$i766: i1, in_$p767: ref, in_$i768: i16, in_$i769: i32, in_$p770: ref, in_$i771: i8, in_$i772: i32, in_$i773: i32, in_$i774: i1, in_$p775: ref, in_$i776: i32, in_$p777: ref, in_$i778: i8, in_$i779: i32, in_$i780: i32, in_$i781: i1, in_$p783: ref, in_$p784: ref, in_$p785: ref, in_$p786: ref, in_$i787: i64, in_$i788: i1, in_$p790: ref, in_$p791: ref, in_$p789: ref, in_$i792: i64, in_$i793: i1) returns (out_$p760: ref, out_$p761: ref, out_$p762: ref, out_$p763: ref, out_$i764: i64, out_$i765: i64, out_$i766: i1, out_$p767: ref, out_$i768: i16, out_$i769: i32, out_$p770: ref, out_$i771: i8, out_$i772: i32, out_$i773: i32, out_$i774: i1, out_$p775: ref, out_$i776: i32, out_$p777: ref, out_$i778: i8, out_$i779: i32, out_$i780: i32, out_$i781: i1, out_$p783: ref, out_$p784: ref, out_$p785: ref, out_$p786: ref, out_$i787: i64, out_$i788: i1, out_$p790: ref, out_$p791: ref, out_$p789: ref, out_$i792: i64, out_$i793: i1)
{

  entry:
    out_$p760, out_$p761, out_$p762, out_$p763, out_$i764, out_$i765, out_$i766, out_$p767, out_$i768, out_$i769, out_$p770, out_$i771, out_$i772, out_$i773, out_$i774, out_$p775, out_$i776, out_$p777, out_$i778, out_$i779, out_$i780, out_$i781, out_$p783, out_$p784, out_$p785, out_$p786, out_$i787, out_$i788, out_$p790, out_$p791, out_$p789, out_$i792, out_$i793 := in_$p760, in_$p761, in_$p762, in_$p763, in_$i764, in_$i765, in_$i766, in_$p767, in_$i768, in_$i769, in_$p770, in_$i771, in_$i772, in_$i773, in_$i774, in_$p775, in_$i776, in_$p777, in_$i778, in_$i779, in_$i780, in_$i781, in_$p783, in_$p784, in_$p785, in_$p786, in_$i787, in_$i788, in_$p790, in_$p791, in_$p789, in_$i792, in_$i793;
    goto $bb442, exit;

  $bb442:
    assume {:verifier.code 0} true;
    goto corral_source_split_1189;

  $bb456:
    assume out_$i793 == 1;
    assume {:verifier.code 0} true;
    out_$p760 := out_$p789;
    goto $bb456_dummy;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i793 := $ne.i64(out_$i792, 0);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$i792 := $p2i.ref.i64(out_$p789);
    goto corral_source_split_1230;

  $bb455:
    assume {:verifier.code 0} true;
    goto corral_source_split_1229;

  $bb454:
    assume !(out_$i788 == 1);
    assume {:verifier.code 0} true;
    out_$p789 := $0.ref;
    goto $bb455;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    out_$p789 := out_$p791;
    goto $bb455;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    out_$p791 := $add.ref(out_$p790, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    out_$p790 := $bitcast.ref.ref(out_$p786);
    goto corral_source_split_1226;

  $bb453:
    assume out_$i788 == 1;
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    out_$i788 := $ne.i64(out_$i787, 0);
    goto corral_source_split_1223;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    out_$i787 := $p2i.ref.i64(out_$p786);
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    out_$p786 := $load.ref($M.0, out_$p785);
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    out_$p785 := $add.ref($add.ref(out_$p784, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1220;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$p784 := $bitcast.ref.ref(out_$p783);
    goto corral_source_split_1219;

  $bb452:
    assume {:verifier.code 0} true;
    out_$p783 := $add.ref($add.ref($add.ref(out_$p760, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1218;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb444:
    assume out_$i766 == 1;
    goto corral_source_split_1198;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    out_$i766 := $ne.i64(out_$i764, out_$i765);
    goto corral_source_split_1196;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    out_$i765 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1195;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    out_$i764 := $p2i.ref.i64(out_$p763);
    goto corral_source_split_1194;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    out_$p763 := $load.ref($M.0, out_$p762);
    goto corral_source_split_1193;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    out_$p762 := $add.ref($add.ref(out_$p761, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1192;

  $bb443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} out_$p761 := atm_sk(out_$p760);
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb450:
    assume !(out_$i781 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$i781 := $ne.i32(out_$i780, 0);
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$i780 := $ashr.i32(out_$i776, out_$i779);
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$i779 := $sext.i8.i32(out_$i778);
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    out_$i778 := $load.i8($M.0, out_$p777);
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$p777 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i776 := $load.i32($M.0, out_$p775);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    out_$p775 := $add.ref($add.ref(out_$p761, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1210;

  $bb448:
    assume !(out_$i774 == 1);
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb448;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$i774 := $ne.i32(out_$i773, 0);
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    out_$i773 := $ashr.i32(out_$i769, out_$i772);
    goto corral_source_split_1206;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$i772 := $sext.i8.i32(out_$i771);
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i771 := $load.i8($M.0, out_$p770);
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    out_$p770 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$i769 := $sext.i16.i32(out_$i768);
    goto corral_source_split_1202;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    out_$i768 := $load.i16($M.0, out_$p767);
    goto corral_source_split_1201;

  $bb446:
    assume {:verifier.code 0} true;
    out_$p767 := $add.ref($add.ref(out_$p761, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1200;

  $bb445:
    assume !(out_$i766 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb456_dummy:
    call {:si_unique_call 1} out_$p760, out_$p761, out_$p762, out_$p763, out_$i764, out_$i765, out_$i766, out_$p767, out_$i768, out_$i769, out_$p770, out_$i771, out_$i772, out_$i773, out_$i774, out_$p775, out_$i776, out_$p777, out_$i778, out_$i779, out_$i780, out_$i781, out_$p783, out_$p784, out_$p785, out_$p786, out_$i787, out_$i788, out_$p790, out_$p791, out_$p789, out_$i792, out_$i793 := atmtcp_v_ioctl_loop_$bb442(in_$p0, in_$p3, out_$p760, out_$p761, out_$p762, out_$p763, out_$i764, out_$i765, out_$i766, out_$p767, out_$i768, out_$i769, out_$p770, out_$i771, out_$i772, out_$i773, out_$i774, out_$p775, out_$i776, out_$p777, out_$i778, out_$i779, out_$i780, out_$i781, out_$p783, out_$p784, out_$p785, out_$p786, out_$i787, out_$i788, out_$p790, out_$p791, out_$p789, out_$i792, out_$i793);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb442(in_$p0: ref, in_$p3: ref, in_$p760: ref, in_$p761: ref, in_$p762: ref, in_$p763: ref, in_$i764: i64, in_$i765: i64, in_$i766: i1, in_$p767: ref, in_$i768: i16, in_$i769: i32, in_$p770: ref, in_$i771: i8, in_$i772: i32, in_$i773: i32, in_$i774: i1, in_$p775: ref, in_$i776: i32, in_$p777: ref, in_$i778: i8, in_$i779: i32, in_$i780: i32, in_$i781: i1, in_$p783: ref, in_$p784: ref, in_$p785: ref, in_$p786: ref, in_$i787: i64, in_$i788: i1, in_$p790: ref, in_$p791: ref, in_$p789: ref, in_$i792: i64, in_$i793: i1) returns (out_$p760: ref, out_$p761: ref, out_$p762: ref, out_$p763: ref, out_$i764: i64, out_$i765: i64, out_$i766: i1, out_$p767: ref, out_$i768: i16, out_$i769: i32, out_$p770: ref, out_$i771: i8, out_$i772: i32, out_$i773: i32, out_$i774: i1, out_$p775: ref, out_$i776: i32, out_$p777: ref, out_$i778: i8, out_$i779: i32, out_$i780: i32, out_$i781: i1, out_$p783: ref, out_$p784: ref, out_$p785: ref, out_$p786: ref, out_$i787: i64, out_$i788: i1, out_$p790: ref, out_$p791: ref, out_$p789: ref, out_$i792: i64, out_$i793: i1);



implementation atmtcp_v_ioctl_loop_$bb418(in_$p0: ref, in_$p3: ref, in_$p718: ref, in_$p719: ref, in_$p720: ref, in_$p721: ref, in_$i722: i64, in_$i723: i64, in_$i724: i1, in_$p725: ref, in_$i726: i16, in_$i727: i32, in_$p728: ref, in_$i729: i8, in_$i730: i32, in_$i731: i32, in_$i732: i1, in_$p733: ref, in_$i734: i32, in_$p735: ref, in_$i736: i8, in_$i737: i32, in_$i738: i32, in_$i739: i1, in_$p741: ref, in_$p742: ref, in_$p743: ref, in_$p744: ref, in_$i745: i64, in_$i746: i1, in_$p748: ref, in_$p749: ref, in_$p747: ref, in_$i750: i64, in_$i751: i1) returns (out_$p718: ref, out_$p719: ref, out_$p720: ref, out_$p721: ref, out_$i722: i64, out_$i723: i64, out_$i724: i1, out_$p725: ref, out_$i726: i16, out_$i727: i32, out_$p728: ref, out_$i729: i8, out_$i730: i32, out_$i731: i32, out_$i732: i1, out_$p733: ref, out_$i734: i32, out_$p735: ref, out_$i736: i8, out_$i737: i32, out_$i738: i32, out_$i739: i1, out_$p741: ref, out_$p742: ref, out_$p743: ref, out_$p744: ref, out_$i745: i64, out_$i746: i1, out_$p748: ref, out_$p749: ref, out_$p747: ref, out_$i750: i64, out_$i751: i1)
{

  entry:
    out_$p718, out_$p719, out_$p720, out_$p721, out_$i722, out_$i723, out_$i724, out_$p725, out_$i726, out_$i727, out_$p728, out_$i729, out_$i730, out_$i731, out_$i732, out_$p733, out_$i734, out_$p735, out_$i736, out_$i737, out_$i738, out_$i739, out_$p741, out_$p742, out_$p743, out_$p744, out_$i745, out_$i746, out_$p748, out_$p749, out_$p747, out_$i750, out_$i751 := in_$p718, in_$p719, in_$p720, in_$p721, in_$i722, in_$i723, in_$i724, in_$p725, in_$i726, in_$i727, in_$p728, in_$i729, in_$i730, in_$i731, in_$i732, in_$p733, in_$i734, in_$p735, in_$i736, in_$i737, in_$i738, in_$i739, in_$p741, in_$p742, in_$p743, in_$p744, in_$i745, in_$i746, in_$p748, in_$p749, in_$p747, in_$i750, in_$i751;
    goto $bb418, exit;

  $bb418:
    assume {:verifier.code 0} true;
    goto corral_source_split_1129;

  $bb432:
    assume out_$i751 == 1;
    assume {:verifier.code 0} true;
    out_$p718 := out_$p747;
    goto $bb432_dummy;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    out_$i751 := $ne.i64(out_$i750, 0);
    goto corral_source_split_1171;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    out_$i750 := $p2i.ref.i64(out_$p747);
    goto corral_source_split_1170;

  $bb431:
    assume {:verifier.code 0} true;
    goto corral_source_split_1169;

  $bb430:
    assume !(out_$i746 == 1);
    assume {:verifier.code 0} true;
    out_$p747 := $0.ref;
    goto $bb431;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    out_$p747 := out_$p749;
    goto $bb431;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    out_$p749 := $add.ref(out_$p748, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1167;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    out_$p748 := $bitcast.ref.ref(out_$p744);
    goto corral_source_split_1166;

  $bb429:
    assume out_$i746 == 1;
    goto corral_source_split_1165;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    out_$i746 := $ne.i64(out_$i745, 0);
    goto corral_source_split_1163;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    out_$i745 := $p2i.ref.i64(out_$p744);
    goto corral_source_split_1162;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    out_$p744 := $load.ref($M.0, out_$p743);
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    out_$p743 := $add.ref($add.ref(out_$p742, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1160;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    out_$p742 := $bitcast.ref.ref(out_$p741);
    goto corral_source_split_1159;

  $bb428:
    assume {:verifier.code 0} true;
    out_$p741 := $add.ref($add.ref($add.ref(out_$p718, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1158;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb420:
    assume out_$i724 == 1;
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    out_$i724 := $ne.i64(out_$i722, out_$i723);
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    out_$i723 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1135;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$i722 := $p2i.ref.i64(out_$p721);
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$p721 := $load.ref($M.0, out_$p720);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    out_$p720 := $add.ref($add.ref(out_$p719, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1132;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} out_$p719 := atm_sk(out_$p718);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb426:
    assume !(out_$i739 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$i739 := $ne.i32(out_$i738, 0);
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    out_$i738 := $ashr.i32(out_$i734, out_$i737);
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$i737 := $sext.i8.i32(out_$i736);
    goto corral_source_split_1154;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    out_$i736 := $load.i8($M.0, out_$p735);
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$p735 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    out_$i734 := $load.i32($M.0, out_$p733);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    out_$p733 := $add.ref($add.ref(out_$p719, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1150;

  $bb424:
    assume !(out_$i732 == 1);
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$i732 := $ne.i32(out_$i731, 0);
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$i731 := $ashr.i32(out_$i727, out_$i730);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$i730 := $sext.i8.i32(out_$i729);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$i729 := $load.i8($M.0, out_$p728);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    out_$p728 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$i727 := $sext.i16.i32(out_$i726);
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$i726 := $load.i16($M.0, out_$p725);
    goto corral_source_split_1141;

  $bb422:
    assume {:verifier.code 0} true;
    out_$p725 := $add.ref($add.ref(out_$p719, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1140;

  $bb421:
    assume !(out_$i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb432_dummy:
    call {:si_unique_call 1} out_$p718, out_$p719, out_$p720, out_$p721, out_$i722, out_$i723, out_$i724, out_$p725, out_$i726, out_$i727, out_$p728, out_$i729, out_$i730, out_$i731, out_$i732, out_$p733, out_$i734, out_$p735, out_$i736, out_$i737, out_$i738, out_$i739, out_$p741, out_$p742, out_$p743, out_$p744, out_$i745, out_$i746, out_$p748, out_$p749, out_$p747, out_$i750, out_$i751 := atmtcp_v_ioctl_loop_$bb418(in_$p0, in_$p3, out_$p718, out_$p719, out_$p720, out_$p721, out_$i722, out_$i723, out_$i724, out_$p725, out_$i726, out_$i727, out_$p728, out_$i729, out_$i730, out_$i731, out_$i732, out_$p733, out_$i734, out_$p735, out_$i736, out_$i737, out_$i738, out_$i739, out_$p741, out_$p742, out_$p743, out_$p744, out_$i745, out_$i746, out_$p748, out_$p749, out_$p747, out_$i750, out_$i751);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb418(in_$p0: ref, in_$p3: ref, in_$p718: ref, in_$p719: ref, in_$p720: ref, in_$p721: ref, in_$i722: i64, in_$i723: i64, in_$i724: i1, in_$p725: ref, in_$i726: i16, in_$i727: i32, in_$p728: ref, in_$i729: i8, in_$i730: i32, in_$i731: i32, in_$i732: i1, in_$p733: ref, in_$i734: i32, in_$p735: ref, in_$i736: i8, in_$i737: i32, in_$i738: i32, in_$i739: i1, in_$p741: ref, in_$p742: ref, in_$p743: ref, in_$p744: ref, in_$i745: i64, in_$i746: i1, in_$p748: ref, in_$p749: ref, in_$p747: ref, in_$i750: i64, in_$i751: i1) returns (out_$p718: ref, out_$p719: ref, out_$p720: ref, out_$p721: ref, out_$i722: i64, out_$i723: i64, out_$i724: i1, out_$p725: ref, out_$i726: i16, out_$i727: i32, out_$p728: ref, out_$i729: i8, out_$i730: i32, out_$i731: i32, out_$i732: i1, out_$p733: ref, out_$i734: i32, out_$p735: ref, out_$i736: i8, out_$i737: i32, out_$i738: i32, out_$i739: i1, out_$p741: ref, out_$p742: ref, out_$p743: ref, out_$p744: ref, out_$i745: i64, out_$i746: i1, out_$p748: ref, out_$p749: ref, out_$p747: ref, out_$i750: i64, out_$i751: i1);



implementation atmtcp_v_ioctl_loop_$bb394(in_$p0: ref, in_$p3: ref, in_$p676: ref, in_$p677: ref, in_$p678: ref, in_$p679: ref, in_$i680: i64, in_$i681: i64, in_$i682: i1, in_$p683: ref, in_$i684: i16, in_$i685: i32, in_$p686: ref, in_$i687: i8, in_$i688: i32, in_$i689: i32, in_$i690: i1, in_$p691: ref, in_$i692: i32, in_$p693: ref, in_$i694: i8, in_$i695: i32, in_$i696: i32, in_$i697: i1, in_$p699: ref, in_$p700: ref, in_$p701: ref, in_$p702: ref, in_$i703: i64, in_$i704: i1, in_$p706: ref, in_$p707: ref, in_$p705: ref, in_$i708: i64, in_$i709: i1) returns (out_$p676: ref, out_$p677: ref, out_$p678: ref, out_$p679: ref, out_$i680: i64, out_$i681: i64, out_$i682: i1, out_$p683: ref, out_$i684: i16, out_$i685: i32, out_$p686: ref, out_$i687: i8, out_$i688: i32, out_$i689: i32, out_$i690: i1, out_$p691: ref, out_$i692: i32, out_$p693: ref, out_$i694: i8, out_$i695: i32, out_$i696: i32, out_$i697: i1, out_$p699: ref, out_$p700: ref, out_$p701: ref, out_$p702: ref, out_$i703: i64, out_$i704: i1, out_$p706: ref, out_$p707: ref, out_$p705: ref, out_$i708: i64, out_$i709: i1)
{

  entry:
    out_$p676, out_$p677, out_$p678, out_$p679, out_$i680, out_$i681, out_$i682, out_$p683, out_$i684, out_$i685, out_$p686, out_$i687, out_$i688, out_$i689, out_$i690, out_$p691, out_$i692, out_$p693, out_$i694, out_$i695, out_$i696, out_$i697, out_$p699, out_$p700, out_$p701, out_$p702, out_$i703, out_$i704, out_$p706, out_$p707, out_$p705, out_$i708, out_$i709 := in_$p676, in_$p677, in_$p678, in_$p679, in_$i680, in_$i681, in_$i682, in_$p683, in_$i684, in_$i685, in_$p686, in_$i687, in_$i688, in_$i689, in_$i690, in_$p691, in_$i692, in_$p693, in_$i694, in_$i695, in_$i696, in_$i697, in_$p699, in_$p700, in_$p701, in_$p702, in_$i703, in_$i704, in_$p706, in_$p707, in_$p705, in_$i708, in_$i709;
    goto $bb394, exit;

  $bb394:
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  $bb408:
    assume out_$i709 == 1;
    assume {:verifier.code 0} true;
    out_$p676 := out_$p705;
    goto $bb408_dummy;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i709 := $ne.i64(out_$i708, 0);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$i708 := $p2i.ref.i64(out_$p705);
    goto corral_source_split_1110;

  $bb407:
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  $bb406:
    assume !(out_$i704 == 1);
    assume {:verifier.code 0} true;
    out_$p705 := $0.ref;
    goto $bb407;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$p705 := out_$p707;
    goto $bb407;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    out_$p707 := $add.ref(out_$p706, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$p706 := $bitcast.ref.ref(out_$p702);
    goto corral_source_split_1106;

  $bb405:
    assume out_$i704 == 1;
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$i704 := $ne.i64(out_$i703, 0);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$i703 := $p2i.ref.i64(out_$p702);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$p702 := $load.ref($M.0, out_$p701);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$p701 := $add.ref($add.ref(out_$p700, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    out_$p700 := $bitcast.ref.ref(out_$p699);
    goto corral_source_split_1099;

  $bb404:
    assume {:verifier.code 0} true;
    out_$p699 := $add.ref($add.ref($add.ref(out_$p676, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1098;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb396:
    assume out_$i682 == 1;
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$i682 := $ne.i64(out_$i680, out_$i681);
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$i681 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$i680 := $p2i.ref.i64(out_$p679);
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$p679 := $load.ref($M.0, out_$p678);
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$p678 := $add.ref($add.ref(out_$p677, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1072;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} out_$p677 := atm_sk(out_$p676);
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb402:
    assume !(out_$i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$i697 := $ne.i32(out_$i696, 0);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$i696 := $ashr.i32(out_$i692, out_$i695);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$i695 := $sext.i8.i32(out_$i694);
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$i694 := $load.i8($M.0, out_$p693);
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$p693 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1092;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    out_$i692 := $load.i32($M.0, out_$p691);
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$p691 := $add.ref($add.ref(out_$p677, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1090;

  $bb400:
    assume !(out_$i690 == 1);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$i690 := $ne.i32(out_$i689, 0);
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$i689 := $ashr.i32(out_$i685, out_$i688);
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$i688 := $sext.i8.i32(out_$i687);
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$i687 := $load.i8($M.0, out_$p686);
    goto corral_source_split_1084;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$p686 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1083;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    out_$i685 := $sext.i16.i32(out_$i684);
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$i684 := $load.i16($M.0, out_$p683);
    goto corral_source_split_1081;

  $bb398:
    assume {:verifier.code 0} true;
    out_$p683 := $add.ref($add.ref(out_$p677, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1080;

  $bb397:
    assume !(out_$i682 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb408_dummy:
    call {:si_unique_call 1} out_$p676, out_$p677, out_$p678, out_$p679, out_$i680, out_$i681, out_$i682, out_$p683, out_$i684, out_$i685, out_$p686, out_$i687, out_$i688, out_$i689, out_$i690, out_$p691, out_$i692, out_$p693, out_$i694, out_$i695, out_$i696, out_$i697, out_$p699, out_$p700, out_$p701, out_$p702, out_$i703, out_$i704, out_$p706, out_$p707, out_$p705, out_$i708, out_$i709 := atmtcp_v_ioctl_loop_$bb394(in_$p0, in_$p3, out_$p676, out_$p677, out_$p678, out_$p679, out_$i680, out_$i681, out_$i682, out_$p683, out_$i684, out_$i685, out_$p686, out_$i687, out_$i688, out_$i689, out_$i690, out_$p691, out_$i692, out_$p693, out_$i694, out_$i695, out_$i696, out_$i697, out_$p699, out_$p700, out_$p701, out_$p702, out_$i703, out_$i704, out_$p706, out_$p707, out_$p705, out_$i708, out_$i709);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb394(in_$p0: ref, in_$p3: ref, in_$p676: ref, in_$p677: ref, in_$p678: ref, in_$p679: ref, in_$i680: i64, in_$i681: i64, in_$i682: i1, in_$p683: ref, in_$i684: i16, in_$i685: i32, in_$p686: ref, in_$i687: i8, in_$i688: i32, in_$i689: i32, in_$i690: i1, in_$p691: ref, in_$i692: i32, in_$p693: ref, in_$i694: i8, in_$i695: i32, in_$i696: i32, in_$i697: i1, in_$p699: ref, in_$p700: ref, in_$p701: ref, in_$p702: ref, in_$i703: i64, in_$i704: i1, in_$p706: ref, in_$p707: ref, in_$p705: ref, in_$i708: i64, in_$i709: i1) returns (out_$p676: ref, out_$p677: ref, out_$p678: ref, out_$p679: ref, out_$i680: i64, out_$i681: i64, out_$i682: i1, out_$p683: ref, out_$i684: i16, out_$i685: i32, out_$p686: ref, out_$i687: i8, out_$i688: i32, out_$i689: i32, out_$i690: i1, out_$p691: ref, out_$i692: i32, out_$p693: ref, out_$i694: i8, out_$i695: i32, out_$i696: i32, out_$i697: i1, out_$p699: ref, out_$p700: ref, out_$p701: ref, out_$p702: ref, out_$i703: i64, out_$i704: i1, out_$p706: ref, out_$p707: ref, out_$p705: ref, out_$i708: i64, out_$i709: i1);



implementation atmtcp_v_ioctl_loop_$bb370(in_$p0: ref, in_$p3: ref, in_$p634: ref, in_$p635: ref, in_$p636: ref, in_$p637: ref, in_$i638: i64, in_$i639: i64, in_$i640: i1, in_$p641: ref, in_$i642: i16, in_$i643: i32, in_$p644: ref, in_$i645: i8, in_$i646: i32, in_$i647: i32, in_$i648: i1, in_$p649: ref, in_$i650: i32, in_$p651: ref, in_$i652: i8, in_$i653: i32, in_$i654: i32, in_$i655: i1, in_$p657: ref, in_$p658: ref, in_$p659: ref, in_$p660: ref, in_$i661: i64, in_$i662: i1, in_$p664: ref, in_$p665: ref, in_$p663: ref, in_$i666: i64, in_$i667: i1) returns (out_$p634: ref, out_$p635: ref, out_$p636: ref, out_$p637: ref, out_$i638: i64, out_$i639: i64, out_$i640: i1, out_$p641: ref, out_$i642: i16, out_$i643: i32, out_$p644: ref, out_$i645: i8, out_$i646: i32, out_$i647: i32, out_$i648: i1, out_$p649: ref, out_$i650: i32, out_$p651: ref, out_$i652: i8, out_$i653: i32, out_$i654: i32, out_$i655: i1, out_$p657: ref, out_$p658: ref, out_$p659: ref, out_$p660: ref, out_$i661: i64, out_$i662: i1, out_$p664: ref, out_$p665: ref, out_$p663: ref, out_$i666: i64, out_$i667: i1)
{

  entry:
    out_$p634, out_$p635, out_$p636, out_$p637, out_$i638, out_$i639, out_$i640, out_$p641, out_$i642, out_$i643, out_$p644, out_$i645, out_$i646, out_$i647, out_$i648, out_$p649, out_$i650, out_$p651, out_$i652, out_$i653, out_$i654, out_$i655, out_$p657, out_$p658, out_$p659, out_$p660, out_$i661, out_$i662, out_$p664, out_$p665, out_$p663, out_$i666, out_$i667 := in_$p634, in_$p635, in_$p636, in_$p637, in_$i638, in_$i639, in_$i640, in_$p641, in_$i642, in_$i643, in_$p644, in_$i645, in_$i646, in_$i647, in_$i648, in_$p649, in_$i650, in_$p651, in_$i652, in_$i653, in_$i654, in_$i655, in_$p657, in_$p658, in_$p659, in_$p660, in_$i661, in_$i662, in_$p664, in_$p665, in_$p663, in_$i666, in_$i667;
    goto $bb370, exit;

  $bb370:
    assume {:verifier.code 0} true;
    goto corral_source_split_1009;

  $bb384:
    assume out_$i667 == 1;
    assume {:verifier.code 0} true;
    out_$p634 := out_$p663;
    goto $bb384_dummy;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    out_$i667 := $ne.i64(out_$i666, 0);
    goto corral_source_split_1051;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    out_$i666 := $p2i.ref.i64(out_$p663);
    goto corral_source_split_1050;

  $bb383:
    assume {:verifier.code 0} true;
    goto corral_source_split_1049;

  $bb382:
    assume !(out_$i662 == 1);
    assume {:verifier.code 0} true;
    out_$p663 := $0.ref;
    goto $bb383;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    out_$p663 := out_$p665;
    goto $bb383;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    out_$p665 := $add.ref(out_$p664, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    out_$p664 := $bitcast.ref.ref(out_$p660);
    goto corral_source_split_1046;

  $bb381:
    assume out_$i662 == 1;
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$i662 := $ne.i64(out_$i661, 0);
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    out_$i661 := $p2i.ref.i64(out_$p660);
    goto corral_source_split_1042;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    out_$p660 := $load.ref($M.0, out_$p659);
    goto corral_source_split_1041;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    out_$p659 := $add.ref($add.ref(out_$p658, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1040;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    out_$p658 := $bitcast.ref.ref(out_$p657);
    goto corral_source_split_1039;

  $bb380:
    assume {:verifier.code 0} true;
    out_$p657 := $add.ref($add.ref($add.ref(out_$p634, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1038;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb380;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb372:
    assume out_$i640 == 1;
    goto corral_source_split_1018;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$i640 := $ne.i64(out_$i638, out_$i639);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    out_$i639 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$i638 := $p2i.ref.i64(out_$p637);
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$p637 := $load.ref($M.0, out_$p636);
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    out_$p636 := $add.ref($add.ref(out_$p635, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_1012;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} out_$p635 := atm_sk(out_$p634);
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb378:
    assume !(out_$i655 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$i655 := $ne.i32(out_$i654, 0);
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i654 := $ashr.i32(out_$i650, out_$i653);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$i653 := $sext.i8.i32(out_$i652);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$i652 := $load.i8($M.0, out_$p651);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    out_$p651 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    out_$i650 := $load.i32($M.0, out_$p649);
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$p649 := $add.ref($add.ref(out_$p635, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_1030;

  $bb376:
    assume !(out_$i648 == 1);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    out_$i648 := $ne.i32(out_$i647, 0);
    goto corral_source_split_1027;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    out_$i647 := $ashr.i32(out_$i643, out_$i646);
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    out_$i646 := $sext.i8.i32(out_$i645);
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$i645 := $load.i8($M.0, out_$p644);
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$p644 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$i643 := $sext.i16.i32(out_$i642);
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    out_$i642 := $load.i16($M.0, out_$p641);
    goto corral_source_split_1021;

  $bb374:
    assume {:verifier.code 0} true;
    out_$p641 := $add.ref($add.ref(out_$p635, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_1020;

  $bb373:
    assume !(out_$i640 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb384_dummy:
    call {:si_unique_call 1} out_$p634, out_$p635, out_$p636, out_$p637, out_$i638, out_$i639, out_$i640, out_$p641, out_$i642, out_$i643, out_$p644, out_$i645, out_$i646, out_$i647, out_$i648, out_$p649, out_$i650, out_$p651, out_$i652, out_$i653, out_$i654, out_$i655, out_$p657, out_$p658, out_$p659, out_$p660, out_$i661, out_$i662, out_$p664, out_$p665, out_$p663, out_$i666, out_$i667 := atmtcp_v_ioctl_loop_$bb370(in_$p0, in_$p3, out_$p634, out_$p635, out_$p636, out_$p637, out_$i638, out_$i639, out_$i640, out_$p641, out_$i642, out_$i643, out_$p644, out_$i645, out_$i646, out_$i647, out_$i648, out_$p649, out_$i650, out_$p651, out_$i652, out_$i653, out_$i654, out_$i655, out_$p657, out_$p658, out_$p659, out_$p660, out_$i661, out_$i662, out_$p664, out_$p665, out_$p663, out_$i666, out_$i667);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb370(in_$p0: ref, in_$p3: ref, in_$p634: ref, in_$p635: ref, in_$p636: ref, in_$p637: ref, in_$i638: i64, in_$i639: i64, in_$i640: i1, in_$p641: ref, in_$i642: i16, in_$i643: i32, in_$p644: ref, in_$i645: i8, in_$i646: i32, in_$i647: i32, in_$i648: i1, in_$p649: ref, in_$i650: i32, in_$p651: ref, in_$i652: i8, in_$i653: i32, in_$i654: i32, in_$i655: i1, in_$p657: ref, in_$p658: ref, in_$p659: ref, in_$p660: ref, in_$i661: i64, in_$i662: i1, in_$p664: ref, in_$p665: ref, in_$p663: ref, in_$i666: i64, in_$i667: i1) returns (out_$p634: ref, out_$p635: ref, out_$p636: ref, out_$p637: ref, out_$i638: i64, out_$i639: i64, out_$i640: i1, out_$p641: ref, out_$i642: i16, out_$i643: i32, out_$p644: ref, out_$i645: i8, out_$i646: i32, out_$i647: i32, out_$i648: i1, out_$p649: ref, out_$i650: i32, out_$p651: ref, out_$i652: i8, out_$i653: i32, out_$i654: i32, out_$i655: i1, out_$p657: ref, out_$p658: ref, out_$p659: ref, out_$p660: ref, out_$i661: i64, out_$i662: i1, out_$p664: ref, out_$p665: ref, out_$p663: ref, out_$i666: i64, out_$i667: i1);



implementation atmtcp_v_ioctl_loop_$bb346(in_$p0: ref, in_$p3: ref, in_$p592: ref, in_$p593: ref, in_$p594: ref, in_$p595: ref, in_$i596: i64, in_$i597: i64, in_$i598: i1, in_$p599: ref, in_$i600: i16, in_$i601: i32, in_$p602: ref, in_$i603: i8, in_$i604: i32, in_$i605: i32, in_$i606: i1, in_$p607: ref, in_$i608: i32, in_$p609: ref, in_$i610: i8, in_$i611: i32, in_$i612: i32, in_$i613: i1, in_$p615: ref, in_$p616: ref, in_$p617: ref, in_$p618: ref, in_$i619: i64, in_$i620: i1, in_$p622: ref, in_$p623: ref, in_$p621: ref, in_$i624: i64, in_$i625: i1) returns (out_$p592: ref, out_$p593: ref, out_$p594: ref, out_$p595: ref, out_$i596: i64, out_$i597: i64, out_$i598: i1, out_$p599: ref, out_$i600: i16, out_$i601: i32, out_$p602: ref, out_$i603: i8, out_$i604: i32, out_$i605: i32, out_$i606: i1, out_$p607: ref, out_$i608: i32, out_$p609: ref, out_$i610: i8, out_$i611: i32, out_$i612: i32, out_$i613: i1, out_$p615: ref, out_$p616: ref, out_$p617: ref, out_$p618: ref, out_$i619: i64, out_$i620: i1, out_$p622: ref, out_$p623: ref, out_$p621: ref, out_$i624: i64, out_$i625: i1)
{

  entry:
    out_$p592, out_$p593, out_$p594, out_$p595, out_$i596, out_$i597, out_$i598, out_$p599, out_$i600, out_$i601, out_$p602, out_$i603, out_$i604, out_$i605, out_$i606, out_$p607, out_$i608, out_$p609, out_$i610, out_$i611, out_$i612, out_$i613, out_$p615, out_$p616, out_$p617, out_$p618, out_$i619, out_$i620, out_$p622, out_$p623, out_$p621, out_$i624, out_$i625 := in_$p592, in_$p593, in_$p594, in_$p595, in_$i596, in_$i597, in_$i598, in_$p599, in_$i600, in_$i601, in_$p602, in_$i603, in_$i604, in_$i605, in_$i606, in_$p607, in_$i608, in_$p609, in_$i610, in_$i611, in_$i612, in_$i613, in_$p615, in_$p616, in_$p617, in_$p618, in_$i619, in_$i620, in_$p622, in_$p623, in_$p621, in_$i624, in_$i625;
    goto $bb346, exit;

  $bb346:
    assume {:verifier.code 0} true;
    goto corral_source_split_949;

  $bb360:
    assume out_$i625 == 1;
    assume {:verifier.code 0} true;
    out_$p592 := out_$p621;
    goto $bb360_dummy;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    out_$i625 := $ne.i64(out_$i624, 0);
    goto corral_source_split_991;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    out_$i624 := $p2i.ref.i64(out_$p621);
    goto corral_source_split_990;

  $bb359:
    assume {:verifier.code 0} true;
    goto corral_source_split_989;

  $bb358:
    assume !(out_$i620 == 1);
    assume {:verifier.code 0} true;
    out_$p621 := $0.ref;
    goto $bb359;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    out_$p621 := out_$p623;
    goto $bb359;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    out_$p623 := $add.ref(out_$p622, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$p622 := $bitcast.ref.ref(out_$p618);
    goto corral_source_split_986;

  $bb357:
    assume out_$i620 == 1;
    goto corral_source_split_985;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb357, $bb358;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    out_$i620 := $ne.i64(out_$i619, 0);
    goto corral_source_split_983;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    out_$i619 := $p2i.ref.i64(out_$p618);
    goto corral_source_split_982;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$p618 := $load.ref($M.0, out_$p617);
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$p617 := $add.ref($add.ref(out_$p616, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_980;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    out_$p616 := $bitcast.ref.ref(out_$p615);
    goto corral_source_split_979;

  $bb356:
    assume {:verifier.code 0} true;
    out_$p615 := $add.ref($add.ref($add.ref(out_$p592, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_978;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb356;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb348:
    assume out_$i598 == 1;
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$i598 := $ne.i64(out_$i596, out_$i597);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$i597 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$i596 := $p2i.ref.i64(out_$p595);
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$p595 := $load.ref($M.0, out_$p594);
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$p594 := $add.ref($add.ref(out_$p593, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_952;

  $bb347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} out_$p593 := atm_sk(out_$p592);
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb354:
    assume !(out_$i613 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    out_$i613 := $ne.i32(out_$i612, 0);
    goto corral_source_split_976;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    out_$i612 := $ashr.i32(out_$i608, out_$i611);
    goto corral_source_split_975;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    out_$i611 := $sext.i8.i32(out_$i610);
    goto corral_source_split_974;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    out_$i610 := $load.i8($M.0, out_$p609);
    goto corral_source_split_973;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$p609 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_972;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$i608 := $load.i32($M.0, out_$p607);
    goto corral_source_split_971;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$p607 := $add.ref($add.ref(out_$p593, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_970;

  $bb352:
    assume !(out_$i606 == 1);
    goto corral_source_split_969;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    out_$i606 := $ne.i32(out_$i605, 0);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    out_$i605 := $ashr.i32(out_$i601, out_$i604);
    goto corral_source_split_966;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    out_$i604 := $sext.i8.i32(out_$i603);
    goto corral_source_split_965;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    out_$i603 := $load.i8($M.0, out_$p602);
    goto corral_source_split_964;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_$p602 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_963;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    out_$i601 := $sext.i16.i32(out_$i600);
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$i600 := $load.i16($M.0, out_$p599);
    goto corral_source_split_961;

  $bb350:
    assume {:verifier.code 0} true;
    out_$p599 := $add.ref($add.ref(out_$p593, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_960;

  $bb349:
    assume !(out_$i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb360_dummy:
    call {:si_unique_call 1} out_$p592, out_$p593, out_$p594, out_$p595, out_$i596, out_$i597, out_$i598, out_$p599, out_$i600, out_$i601, out_$p602, out_$i603, out_$i604, out_$i605, out_$i606, out_$p607, out_$i608, out_$p609, out_$i610, out_$i611, out_$i612, out_$i613, out_$p615, out_$p616, out_$p617, out_$p618, out_$i619, out_$i620, out_$p622, out_$p623, out_$p621, out_$i624, out_$i625 := atmtcp_v_ioctl_loop_$bb346(in_$p0, in_$p3, out_$p592, out_$p593, out_$p594, out_$p595, out_$i596, out_$i597, out_$i598, out_$p599, out_$i600, out_$i601, out_$p602, out_$i603, out_$i604, out_$i605, out_$i606, out_$p607, out_$i608, out_$p609, out_$i610, out_$i611, out_$i612, out_$i613, out_$p615, out_$p616, out_$p617, out_$p618, out_$i619, out_$i620, out_$p622, out_$p623, out_$p621, out_$i624, out_$i625);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb346(in_$p0: ref, in_$p3: ref, in_$p592: ref, in_$p593: ref, in_$p594: ref, in_$p595: ref, in_$i596: i64, in_$i597: i64, in_$i598: i1, in_$p599: ref, in_$i600: i16, in_$i601: i32, in_$p602: ref, in_$i603: i8, in_$i604: i32, in_$i605: i32, in_$i606: i1, in_$p607: ref, in_$i608: i32, in_$p609: ref, in_$i610: i8, in_$i611: i32, in_$i612: i32, in_$i613: i1, in_$p615: ref, in_$p616: ref, in_$p617: ref, in_$p618: ref, in_$i619: i64, in_$i620: i1, in_$p622: ref, in_$p623: ref, in_$p621: ref, in_$i624: i64, in_$i625: i1) returns (out_$p592: ref, out_$p593: ref, out_$p594: ref, out_$p595: ref, out_$i596: i64, out_$i597: i64, out_$i598: i1, out_$p599: ref, out_$i600: i16, out_$i601: i32, out_$p602: ref, out_$i603: i8, out_$i604: i32, out_$i605: i32, out_$i606: i1, out_$p607: ref, out_$i608: i32, out_$p609: ref, out_$i610: i8, out_$i611: i32, out_$i612: i32, out_$i613: i1, out_$p615: ref, out_$p616: ref, out_$p617: ref, out_$p618: ref, out_$i619: i64, out_$i620: i1, out_$p622: ref, out_$p623: ref, out_$p621: ref, out_$i624: i64, out_$i625: i1);



implementation atmtcp_v_ioctl_loop_$bb322(in_$p0: ref, in_$p3: ref, in_$p550: ref, in_$p551: ref, in_$p552: ref, in_$p553: ref, in_$i554: i64, in_$i555: i64, in_$i556: i1, in_$p557: ref, in_$i558: i16, in_$i559: i32, in_$p560: ref, in_$i561: i8, in_$i562: i32, in_$i563: i32, in_$i564: i1, in_$p565: ref, in_$i566: i32, in_$p567: ref, in_$i568: i8, in_$i569: i32, in_$i570: i32, in_$i571: i1, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$i577: i64, in_$i578: i1, in_$p580: ref, in_$p581: ref, in_$p579: ref, in_$i582: i64, in_$i583: i1) returns (out_$p550: ref, out_$p551: ref, out_$p552: ref, out_$p553: ref, out_$i554: i64, out_$i555: i64, out_$i556: i1, out_$p557: ref, out_$i558: i16, out_$i559: i32, out_$p560: ref, out_$i561: i8, out_$i562: i32, out_$i563: i32, out_$i564: i1, out_$p565: ref, out_$i566: i32, out_$p567: ref, out_$i568: i8, out_$i569: i32, out_$i570: i32, out_$i571: i1, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$i577: i64, out_$i578: i1, out_$p580: ref, out_$p581: ref, out_$p579: ref, out_$i582: i64, out_$i583: i1)
{

  entry:
    out_$p550, out_$p551, out_$p552, out_$p553, out_$i554, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$p560, out_$i561, out_$i562, out_$i563, out_$i564, out_$p565, out_$i566, out_$p567, out_$i568, out_$i569, out_$i570, out_$i571, out_$p573, out_$p574, out_$p575, out_$p576, out_$i577, out_$i578, out_$p580, out_$p581, out_$p579, out_$i582, out_$i583 := in_$p550, in_$p551, in_$p552, in_$p553, in_$i554, in_$i555, in_$i556, in_$p557, in_$i558, in_$i559, in_$p560, in_$i561, in_$i562, in_$i563, in_$i564, in_$p565, in_$i566, in_$p567, in_$i568, in_$i569, in_$i570, in_$i571, in_$p573, in_$p574, in_$p575, in_$p576, in_$i577, in_$i578, in_$p580, in_$p581, in_$p579, in_$i582, in_$i583;
    goto $bb322, exit;

  $bb322:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  $bb336:
    assume out_$i583 == 1;
    assume {:verifier.code 0} true;
    out_$p550 := out_$p579;
    goto $bb336_dummy;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$i583 := $ne.i64(out_$i582, 0);
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    out_$i582 := $p2i.ref.i64(out_$p579);
    goto corral_source_split_930;

  $bb335:
    assume {:verifier.code 0} true;
    goto corral_source_split_929;

  $bb334:
    assume !(out_$i578 == 1);
    assume {:verifier.code 0} true;
    out_$p579 := $0.ref;
    goto $bb335;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$p579 := out_$p581;
    goto $bb335;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$p581 := $add.ref(out_$p580, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$p580 := $bitcast.ref.ref(out_$p576);
    goto corral_source_split_926;

  $bb333:
    assume out_$i578 == 1;
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$i578 := $ne.i64(out_$i577, 0);
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$i577 := $p2i.ref.i64(out_$p576);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$p576 := $load.ref($M.0, out_$p575);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$p575 := $add.ref($add.ref(out_$p574, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$p574 := $bitcast.ref.ref(out_$p573);
    goto corral_source_split_919;

  $bb332:
    assume {:verifier.code 0} true;
    out_$p573 := $add.ref($add.ref($add.ref(out_$p550, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_918;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb332;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb324:
    assume out_$i556 == 1;
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$i556 := $ne.i64(out_$i554, out_$i555);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$i555 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$i554 := $p2i.ref.i64(out_$p553);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$p553 := $load.ref($M.0, out_$p552);
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$p552 := $add.ref($add.ref(out_$p551, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_892;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} out_$p551 := atm_sk(out_$p550);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb330:
    assume !(out_$i571 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i571 := $ne.i32(out_$i570, 0);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$i570 := $ashr.i32(out_$i566, out_$i569);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$i569 := $sext.i8.i32(out_$i568);
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i568 := $load.i8($M.0, out_$p567);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$p567 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$i566 := $load.i32($M.0, out_$p565);
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$p565 := $add.ref($add.ref(out_$p551, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_910;

  $bb328:
    assume !(out_$i564 == 1);
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$i564 := $ne.i32(out_$i563, 0);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$i563 := $ashr.i32(out_$i559, out_$i562);
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$i562 := $sext.i8.i32(out_$i561);
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$i561 := $load.i8($M.0, out_$p560);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p560 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i559 := $sext.i16.i32(out_$i558);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$i558 := $load.i16($M.0, out_$p557);
    goto corral_source_split_901;

  $bb326:
    assume {:verifier.code 0} true;
    out_$p557 := $add.ref($add.ref(out_$p551, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_900;

  $bb325:
    assume !(out_$i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb336_dummy:
    call {:si_unique_call 1} out_$p550, out_$p551, out_$p552, out_$p553, out_$i554, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$p560, out_$i561, out_$i562, out_$i563, out_$i564, out_$p565, out_$i566, out_$p567, out_$i568, out_$i569, out_$i570, out_$i571, out_$p573, out_$p574, out_$p575, out_$p576, out_$i577, out_$i578, out_$p580, out_$p581, out_$p579, out_$i582, out_$i583 := atmtcp_v_ioctl_loop_$bb322(in_$p0, in_$p3, out_$p550, out_$p551, out_$p552, out_$p553, out_$i554, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$p560, out_$i561, out_$i562, out_$i563, out_$i564, out_$p565, out_$i566, out_$p567, out_$i568, out_$i569, out_$i570, out_$i571, out_$p573, out_$p574, out_$p575, out_$p576, out_$i577, out_$i578, out_$p580, out_$p581, out_$p579, out_$i582, out_$i583);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb322(in_$p0: ref, in_$p3: ref, in_$p550: ref, in_$p551: ref, in_$p552: ref, in_$p553: ref, in_$i554: i64, in_$i555: i64, in_$i556: i1, in_$p557: ref, in_$i558: i16, in_$i559: i32, in_$p560: ref, in_$i561: i8, in_$i562: i32, in_$i563: i32, in_$i564: i1, in_$p565: ref, in_$i566: i32, in_$p567: ref, in_$i568: i8, in_$i569: i32, in_$i570: i32, in_$i571: i1, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$i577: i64, in_$i578: i1, in_$p580: ref, in_$p581: ref, in_$p579: ref, in_$i582: i64, in_$i583: i1) returns (out_$p550: ref, out_$p551: ref, out_$p552: ref, out_$p553: ref, out_$i554: i64, out_$i555: i64, out_$i556: i1, out_$p557: ref, out_$i558: i16, out_$i559: i32, out_$p560: ref, out_$i561: i8, out_$i562: i32, out_$i563: i32, out_$i564: i1, out_$p565: ref, out_$i566: i32, out_$p567: ref, out_$i568: i8, out_$i569: i32, out_$i570: i32, out_$i571: i1, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$i577: i64, out_$i578: i1, out_$p580: ref, out_$p581: ref, out_$p579: ref, out_$i582: i64, out_$i583: i1);



implementation atmtcp_v_ioctl_loop_$bb298(in_$p0: ref, in_$p3: ref, in_$p508: ref, in_$p509: ref, in_$p510: ref, in_$p511: ref, in_$i512: i64, in_$i513: i64, in_$i514: i1, in_$p515: ref, in_$i516: i16, in_$i517: i32, in_$p518: ref, in_$i519: i8, in_$i520: i32, in_$i521: i32, in_$i522: i1, in_$p523: ref, in_$i524: i32, in_$p525: ref, in_$i526: i8, in_$i527: i32, in_$i528: i32, in_$i529: i1, in_$p531: ref, in_$p532: ref, in_$p533: ref, in_$p534: ref, in_$i535: i64, in_$i536: i1, in_$p538: ref, in_$p539: ref, in_$p537: ref, in_$i540: i64, in_$i541: i1) returns (out_$p508: ref, out_$p509: ref, out_$p510: ref, out_$p511: ref, out_$i512: i64, out_$i513: i64, out_$i514: i1, out_$p515: ref, out_$i516: i16, out_$i517: i32, out_$p518: ref, out_$i519: i8, out_$i520: i32, out_$i521: i32, out_$i522: i1, out_$p523: ref, out_$i524: i32, out_$p525: ref, out_$i526: i8, out_$i527: i32, out_$i528: i32, out_$i529: i1, out_$p531: ref, out_$p532: ref, out_$p533: ref, out_$p534: ref, out_$i535: i64, out_$i536: i1, out_$p538: ref, out_$p539: ref, out_$p537: ref, out_$i540: i64, out_$i541: i1)
{

  entry:
    out_$p508, out_$p509, out_$p510, out_$p511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$p518, out_$i519, out_$i520, out_$i521, out_$i522, out_$p523, out_$i524, out_$p525, out_$i526, out_$i527, out_$i528, out_$i529, out_$p531, out_$p532, out_$p533, out_$p534, out_$i535, out_$i536, out_$p538, out_$p539, out_$p537, out_$i540, out_$i541 := in_$p508, in_$p509, in_$p510, in_$p511, in_$i512, in_$i513, in_$i514, in_$p515, in_$i516, in_$i517, in_$p518, in_$i519, in_$i520, in_$i521, in_$i522, in_$p523, in_$i524, in_$p525, in_$i526, in_$i527, in_$i528, in_$i529, in_$p531, in_$p532, in_$p533, in_$p534, in_$i535, in_$i536, in_$p538, in_$p539, in_$p537, in_$i540, in_$i541;
    goto $bb298, exit;

  $bb298:
    assume {:verifier.code 0} true;
    goto corral_source_split_829;

  $bb312:
    assume out_$i541 == 1;
    assume {:verifier.code 0} true;
    out_$p508 := out_$p537;
    goto $bb312_dummy;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$i541 := $ne.i64(out_$i540, 0);
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$i540 := $p2i.ref.i64(out_$p537);
    goto corral_source_split_870;

  $bb311:
    assume {:verifier.code 0} true;
    goto corral_source_split_869;

  $bb310:
    assume !(out_$i536 == 1);
    assume {:verifier.code 0} true;
    out_$p537 := $0.ref;
    goto $bb311;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$p537 := out_$p539;
    goto $bb311;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$p539 := $add.ref(out_$p538, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$p538 := $bitcast.ref.ref(out_$p534);
    goto corral_source_split_866;

  $bb309:
    assume out_$i536 == 1;
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i536 := $ne.i64(out_$i535, 0);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$i535 := $p2i.ref.i64(out_$p534);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$p534 := $load.ref($M.0, out_$p533);
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$p533 := $add.ref($add.ref(out_$p532, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$p532 := $bitcast.ref.ref(out_$p531);
    goto corral_source_split_859;

  $bb308:
    assume {:verifier.code 0} true;
    out_$p531 := $add.ref($add.ref($add.ref(out_$p508, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_858;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb308;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb300:
    assume out_$i514 == 1;
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i514 := $ne.i64(out_$i512, out_$i513);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$i513 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$i512 := $p2i.ref.i64(out_$p511);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$p511 := $load.ref($M.0, out_$p510);
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$p510 := $add.ref($add.ref(out_$p509, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_832;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} out_$p509 := atm_sk(out_$p508);
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb306:
    assume !(out_$i529 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i529 := $ne.i32(out_$i528, 0);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$i528 := $ashr.i32(out_$i524, out_$i527);
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$i527 := $sext.i8.i32(out_$i526);
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$i526 := $load.i8($M.0, out_$p525);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$p525 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i524 := $load.i32($M.0, out_$p523);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$p523 := $add.ref($add.ref(out_$p509, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_850;

  $bb304:
    assume !(out_$i522 == 1);
    goto corral_source_split_849;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$i522 := $ne.i32(out_$i521, 0);
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i521 := $ashr.i32(out_$i517, out_$i520);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i520 := $sext.i8.i32(out_$i519);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$i519 := $load.i8($M.0, out_$p518);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$p518 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i517 := $sext.i16.i32(out_$i516);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i516 := $load.i16($M.0, out_$p515);
    goto corral_source_split_841;

  $bb302:
    assume {:verifier.code 0} true;
    out_$p515 := $add.ref($add.ref(out_$p509, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_840;

  $bb301:
    assume !(out_$i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb312_dummy:
    call {:si_unique_call 1} out_$p508, out_$p509, out_$p510, out_$p511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$p518, out_$i519, out_$i520, out_$i521, out_$i522, out_$p523, out_$i524, out_$p525, out_$i526, out_$i527, out_$i528, out_$i529, out_$p531, out_$p532, out_$p533, out_$p534, out_$i535, out_$i536, out_$p538, out_$p539, out_$p537, out_$i540, out_$i541 := atmtcp_v_ioctl_loop_$bb298(in_$p0, in_$p3, out_$p508, out_$p509, out_$p510, out_$p511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$p518, out_$i519, out_$i520, out_$i521, out_$i522, out_$p523, out_$i524, out_$p525, out_$i526, out_$i527, out_$i528, out_$i529, out_$p531, out_$p532, out_$p533, out_$p534, out_$i535, out_$i536, out_$p538, out_$p539, out_$p537, out_$i540, out_$i541);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb298(in_$p0: ref, in_$p3: ref, in_$p508: ref, in_$p509: ref, in_$p510: ref, in_$p511: ref, in_$i512: i64, in_$i513: i64, in_$i514: i1, in_$p515: ref, in_$i516: i16, in_$i517: i32, in_$p518: ref, in_$i519: i8, in_$i520: i32, in_$i521: i32, in_$i522: i1, in_$p523: ref, in_$i524: i32, in_$p525: ref, in_$i526: i8, in_$i527: i32, in_$i528: i32, in_$i529: i1, in_$p531: ref, in_$p532: ref, in_$p533: ref, in_$p534: ref, in_$i535: i64, in_$i536: i1, in_$p538: ref, in_$p539: ref, in_$p537: ref, in_$i540: i64, in_$i541: i1) returns (out_$p508: ref, out_$p509: ref, out_$p510: ref, out_$p511: ref, out_$i512: i64, out_$i513: i64, out_$i514: i1, out_$p515: ref, out_$i516: i16, out_$i517: i32, out_$p518: ref, out_$i519: i8, out_$i520: i32, out_$i521: i32, out_$i522: i1, out_$p523: ref, out_$i524: i32, out_$p525: ref, out_$i526: i8, out_$i527: i32, out_$i528: i32, out_$i529: i1, out_$p531: ref, out_$p532: ref, out_$p533: ref, out_$p534: ref, out_$i535: i64, out_$i536: i1, out_$p538: ref, out_$p539: ref, out_$p537: ref, out_$i540: i64, out_$i541: i1);



implementation atmtcp_v_ioctl_loop_$bb274(in_$p0: ref, in_$p3: ref, in_$p466: ref, in_$p467: ref, in_$p468: ref, in_$p469: ref, in_$i470: i64, in_$i471: i64, in_$i472: i1, in_$p473: ref, in_$i474: i16, in_$i475: i32, in_$p476: ref, in_$i477: i8, in_$i478: i32, in_$i479: i32, in_$i480: i1, in_$p481: ref, in_$i482: i32, in_$p483: ref, in_$i484: i8, in_$i485: i32, in_$i486: i32, in_$i487: i1, in_$p489: ref, in_$p490: ref, in_$p491: ref, in_$p492: ref, in_$i493: i64, in_$i494: i1, in_$p496: ref, in_$p497: ref, in_$p495: ref, in_$i498: i64, in_$i499: i1) returns (out_$p466: ref, out_$p467: ref, out_$p468: ref, out_$p469: ref, out_$i470: i64, out_$i471: i64, out_$i472: i1, out_$p473: ref, out_$i474: i16, out_$i475: i32, out_$p476: ref, out_$i477: i8, out_$i478: i32, out_$i479: i32, out_$i480: i1, out_$p481: ref, out_$i482: i32, out_$p483: ref, out_$i484: i8, out_$i485: i32, out_$i486: i32, out_$i487: i1, out_$p489: ref, out_$p490: ref, out_$p491: ref, out_$p492: ref, out_$i493: i64, out_$i494: i1, out_$p496: ref, out_$p497: ref, out_$p495: ref, out_$i498: i64, out_$i499: i1)
{

  entry:
    out_$p466, out_$p467, out_$p468, out_$p469, out_$i470, out_$i471, out_$i472, out_$p473, out_$i474, out_$i475, out_$p476, out_$i477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$p483, out_$i484, out_$i485, out_$i486, out_$i487, out_$p489, out_$p490, out_$p491, out_$p492, out_$i493, out_$i494, out_$p496, out_$p497, out_$p495, out_$i498, out_$i499 := in_$p466, in_$p467, in_$p468, in_$p469, in_$i470, in_$i471, in_$i472, in_$p473, in_$i474, in_$i475, in_$p476, in_$i477, in_$i478, in_$i479, in_$i480, in_$p481, in_$i482, in_$p483, in_$i484, in_$i485, in_$i486, in_$i487, in_$p489, in_$p490, in_$p491, in_$p492, in_$i493, in_$i494, in_$p496, in_$p497, in_$p495, in_$i498, in_$i499;
    goto $bb274, exit;

  $bb274:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  $bb288:
    assume out_$i499 == 1;
    assume {:verifier.code 0} true;
    out_$p466 := out_$p495;
    goto $bb288_dummy;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$i499 := $ne.i64(out_$i498, 0);
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$i498 := $p2i.ref.i64(out_$p495);
    goto corral_source_split_810;

  $bb287:
    assume {:verifier.code 0} true;
    goto corral_source_split_809;

  $bb286:
    assume !(out_$i494 == 1);
    assume {:verifier.code 0} true;
    out_$p495 := $0.ref;
    goto $bb287;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$p495 := out_$p497;
    goto $bb287;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$p497 := $add.ref(out_$p496, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$p496 := $bitcast.ref.ref(out_$p492);
    goto corral_source_split_806;

  $bb285:
    assume out_$i494 == 1;
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    out_$i494 := $ne.i64(out_$i493, 0);
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$i493 := $p2i.ref.i64(out_$p492);
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    out_$p492 := $load.ref($M.0, out_$p491);
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$p491 := $add.ref($add.ref(out_$p490, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$p490 := $bitcast.ref.ref(out_$p489);
    goto corral_source_split_799;

  $bb284:
    assume {:verifier.code 0} true;
    out_$p489 := $add.ref($add.ref($add.ref(out_$p466, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_798;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb284;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb276:
    assume out_$i472 == 1;
    goto corral_source_split_778;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i472 := $ne.i64(out_$i470, out_$i471);
    goto corral_source_split_776;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$i471 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$i470 := $p2i.ref.i64(out_$p469);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$p469 := $load.ref($M.0, out_$p468);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$p468 := $add.ref($add.ref(out_$p467, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_772;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} out_$p467 := atm_sk(out_$p466);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb282:
    assume !(out_$i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    out_$i487 := $ne.i32(out_$i486, 0);
    goto corral_source_split_796;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$i486 := $ashr.i32(out_$i482, out_$i485);
    goto corral_source_split_795;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    out_$i485 := $sext.i8.i32(out_$i484);
    goto corral_source_split_794;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    out_$i484 := $load.i8($M.0, out_$p483);
    goto corral_source_split_793;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    out_$p483 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_792;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    out_$i482 := $load.i32($M.0, out_$p481);
    goto corral_source_split_791;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$p481 := $add.ref($add.ref(out_$p467, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_790;

  $bb280:
    assume !(out_$i480 == 1);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    out_$i480 := $ne.i32(out_$i479, 0);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$i479 := $ashr.i32(out_$i475, out_$i478);
    goto corral_source_split_786;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i478 := $sext.i8.i32(out_$i477);
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    out_$i477 := $load.i8($M.0, out_$p476);
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$p476 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i475 := $sext.i16.i32(out_$i474);
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$i474 := $load.i16($M.0, out_$p473);
    goto corral_source_split_781;

  $bb278:
    assume {:verifier.code 0} true;
    out_$p473 := $add.ref($add.ref(out_$p467, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_780;

  $bb277:
    assume !(out_$i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb288_dummy:
    call {:si_unique_call 1} out_$p466, out_$p467, out_$p468, out_$p469, out_$i470, out_$i471, out_$i472, out_$p473, out_$i474, out_$i475, out_$p476, out_$i477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$p483, out_$i484, out_$i485, out_$i486, out_$i487, out_$p489, out_$p490, out_$p491, out_$p492, out_$i493, out_$i494, out_$p496, out_$p497, out_$p495, out_$i498, out_$i499 := atmtcp_v_ioctl_loop_$bb274(in_$p0, in_$p3, out_$p466, out_$p467, out_$p468, out_$p469, out_$i470, out_$i471, out_$i472, out_$p473, out_$i474, out_$i475, out_$p476, out_$i477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$p483, out_$i484, out_$i485, out_$i486, out_$i487, out_$p489, out_$p490, out_$p491, out_$p492, out_$i493, out_$i494, out_$p496, out_$p497, out_$p495, out_$i498, out_$i499);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb274(in_$p0: ref, in_$p3: ref, in_$p466: ref, in_$p467: ref, in_$p468: ref, in_$p469: ref, in_$i470: i64, in_$i471: i64, in_$i472: i1, in_$p473: ref, in_$i474: i16, in_$i475: i32, in_$p476: ref, in_$i477: i8, in_$i478: i32, in_$i479: i32, in_$i480: i1, in_$p481: ref, in_$i482: i32, in_$p483: ref, in_$i484: i8, in_$i485: i32, in_$i486: i32, in_$i487: i1, in_$p489: ref, in_$p490: ref, in_$p491: ref, in_$p492: ref, in_$i493: i64, in_$i494: i1, in_$p496: ref, in_$p497: ref, in_$p495: ref, in_$i498: i64, in_$i499: i1) returns (out_$p466: ref, out_$p467: ref, out_$p468: ref, out_$p469: ref, out_$i470: i64, out_$i471: i64, out_$i472: i1, out_$p473: ref, out_$i474: i16, out_$i475: i32, out_$p476: ref, out_$i477: i8, out_$i478: i32, out_$i479: i32, out_$i480: i1, out_$p481: ref, out_$i482: i32, out_$p483: ref, out_$i484: i8, out_$i485: i32, out_$i486: i32, out_$i487: i1, out_$p489: ref, out_$p490: ref, out_$p491: ref, out_$p492: ref, out_$i493: i64, out_$i494: i1, out_$p496: ref, out_$p497: ref, out_$p495: ref, out_$i498: i64, out_$i499: i1);



implementation atmtcp_v_ioctl_loop_$bb250(in_$p0: ref, in_$p3: ref, in_$p424: ref, in_$p425: ref, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$i429: i64, in_$i430: i1, in_$p431: ref, in_$i432: i16, in_$i433: i32, in_$p434: ref, in_$i435: i8, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$i440: i32, in_$p441: ref, in_$i442: i8, in_$i443: i32, in_$i444: i32, in_$i445: i1, in_$p447: ref, in_$p448: ref, in_$p449: ref, in_$p450: ref, in_$i451: i64, in_$i452: i1, in_$p454: ref, in_$p455: ref, in_$p453: ref, in_$i456: i64, in_$i457: i1) returns (out_$p424: ref, out_$p425: ref, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$i429: i64, out_$i430: i1, out_$p431: ref, out_$i432: i16, out_$i433: i32, out_$p434: ref, out_$i435: i8, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$i440: i32, out_$p441: ref, out_$i442: i8, out_$i443: i32, out_$i444: i32, out_$i445: i1, out_$p447: ref, out_$p448: ref, out_$p449: ref, out_$p450: ref, out_$i451: i64, out_$i452: i1, out_$p454: ref, out_$p455: ref, out_$p453: ref, out_$i456: i64, out_$i457: i1)
{

  entry:
    out_$p424, out_$p425, out_$p426, out_$p427, out_$i428, out_$i429, out_$i430, out_$p431, out_$i432, out_$i433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$p441, out_$i442, out_$i443, out_$i444, out_$i445, out_$p447, out_$p448, out_$p449, out_$p450, out_$i451, out_$i452, out_$p454, out_$p455, out_$p453, out_$i456, out_$i457 := in_$p424, in_$p425, in_$p426, in_$p427, in_$i428, in_$i429, in_$i430, in_$p431, in_$i432, in_$i433, in_$p434, in_$i435, in_$i436, in_$i437, in_$i438, in_$p439, in_$i440, in_$p441, in_$i442, in_$i443, in_$i444, in_$i445, in_$p447, in_$p448, in_$p449, in_$p450, in_$i451, in_$i452, in_$p454, in_$p455, in_$p453, in_$i456, in_$i457;
    goto $bb250, exit;

  $bb250:
    assume {:verifier.code 0} true;
    goto corral_source_split_709;

  $bb264:
    assume out_$i457 == 1;
    assume {:verifier.code 0} true;
    out_$p424 := out_$p453;
    goto $bb264_dummy;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$i457 := $ne.i64(out_$i456, 0);
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$i456 := $p2i.ref.i64(out_$p453);
    goto corral_source_split_750;

  $bb263:
    assume {:verifier.code 0} true;
    goto corral_source_split_749;

  $bb262:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    out_$p453 := $0.ref;
    goto $bb263;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$p453 := out_$p455;
    goto $bb263;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$p455 := $add.ref(out_$p454, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$p454 := $bitcast.ref.ref(out_$p450);
    goto corral_source_split_746;

  $bb261:
    assume out_$i452 == 1;
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$i452 := $ne.i64(out_$i451, 0);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$i451 := $p2i.ref.i64(out_$p450);
    goto corral_source_split_742;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    out_$p450 := $load.ref($M.0, out_$p449);
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    out_$p449 := $add.ref($add.ref(out_$p448, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_740;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    out_$p448 := $bitcast.ref.ref(out_$p447);
    goto corral_source_split_739;

  $bb260:
    assume {:verifier.code 0} true;
    out_$p447 := $add.ref($add.ref($add.ref(out_$p424, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_738;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb252:
    assume out_$i430 == 1;
    goto corral_source_split_718;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$i430 := $ne.i64(out_$i428, out_$i429);
    goto corral_source_split_716;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$i429 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_715;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    out_$i428 := $p2i.ref.i64(out_$p427);
    goto corral_source_split_714;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$p427 := $load.ref($M.0, out_$p426);
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$p426 := $add.ref($add.ref(out_$p425, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_712;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} out_$p425 := atm_sk(out_$p424);
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb258:
    assume !(out_$i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    out_$i445 := $ne.i32(out_$i444, 0);
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$i444 := $ashr.i32(out_$i440, out_$i443);
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$i443 := $sext.i8.i32(out_$i442);
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$i442 := $load.i8($M.0, out_$p441);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$p441 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    out_$i440 := $load.i32($M.0, out_$p439);
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$p439 := $add.ref($add.ref(out_$p425, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_730;

  $bb256:
    assume !(out_$i438 == 1);
    goto corral_source_split_729;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$i438 := $ne.i32(out_$i437, 0);
    goto corral_source_split_727;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$i437 := $ashr.i32(out_$i433, out_$i436);
    goto corral_source_split_726;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$i436 := $sext.i8.i32(out_$i435);
    goto corral_source_split_725;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i435 := $load.i8($M.0, out_$p434);
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$p434 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i433 := $sext.i16.i32(out_$i432);
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    out_$i432 := $load.i16($M.0, out_$p431);
    goto corral_source_split_721;

  $bb254:
    assume {:verifier.code 0} true;
    out_$p431 := $add.ref($add.ref(out_$p425, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_720;

  $bb253:
    assume !(out_$i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb264_dummy:
    call {:si_unique_call 1} out_$p424, out_$p425, out_$p426, out_$p427, out_$i428, out_$i429, out_$i430, out_$p431, out_$i432, out_$i433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$p441, out_$i442, out_$i443, out_$i444, out_$i445, out_$p447, out_$p448, out_$p449, out_$p450, out_$i451, out_$i452, out_$p454, out_$p455, out_$p453, out_$i456, out_$i457 := atmtcp_v_ioctl_loop_$bb250(in_$p0, in_$p3, out_$p424, out_$p425, out_$p426, out_$p427, out_$i428, out_$i429, out_$i430, out_$p431, out_$i432, out_$i433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$p441, out_$i442, out_$i443, out_$i444, out_$i445, out_$p447, out_$p448, out_$p449, out_$p450, out_$i451, out_$i452, out_$p454, out_$p455, out_$p453, out_$i456, out_$i457);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb250(in_$p0: ref, in_$p3: ref, in_$p424: ref, in_$p425: ref, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$i429: i64, in_$i430: i1, in_$p431: ref, in_$i432: i16, in_$i433: i32, in_$p434: ref, in_$i435: i8, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$i440: i32, in_$p441: ref, in_$i442: i8, in_$i443: i32, in_$i444: i32, in_$i445: i1, in_$p447: ref, in_$p448: ref, in_$p449: ref, in_$p450: ref, in_$i451: i64, in_$i452: i1, in_$p454: ref, in_$p455: ref, in_$p453: ref, in_$i456: i64, in_$i457: i1) returns (out_$p424: ref, out_$p425: ref, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$i429: i64, out_$i430: i1, out_$p431: ref, out_$i432: i16, out_$i433: i32, out_$p434: ref, out_$i435: i8, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$i440: i32, out_$p441: ref, out_$i442: i8, out_$i443: i32, out_$i444: i32, out_$i445: i1, out_$p447: ref, out_$p448: ref, out_$p449: ref, out_$p450: ref, out_$i451: i64, out_$i452: i1, out_$p454: ref, out_$p455: ref, out_$p453: ref, out_$i456: i64, out_$i457: i1);



implementation atmtcp_v_ioctl_loop_$bb226(in_$p0: ref, in_$p3: ref, in_$p382: ref, in_$p383: ref, in_$p384: ref, in_$p385: ref, in_$i386: i64, in_$i387: i64, in_$i388: i1, in_$p389: ref, in_$i390: i16, in_$i391: i32, in_$p392: ref, in_$i393: i8, in_$i394: i32, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_$i398: i32, in_$p399: ref, in_$i400: i8, in_$i401: i32, in_$i402: i32, in_$i403: i1, in_$p405: ref, in_$p406: ref, in_$p407: ref, in_$p408: ref, in_$i409: i64, in_$i410: i1, in_$p412: ref, in_$p413: ref, in_$p411: ref, in_$i414: i64, in_$i415: i1) returns (out_$p382: ref, out_$p383: ref, out_$p384: ref, out_$p385: ref, out_$i386: i64, out_$i387: i64, out_$i388: i1, out_$p389: ref, out_$i390: i16, out_$i391: i32, out_$p392: ref, out_$i393: i8, out_$i394: i32, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_$i398: i32, out_$p399: ref, out_$i400: i8, out_$i401: i32, out_$i402: i32, out_$i403: i1, out_$p405: ref, out_$p406: ref, out_$p407: ref, out_$p408: ref, out_$i409: i64, out_$i410: i1, out_$p412: ref, out_$p413: ref, out_$p411: ref, out_$i414: i64, out_$i415: i1)
{

  entry:
    out_$p382, out_$p383, out_$p384, out_$p385, out_$i386, out_$i387, out_$i388, out_$p389, out_$i390, out_$i391, out_$p392, out_$i393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$p399, out_$i400, out_$i401, out_$i402, out_$i403, out_$p405, out_$p406, out_$p407, out_$p408, out_$i409, out_$i410, out_$p412, out_$p413, out_$p411, out_$i414, out_$i415 := in_$p382, in_$p383, in_$p384, in_$p385, in_$i386, in_$i387, in_$i388, in_$p389, in_$i390, in_$i391, in_$p392, in_$i393, in_$i394, in_$i395, in_$i396, in_$p397, in_$i398, in_$p399, in_$i400, in_$i401, in_$i402, in_$i403, in_$p405, in_$p406, in_$p407, in_$p408, in_$i409, in_$i410, in_$p412, in_$p413, in_$p411, in_$i414, in_$i415;
    goto $bb226, exit;

  $bb226:
    assume {:verifier.code 0} true;
    goto corral_source_split_649;

  $bb240:
    assume out_$i415 == 1;
    assume {:verifier.code 0} true;
    out_$p382 := out_$p411;
    goto $bb240_dummy;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    out_$i415 := $ne.i64(out_$i414, 0);
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$i414 := $p2i.ref.i64(out_$p411);
    goto corral_source_split_690;

  $bb239:
    assume {:verifier.code 0} true;
    goto corral_source_split_689;

  $bb238:
    assume !(out_$i410 == 1);
    assume {:verifier.code 0} true;
    out_$p411 := $0.ref;
    goto $bb239;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$p411 := out_$p413;
    goto $bb239;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$p413 := $add.ref(out_$p412, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    out_$p412 := $bitcast.ref.ref(out_$p408);
    goto corral_source_split_686;

  $bb237:
    assume out_$i410 == 1;
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$i410 := $ne.i64(out_$i409, 0);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$i409 := $p2i.ref.i64(out_$p408);
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$p408 := $load.ref($M.0, out_$p407);
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$p407 := $add.ref($add.ref(out_$p406, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$p406 := $bitcast.ref.ref(out_$p405);
    goto corral_source_split_679;

  $bb236:
    assume {:verifier.code 0} true;
    out_$p405 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_678;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb228:
    assume out_$i388 == 1;
    goto corral_source_split_658;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    out_$i388 := $ne.i64(out_$i386, out_$i387);
    goto corral_source_split_656;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    out_$i387 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$i386 := $p2i.ref.i64(out_$p385);
    goto corral_source_split_654;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    out_$p385 := $load.ref($M.0, out_$p384);
    goto corral_source_split_653;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    out_$p384 := $add.ref($add.ref(out_$p383, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_652;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_$p383 := atm_sk(out_$p382);
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb234:
    assume !(out_$i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    out_$i403 := $ne.i32(out_$i402, 0);
    goto corral_source_split_676;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    out_$i402 := $ashr.i32(out_$i398, out_$i401);
    goto corral_source_split_675;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    out_$i401 := $sext.i8.i32(out_$i400);
    goto corral_source_split_674;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    out_$i400 := $load.i8($M.0, out_$p399);
    goto corral_source_split_673;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    out_$p399 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_672;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$i398 := $load.i32($M.0, out_$p397);
    goto corral_source_split_671;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    out_$p397 := $add.ref($add.ref(out_$p383, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_670;

  $bb232:
    assume !(out_$i396 == 1);
    goto corral_source_split_669;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    out_$i396 := $ne.i32(out_$i395, 0);
    goto corral_source_split_667;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    out_$i395 := $ashr.i32(out_$i391, out_$i394);
    goto corral_source_split_666;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    out_$i394 := $sext.i8.i32(out_$i393);
    goto corral_source_split_665;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    out_$i393 := $load.i8($M.0, out_$p392);
    goto corral_source_split_664;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    out_$p392 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_663;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    out_$i391 := $sext.i16.i32(out_$i390);
    goto corral_source_split_662;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    out_$i390 := $load.i16($M.0, out_$p389);
    goto corral_source_split_661;

  $bb230:
    assume {:verifier.code 0} true;
    out_$p389 := $add.ref($add.ref(out_$p383, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_660;

  $bb229:
    assume !(out_$i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb240_dummy:
    call {:si_unique_call 1} out_$p382, out_$p383, out_$p384, out_$p385, out_$i386, out_$i387, out_$i388, out_$p389, out_$i390, out_$i391, out_$p392, out_$i393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$p399, out_$i400, out_$i401, out_$i402, out_$i403, out_$p405, out_$p406, out_$p407, out_$p408, out_$i409, out_$i410, out_$p412, out_$p413, out_$p411, out_$i414, out_$i415 := atmtcp_v_ioctl_loop_$bb226(in_$p0, in_$p3, out_$p382, out_$p383, out_$p384, out_$p385, out_$i386, out_$i387, out_$i388, out_$p389, out_$i390, out_$i391, out_$p392, out_$i393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$p399, out_$i400, out_$i401, out_$i402, out_$i403, out_$p405, out_$p406, out_$p407, out_$p408, out_$i409, out_$i410, out_$p412, out_$p413, out_$p411, out_$i414, out_$i415);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb226(in_$p0: ref, in_$p3: ref, in_$p382: ref, in_$p383: ref, in_$p384: ref, in_$p385: ref, in_$i386: i64, in_$i387: i64, in_$i388: i1, in_$p389: ref, in_$i390: i16, in_$i391: i32, in_$p392: ref, in_$i393: i8, in_$i394: i32, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_$i398: i32, in_$p399: ref, in_$i400: i8, in_$i401: i32, in_$i402: i32, in_$i403: i1, in_$p405: ref, in_$p406: ref, in_$p407: ref, in_$p408: ref, in_$i409: i64, in_$i410: i1, in_$p412: ref, in_$p413: ref, in_$p411: ref, in_$i414: i64, in_$i415: i1) returns (out_$p382: ref, out_$p383: ref, out_$p384: ref, out_$p385: ref, out_$i386: i64, out_$i387: i64, out_$i388: i1, out_$p389: ref, out_$i390: i16, out_$i391: i32, out_$p392: ref, out_$i393: i8, out_$i394: i32, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_$i398: i32, out_$p399: ref, out_$i400: i8, out_$i401: i32, out_$i402: i32, out_$i403: i1, out_$p405: ref, out_$p406: ref, out_$p407: ref, out_$p408: ref, out_$i409: i64, out_$i410: i1, out_$p412: ref, out_$p413: ref, out_$p411: ref, out_$i414: i64, out_$i415: i1);



implementation atmtcp_v_ioctl_loop_$bb202(in_$p0: ref, in_$p3: ref, in_$p340: ref, in_$p341: ref, in_$p342: ref, in_$p343: ref, in_$i344: i64, in_$i345: i64, in_$i346: i1, in_$p347: ref, in_$i348: i16, in_$i349: i32, in_$p350: ref, in_$i351: i8, in_$i352: i32, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i356: i32, in_$p357: ref, in_$i358: i8, in_$i359: i32, in_$i360: i32, in_$i361: i1, in_$p363: ref, in_$p364: ref, in_$p365: ref, in_$p366: ref, in_$i367: i64, in_$i368: i1, in_$p370: ref, in_$p371: ref, in_$p369: ref, in_$i372: i64, in_$i373: i1) returns (out_$p340: ref, out_$p341: ref, out_$p342: ref, out_$p343: ref, out_$i344: i64, out_$i345: i64, out_$i346: i1, out_$p347: ref, out_$i348: i16, out_$i349: i32, out_$p350: ref, out_$i351: i8, out_$i352: i32, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i356: i32, out_$p357: ref, out_$i358: i8, out_$i359: i32, out_$i360: i32, out_$i361: i1, out_$p363: ref, out_$p364: ref, out_$p365: ref, out_$p366: ref, out_$i367: i64, out_$i368: i1, out_$p370: ref, out_$p371: ref, out_$p369: ref, out_$i372: i64, out_$i373: i1)
{

  entry:
    out_$p340, out_$p341, out_$p342, out_$p343, out_$i344, out_$i345, out_$i346, out_$p347, out_$i348, out_$i349, out_$p350, out_$i351, out_$i352, out_$i353, out_$i354, out_$p355, out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$p363, out_$p364, out_$p365, out_$p366, out_$i367, out_$i368, out_$p370, out_$p371, out_$p369, out_$i372, out_$i373 := in_$p340, in_$p341, in_$p342, in_$p343, in_$i344, in_$i345, in_$i346, in_$p347, in_$i348, in_$i349, in_$p350, in_$i351, in_$i352, in_$i353, in_$i354, in_$p355, in_$i356, in_$p357, in_$i358, in_$i359, in_$i360, in_$i361, in_$p363, in_$p364, in_$p365, in_$p366, in_$i367, in_$i368, in_$p370, in_$p371, in_$p369, in_$i372, in_$i373;
    goto $bb202, exit;

  $bb202:
    assume {:verifier.code 0} true;
    goto corral_source_split_589;

  $bb216:
    assume out_$i373 == 1;
    assume {:verifier.code 0} true;
    out_$p340 := out_$p369;
    goto $bb216_dummy;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    out_$i373 := $ne.i64(out_$i372, 0);
    goto corral_source_split_631;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    out_$i372 := $p2i.ref.i64(out_$p369);
    goto corral_source_split_630;

  $bb215:
    assume {:verifier.code 0} true;
    goto corral_source_split_629;

  $bb214:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    out_$p369 := $0.ref;
    goto $bb215;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    out_$p369 := out_$p371;
    goto $bb215;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    out_$p371 := $add.ref(out_$p370, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_627;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    out_$p370 := $bitcast.ref.ref(out_$p366);
    goto corral_source_split_626;

  $bb213:
    assume out_$i368 == 1;
    goto corral_source_split_625;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    out_$i368 := $ne.i64(out_$i367, 0);
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    out_$i367 := $p2i.ref.i64(out_$p366);
    goto corral_source_split_622;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    out_$p366 := $load.ref($M.0, out_$p365);
    goto corral_source_split_621;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    out_$p365 := $add.ref($add.ref(out_$p364, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_620;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    out_$p364 := $bitcast.ref.ref(out_$p363);
    goto corral_source_split_619;

  $bb212:
    assume {:verifier.code 0} true;
    out_$p363 := $add.ref($add.ref($add.ref(out_$p340, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_618;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb204:
    assume out_$i346 == 1;
    goto corral_source_split_598;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$i346 := $ne.i64(out_$i344, out_$i345);
    goto corral_source_split_596;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    out_$i345 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_595;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$i344 := $p2i.ref.i64(out_$p343);
    goto corral_source_split_594;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    out_$p343 := $load.ref($M.0, out_$p342);
    goto corral_source_split_593;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    out_$p342 := $add.ref($add.ref(out_$p341, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_592;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_$p341 := atm_sk(out_$p340);
    goto corral_source_split_591;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb210:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    out_$i361 := $ne.i32(out_$i360, 0);
    goto corral_source_split_616;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    out_$i360 := $ashr.i32(out_$i356, out_$i359);
    goto corral_source_split_615;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    out_$i359 := $sext.i8.i32(out_$i358);
    goto corral_source_split_614;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    out_$i358 := $load.i8($M.0, out_$p357);
    goto corral_source_split_613;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    out_$p357 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    out_$i356 := $load.i32($M.0, out_$p355);
    goto corral_source_split_611;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$p355 := $add.ref($add.ref(out_$p341, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_610;

  $bb208:
    assume !(out_$i354 == 1);
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i354 := $ne.i32(out_$i353, 0);
    goto corral_source_split_607;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i353 := $ashr.i32(out_$i349, out_$i352);
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$i352 := $sext.i8.i32(out_$i351);
    goto corral_source_split_605;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$i351 := $load.i8($M.0, out_$p350);
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    out_$p350 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_603;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    out_$i349 := $sext.i16.i32(out_$i348);
    goto corral_source_split_602;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i348 := $load.i16($M.0, out_$p347);
    goto corral_source_split_601;

  $bb206:
    assume {:verifier.code 0} true;
    out_$p347 := $add.ref($add.ref(out_$p341, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_600;

  $bb205:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb216_dummy:
    call {:si_unique_call 1} out_$p340, out_$p341, out_$p342, out_$p343, out_$i344, out_$i345, out_$i346, out_$p347, out_$i348, out_$i349, out_$p350, out_$i351, out_$i352, out_$i353, out_$i354, out_$p355, out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$p363, out_$p364, out_$p365, out_$p366, out_$i367, out_$i368, out_$p370, out_$p371, out_$p369, out_$i372, out_$i373 := atmtcp_v_ioctl_loop_$bb202(in_$p0, in_$p3, out_$p340, out_$p341, out_$p342, out_$p343, out_$i344, out_$i345, out_$i346, out_$p347, out_$i348, out_$i349, out_$p350, out_$i351, out_$i352, out_$i353, out_$i354, out_$p355, out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$p363, out_$p364, out_$p365, out_$p366, out_$i367, out_$i368, out_$p370, out_$p371, out_$p369, out_$i372, out_$i373);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb202(in_$p0: ref, in_$p3: ref, in_$p340: ref, in_$p341: ref, in_$p342: ref, in_$p343: ref, in_$i344: i64, in_$i345: i64, in_$i346: i1, in_$p347: ref, in_$i348: i16, in_$i349: i32, in_$p350: ref, in_$i351: i8, in_$i352: i32, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i356: i32, in_$p357: ref, in_$i358: i8, in_$i359: i32, in_$i360: i32, in_$i361: i1, in_$p363: ref, in_$p364: ref, in_$p365: ref, in_$p366: ref, in_$i367: i64, in_$i368: i1, in_$p370: ref, in_$p371: ref, in_$p369: ref, in_$i372: i64, in_$i373: i1) returns (out_$p340: ref, out_$p341: ref, out_$p342: ref, out_$p343: ref, out_$i344: i64, out_$i345: i64, out_$i346: i1, out_$p347: ref, out_$i348: i16, out_$i349: i32, out_$p350: ref, out_$i351: i8, out_$i352: i32, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i356: i32, out_$p357: ref, out_$i358: i8, out_$i359: i32, out_$i360: i32, out_$i361: i1, out_$p363: ref, out_$p364: ref, out_$p365: ref, out_$p366: ref, out_$i367: i64, out_$i368: i1, out_$p370: ref, out_$p371: ref, out_$p369: ref, out_$i372: i64, out_$i373: i1);



implementation atmtcp_v_ioctl_loop_$bb178(in_$p0: ref, in_$p3: ref, in_$p298: ref, in_$p299: ref, in_$p300: ref, in_$p301: ref, in_$i302: i64, in_$i303: i64, in_$i304: i1, in_$p305: ref, in_$i306: i16, in_$i307: i32, in_$p308: ref, in_$i309: i8, in_$i310: i32, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$p315: ref, in_$i316: i8, in_$i317: i32, in_$i318: i32, in_$i319: i1, in_$p321: ref, in_$p322: ref, in_$p323: ref, in_$p324: ref, in_$i325: i64, in_$i326: i1, in_$p328: ref, in_$p329: ref, in_$p327: ref, in_$i330: i64, in_$i331: i1) returns (out_$p298: ref, out_$p299: ref, out_$p300: ref, out_$p301: ref, out_$i302: i64, out_$i303: i64, out_$i304: i1, out_$p305: ref, out_$i306: i16, out_$i307: i32, out_$p308: ref, out_$i309: i8, out_$i310: i32, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$p315: ref, out_$i316: i8, out_$i317: i32, out_$i318: i32, out_$i319: i1, out_$p321: ref, out_$p322: ref, out_$p323: ref, out_$p324: ref, out_$i325: i64, out_$i326: i1, out_$p328: ref, out_$p329: ref, out_$p327: ref, out_$i330: i64, out_$i331: i1)
{

  entry:
    out_$p298, out_$p299, out_$p300, out_$p301, out_$i302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i314, out_$p315, out_$i316, out_$i317, out_$i318, out_$i319, out_$p321, out_$p322, out_$p323, out_$p324, out_$i325, out_$i326, out_$p328, out_$p329, out_$p327, out_$i330, out_$i331 := in_$p298, in_$p299, in_$p300, in_$p301, in_$i302, in_$i303, in_$i304, in_$p305, in_$i306, in_$i307, in_$p308, in_$i309, in_$i310, in_$i311, in_$i312, in_$p313, in_$i314, in_$p315, in_$i316, in_$i317, in_$i318, in_$i319, in_$p321, in_$p322, in_$p323, in_$p324, in_$i325, in_$i326, in_$p328, in_$p329, in_$p327, in_$i330, in_$i331;
    goto $bb178, exit;

  $bb178:
    assume {:verifier.code 0} true;
    goto corral_source_split_529;

  $bb192:
    assume out_$i331 == 1;
    assume {:verifier.code 0} true;
    out_$p298 := out_$p327;
    goto $bb192_dummy;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$i331 := $ne.i64(out_$i330, 0);
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$i330 := $p2i.ref.i64(out_$p327);
    goto corral_source_split_570;

  $bb191:
    assume {:verifier.code 0} true;
    goto corral_source_split_569;

  $bb190:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    out_$p327 := $0.ref;
    goto $bb191;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$p327 := out_$p329;
    goto $bb191;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$p329 := $add.ref(out_$p328, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$p328 := $bitcast.ref.ref(out_$p324);
    goto corral_source_split_566;

  $bb189:
    assume out_$i326 == 1;
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$i326 := $ne.i64(out_$i325, 0);
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$i325 := $p2i.ref.i64(out_$p324);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p324 := $load.ref($M.0, out_$p323);
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$p323 := $add.ref($add.ref(out_$p322, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$p322 := $bitcast.ref.ref(out_$p321);
    goto corral_source_split_559;

  $bb188:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref($add.ref(out_$p298, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_558;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb180:
    assume out_$i304 == 1;
    goto corral_source_split_538;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    out_$i304 := $ne.i64(out_$i302, out_$i303);
    goto corral_source_split_536;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    out_$i303 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_535;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    out_$i302 := $p2i.ref.i64(out_$p301);
    goto corral_source_split_534;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    out_$p301 := $load.ref($M.0, out_$p300);
    goto corral_source_split_533;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    out_$p300 := $add.ref($add.ref(out_$p299, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_532;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_$p299 := atm_sk(out_$p298);
    goto corral_source_split_531;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb186:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i319 := $ne.i32(out_$i318, 0);
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$i318 := $ashr.i32(out_$i314, out_$i317);
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    out_$i317 := $sext.i8.i32(out_$i316);
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$i316 := $load.i8($M.0, out_$p315);
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$p315 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    out_$i314 := $load.i32($M.0, out_$p313);
    goto corral_source_split_551;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    out_$p313 := $add.ref($add.ref(out_$p299, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_550;

  $bb184:
    assume !(out_$i312 == 1);
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$i312 := $ne.i32(out_$i311, 0);
    goto corral_source_split_547;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    out_$i311 := $ashr.i32(out_$i307, out_$i310);
    goto corral_source_split_546;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    out_$i310 := $sext.i8.i32(out_$i309);
    goto corral_source_split_545;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    out_$i309 := $load.i8($M.0, out_$p308);
    goto corral_source_split_544;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    out_$p308 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_543;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    out_$i307 := $sext.i16.i32(out_$i306);
    goto corral_source_split_542;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    out_$i306 := $load.i16($M.0, out_$p305);
    goto corral_source_split_541;

  $bb182:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref(out_$p299, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_540;

  $bb181:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb192_dummy:
    call {:si_unique_call 1} out_$p298, out_$p299, out_$p300, out_$p301, out_$i302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i314, out_$p315, out_$i316, out_$i317, out_$i318, out_$i319, out_$p321, out_$p322, out_$p323, out_$p324, out_$i325, out_$i326, out_$p328, out_$p329, out_$p327, out_$i330, out_$i331 := atmtcp_v_ioctl_loop_$bb178(in_$p0, in_$p3, out_$p298, out_$p299, out_$p300, out_$p301, out_$i302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i314, out_$p315, out_$i316, out_$i317, out_$i318, out_$i319, out_$p321, out_$p322, out_$p323, out_$p324, out_$i325, out_$i326, out_$p328, out_$p329, out_$p327, out_$i330, out_$i331);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb178(in_$p0: ref, in_$p3: ref, in_$p298: ref, in_$p299: ref, in_$p300: ref, in_$p301: ref, in_$i302: i64, in_$i303: i64, in_$i304: i1, in_$p305: ref, in_$i306: i16, in_$i307: i32, in_$p308: ref, in_$i309: i8, in_$i310: i32, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$p315: ref, in_$i316: i8, in_$i317: i32, in_$i318: i32, in_$i319: i1, in_$p321: ref, in_$p322: ref, in_$p323: ref, in_$p324: ref, in_$i325: i64, in_$i326: i1, in_$p328: ref, in_$p329: ref, in_$p327: ref, in_$i330: i64, in_$i331: i1) returns (out_$p298: ref, out_$p299: ref, out_$p300: ref, out_$p301: ref, out_$i302: i64, out_$i303: i64, out_$i304: i1, out_$p305: ref, out_$i306: i16, out_$i307: i32, out_$p308: ref, out_$i309: i8, out_$i310: i32, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$p315: ref, out_$i316: i8, out_$i317: i32, out_$i318: i32, out_$i319: i1, out_$p321: ref, out_$p322: ref, out_$p323: ref, out_$p324: ref, out_$i325: i64, out_$i326: i1, out_$p328: ref, out_$p329: ref, out_$p327: ref, out_$i330: i64, out_$i331: i1);



implementation atmtcp_v_ioctl_loop_$bb154(in_$p0: ref, in_$p3: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$i260: i64, in_$i261: i64, in_$i262: i1, in_$p263: ref, in_$i264: i16, in_$i265: i32, in_$p266: ref, in_$i267: i8, in_$i268: i32, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i32, in_$p273: ref, in_$i274: i8, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$i283: i64, in_$i284: i1, in_$p286: ref, in_$p287: ref, in_$p285: ref, in_$i288: i64, in_$i289: i1) returns (out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$i260: i64, out_$i261: i64, out_$i262: i1, out_$p263: ref, out_$i264: i16, out_$i265: i32, out_$p266: ref, out_$i267: i8, out_$i268: i32, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i32, out_$p273: ref, out_$i274: i8, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$i283: i64, out_$i284: i1, out_$p286: ref, out_$p287: ref, out_$p285: ref, out_$i288: i64, out_$i289: i1)
{

  entry:
    out_$p256, out_$p257, out_$p258, out_$p259, out_$i260, out_$i261, out_$i262, out_$p263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i276, out_$i277, out_$p279, out_$p280, out_$p281, out_$p282, out_$i283, out_$i284, out_$p286, out_$p287, out_$p285, out_$i288, out_$i289 := in_$p256, in_$p257, in_$p258, in_$p259, in_$i260, in_$i261, in_$i262, in_$p263, in_$i264, in_$i265, in_$p266, in_$i267, in_$i268, in_$i269, in_$i270, in_$p271, in_$i272, in_$p273, in_$i274, in_$i275, in_$i276, in_$i277, in_$p279, in_$p280, in_$p281, in_$p282, in_$i283, in_$i284, in_$p286, in_$p287, in_$p285, in_$i288, in_$i289;
    goto $bb154, exit;

  $bb154:
    assume {:verifier.code 0} true;
    goto corral_source_split_469;

  $bb168:
    assume out_$i289 == 1;
    assume {:verifier.code 0} true;
    out_$p256 := out_$p285;
    goto $bb168_dummy;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    out_$i289 := $ne.i64(out_$i288, 0);
    goto corral_source_split_511;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    out_$i288 := $p2i.ref.i64(out_$p285);
    goto corral_source_split_510;

  $bb167:
    assume {:verifier.code 0} true;
    goto corral_source_split_509;

  $bb166:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    out_$p285 := $0.ref;
    goto $bb167;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    out_$p285 := out_$p287;
    goto $bb167;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    out_$p287 := $add.ref(out_$p286, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_507;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    out_$p286 := $bitcast.ref.ref(out_$p282);
    goto corral_source_split_506;

  $bb165:
    assume out_$i284 == 1;
    goto corral_source_split_505;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$i284 := $ne.i64(out_$i283, 0);
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$i283 := $p2i.ref.i64(out_$p282);
    goto corral_source_split_502;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$p282 := $load.ref($M.0, out_$p281);
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(out_$p280, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$p280 := $bitcast.ref.ref(out_$p279);
    goto corral_source_split_499;

  $bb164:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref($add.ref(out_$p256, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_498;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb156:
    assume out_$i262 == 1;
    goto corral_source_split_478;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    out_$i262 := $ne.i64(out_$i260, out_$i261);
    goto corral_source_split_476;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$i261 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_475;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    out_$i260 := $p2i.ref.i64(out_$p259);
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$p259 := $load.ref($M.0, out_$p258);
    goto corral_source_split_473;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref(out_$p257, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_472;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} out_$p257 := atm_sk(out_$p256);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb162:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$i277 := $ne.i32(out_$i276, 0);
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    out_$i276 := $ashr.i32(out_$i272, out_$i275);
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    out_$i275 := $sext.i8.i32(out_$i274);
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i8($M.0, out_$p273);
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$p273 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_492;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    out_$i272 := $load.i32($M.0, out_$p271);
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref($add.ref(out_$p257, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_490;

  $bb160:
    assume !(out_$i270 == 1);
    goto corral_source_split_489;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    out_$i270 := $ne.i32(out_$i269, 0);
    goto corral_source_split_487;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    out_$i269 := $ashr.i32(out_$i265, out_$i268);
    goto corral_source_split_486;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    out_$i268 := $sext.i8.i32(out_$i267);
    goto corral_source_split_485;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$i267 := $load.i8($M.0, out_$p266);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$p266 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_483;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    out_$i265 := $sext.i16.i32(out_$i264);
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    out_$i264 := $load.i16($M.0, out_$p263);
    goto corral_source_split_481;

  $bb158:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref(out_$p257, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_480;

  $bb157:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb168_dummy:
    call {:si_unique_call 1} out_$p256, out_$p257, out_$p258, out_$p259, out_$i260, out_$i261, out_$i262, out_$p263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i276, out_$i277, out_$p279, out_$p280, out_$p281, out_$p282, out_$i283, out_$i284, out_$p286, out_$p287, out_$p285, out_$i288, out_$i289 := atmtcp_v_ioctl_loop_$bb154(in_$p0, in_$p3, out_$p256, out_$p257, out_$p258, out_$p259, out_$i260, out_$i261, out_$i262, out_$p263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i276, out_$i277, out_$p279, out_$p280, out_$p281, out_$p282, out_$i283, out_$i284, out_$p286, out_$p287, out_$p285, out_$i288, out_$i289);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb154(in_$p0: ref, in_$p3: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$i260: i64, in_$i261: i64, in_$i262: i1, in_$p263: ref, in_$i264: i16, in_$i265: i32, in_$p266: ref, in_$i267: i8, in_$i268: i32, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i32, in_$p273: ref, in_$i274: i8, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$i283: i64, in_$i284: i1, in_$p286: ref, in_$p287: ref, in_$p285: ref, in_$i288: i64, in_$i289: i1) returns (out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$i260: i64, out_$i261: i64, out_$i262: i1, out_$p263: ref, out_$i264: i16, out_$i265: i32, out_$p266: ref, out_$i267: i8, out_$i268: i32, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i32, out_$p273: ref, out_$i274: i8, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$i283: i64, out_$i284: i1, out_$p286: ref, out_$p287: ref, out_$p285: ref, out_$i288: i64, out_$i289: i1);



implementation atmtcp_v_ioctl_loop_$bb130(in_$p0: ref, in_$p3: ref, in_$p214: ref, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$i218: i64, in_$i219: i64, in_$i220: i1, in_$p221: ref, in_$i222: i16, in_$i223: i32, in_$p224: ref, in_$i225: i8, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$p231: ref, in_$i232: i8, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$p237: ref, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$i241: i64, in_$i242: i1, in_$p244: ref, in_$p245: ref, in_$p243: ref, in_$i246: i64, in_$i247: i1) returns (out_$p214: ref, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$i218: i64, out_$i219: i64, out_$i220: i1, out_$p221: ref, out_$i222: i16, out_$i223: i32, out_$p224: ref, out_$i225: i8, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$p231: ref, out_$i232: i8, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$p237: ref, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$i241: i64, out_$i242: i1, out_$p244: ref, out_$p245: ref, out_$p243: ref, out_$i246: i64, out_$i247: i1)
{

  entry:
    out_$p214, out_$p215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p237, out_$p238, out_$p239, out_$p240, out_$i241, out_$i242, out_$p244, out_$p245, out_$p243, out_$i246, out_$i247 := in_$p214, in_$p215, in_$p216, in_$p217, in_$i218, in_$i219, in_$i220, in_$p221, in_$i222, in_$i223, in_$p224, in_$i225, in_$i226, in_$i227, in_$i228, in_$p229, in_$i230, in_$p231, in_$i232, in_$i233, in_$i234, in_$i235, in_$p237, in_$p238, in_$p239, in_$p240, in_$i241, in_$i242, in_$p244, in_$p245, in_$p243, in_$i246, in_$i247;
    goto $bb130, exit;

  $bb130:
    assume {:verifier.code 0} true;
    goto corral_source_split_409;

  $bb144:
    assume out_$i247 == 1;
    assume {:verifier.code 0} true;
    out_$p214 := out_$p243;
    goto $bb144_dummy;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$i247 := $ne.i64(out_$i246, 0);
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    out_$i246 := $p2i.ref.i64(out_$p243);
    goto corral_source_split_450;

  $bb143:
    assume {:verifier.code 0} true;
    goto corral_source_split_449;

  $bb142:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    out_$p243 := $0.ref;
    goto $bb143;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$p243 := out_$p245;
    goto $bb143;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref(out_$p244, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$p244 := $bitcast.ref.ref(out_$p240);
    goto corral_source_split_446;

  $bb141:
    assume out_$i242 == 1;
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    out_$i242 := $ne.i64(out_$i241, 0);
    goto corral_source_split_443;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    out_$i241 := $p2i.ref.i64(out_$p240);
    goto corral_source_split_442;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    out_$p240 := $load.ref($M.0, out_$p239);
    goto corral_source_split_441;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    out_$p239 := $add.ref($add.ref(out_$p238, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_440;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$p238 := $bitcast.ref.ref(out_$p237);
    goto corral_source_split_439;

  $bb140:
    assume {:verifier.code 0} true;
    out_$p237 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_438;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb132:
    assume out_$i220 == 1;
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$i220 := $ne.i64(out_$i218, out_$i219);
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    out_$i219 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$i218 := $p2i.ref.i64(out_$p217);
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$p217 := $load.ref($M.0, out_$p216);
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(out_$p215, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_412;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_$p215 := atm_sk(out_$p214);
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb138:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$i235 := $ne.i32(out_$i234, 0);
    goto corral_source_split_436;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i234 := $ashr.i32(out_$i230, out_$i233);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$i233 := $sext.i8.i32(out_$i232);
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i8($M.0, out_$p231);
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$p231 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_432;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i32($M.0, out_$p229);
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref(out_$p215, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_430;

  $bb136:
    assume !(out_$i228 == 1);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$i228 := $ne.i32(out_$i227, 0);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$i227 := $ashr.i32(out_$i223, out_$i226);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$i226 := $sext.i8.i32(out_$i225);
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$i225 := $load.i8($M.0, out_$p224);
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$p224 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    out_$i223 := $sext.i16.i32(out_$i222);
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$i222 := $load.i16($M.0, out_$p221);
    goto corral_source_split_421;

  $bb134:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref($add.ref(out_$p215, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_420;

  $bb133:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb144_dummy:
    call {:si_unique_call 1} out_$p214, out_$p215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p237, out_$p238, out_$p239, out_$p240, out_$i241, out_$i242, out_$p244, out_$p245, out_$p243, out_$i246, out_$i247 := atmtcp_v_ioctl_loop_$bb130(in_$p0, in_$p3, out_$p214, out_$p215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p237, out_$p238, out_$p239, out_$p240, out_$i241, out_$i242, out_$p244, out_$p245, out_$p243, out_$i246, out_$i247);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb130(in_$p0: ref, in_$p3: ref, in_$p214: ref, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$i218: i64, in_$i219: i64, in_$i220: i1, in_$p221: ref, in_$i222: i16, in_$i223: i32, in_$p224: ref, in_$i225: i8, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$p231: ref, in_$i232: i8, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$p237: ref, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$i241: i64, in_$i242: i1, in_$p244: ref, in_$p245: ref, in_$p243: ref, in_$i246: i64, in_$i247: i1) returns (out_$p214: ref, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$i218: i64, out_$i219: i64, out_$i220: i1, out_$p221: ref, out_$i222: i16, out_$i223: i32, out_$p224: ref, out_$i225: i8, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$p231: ref, out_$i232: i8, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$p237: ref, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$i241: i64, out_$i242: i1, out_$p244: ref, out_$p245: ref, out_$p243: ref, out_$i246: i64, out_$i247: i1);



implementation atmtcp_v_ioctl_loop_$bb106(in_$p0: ref, in_$p3: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$i180: i16, in_$i181: i32, in_$p182: ref, in_$i183: i8, in_$i184: i32, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i32, in_$p189: ref, in_$i190: i8, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$i199: i64, in_$i200: i1, in_$p202: ref, in_$p203: ref, in_$p201: ref, in_$i204: i64, in_$i205: i1) returns (out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$i180: i16, out_$i181: i32, out_$p182: ref, out_$i183: i8, out_$i184: i32, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i32, out_$p189: ref, out_$i190: i8, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$i199: i64, out_$i200: i1, out_$p202: ref, out_$p203: ref, out_$p201: ref, out_$i204: i64, out_$i205: i1)
{

  entry:
    out_$p172, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p202, out_$p203, out_$p201, out_$i204, out_$i205 := in_$p172, in_$p173, in_$p174, in_$p175, in_$i176, in_$i177, in_$i178, in_$p179, in_$i180, in_$i181, in_$p182, in_$i183, in_$i184, in_$i185, in_$i186, in_$p187, in_$i188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$p195, in_$p196, in_$p197, in_$p198, in_$i199, in_$i200, in_$p202, in_$p203, in_$p201, in_$i204, in_$i205;
    goto $bb106, exit;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_349;

  $bb120:
    assume out_$i205 == 1;
    assume {:verifier.code 0} true;
    out_$p172 := out_$p201;
    goto $bb120_dummy;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$i205 := $ne.i64(out_$i204, 0);
    goto corral_source_split_391;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    out_$i204 := $p2i.ref.i64(out_$p201);
    goto corral_source_split_390;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_389;

  $bb118:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    out_$p201 := $0.ref;
    goto $bb119;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    out_$p201 := out_$p203;
    goto $bb119;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref(out_$p202, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_387;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    out_$p202 := $bitcast.ref.ref(out_$p198);
    goto corral_source_split_386;

  $bb117:
    assume out_$i200 == 1;
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i200 := $ne.i64(out_$i199, 0);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    out_$i199 := $p2i.ref.i64(out_$p198);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$p198 := $load.ref($M.0, out_$p197);
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(out_$p196, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    out_$p196 := $bitcast.ref.ref(out_$p195);
    goto corral_source_split_379;

  $bb116:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref($add.ref(out_$p172, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_378;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb108:
    assume out_$i178 == 1;
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i64(out_$i176, out_$i177);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$i177 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i176 := $p2i.ref.i64(out_$p175);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$p175 := $load.ref($M.0, out_$p174);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p173, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_352;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} out_$p173 := atm_sk(out_$p172);
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb114:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$i193 := $ne.i32(out_$i192, 0);
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$i192 := $ashr.i32(out_$i188, out_$i191);
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$i191 := $sext.i8.i32(out_$i190);
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i8($M.0, out_$p189);
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_372;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i32($M.0, out_$p187);
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p173, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_370;

  $bb112:
    assume !(out_$i186 == 1);
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    out_$i186 := $ne.i32(out_$i185, 0);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$i185 := $ashr.i32(out_$i181, out_$i184);
    goto corral_source_split_366;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    out_$i184 := $sext.i8.i32(out_$i183);
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    out_$i183 := $load.i8($M.0, out_$p182);
    goto corral_source_split_364;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_363;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    out_$i181 := $sext.i16.i32(out_$i180);
    goto corral_source_split_362;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i16($M.0, out_$p179);
    goto corral_source_split_361;

  $bb110:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(out_$p173, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_360;

  $bb109:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb120_dummy:
    call {:si_unique_call 1} out_$p172, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p202, out_$p203, out_$p201, out_$i204, out_$i205 := atmtcp_v_ioctl_loop_$bb106(in_$p0, in_$p3, out_$p172, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p195, out_$p196, out_$p197, out_$p198, out_$i199, out_$i200, out_$p202, out_$p203, out_$p201, out_$i204, out_$i205);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb106(in_$p0: ref, in_$p3: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$i180: i16, in_$i181: i32, in_$p182: ref, in_$i183: i8, in_$i184: i32, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i32, in_$p189: ref, in_$i190: i8, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$i199: i64, in_$i200: i1, in_$p202: ref, in_$p203: ref, in_$p201: ref, in_$i204: i64, in_$i205: i1) returns (out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$i180: i16, out_$i181: i32, out_$p182: ref, out_$i183: i8, out_$i184: i32, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i32, out_$p189: ref, out_$i190: i8, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$i199: i64, out_$i200: i1, out_$p202: ref, out_$p203: ref, out_$p201: ref, out_$i204: i64, out_$i205: i1);



implementation atmtcp_v_ioctl_loop_$bb82(in_$p0: ref, in_$p3: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i64, in_$i136: i1, in_$p137: ref, in_$i138: i16, in_$i139: i32, in_$p140: ref, in_$i141: i8, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i32, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i32, in_$i151: i1, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i64, in_$i158: i1, in_$p160: ref, in_$p161: ref, in_$p159: ref, in_$i162: i64, in_$i163: i1) returns (out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i64, out_$i136: i1, out_$p137: ref, out_$i138: i16, out_$i139: i32, out_$p140: ref, out_$i141: i8, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i32, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i32, out_$i151: i1, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i64, out_$i158: i1, out_$p160: ref, out_$p161: ref, out_$p159: ref, out_$i162: i64, out_$i163: i1)
{

  entry:
    out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p160, out_$p161, out_$p159, out_$i162, out_$i163 := in_$p130, in_$p131, in_$p132, in_$p133, in_$i134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$i144, in_$p145, in_$i146, in_$p147, in_$i148, in_$i149, in_$i150, in_$i151, in_$p153, in_$p154, in_$p155, in_$p156, in_$i157, in_$i158, in_$p160, in_$p161, in_$p159, in_$i162, in_$i163;
    goto $bb82, exit;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_289;

  $bb96:
    assume out_$i163 == 1;
    assume {:verifier.code 0} true;
    out_$p130 := out_$p159;
    goto $bb96_dummy;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$i163 := $ne.i64(out_$i162, 0);
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    out_$i162 := $p2i.ref.i64(out_$p159);
    goto corral_source_split_330;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_329;

  $bb94:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    out_$p159 := $0.ref;
    goto $bb95;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    out_$p159 := out_$p161;
    goto $bb95;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref(out_$p160, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_327;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    out_$p160 := $bitcast.ref.ref(out_$p156);
    goto corral_source_split_326;

  $bb93:
    assume out_$i158 == 1;
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i64(out_$i157, 0);
    goto corral_source_split_323;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    out_$i157 := $p2i.ref.i64(out_$p156);
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$p156 := $load.ref($M.0, out_$p155);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(out_$p154, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_320;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    out_$p154 := $bitcast.ref.ref(out_$p153);
    goto corral_source_split_319;

  $bb92:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($add.ref(out_$p130, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_318;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb84:
    assume out_$i136 == 1;
    goto corral_source_split_298;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i64(out_$i134, out_$i135);
    goto corral_source_split_296;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    out_$i135 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_295;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    out_$i134 := $p2i.ref.i64(out_$p133);
    goto corral_source_split_294;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.0, out_$p132);
    goto corral_source_split_293;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p131, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_292;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} out_$p131 := atm_sk(out_$p130);
    goto corral_source_split_291;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb90:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$i151 := $ne.i32(out_$i150, 0);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$i150 := $ashr.i32(out_$i146, out_$i149);
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    out_$i149 := $sext.i8.i32(out_$i148);
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i8($M.0, out_$p147);
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i32($M.0, out_$p145);
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(out_$p131, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_310;

  $bb88:
    assume !(out_$i144 == 1);
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i32(out_$i143, 0);
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    out_$i143 := $ashr.i32(out_$i139, out_$i142);
    goto corral_source_split_306;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$i142 := $sext.i8.i32(out_$i141);
    goto corral_source_split_305;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i8($M.0, out_$p140);
    goto corral_source_split_304;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_303;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$i139 := $sext.i16.i32(out_$i138);
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i16($M.0, out_$p137);
    goto corral_source_split_301;

  $bb86:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p131, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_300;

  $bb85:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb96_dummy:
    call {:si_unique_call 1} out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p160, out_$p161, out_$p159, out_$i162, out_$i163 := atmtcp_v_ioctl_loop_$bb82(in_$p0, in_$p3, out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p160, out_$p161, out_$p159, out_$i162, out_$i163);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb82(in_$p0: ref, in_$p3: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i64, in_$i136: i1, in_$p137: ref, in_$i138: i16, in_$i139: i32, in_$p140: ref, in_$i141: i8, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i32, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i32, in_$i151: i1, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i64, in_$i158: i1, in_$p160: ref, in_$p161: ref, in_$p159: ref, in_$i162: i64, in_$i163: i1) returns (out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i64, out_$i136: i1, out_$p137: ref, out_$i138: i16, out_$i139: i32, out_$p140: ref, out_$i141: i8, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i32, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i32, out_$i151: i1, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i64, out_$i158: i1, out_$p160: ref, out_$p161: ref, out_$p159: ref, out_$i162: i64, out_$i163: i1);



implementation atmtcp_v_ioctl_loop_$bb58(in_$p0: ref, in_$p3: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$i96: i16, in_$i97: i32, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i32, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p118: ref, in_$p119: ref, in_$p117: ref, in_$i120: i64, in_$i121: i1) returns (out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$i96: i16, out_$i97: i32, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i32, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p118: ref, out_$p119: ref, out_$p117: ref, out_$i120: i64, out_$i121: i1)
{

  entry:
    out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p118, out_$p119, out_$p117, out_$i120, out_$i121 := in_$p88, in_$p89, in_$p90, in_$p91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p111, in_$p112, in_$p113, in_$p114, in_$i115, in_$i116, in_$p118, in_$p119, in_$p117, in_$i120, in_$i121;
    goto $bb58, exit;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_229;

  $bb72:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$p88 := out_$p117;
    goto $bb72_dummy;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i64(out_$i120, 0);
    goto corral_source_split_271;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    out_$i120 := $p2i.ref.i64(out_$p117);
    goto corral_source_split_270;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_269;

  $bb70:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    out_$p117 := $0.ref;
    goto $bb71;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    out_$p117 := out_$p119;
    goto $bb71;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref(out_$p118, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_267;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(out_$p114);
    goto corral_source_split_266;

  $bb69:
    assume out_$i116 == 1;
    goto corral_source_split_265;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i64(out_$i115, 0);
    goto corral_source_split_263;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    out_$i115 := $p2i.ref.i64(out_$p114);
    goto corral_source_split_262;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_261;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p112, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_260;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_259;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_258;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb60:
    assume out_$i94 == 1;
    goto corral_source_split_238;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i64(out_$i92, out_$i93);
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$i93 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$i92 := $p2i.ref.i64(out_$p91);
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_232;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_$p89 := atm_sk(out_$p88);
    goto corral_source_split_231;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb66:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i32(out_$i108, 0);
    goto corral_source_split_256;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    out_$i108 := $ashr.i32(out_$i104, out_$i107);
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    out_$i107 := $sext.i8.i32(out_$i106);
    goto corral_source_split_254;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i8($M.0, out_$p105);
    goto corral_source_split_253;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_252;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.0, out_$p103);
    goto corral_source_split_251;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p89, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_250;

  $bb64:
    assume !(out_$i102 == 1);
    goto corral_source_split_249;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    out_$i101 := $ashr.i32(out_$i97, out_$i100);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i8.i32(out_$i99);
    goto corral_source_split_245;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i8($M.0, out_$p98);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i16.i32(out_$i96);
    goto corral_source_split_242;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i16($M.0, out_$p95);
    goto corral_source_split_241;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p89, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_240;

  $bb61:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb72_dummy:
    call {:si_unique_call 1} out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p118, out_$p119, out_$p117, out_$i120, out_$i121 := atmtcp_v_ioctl_loop_$bb58(in_$p0, in_$p3, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p118, out_$p119, out_$p117, out_$i120, out_$i121);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb58(in_$p0: ref, in_$p3: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$i96: i16, in_$i97: i32, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i32, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p118: ref, in_$p119: ref, in_$p117: ref, in_$i120: i64, in_$i121: i1) returns (out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$i96: i16, out_$i97: i32, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i32, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p118: ref, out_$p119: ref, out_$p117: ref, out_$i120: i64, out_$i121: i1);



implementation atmtcp_v_ioctl_loop_$bb32(in_$p0: ref, in_$p3: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$p53: ref, in_$i54: i8, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p43: ref) returns (out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$p53: ref, out_$i54: i8, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p43: ref)
{

  entry:
    out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p43 := in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p43;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_161;

  $bb47:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$p43 := out_$p74;
    goto $bb47_dummy;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_204;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  $bb45:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$p74 := $0.ref;
    goto $bb46;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$p74 := out_$p73;
    goto $bb46;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(out_$p72, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_200;

  $bb44:
    assume out_$i71 == 1;
    goto corral_source_split_199;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, 0);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_173;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_172;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i49 == 1;
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i47, out_$i48);
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_167;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_166;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_165;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_164;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} out_$p44 := atm_sk(out_$p43);
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb42:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    out_$i63 := $ashr.i32(out_$i59, out_$i62);
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i8.i32(out_$i61);
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p60);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p44, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_191;

  $bb40:
    assume !(out_$i57 == 1);
    goto corral_source_split_190;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_186;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$i56 := $ashr.i32(out_$i52, out_$i55);
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i8.i32(out_$i54);
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i8($M.0, out_$p53);
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i16.i32(out_$i51);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.0, out_$p50);
    goto corral_source_split_180;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p44, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_179;

  $bb35:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p43 := atmtcp_v_ioctl_loop_$bb32(in_$p0, in_$p3, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p43);
    return;

  exit:
    return;
}



procedure atmtcp_v_ioctl_loop_$bb32(in_$p0: ref, in_$p3: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$p53: ref, in_$i54: i8, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p43: ref) returns (out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$p53: ref, out_$i54: i8, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p43: ref);



implementation atmtcp_send_control_loop_$bb20(in_$p0: ref, in_$p5: ref, in_$i67: i32, in_$i72: i64, in_$p73: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$p97: ref, in_$i98: i64, in_$i99: i32, in_$i100: i1) returns (out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$p97: ref, out_$i98: i64, out_$i99: i32, out_$i100: i1)
{

  entry:
    out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100 := in_$p76, in_$p77, in_$p78, in_$p79, in_$i80, in_$i81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_$p89, in_$i90, in_$i91, in_$p93, in_$p94, in_$p95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb30:
    assume {:verifier.code 0} true;
    assume out_$i100 == 1;
    goto $bb30_dummy;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, in_$i67);
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} out_$i99 := variable_test_bit(in_$i72, in_$p73);
    call {:si_unique_call 161} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_2465;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} schedule();
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, in_$p5, out_$i98);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p95, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 158} out_$i98 := devirtbounce.5(0, out_$p97, out_$i96, out_$p97);
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i64($M.7, in_$p5);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} out_$p95 := get_current();
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, in_$p5, 2);
    goto corral_source_split_2458;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p94, 0);
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p93, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_2456;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} out_$p93 := get_current();
    goto corral_source_split_2455;

  $bb26:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i64(out_$i90, 0);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p89);
    goto corral_source_split_2440;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_$p89 := $0.ref;
    goto $bb24;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$p89 := out_$p88;
    goto $bb24;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$p86 := $bitcast.ref.ref(out_$p85);
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_2432;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p83, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2429;

  $bb22:
    assume out_$i81 == 1;
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i64(out_$i80, 0);
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p77, $mul.ref(0, 1696)), $mul.ref(32, 1));
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2421;

  $bb21:
    call {:si_unique_call 152} devirtbounce.4(0);
    goto corral_source_split_2420;

  $bb23:
    assume !(out_$i81 == 1);
    goto corral_source_split_2437;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100 := atmtcp_send_control_loop_$bb20(in_$p0, in_$p5, in_$i67, in_$i72, in_$p73, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100);
    return;

  exit:
    return;
}



procedure atmtcp_send_control_loop_$bb20(in_$p0: ref, in_$p5: ref, in_$i67: i32, in_$i72: i64, in_$p73: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$p97: ref, in_$i98: i64, in_$i99: i32, in_$i100: i1) returns (out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$p97: ref, out_$i98: i64, out_$i99: i32, out_$i100: i1);
  modifies $M.7, $M.1;



implementation find_vcc_loop_$bb7(in_$p0: ref, in_$i1: i16, in_$i2: i32, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15 := in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p32, in_$i33, in_$i34, in_$i35, in_$p36, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p15;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2717;

  $bb23:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p47;
    goto $bb23_dummy;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, 0);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_2760;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2759;

  $bb21:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$p47 := $0.ref;
    goto $bb22;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$p47 := out_$p46;
    goto $bb22;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p45, $mul.ref($sub.ref(0, 96), 1288));
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_2756;

  $bb20:
    assume out_$i44 == 1;
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_2753;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_2749;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_2748;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb11;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p16;
    assume true;
    goto $bb17;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.0, out_$p32);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 1648)), $mul.ref(1328, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_2739;

  $bb14:
    assume out_$i29 == 1;
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i27, out_$i28);
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i16.i32(in_$i1);
    goto corral_source_split_2735;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i16.i32(out_$i26);
    goto corral_source_split_2734;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i16($M.0, out_$p25);
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_2732;

  $bb12:
    assume out_$i24 == 1;
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, in_$i2);
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_2728;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_2727;

  $bb9:
    assume out_$i21 == 1;
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i19, out_$i20);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1648)), $mul.ref(1320, 1));
    goto corral_source_split_2720;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} out_$p16 := atm_sk(out_$p15);
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15 := find_vcc_loop_$bb7(in_$p0, in_$i1, in_$i2, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15);
    return;

  exit:
    return;
}



procedure find_vcc_loop_$bb7(in_$p0: ref, in_$i1: i16, in_$i2: i32, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p15: ref);



implementation atm_dev_put_loop_$bb5()
{

  entry:
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;

  $bb5_dummy:
    call {:si_unique_call 1} atm_dev_put_loop_$bb5();
    return;

  exit:
    return;
}



procedure atm_dev_put_loop_$bb5();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$i14: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i64, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$i118: i32, in_$i119: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32) returns (out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i64, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$i118: i32, out_$i119: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32)
{

  entry:
    out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i62, out_$i63, out_$p64, out_$i65, out_$i67, out_$i68, out_$p69, out_$i70, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i82, out_$i83, out_$p84, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i118, out_$i119, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54 := in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i62, in_$i63, in_$p64, in_$i65, in_$i67, in_$i68, in_$p69, in_$i70, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$p80, in_$i82, in_$i83, in_$p84, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$i108, in_$i109, in_$p110, in_$i112, in_$i113, in_$p114, in_$i115, in_$i116, in_$i118, in_$i119, in_vslice_dummy_var_46, in_vslice_dummy_var_47, in_vslice_dummy_var_48, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52, in_vslice_dummy_var_53, in_vslice_dummy_var_54;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 358} out_$i17 := __VERIFIER_nondet_int();
    call {:si_unique_call 359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i17);
    call {:si_unique_call 360} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i17);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb26_dummy;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb15:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 365} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3215;

  SeqInstr_36:
    goto corral_source_split_3214;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} out_vslice_dummy_var_46 := atmtcp_ioctl(in_$p3, in_$i14, out_$i29);
    goto SeqInstr_35;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.16, in_$p0);
    goto corral_source_split_3213;

  $bb19:
    assume out_$i28 == 1;
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 1);
    goto corral_source_split_3210;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    out_$i27 := $M.17;
    goto corral_source_split_3209;

  $bb17:
    assume out_$i26 == 1;
    goto corral_source_split_3208;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_3206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 361} out_$i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 362} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i25);
    call {:si_unique_call 363} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i25);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i24 == 1;
    goto corral_source_split_3206;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$i23 := $M.17;
    goto corral_source_split_3203;

  $bb12:
    assume out_$i22 == 1;
    goto corral_source_split_3202;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i17, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb3:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i17, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i17, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} ldv_stop();
    goto corral_source_split_3217;

  $bb18:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb28:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb39;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb39;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 0);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$i39 := $M.18;
    goto corral_source_split_3230;

  $bb37:
    assume out_$i38 == 1;
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 3);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$i37 := $M.19;
    goto corral_source_split_3226;

  $bb35:
    assume out_$i36 == 1;
    goto corral_source_split_3225;

  $bb30:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 367} out_$i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 368} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i33);
    call {:si_unique_call 369} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i33);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i32 == 1;
    goto corral_source_split_3219;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i31 := $M.19;
    goto corral_source_split_3199;

  $bb11:
    assume !(out_$i21 == 1);
    goto corral_source_split_3198;

  $bb46:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_3250;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i46 := $M.21;
    goto corral_source_split_3249;

  $bb48:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 376} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.19 := 3;
    call {:si_unique_call 375} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3246;

  $bb47:
    assume out_$i45 == 1;
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$i44 := $M.21;
    goto corral_source_split_3242;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.21 := out_$i43;
    call {:si_unique_call 374} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} out_$i43 := atmtcp_init();
    goto corral_source_split_3240;

  $bb45:
    assume out_$i42 == 1;
    goto corral_source_split_3239;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 1);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$i41 := $M.19;
    goto corral_source_split_3222;

  $bb32:
    assume out_$i35 == 1;
    goto corral_source_split_3221;

  $bb31:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} ldv_stop();
    goto corral_source_split_3255;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb34;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb34;

  $bb58:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 383} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} out_vslice_dummy_var_47 := atmtcp_v_proc(out_$p60, in_$p5, in_$p9);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$p60 := $M.14;
    goto corral_source_split_3284;

  $bb75:
    assume out_$i59 == 1;
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 2);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$i58 := $M.10;
    goto corral_source_split_3280;

  $bb73:
    assume out_$i57 == 1;
    goto corral_source_split_3279;

  $bb69:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i50, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb60:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i50, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i50, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_3257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 379} out_$i50 := __VERIFIER_nondet_int();
    call {:si_unique_call 380} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i50);
    call {:si_unique_call 381} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i50);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume out_$i49 == 1;
    goto corral_source_split_3257;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i48 := $M.10;
    goto corral_source_split_3191;

  $bb5:
    assume out_$i19 == 1;
    goto corral_source_split_3190;

  $bb4:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i17, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb83:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 387} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} out_vslice_dummy_var_49 := atmtcp_v_ioctl(out_$p69, out_$i70, in_$p6);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3299;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    out_$p69 := $M.14;
    goto corral_source_split_3298;

  $bb82:
    assume out_$i68 == 1;
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 2);
    goto corral_source_split_3295;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i67 := $M.10;
    goto corral_source_split_3294;

  $bb80:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 385} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3292;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_vslice_dummy_var_48 := atmtcp_v_ioctl(out_$p64, out_$i65, in_$p6);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$p64 := $M.14;
    goto corral_source_split_3289;

  $bb79:
    assume out_$i63 == 1;
    goto corral_source_split_3288;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 1);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$i62 := $M.10;
    goto corral_source_split_3272;

  $bb71:
    assume out_$i56 == 1;
    goto corral_source_split_3271;

  $bb70:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i50, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb89:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 391} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} atmtcp_v_dev_close(out_$p77);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$p77 := $M.14;
    goto corral_source_split_3312;

  $bb88:
    assume out_$i76 == 1;
    goto corral_source_split_3311;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 2);
    goto corral_source_split_3309;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i75 := $M.10;
    goto corral_source_split_3308;

  $bb86:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 389} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} atmtcp_v_dev_close(out_$p74);
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$p74 := $M.14;
    goto corral_source_split_3304;

  $bb85:
    assume out_$i73 == 1;
    goto corral_source_split_3303;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 1);
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i72 := $M.10;
    goto corral_source_split_3276;

  $bb72:
    assume !(out_$i56 == 1);
    goto corral_source_split_3275;

  $bb95:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 395} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3327;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} out_vslice_dummy_var_51 := atmtcp_v_send(out_$p84, in_$p8);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$p84 := $M.15;
    goto corral_source_split_3325;

  $bb94:
    assume out_$i83 == 1;
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 2);
    goto corral_source_split_3322;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i82 := $M.10;
    goto corral_source_split_3321;

  $bb92:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 393} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} out_vslice_dummy_var_50 := atmtcp_v_send(out_$p80, in_$p8);
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$p80 := $M.15;
    goto corral_source_split_3317;

  $bb91:
    assume out_$i79 == 1;
    goto corral_source_split_3316;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 1);
    goto corral_source_split_3261;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    out_$i78 := $M.10;
    goto corral_source_split_3260;

  $bb62:
    assume out_$i52 == 1;
    goto corral_source_split_3259;

  $bb61:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i50, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb98:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 397} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3332;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} atmtcp_v_close(out_$p88);
    goto corral_source_split_3331;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$p88 := $M.15;
    goto corral_source_split_3330;

  $bb97:
    assume out_$i87 == 1;
    goto corral_source_split_3329;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 2);
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$i86 := $M.10;
    goto corral_source_split_3264;

  $bb64:
    assume out_$i53 == 1;
    goto corral_source_split_3263;

  $bb63:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i50, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb101:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb103:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $M.18 := out_$i96;
    call {:si_unique_call 401} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i95, 1);
    goto corral_source_split_3344;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    out_$i95 := $M.18;
    goto corral_source_split_3343;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 400} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3342;

  $bb102:
    assume out_$i94 == 1;
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 0);
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    out_$i93 := $M.22;
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $M.22 := out_$i92;
    call {:si_unique_call 399} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} out_$i92 := atmtcp_v_open(out_$p91);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$p91 := $M.15;
    goto corral_source_split_3335;

  $bb100:
    assume out_$i90 == 1;
    goto corral_source_split_3334;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 1);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    out_$i89 := $M.10;
    goto corral_source_split_3268;

  $bb66:
    assume out_$i54 == 1;
    goto corral_source_split_3267;

  $bb65:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i50, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} ldv_stop();
    goto corral_source_split_3347;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb67:
    assume {:verifier.code 0} true;
    assume !(out_$i54 == 1);
    goto $bb68;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb68;

  $bb110:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb125:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 409} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3374;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} out_vslice_dummy_var_53 := atmtcp_c_send(out_$p110, in_$p11);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$p110 := $M.23;
    goto corral_source_split_3372;

  $bb124:
    assume out_$i109 == 1;
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 2);
    goto corral_source_split_3369;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i108 := $M.20;
    goto corral_source_split_3368;

  $bb122:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 407} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} out_vslice_dummy_var_52 := atmtcp_c_send(out_$p106, in_$p11);
    goto corral_source_split_3365;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$p106 := $M.23;
    goto corral_source_split_3364;

  $bb121:
    assume out_$i105 == 1;
    goto corral_source_split_3363;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 1);
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$i104 := $M.20;
    goto corral_source_split_3360;

  $bb119:
    assume out_$i103 == 1;
    goto corral_source_split_3359;

  $bb112:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i99, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_3349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 403} out_$i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 404} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i99);
    call {:si_unique_call 405} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i99);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb109:
    assume out_$i98 == 1;
    goto corral_source_split_3349;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$i97 := $M.20;
    goto corral_source_split_3195;

  $bb7:
    assume out_$i20 == 1;
    goto corral_source_split_3194;

  $bb6:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i17, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb129:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 411} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3379;

  SeqInstr_42:
    goto corral_source_split_3378;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} atmtcp_c_close(out_$p114);
    goto SeqInstr_41;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$p114 := $M.23;
    goto corral_source_split_3377;

  $bb128:
    assume out_$i113 == 1;
    goto corral_source_split_3376;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 2);
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i112 := $M.20;
    goto corral_source_split_3352;

  $bb114:
    assume out_$i101 == 1;
    goto corral_source_split_3351;

  $bb113:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i99, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb132:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.18 := out_$i119;
    call {:si_unique_call 414} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i118, 1);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$i118 := $M.18;
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 413} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3383;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} out_vslice_dummy_var_54 := ldv_open_2();
    goto corral_source_split_3382;

  $bb131:
    assume out_$i116 == 1;
    goto corral_source_split_3381;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 1);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$i115 := $M.20;
    goto corral_source_split_3356;

  $bb116:
    assume out_$i102 == 1;
    goto corral_source_split_3355;

  $bb115:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i99, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} ldv_stop();
    goto corral_source_split_3388;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb117:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb118;

  $bb120:
    assume {:verifier.code 0} true;
    assume !(out_$i103 == 1);
    goto $bb118;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_stop();
    goto corral_source_split_3390;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb9;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i62, out_$i63, out_$p64, out_$i65, out_$i67, out_$i68, out_$p69, out_$i70, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i82, out_$i83, out_$p84, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i118, out_$i119, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54 := main_loop_$bb1(in_$p0, in_$p1, in_$p3, in_$p5, in_$p6, in_$p8, in_$p9, in_$p11, in_$i14, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i62, out_$i63, out_$p64, out_$i65, out_$i67, out_$i68, out_$p69, out_$i70, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i82, out_$i83, out_$p84, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i118, out_$i119, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$i14: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i64, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$i118: i32, in_$i119: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32) returns (out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i64, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$i118: i32, out_$i119: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32);
  modifies $M.17, $M.0, $M.12, $M.10, $M.11, $CurrAddr, $M.14, $M.15, $M.2, $M.3, $M.4, $M.5, $M.6, $M.1, $M.8, $M.7, assertsPassed, $M.19, $M.21, $M.18, $M.22, $M.20, $M.9;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


